<ActorFrame><children>

	<Layer
		Type="Quad"
		InitCommand="hidden,1"
		OnCommand="sleep,GAMESTATE:GetCurrentSong():MusicLengthSeconds()"
	/>
	
	<Layer
		Type="Quad"
		InitCommand="hidden,1"
		OnCommand="%function(self)
				fgcurcommand = 1;
				checked = false;
				prefix_time = 0;
				
				prefix_curmessage = 1;
				
				
				prefix_messages = {
				{16.838,'FlipWobble'},
				{19.098,'VibBuild'},
				{23.413,'FlipWobble'},
				{25.673,'VibBuild'},
				
				{65.947,'Blowback'},
				{72.523,'Blowback'},
				{79.098,'Blowback'},
				{85.673,'Blowback'},
				};
				
				prefix_mods = {
				
				{0,200,'2.25x,-999999% Cover,*10000 No Beat','end'},
				
				{-1,0.100,'*10000 200% Mini','end'},
				{0.100,2.600,'*0.8 No Mini','end'},
				
				{2.660,200,'*4 No Flip,*4 No Reverse,*2.5 No Tornado','end'},
				{2.660,240/146/8*3,'*4 25% Flip,*4 25% Reverse','len'},
				{4.304,240/146/8*3,'*4 25% Flip,*4 25% Reverse','len'},
				{5.536,0.050,'*10000 Tornado','len'},
				
				{2.660+240/146*2,240/146/8*3,'*4 25% Flip,*4 25% Reverse','len'},
				{4.304+240/146*2,240/146/8*3,'*4 25% Flip,*4 25% Reverse','len'},
				
				{2.660+240/146*4,240/146/8*3,'*4 25% Flip,*4 25% Reverse','len'},
				{4.304+240/146*4,240/146/8*3,'*4 25% Flip,*4 25% Reverse','len'},
				{5.536+240/146*4,0.050,'*10000 Tornado','len'},
				
				{2.660+240/146*6,240/146/8*3,'*4 25% Flip,*4 25% Reverse','len'},
				{4.304+240/146*6,240/146/8*3,'*4 25% Flip,*4 25% Reverse','len'},
				
				
				{8.619,240/146/8,'*16 -250% Mini,*1.6 25% Flip,*8 0x','len'},
				{8.824,240/146/4,'*8 No Mini,*0.8 No Flip,*4 2.25x','len'},
				
				{14.167,0.050,'*10000 50% Stealth','len'},
				{14.783,0.050,'*10000 50% Stealth','len'},
				
				{15.194,240/146/8,'*16 -250% Mini,*1.6 25% Flip,*8 0x','len'},
				{15.399,240/146/4,'*8 No Mini,*0.8 No Flip,*4 2.25x','len'},
				
				{15.810,19.098,'*10000 -110% SuddenOffset','len'},
				{15.810,16.838,'*4 200% Sudden','end'},
				{16.221,16.838,'*6 200% SuddenOffset,*10000 1x','end'},
				{16.838,17.454,'*10000 No Sudden,*4 2.25x','end'},
				
				{17.660,240/146,'*24 No Invert','len'},
				{17.660,240/146/8,'*24 Invert','len'},
				{18.071,240/146/24,'*24 Invert','len'},
				{18.208,240/146/24,'*24 Invert','len'},
				
				{18.482,240/146/8,'*10 0x','len'},
				{18.687,240/146/4,'*5 2.25x','len'},
				
				{15.810+240/146*4,19.098+240/146*4,'*10000 -110% SuddenOffset','len'},
				{15.810+240/146*4,16.838+240/146*4,'*4 200% Sudden','end'},
				{16.221+240/146*4,16.838+240/146*4,'*6 200% SuddenOffset,*10000 1x','end'},
				{16.838+240/146*4,17.454+240/146*4,'*10000 No Sudden,*4 2.25x','end'},
				
				{21.769,240/146/8,'*16 -250% Mini,*1.6 25% Flip,*8 0x','len'},
				{21.975,240/146/4,'*8 No Mini,*0.8 No Flip,*4 2.25x','len'},
				
				{24.235,240/146,'*24 No Invert','len'},
				{24.235,240/146/8,'*24 Invert','len'},
				{24.646,240/146/24,'*24 Invert','len'},
				{24.783,240/146/24,'*24 Invert','len'},
				
				{25.057,240/146/8,'*10 0x','len'},
				{25.262,240/146/4,'*5 2.25x','len'},
				
				{28.345,240/146/8,'*16 -250% Mini,*1.6 25% Flip,*8 0x','len'},
				{28.550,240/146/4,'*8 No Mini,*0.8 No Flip','len'},
				
				{28.550,34.714,'*4 3x,*2 Bumpy','end'},
				{28.961,240/146/2,'*1.825 150% Distant','len'},
				{28.961+240/146/2*1,240/146/2,'*3.65 150% Hallway','len'},
				{28.961+240/146/2*2,240/146/2,'*3.65 150% Distant','len'},
				{28.961+240/146/2*3,240/146/2,'*3.65 150% Hallway','len'},
				{28.961+240/146/2*4,240/146/2,'*3.65 150% Distant','len'},
				{28.961+240/146/2*5,240/146/2,'*3.65 150% Hallway','len'},
				{28.961+240/146/2*6,240/146/2,'*3.65 150% Distant','len'},
				{28.961+240/146/2*7,240/146/2,'*1.825 Overhead','len'},
				
				{31.427,240/146/2,'*2 -250% Mini,*0.2 25% Flip','len'},
				{32.043,240/146/4,'*8 No Mini,*0.8 No Flip','len'},
				
				{41.701,240/146/4,'*9.7333 No Drunk','len'},
				
				{42.112,240/146/2,'*1.75 150% Mini,*8 8x','len'},
				{42.934,240/146/16*3,'*8 Mini,*16 6x','len'},
				{43.242,240/146/16*3,'*8 50% Mini,*16 4x','len'},
				{43.550,240/146/16*2,'*8 No Mini,*16 2.25x','len'},
				{43.756,44.577,'*1.75 150% Mini,*8 8x','end'},
				
				{44.577,61.838,'*0.25 90% Dark,*0.25 Drunk,*0.25 90% Stealth,*1.6 1.5x,*0.35 No Mini','end'},
				{55.262,61.838,'*0.25 -500% Mini,*0.025 50% Flip,*0.075 No Dark,*0.15 No Stealth','end'},
				{61.838,62.249,'*10000 0x,*10000 Stealth,*16 No Mini,*1.6 No Flip,*8 No Drunk','end'},
				{62.249,63.482,'*2 2.25x,*10000 No Stealth','end'},
				
				
				
				{63.482,240/146/2,'*3.65 150% Mini,*6 5x','len'},
				{63.482+240/146/4,240/146/2,'*3.65 150% Distant','len'},
				{63.482+240/146/2,240/146/2,'*3.65 No Mini,*6 2.25x','len'},
				{63.482+240/146/4*3,240/146/2,'*3.65 Overhead','len'},
				{65.125,240/146/4,'*4.8 200% Hallway','len'},
				{65.125+240/146/16*4,240/146/16,'*38.4 200% Distant','len'},
				{65.125+240/146/16*5,240/146/16,'*38.4 200% Hallway','len'},
				{65.125+240/146/16*6,240/146/16,'*38.4 200% Distant','len'},
				{65.125+240/146/16*7,240/146/4,'*19.2 Overhead','len'},
				
				{66.769,240/146/2,'*8 1000% Bumpy,*16 2000% Dizzy','len'},
				{67.591,240/146,'*8 No Bumpy,*16 No Dizzy','len'},
				{68.413,240/146/8,'*8 200% Drunk','len'},
				{68.619,240/146/8,'*16 -200% Drunk','len'},
				{68.824,240/146/8,'*16 200% Drunk','len'},
				{69.030,240/146/8,'*8 No Drunk','len'},
				{69.235,240/146/2,'*8 No Mini','len'},
				{69.235,0.050,'*10000 200% Mini','len'},
				{69.440,0.050,'*10000 200% Mini','len'},
				{69.646,0.050,'*10000 200% Mini','len'},
				
				{240/146*4+66.769,240/146/2,'*8 1000% Bumpy,*16 2000% Dizzy','len'},
				{240/146*4+67.591,240/146,'*8 No Bumpy,*16 No Dizzy','len'},
				
				{240/146*8+66.769,240/146/2,'*8 1000% Bumpy,*16 2000% Dizzy','len'},
				{240/146*8+67.591,240/146,'*8 No Bumpy,*16 No Dizzy','len'},
				{240/146*8+68.413,240/146/8,'*8 200% Drunk','len'},
				{240/146*8+68.619,240/146/8,'*16 -200% Drunk','len'},
				{240/146*8+68.824,240/146/8,'*16 200% Drunk','len'},
				{240/146*8+69.030,240/146/8,'*8 No Drunk','len'},
				{240/146*8+69.235,240/146/2,'*8 No Mini','len'},
				{240/146*8+69.235,0.050,'*10000 200% Mini','len'},
				{240/146*8+69.440,0.050,'*10000 200% Mini','len'},
				{240/146*8+69.646,0.050,'*10000 200% Mini','len'},
				
				{240/146*12+66.769,240/146/2,'*8 1000% Bumpy,*16 2000% Dizzy','len'},
				{240/146*12+67.591,240/146,'*8 No Bumpy,*16 No Dizzy','len'},
				
				
				{240/146*4+63.482,240/146/2,'*3.65 150% Mini,*6 5x','len'},
				{240/146*4+63.482+240/146/4,240/146/2,'*3.65 150% Distant','len'},
				{240/146*4+63.482+240/146/2,240/146/2,'*3.65 No Mini,*6 2.25x','len'},
				{240/146*4+63.482+240/146/4*3,240/146/2,'*3.65 Overhead','len'},
				{240/146*4+65.125,240/146/4,'*4.8 200% Hallway','len'},
				{240/146*4+65.125+240/146/16*4,240/146/16,'*38.4 200% Distant','len'},
				{240/146*4+65.125+240/146/16*5,240/146/16,'*38.4 200% Hallway','len'},
				{240/146*4+65.125+240/146/16*6,240/146/16,'*38.4 200% Distant','len'},
				{240/146*4+65.125+240/146/16*7,240/146/4,'*19.2 Overhead','len'},
				
				{240/146*8+63.482,240/146/2,'*3.65 150% Mini,*6 5x','len'},
				{240/146*8+63.482+240/146/4,240/146/2,'*3.65 150% Distant','len'},
				{240/146*8+63.482+240/146/2,240/146/2,'*3.65 No Mini,*6 2.25x','len'},
				{240/146*8+63.482+240/146/4*3,240/146/2,'*3.65 Overhead','len'},
				{240/146*8+65.125,240/146/4,'*4.8 200% Hallway','len'},
				{240/146*8+65.125+240/146/16*4,240/146/16,'*38.4 200% Distant','len'},
				{240/146*8+65.125+240/146/16*5,240/146/16,'*38.4 200% Hallway','len'},
				{240/146*8+65.125+240/146/16*6,240/146/16,'*38.4 200% Distant','len'},
				{240/146*8+65.125+240/146/16*7,240/146/4,'*19.2 Overhead','len'},
				
				{240/146*12+63.482,240/146/2,'*3.65 150% Mini,*6 5x','len'},
				{240/146*12+63.482+240/146/4,240/146/2,'*3.65 150% Distant','len'},
				{240/146*12+63.482+240/146/2,240/146/2,'*3.65 No Mini,*6 2.25x','len'},
				{240/146*12+63.482+240/146/4*3,240/146/2,'*3.65 Overhead','len'},
				{240/146*12+65.125,240/146/4,'*4.8 200% Hallway','len'},
				{240/146*12+65.125+240/146/16*4,240/146/16,'*38.4 200% Distant','len'},
				{240/146*12+65.125+240/146/16*5,240/146/16,'*38.4 200% Hallway','len'},
				{240/146*12+65.125+240/146/16*6,240/146/16,'*38.4 200% Distant','len'},
				{240/146*12+65.125+240/146/16*7,240/146/4,'*19.2 Overhead','len'},
				
				
				{74.988,75.399,'*1.5 60% Stealth','end'},
				{75.399,76.632,'*10000 60% Stealth','end'},
				{75.399,240/146/24,'*10000 Stealth','len'},
				{75.399+240/146/12*1,240/146/24,'*10000 Stealth','len'},
				{75.399+240/146/12*2,240/146/24,'*10000 Stealth','len'},
				{75.399+240/146/12*3,240/146/24,'*10000 Stealth','len'},
				{75.399+240/146/4+240/146/24*0,240/146/48,'*10000 Stealth','len'},
				{75.399+240/146/4+240/146/24*1,240/146/48,'*10000 Stealth','len'},
				{75.399+240/146/4+240/146/24*2,240/146/48,'*10000 Stealth','len'},
				{75.399+240/146/4+240/146/24*3,240/146/48,'*10000 Stealth','len'},
				{75.399+240/146/4+240/146/24*4,240/146/48,'*10000 Stealth','len'},
				{75.399+240/146/4+240/146/24*5,240/146/48,'*10000 Stealth','len'},
				{75.399+240/146/4+240/146/24*6,240/146/48,'*10000 Stealth','len'},
				{75.399+240/146/4+240/146/24*7,240/146/48,'*10000 Stealth','len'},
				{75.399+240/146/4+240/146/24*8,240/146/48,'*10000 Stealth','len'},
				{75.399+240/146/4+240/146/24*9,240/146/48,'*10000 Stealth','len'},
				{75.399+240/146/4+240/146/24*10,240/146/48,'*10000 Stealth','len'},
				{75.399+240/146/4+240/146/24*11,240/146/48,'*10000 Stealth','len'},
				
				{75.399,240/146,'*10000 No Flip,*10000 No Invert','len'},
				{75.399+240/146/12*0,240/146/12,'*10000 Invert','len'},
				{75.399+240/146/12*1,240/146/12,'*10000 Flip','len'},
				{75.399+240/146/12*2,240/146/12,'*10000 -100% Invert,*10000 Flip','len'},
				{75.810+240/146/24*0,240/146/24,'*10000 No Invert,*10000 No Flip','len'},
				{75.810+240/146/24*1,240/146/24,'*10000 Invert','len'},
				{75.810+240/146/24*2,240/146/24,'*10000 Flip','len'},
				{75.810+240/146/24*3,240/146/24,'*10000 -100% Invert,*10000 Flip','len'},
				{75.810+240/146/24*4,240/146/24,'*10000 No Invert,*10000 No Flip','len'},
				{75.810+240/146/24*5,240/146/24,'*10000 Invert','len'},
				{75.810+240/146/24*6,240/146/24,'*10000 Flip','len'},
				{75.810+240/146/24*7,240/146/24,'*10000 -100% Invert,*10000 Flip','len'},
				{75.810+240/146/24*8,240/146/24,'*10000 No Invert,*10000 No Flip','len'},
				{75.810+240/146/24*9,240/146/24,'*10000 Invert','len'},
				{75.810+240/146/24*10,240/146/24,'*10000 Flip','len'},
				{75.810+240/146/24*11,240/146/24,'*10000 -100% Invert,*10000 Flip','len'},
				{76.632,77.000,'*10000 No Stealth','end'},
				
				
				
				{240/146*8+74.988,240/146*8+75.399,'*1.5 60% Stealth','end'},
				{240/146*8+75.399,240/146*8+76.632,'*10000 60% Stealth','end'},
				{240/146*8+75.399,240/146/24,'*10000 Stealth','len'},
				{240/146*8+75.399+240/146/12*1,240/146/24,'*10000 Stealth','len'},
				{240/146*8+75.399+240/146/12*2,240/146/24,'*10000 Stealth','len'},
				{240/146*8+75.399+240/146/12*3,240/146/24,'*10000 Stealth','len'},
				{240/146*8+75.399+240/146/4+240/146/24*0,240/146/48,'*10000 Stealth','len'},
				{240/146*8+75.399+240/146/4+240/146/24*1,240/146/48,'*10000 Stealth','len'},
				{240/146*8+75.399+240/146/4+240/146/24*2,240/146/48,'*10000 Stealth','len'},
				{240/146*8+75.399+240/146/4+240/146/24*3,240/146/48,'*10000 Stealth','len'},
				{240/146*8+75.399+240/146/4+240/146/24*4,240/146/48,'*10000 Stealth','len'},
				{240/146*8+75.399+240/146/4+240/146/24*5,240/146/48,'*10000 Stealth','len'},
				{240/146*8+75.399+240/146/4+240/146/24*6,240/146/48,'*10000 Stealth','len'},
				{240/146*8+75.399+240/146/4+240/146/24*7,240/146/48,'*10000 Stealth','len'},
				{240/146*8+75.399+240/146/4+240/146/24*8,240/146/48,'*10000 Stealth','len'},
				{240/146*8+75.399+240/146/4+240/146/24*9,240/146/48,'*10000 Stealth','len'},
				{240/146*8+75.399+240/146/4+240/146/24*10,240/146/48,'*10000 Stealth','len'},
				{240/146*8+75.399+240/146/4+240/146/24*11,240/146/48,'*10000 Stealth','len'},
				
				{240/146*8+75.399,240/146,'*10000 No Flip,*10000 No Invert','len'},
				{240/146*8+75.399+240/146/12*0,240/146/12,'*10000 Invert','len'},
				{240/146*8+75.399+240/146/12*1,240/146/12,'*10000 Flip','len'},
				{240/146*8+75.399+240/146/12*2,240/146/12,'*10000 -100% Invert,*10000 Flip','len'},
				{240/146*8+75.810+240/146/24*0,240/146/24,'*10000 No Invert,*10000 No Flip','len'},
				{240/146*8+75.810+240/146/24*1,240/146/24,'*10000 Invert','len'},
				{240/146*8+75.810+240/146/24*2,240/146/24,'*10000 Flip','len'},
				{240/146*8+75.810+240/146/24*3,240/146/24,'*10000 -100% Invert,*10000 Flip','len'},
				{240/146*8+75.810+240/146/24*4,240/146/24,'*10000 No Invert,*10000 No Flip','len'},
				{240/146*8+75.810+240/146/24*5,240/146/24,'*10000 Invert','len'},
				{240/146*8+75.810+240/146/24*6,240/146/24,'*10000 Flip','len'},
				{240/146*8+75.810+240/146/24*7,240/146/24,'*10000 -100% Invert,*10000 Flip','len'},
				{240/146*8+75.810+240/146/24*8,240/146/24,'*10000 No Invert,*10000 No Flip','len'},
				{240/146*8+75.810+240/146/24*9,240/146/24,'*10000 Invert','len'},
				{240/146*8+75.810+240/146/24*10,240/146/24,'*10000 Flip','len'},
				{240/146*8+75.810+240/146/24*11,240/146/24,'*10000 -100% Invert,*10000 Flip','len'},
				{240/146*8+76.632,240/146*8+77.000,'*10000 No Stealth','end'},
				
				
				
				{90.194+240/146/2*0,240/146/2,'*16 Drunk','len'},
				{90.194+240/146/2*1,240/146/2,'*16 -100% Drunk','len'},
				{90.194+240/146/2*2,240/146/2,'*16 Drunk','len'},
				{90.194+240/146/2*3-240/146/16,240/146/2+240/146/16,'*16 -100% Drunk','len'},
				{90.194+240/146/2*4,240/146/2,'*16 Drunk','len'},
				{90.194+240/146/2*5,240/146/2,'*16 -100% Drunk','len'},
				{90.194+240/146/2*6,240/146/2,'*16 Drunk','len'},
				{90.194+240/146/2*7,240/146/2,'*16 -100% Drunk','len'},
				{90.194+240/146/2*8,240/146/2,'*16 Drunk','len'},
				{90.194+240/146/2*9,240/146/2,'*16 -100% Drunk','len'},
				{90.194+240/146/2*10,240/146/2,'*16 Drunk','len'},
				{90.194+240/146/2*11,240/146/2,'*16 -100% Drunk','len'},
				{90.194+240/146/2*12,240/146/2,'*16 Drunk','len'},
				{90.194+240/146/2*13,240/146/2,'*16 -100% Drunk','len'},
				{90.194+240/146/2*14,240/146/2,'*16 Drunk','len'},
				{90.194+240/146/2*15,240/146/2,'*16 -100% Drunk','len'},
				{90.194+240/146/2*16,240/146/2,'*16 Drunk','len'},
				{90.194+240/146/2*17,240/146/2,'*16 -100% Drunk','len'},
				{90.194+240/146/2*18,240/146/4,'*8 No Drunk','len'},
				
				{89.783,999,'*1.75 150% Wave','end'},
				{89.783+240/146/2*0,240/146/2,'*1.5 1x','len'},
				{89.783+240/146/2*1,240/146/2,'*2 4x','len'},
				{89.783+240/146/2*2,240/146/2,'*2 1x','len'},
				{89.783+240/146/2*3,240/146/2,'*2 4x','len'},
				{89.783+240/146/2*4,240/146/2,'*2 1x','len'},
				{89.783+240/146/2*5,240/146/2,'*2 4x','len'},
				{89.783+240/146/2*6,240/146/2,'*2 1x','len'},
				{89.783+240/146/2*7,240/146/2,'*2 4x','len'},
				{89.783+240/146/2*8,240/146/2,'*2 1x','len'},
				{89.783+240/146/2*9,240/146/2,'*2 4x','len'},
				{89.783+240/146/2*10,240/146/2,'*2 1x','len'},
				{89.783+240/146/2*11,240/146/2,'*2 4x','len'},
				{89.783+240/146/2*12,240/146/2,'*2 1x','len'},
				{89.783+240/146/2*13,240/146/2,'*2 4x','len'},
				{89.783+240/146/2*14,240/146/2,'*2 1x','len'},
				{89.783+240/146/2*15,240/146/2,'*2 4x','len'},
				{89.783+240/146/2*16,240/146/2,'*2 1x','len'},
				{89.783+240/146/2*17,240/146/2,'*2 4x','len'},
				{89.783+240/146/2*18,240/146/2,'*2 1x','len'},
				{105.399,999,'*0.85 200% Mini','end'},
				
				}
				
				local inc = 1;
				
				for i = 2.865,29.000,240/146/2 do
					local multi = 1; if math.mod(inc,2) == 0 then multi = -1; end
					if inc ~= 16 then table.insert(prefix_mods,{i,240/146/4,'*10000 '..200*multi..'% Beat','len'}); end
					inc = inc + 1;
				end
				
				inc = 1;
				for i = 35.536,41.600,240/146/16 do
					local multi = 1; if math.mod(inc,2) == 0 then multi = -1; end
					local spd = 9.7333*2; if i == 35.536 then spd = 9.7333; end
					table.insert(prefix_mods,{i,240/146/16,'*'..spd..' '..150*multi..'% Drunk','len'});
					inc = inc + 1;
				end
				
				
				prefix_plr = {};
				
				self:queuecommand('Update');
			end"
		
		UpdateCommand="%function(self)
		
			local beat = GAMESTATE:GetSongBeat();
			
			-----------------------
			-- Player mod resets --
			-----------------------
			GAMESTATE:ApplyGameCommand('mod,clearall')
			
			--------------------------------------------------------------------------------------------
			-- Mod reader code originally coded by Taronuke, remade to support end times and lengths. --
			--------------------------------------------------------------------------------------------
			for i,v in pairs(prefix_mods) do
				if prefix_time >=v[1] then
					if (v[4] == 'len' and prefix_time <=v[1]+v[2]) or (v[4] == 'end' and prefix_time <=v[2]) then
						if table.getn(v) == 5 then
							GAMESTATE:ApplyGameCommand('mod,'..v[3],v[5]);
						else
							GAMESTATE:ApplyGameCommand('mod,'..v[3]);
						end
					end
				end
			end
			
			
			
			if beat >= 0 and not checked then
				
				table.insert(prefix_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP1'));
				table.insert(prefix_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP2'));
				checked = true;
				
				SCREENMAN:GetTopScreen():GetChild('Overlay'):hidden(1);
				SCREENMAN:GetTopScreen():GetChild('Underlay'):hidden(1);
				for i,v in pairs(prefix_plr) do
					local multi = -1; if i == 2 then multi = 1; end
					if v then
						v:rotationx(0);							
						v:rotationy(0);
						v:rotationz(0);
						v:x(SCREEN_CENTER_X+160*multi);
						v:y(SCREEN_CENTER_Y);
						v:zoomx(1);
						v:zoomy(1);
						v:GetChild('Judgment'):stopeffect();
						
						SCREENMAN:GetTopScreen():GetChild('ScoreP'..i):hidden(1);
						SCREENMAN:GetTopScreen():GetChild('LifeP'..i):hidden(1);
					end
				end
			end
			
			if beat >= 162 and fgcurcommand == 1 then
				for i,v in pairs(prefix_plr) do
					if v then
						--v:linear(0.600);
					end
				end
				fgcurcommand = fgcurcommand + 1;
			end
			
			
			
			
			-------------------------
			-- BEAT SPECIFIC STUFF --
			-------------------------
			if (beat > 42 and beat < 44) or
				(beat > 58 and beat < 60) then
				GAMESTATE:ApplyGameCommand('mod,*10000 '..math.sin(beat*math.pi*8)*auxvar:getaux()..'% Flip');
			end
			
			if (beat > 48 and beat < 56) or
				(beat > 64 and beat < 72) then
				for i,v in pairs(prefix_plr) do
					if v then
						v:vibrate();
						v:effectmagnitude(auxvar:getaux(),auxvar:getaux(),0);
					end
				end
			end
			
			
			
			if (beat >= 162 and beat <= 165) or
				(beat >= 178 and beat <= 181) or
				(beat >= 194 and beat <= 197) or
				(beat >= 210 and beat <= 213) then
				GAMESTATE:ApplyGameCommand('mod,*10000 '.. -auxvar:getaux()..'% Mini,*10000 '..auxvar:getaux()*0.1 ..'% Flip,*10000 '.. 2.25 - auxvar:getaux()/125 ..'x,*10000 '..auxvar:getaux()/5 ..'% Tornado');
			end
			
			--------------------------------------------------------------
			-- Message reader to make specific values of the actor aux. --
			--------------------------------------------------------------
			if prefix_curmessage <= table.getn(prefix_messages) then
				if prefix_time >= prefix_messages[prefix_curmessage][1] then
					MESSAGEMAN:Broadcast(prefix_messages[prefix_curmessage][2]);
					prefix_curmessage = prefix_curmessage + 1;
				end
			end
			
			self:queuecommand('Update2');
			
		end"


		Update2Command="%function(self)
		self:sleep(0.02);
		self:queuecommand('Update');
		end"

	/>
	
	<BitmapText
		Font="Common Normal"
		Text="test"
		OnCommand="x,SCREEN_CENTER_X;y,SCREEN_CENTER_Y;effectclock,music;playcommand,SetTime;hidden,1"
		SetTimeCommand="%function(self) self:settext(self:GetSecsIntoEffect()); prefix_time = PREFSMAN:GetPreference('GlobalOffsetSeconds') - (0.644 - 0.599) + tonumber(self:GetText()); self:sleep(0.02) self:queuecommand('SetTime'); end"
	/>
	
	<!-- Aux actor, VERY IMPORTANT -->
	<Layer
		Type="Quad"
		OnCommand=""
		InitCommand="%function(self) auxvar = self; self:hidden(1) end"
		VibBuildMessageCommand="finishtweening;aux,0;linear,2.671;aux,50;linear,0.2;aux,0"
		BlowbackMessageCommand="finishtweening;aux,0;decelerate,240/146/4;aux,250;accelerate,240/146/4;aux,0"
		FlipWobbleMessageCommand="finishtweening;aux,0;linear,240/146/8;aux,50;linear,240/146/8;aux,0"
	/>
	
</children></ActorFrame>