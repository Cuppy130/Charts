<ActorFrame><children>

	<Layer
		Type="Quad"
		InitCommand="hidden,1"
		OnCommand="sleep,GAMESTATE:GetCurrentSong():MusicLengthSeconds()"
	/>
	
	<Layer
		Type="Quad"
		InitCommand="hidden,1"
		OnCommand="%function(self)
				
				fgcurcommand = 1;
				checked = false;
				prefix_time = 0;
				prefix_rotinc = 0;
				
				prefix_curmessage = 1;
				
				
				prefix_messages = {
				
				{9.612,'XWarp'},
				{9.698,'XWarp'},
				{9.783,'XWarp'},
				{9.869,'XWarp'},
				{9.955,'XWarp'},
				{10.126,'XWarp'},
				{10.298,'XWarp'},
				{10.341,'XWarp'},
				{10.383,'XWarp'},
				{10.426,'XWarp'},
				{10.469,'XWarp'},
				{10.641,'XWarp'},
				{10.812,'XReset'},
				
				{38.069,'Illusion'},
				{43.898,'ZJump'},
				{44.926,'VibZOut'},
				{45.269,'ZJump'},
				{46.298,'VibZOut'},
				{46.641,'ZJump'},
				{47.669,'VibZOut'},
				{48.012,'ZJumpShort1'},
				{48.698,'PhaseHoriz'},
				{49.383,'ZJump'},
				{50.412,'VibZOut'},
				{50.755,'ZJump'},
				{51.783,'VibZOut'},
				
				{52.126,'ZJumpEnd'},
				
				{65.841,'ScreenHit'},
				{68.583,'ScreenHit'},
				{70.641,'ScreenHitMini'},
				{70.898,'ScreenHitMini'},
				{71.155,'ScreenHitMini'},
				{71.326,'ScreenHit'},
				
				{76.469,'Test'},
				{87.441,'Test'},
				
				{92.926,'PhaseOut'},
				
				{97.041,'Test'},
				
				{99.098,'ZJumpShort2'},
				{99.783,'VibZOut'},
				{100.126,'ZJump'},
				{101.155,'VibZOut'},
				{101.498,'ZJump'},
				{102.526,'VibZOut'},
				{102.869,'ZJumpShort1'},
				{103.555,'PhaseVert'},
				{104.241,'ZJump'},
				{105.269,'VibZOut'},
				{105.612,'ZJump'},
				{106.641,'VibZOut'},
				{106.983,'ZJumpEnd'},
				};
				
				
				prefix_mods = {
				
				{0,200,'2x,-999999% Cover,*10000 No Beat','end'},
				
				{0,240/175/8,'*16 150% Mini','len'},
				{0+240/175/8,240/175/16,'*16 75 Mini','len'},
				{0+240/175/16*3,240/175/16,'*16 No Mini','len'},
				
				{4.812,240/175/8,'*16 75% Mini','len'},
				{4.812+240/175/8,240/175/8,'*16 150% Mini','len'},
				{4.812+240/175/8*2,240/175/16,'*16 75 Mini','len'},
				{4.812+240/175/16*5,240/175/16,'*16 No Mini','len'},
				
				{5.498,240/175/8,'*16 150% Mini','len'},
				{5.498+240/175/8,240/175/16,'*16 75 Mini','len'},
				{5.498+240/175/16*3,240/175/16,'*16 No Mini','len'},
				
				{8.155,240/175/16*3,'*16 50% Mini','len'},
				{8.412,240/175/16*3,'*16 Mini','len'},
				{8.412+240/175/8,240/175/8,'*16 150% Mini','len'},
				{8.412+240/175/8*2,240/175/16,'*16 75 Mini','len'},
				{8.412+240/175/16*5,240/175/16,'*16 No Mini','len'},
				
				{10.983,240/175/8,'*16 150% Mini','len'},
				{10.983+240/175/8,240/175/16,'*16 75 Mini','len'},
				{10.983+240/175/16*3,240/175/16,'*16 No Mini','len'},
				
				{13.726,240/175/8,'*16 150% Mini','len'},
				{13.726+240/175/8,240/175/16,'*16 75 Mini','len'},
				{13.726+240/175/16*3,240/175/16,'*16 No Mini','len'},
				
				{16.469,240/175/8,'*16 150% Mini','len'},
				{16.469+240/175/8,240/175/16,'*16 75 Mini','len'},
				{16.469+240/175/16*3,240/175/16,'*16 No Mini','len'},
				
				{16.469,17.000,'*10000 No Flip,*10000 No Invert','end'},
				
				{16.812,21.269,'*0.5 200% Tornado','end'},
				{21.269,22.000,'*3.5 No Tornado','end'},
				
				{21.612,22.500,'*10000 No Centered','end'},
				{21.612,240/175/32,'*10000 2000% Centered','len'},
				{21.698,240/175/32,'*10000 2000% Centered','len'},
				{21.783,240/175/32,'*10000 2000% Centered','len'},
				{21.869,240/175/32,'*10000 2000% Centered','len'},
				
				
				
				
				{38.412,240/175/4,'*16 1000% Drunk','len',1},
				{38.412+240/175/8*2,240/175/8,'*64 -1000% Drunk','len',1},
				{38.412+240/175/8*3,240/175/8,'*64 1000% Drunk','len',1},
				{39.098,240/175/4,'*32 -1000% Drunk','len',1},
				{39.098+240/175/8*2,240/175/8,'*64 1000% Drunk','len',1},
				{39.098+240/175/8*3,240/175/8,'*64 -1000% Drunk','len',1},
				{39.783,240/175/4,'*32 1000% Drunk','len',1},
				{39.783+240/175/8*2,240/175/8,'*64 -1000% Drunk','len',1},
				{39.783+240/175/8*3,240/175/8,'*64 1000% Drunk','len',1},
				{40.469,240/175/4,'*32 -1000% Drunk','len',1},
				{40.469+240/175/8*2,240/175/8,'*64 1000% Drunk','len',1},
				{40.469+240/175/8*3,240/175/8,'*64 -1000% Drunk','len',1},
				{41.155,240/175/8*3,'*16 1000% Drunk','len',1},
				{41.669,240/175/8*3,'*32 -1000% Drunk','len',1},
				{42.183,240/175/2,'*24 No Drunk','len',1},
				
				{38.069,42.526,'Blind','end'},
				
				{38.412,41.841,'*4 200% Mini','end',2},
				{41.841,42.526,'*8 200% Mini','end',2},
				{38.412,0.050,'*10000 No Mini','len',2},
				{38.669,0.050,'*10000 No Mini','len',2},
				{38.926,0.050,'*10000 No Mini','len',2},
				{39.098,0.050,'*10000 No Mini','len',2},
				{39.355,0.050,'*10000 No Mini','len',2},
				{39.612,0.050,'*10000 No Mini','len',2},
				{39.783,0.050,'*10000 No Mini','len',2},
				{40.041,0.050,'*10000 No Mini','len',2},
				{40.298,0.050,'*10000 No Mini','len',2},
				{40.469,0.050,'*10000 No Mini','len',2},
				{40.726,0.050,'*10000 No Mini','len',2},
				{40.983,0.050,'*10000 No Mini','len',2},
				{41.155,240/175/8,'*4 No Mini','len',2},
				{41.498,240/175/8,'*4 No Mini','len',2},
				{41.841,240/175/16,'*8 No Mini','len',2},
				{42.012,240/175/16,'*8 No Mini','len',2},
				{42.183,240/175/16,'*8 No Mini','len',2},
				{42.355,240/175/16,'*8 No Mini','len',2},
				{42.526,240/175/4,'*8 No Mini','len',2},
				
				{54.183,65.498,'*1.4 Brake','end'},
				{65.498,66.000,'*12 No Brake','end'},
				
				{76.641,87.612,'*10000 Bumpy','end',1},
				{76.641,87.612,'*10000 -100% Bumpy','end',2},
				{87.612,97.212,'*10000 Bumpy,*10000 50% Wave','end',1},
				{87.612,97.212,'*10000 -100% Bumpy,*10000 50% Wave','end',2},
				{97.212,98.000,'*10000 No Bumpy,*10000 No Wave','end'},
				
				{97.298,98.000,'*10000 No Flip,*10000 No Invert','end'},
				
				
				
				
				
				
				
				-- DRUNK MODS --
				
				{0.355,240/175/8,'*5 Drunk','len'},
				{0.355+240/175/8,240/175/8,'*10 -100% Drunk','len'},
				{0.355+240/175/8*2,240/175/4,'*5 Drunk','len'},
				{0.355+240/175/8*4,240/175/4,'*5 No Drunk','len'},
				{1.726,240/175/8,'*5 Drunk','len'},
				{1.726+240/175/8,240/175/8,'*10 -100% Drunk','len'},
				{1.726+240/175/8*2,240/175/4,'*5 Drunk','len'},
				{1.726+240/175/8*4,240/175/4,'*5 No Drunk','len'},
				{3.783,240/175/8,'*5 Drunk','len'},
				{3.783+240/175/8,240/175/8,'*10 -100% Drunk','len'},
				{3.783+240/175/8*2,240/175/4,'*5 Drunk','len'},
				{3.783+240/175/8*4,240/175/4,'*5 -100% Drunk','len'},
				{3.783+240/175/8*6,240/175/4,'*5 No Drunk','len'},
				{5.841,240/175/8,'*5 Drunk','len'},
				{5.841+240/175/8,240/175/8,'*10 -100% Drunk','len'},
				{5.841+240/175/8*2,240/175/4,'*5 Drunk','len'},
				{5.841+240/175/8*4,240/175/4,'*5 No Drunk','len'},
				{7.212,240/175/8,'*5 Drunk','len'},
				{7.212+240/175/8,240/175/8,'*10 -100% Drunk','len'},
				{7.212+240/175/8*2,240/175/4,'*5 Drunk','len'},
				{7.212+240/175/8*4,240/175/4,'*5 No Drunk','len'},
				{8.583,240/175/8,'*5 Drunk','len'},
				{8.583+240/175/8,240/175/8,'*10 -100% Drunk','len'},
				{8.583+240/175/8*2,240/175/4,'*5 Drunk','len'},
				{8.583+240/175/8*4,240/175/4,'*5 No Drunk','len'},
				{11.326,240/175/8,'*5 Drunk','len'},
				{11.326+240/175/8,240/175/8,'*10 -100% Drunk','len'},
				{11.326+240/175/8*2,240/175/4,'*5 Drunk','len'},
				{11.326+240/175/8*4,240/175/8,'*5 No Drunk','len'},
				{12.183,240/175/4,'*20 Drunk','len'},
				{12.526,240/175/16,'*40 -100% Drunk','len'},
				{12.612,240/175/16,'*40 Drunk','len'},
				{12.698,240/175/8,'*10 -100% Drunk','len'},
				{12.869,240/175/8,'*10 Drunk','len'},
				{13.041,240/175/4,'*5 -100% Drunk','len'},
				{13.383,240/175/4,'*5 No Drunk','len'},
				{13.898,240/175/4,'*40 Drunk','len'},
				{14.241,240/175/4,'*40 -100% Drunk','len'},
				{14.583,240/175/16,'*40 Drunk','len'},
				{14.669,240/175/16,'*40 -100% Drunk','len'},
				{14.755,240/175/8,'*5 Drunk','len'},
				{14.755+240/175/8,240/175/8,'*10 -100% Drunk','len'},
				{14.755+240/175/8*2,240/175/4,'*5 Drunk','len'},
				{14.755+240/175/8*4,240/175/4,'*5 -100% Drunk','len'},
				{14.755+240/175/8*6,240/175/4,'*5 No Drunk','len'},
				{27.783,240/175/8,'*5 Drunk','len'},
				{27.783+240/175/8,240/175/8,'*10 -100% Drunk','len'},
				{27.783+240/175/8*2,240/175/4,'*5 Drunk','len'},
				{27.783+240/175/8*4,240/175/4,'*5 No Drunk','len'},
				{29.155,240/175/8,'*5 Drunk','len'},
				{29.155+240/175/8,240/175/8,'*10 -100% Drunk','len'},
				{29.155+240/175/8*2,240/175/4,'*5 Drunk','len'},
				{29.155+240/175/8*4,240/175/4,'*5 No Drunk','len'},
				{31.212,240/175/8,'*5 Drunk','len'},
				{31.212+240/175/8,240/175/8,'*10 -100% Drunk','len'},
				{31.212+240/175/8*2,240/175/4,'*5 Drunk','len'},
				{31.212+240/175/8*4,240/175/4,'*5 -100% Drunk','len'},
				{31.212+240/175/8*6,240/175/4,'*5 No Drunk','len'},
				{33.269,240/175/8,'*5 Drunk','len'},
				{33.269+240/175/8,240/175/8,'*10 -100% Drunk','len'},
				{33.269+240/175/8*2,240/175/4,'*5 Drunk','len'},
				{33.269+240/175/8*4,240/175/4,'*5 No Drunk','len'},
				{34.641,240/175/8,'*5 Drunk','len'},
				{34.641+240/175/8,240/175/8,'*10 -100% Drunk','len'},
				{34.641+240/175/8*2,240/175/4,'*5 Drunk','len'},
				{34.641+240/175/8*4,240/175/4,'*5 No Drunk','len'},
				{36.698,240/175/8,'*5 Drunk','len'},
				{36.698+240/175/8,240/175/8,'*10 -100% Drunk','len'},
				{36.698+240/175/8*2,240/175/4,'*5 Drunk','len'},
				{36.698+240/175/8*4,240/175/4,'*5 -100% Drunk','len'},
				{36.698+240/175/8*6,240/175/4,'*5 No Drunk','len'},
				{55.212,240/175/8,'*5 Drunk','len'},
				{55.212+240/175/8,240/175/8,'*10 -100% Drunk','len'},
				{55.212+240/175/8*2,240/175/4,'*5 Drunk','len'},
				{55.212+240/175/8*4,240/175/4,'*5 No Drunk','len'},
				{56.583,240/175/8,'*5 Drunk','len'},
				{56.583+240/175/8,240/175/8,'*10 -100% Drunk','len'},
				{56.583+240/175/8*2,240/175/4,'*5 Drunk','len'},
				{56.583+240/175/8*4,240/175/4,'*5 No Drunk','len'},
				{58.641,240/175/8,'*5 Drunk','len'},
				{58.641+240/175/8,240/175/8,'*10 -100% Drunk','len'},
				{58.641+240/175/8*2,240/175/4,'*5 Drunk','len'},
				{58.641+240/175/8*4,240/175/4,'*5 -100% Drunk','len'},
				{58.641+240/175/8*6,240/175/4,'*5 No Drunk','len'},
				{60.698,240/175/8,'*5 Drunk','len'},
				{60.698+240/175/8,240/175/8,'*10 -100% Drunk','len'},
				{60.698+240/175/8*2,240/175/4,'*5 Drunk','len'},
				{60.698+240/175/8*4,240/175/4,'*5 No Drunk','len'},
				{62.069,240/175/8,'*5 Drunk','len'},
				{62.069+240/175/8,240/175/8,'*10 -100% Drunk','len'},
				{62.069+240/175/8*2,240/175/4,'*5 Drunk','len'},
				{62.069+240/175/8*4,240/175/4,'*5 No Drunk','len'},
				{64.126,240/175/8,'*5 Drunk','len'},
				{64.126+240/175/8,240/175/8,'*10 -100% Drunk','len'},
				{64.126+240/175/8*2,240/175/4,'*5 Drunk','len'},
				{64.126+240/175/8*4,240/175/4,'*5 -100% Drunk','len'},
				{64.126+240/175/8*6,240/175/4,'*5 No Drunk','len'},
				{75.098,240/175/8,'*5 Drunk','len'},
				{75.098+240/175/8,240/175/8,'*10 -100% Drunk','len'},
				{75.098+240/175/8*2,240/175/4,'*5 Drunk','len'},
				{75.098+240/175/8*4,240/175/4,'*5 -100% Drunk','len'},
				{75.098+240/175/8*6,240/175/4,'*5 No Drunk','len'},
				{86.069,240/175/8,'*5 Drunk','len'},
				{86.069+240/175/8,240/175/8,'*10 -100% Drunk','len'},
				{86.069+240/175/8*2,240/175/4,'*5 Drunk','len'},
				{86.069+240/175/8*4,240/175/4,'*5 -100% Drunk','len'},
				{86.069+240/175/8*6,240/175/4,'*5 No Drunk','len'},
				{98.755,240/175/8,'*20 400% Drunk','len'},
				{98.755+240/175/8,240/175/4,'*20 No Drunk','len'},
				{110.069,240/175/8,'*5 Drunk','len'},
				{110.069+240/175/8,240/175/8,'*10 -100% Drunk','len'},
				{110.069+240/175/8*2,240/175/4,'*5 Drunk','len'},
				{110.069+240/175/8*4,240/175/4,'*5 No Drunk','len'},
				{111.441,240/175/8,'*5 Drunk','len'},
				{111.441+240/175/8,240/175/8,'*10 -100% Drunk','len'},
				{111.441+240/175/8*2,240/175/4,'*5 Drunk','len'},
				{111.441+240/175/8*4,240/175/4,'*5 No Drunk','len'},
				
				}

				
				
				prefix_plr = {};
				prefix_inc = 0;
				
				
				
				local oldp1 = 0;
				local oldp2 = 0;
				for i = 32.583,32.926,240/175/32 do
					local rand = {1,2,3,4};
					local columnstr = {'*10000 -50% Flip,*10000 No Invert','*10000 150% Flip,*10000 No Invert','*10000 -200% Invert,*10000 150% Flip','*10000 200% Invert,*10000 -50% Flip'};
					local p1,p2;
					
					if oldp1 ~= 0 then
						p1 = oldp1;
						while oldp1 == p1 do
							p1 = math.random(1,table.getn(rand));
						end
					else p1 = math.random(1,table.getn(rand));
					end
					
					table.remove(rand,p1);
					
					if oldp2 ~= 0 then
						p2 = oldp2;
						while oldp2 == p2 do
							p2 = math.random(1,table.getn(rand));
						end
					else p2 = math.random(1,table.getn(rand));
					end
					
					table.insert(prefix_mods,{i,240/175/32,columnstr[p1],'len',1});
					table.insert(prefix_mods,{i,240/175/32,columnstr[p2],'len',2});
					
					oldp1 = p1;
					oldp2 = p2;
				end
				
				oldp1 = 0;
				for i = 16.126,16.450,240/175/32 do
					local rand = {1,2,3,4};
					local columnstr = {'*10000 No Flip,*10000 No Invert','*10000 Flip,*10000 No Invert','*10000 -100% Invert,*10000 Flip','*10000 Invert,*10000 No Flip'};
					local p1;
					
					if oldp1 ~= 0 then
						p1 = oldp1;
						while oldp1 == p1 do
							p1 = math.random(1,table.getn(rand));
						end
					else p1 = math.random(1,table.getn(rand));
					end
					
					table.remove(rand,p1);
					
					table.insert(prefix_mods,{i,240/175/32,columnstr[p1],'len'});
					
					oldp1 = p1;
				end
				
				self:queuecommand('Update');
			end"
		
		UpdateCommand="%function(self)
		
			local beat = GAMESTATE:GetSongBeat();
			
			-----------------------
			-- Player mod resets --
			-----------------------
			prefix_inc = prefix_inc + 1;
			GAMESTATE:ApplyGameCommand('mod,clearall');
			
			--------------------------------------------------------------------------------------------
			-- Mod reader code originally coded by Taronuke, remade to support end times and lengths. --
			--------------------------------------------------------------------------------------------
			for i,v in pairs(prefix_mods) do
				if prefix_time >=v[1] then
					if (v[4] == 'len' and prefix_time <=v[1]+v[2]) or (v[4] == 'end' and prefix_time <=v[2]) then
						if table.getn(v) == 5 then
							GAMESTATE:ApplyGameCommand('mod,'..v[3],v[5]);
						else
							GAMESTATE:ApplyGameCommand('mod,'..v[3]);
						end
					end
				end
			end
			
			
			
			if beat >= 0 and not checked then
				
				table.insert(prefix_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP1'));
				table.insert(prefix_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP2'));
				checked = true;
				
				SCREENMAN:GetTopScreen():GetChild('Overlay'):hidden(1);
				SCREENMAN:GetTopScreen():GetChild('Underlay'):hidden(1);
				for i,v in pairs(prefix_plr) do
					local multi = -1; if i == 2 then multi = 1; end
					if v then
						v:rotationx(0);							
						v:rotationy(0);
						v:rotationz(0);
						v:x(SCREEN_CENTER_X+160*multi);
						v:y(SCREEN_CENTER_Y);
						v:zoomx(1);
						v:zoomy(1);
						v:GetChild('Judgment'):stopeffect();
						
						SCREENMAN:GetTopScreen():GetChild('ScoreP'..i):hidden(1);
						SCREENMAN:GetTopScreen():GetChild('LifeP'..i):hidden(1);
						
						v:x(SCREEN_CENTER_X);
						v:GetChild('Judgment'):x(160*multi);
						v:GetChild('Combo'):x(160*multi);
					end
				end
				
				SCREENMAN:GetTopScreen():SetDrawByZPosition(true);
				SCREENMAN:GetTopScreen():GetChild('SongBackground'):z(-999);
				SCREENMAN:GetTopScreen():GetChild('SongForeground'):z(999);
			end
			
			if beat >= 111 and fgcurcommand == 1 then
				for i,v in pairs(prefix_plr) do
					if v then
						v:z(0);
					end
				end
				fgcurcommand = fgcurcommand + 1;
			end
			
			if beat >= 125 and fgcurcommand == 2 then
				for i,v in pairs(prefix_plr) do
					if v then
						v:decelerate(240/175/4);
						v:z(-300);
						v:decelerate(240/175/4);
						v:z(-600);
						v:decelerate(240/175/4);
						v:z(-900);
					end
				end
				fgcurcommand = fgcurcommand + 1;
			end
			
			if beat >= 156 and fgcurcommand == 3 then
				for i,v in pairs(prefix_plr) do
					if v then
						for j = 1,4 do
							v:decelerate(240/175/8);
							v:addz(75);
						end
						for j = 1,8 do
							v:decelerate(240/175/16);
							v:addz(75);
						end
					end
				end
				fgcurcommand = fgcurcommand + 1;
			end
			
			
			if beat >= 191 and fgcurcommand == 4 then
				for i,v in pairs(prefix_plr) do
					local multi = -1; if i == 2 then multi = 1; end
					if v then
						--SCREENMAN:GetTopScreen():x(SCREEN_CENTER_X);
						--SCREENMAN:GetTopScreen():y(SCREEN_CENTER_Y);
						SCREENMAN:GetTopScreen():decelerate(240/175/8);
						SCREENMAN:GetTopScreen():zoom(0.35);
						
						SCREENMAN:GetTopScreen():x(SCREEN_CENTER_X*0.65);
						SCREENMAN:GetTopScreen():y(SCREEN_CENTER_Y*0.65);
						
						--SCREENMAN:GetTopScreen():GetChild('SongBackground'):x(-SCREEN_CENTER_X);
						--SCREENMAN:GetTopScreen():GetChild('SongBackground'):y(-SCREEN_CENTER_Y);
						--v:addx(-SCREEN_CENTER_X);
						--v:addy(-SCREEN_CENTER_Y);
						
						v:decelerate(240/175/16);
						v:addx(160*multi);
						v:GetChild('Judgment'):decelerate(240/175/16);
						v:GetChild('Judgment'):x(0);
						v:GetChild('Combo'):decelerate(240/175/16);
						v:GetChild('Combo'):x(0);
					end
				end
				fgcurcommand = fgcurcommand + 1;
			end
			
			
			if beat >= 284 and fgcurcommand == 5 then
				for i,v in pairs(prefix_plr) do
					if v then
						v:decelerate(240/175/16*3);
						v:addz(-150);
						v:decelerate(240/175/16*3);
						v:addz(-150);
						v:decelerate(240/175/16*3);
						v:addz(-150);
						v:decelerate(240/175/16*3);
						v:addz(-150);
						v:decelerate(240/175/8);
						v:addz(-150);
						v:decelerate(240/175/8);
						v:addz(-150);
					end
				end
				fgcurcommand = fgcurcommand + 1;
			end
			
			if beat >= 320 and fgcurcommand == 6 then
				for i,v in pairs(prefix_plr) do
					if v then
						v:bounceend(240/175/16*3);
						v:z(0);
					end
				end
				fgcurcommand = fgcurcommand + 1;
			end
			
			if beat >= 327 and fgcurcommand == 7 then
				for i,v in pairs(prefix_plr) do
					local multi = -1; if i == 2 then multi = 1; end
					if v then
						v:linear(240/175/4);
						v:skewx(8*multi);
						v:bounceend(240/175/16*3);
						v:skewx(0);
					end
				end
				fgcurcommand = fgcurcommand + 1;
			end
			
			
			
			
			-------------------------
			-- BEAT SPECIFIC STUFF --
			-------------------------
			if beat > 64 and beat < 111 then
				for i,v in pairs(prefix_plr) do
					local multi = -1; if i == 2 then multi = 1; end
					if v then
						if beat < 95 then
							if i == 2 or beat > 65 then v:z(math.sin(beat*math.pi)*200*multi); end
							if beat > 65 then
								GAMESTATE:ApplyGameCommand('mod,*10000 '..math.cos(beat*math.pi)*50+50 ..'% Invert,*10000 '..-math.cos(beat*math.pi)*50-50 ..'% Flip',1);
							end
							GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.cos(beat*math.pi)*50+50 ..'% Invert,*10000 '..math.cos(beat*math.pi)*50-50 ..'% Flip',2);
						elseif beat > 96 then
							if i == 1 or beat <= 110 then v:z(-math.sin(beat*math.pi)*200*multi); v:x(SCREEN_CENTER_X); end
							if beat <= 110 then
								GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.cos(beat*math.pi)*50+50 ..'% Invert,*10000 '..math.cos(beat*math.pi)*50-50 ..'% Flip',2);
							end
							GAMESTATE:ApplyGameCommand('mod,*10000 '..math.cos(beat*math.pi)*50+50 ..'% Invert,*10000 '..-math.cos(beat*math.pi)*50-50 ..'% Flip',1);
							v:GetChild('Judgment'):x(160*multi);
							v:GetChild('Combo'):x(160*multi);
						else
							v:z(0);
							v:x(SCREEN_CENTER_X+multi*32);
							v:GetChild('Judgment'):x(128*multi);
							v:GetChild('Combo'):x(128*multi);
							--GAMESTATE:ApplyGameCommand('mod,*10000 No Flip,*10000 No Invert');
						end
					end
				end
			end
			
			if beat > 111 and beat < 112 then
				local multi = 1; if math.mod(prefix_inc,2) == 0 then multi = -1; end
				GAMESTATE:ApplyGameCommand('mod,*10000 '..auxvar:getaux()*multi..'% Invert',1);
				GAMESTATE:ApplyGameCommand('mod,*10000 '..auxvar:getaux()*multi*0.5 ..'% Centered',2);
			end
			
			if beat > 128 and beat < 153 then
				SCREENMAN:GetTopScreen():vibrate();
				SCREENMAN:GetTopScreen():effectmagnitude(auxvar:getaux(),auxvar:getaux(),0);
			end
			
			
			
			if beat > 192 and beat < 220 then
				SCREENMAN:GetTopScreen():vibrate();
				SCREENMAN:GetTopScreen():effectmagnitude(auxvar:getaux(),auxvar:getaux(),0);
			end
			
			
			
			if beat > 224 and beat < 255.5 then
				for i,v in pairs(prefix_plr) do
					local multi = -1; if i == 2 then multi = 1; end
					if v then
						v:z(math.sin(beat*math.pi)*200*multi);
						GAMESTATE:ApplyGameCommand('mod,*10000 '..math.cos(beat*math.pi)*50+50 ..'% Invert,*10000 '..-math.cos(beat*math.pi)*50-50 ..'% Flip',1);
						GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.cos(beat*math.pi)*50+50 ..'% Invert,*10000 '..math.cos(beat*math.pi)*50-50 ..'% Flip',2);
					end
				end
			end
			
			if beat > 256 and beat < 283.5 then
				for i,v in pairs(prefix_plr) do
					local multi = -1; if i == 2 then multi = 1; end
					if v then
						v:z(math.sin(beat*math.pi)*200*multi);
						GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.cos(beat*math.pi)*50+50 ..'% Invert,*10000 '..math.cos(beat*math.pi)*50-50 ..'% Flip',1);
						GAMESTATE:ApplyGameCommand('mod,*10000 '..math.cos(beat*math.pi)*50+50 ..'% Invert,*10000 '..-math.cos(beat*math.pi)*50-50 ..'% Flip',2);
					end
				end
			end
			
			if beat > 283.5 and beat < 284 then
				for i,v in pairs(prefix_plr) do
					if v then
						v:z(0);
					end
				end
			end
			
			
			
			if beat > 288 and beat < 316 then
				SCREENMAN:GetTopScreen():vibrate();
				SCREENMAN:GetTopScreen():effectmagnitude(auxvar:getaux(),auxvar:getaux(),0);
			end
			
			--------------------------------------------------------------
			-- Message reader to make specific values of the actor aux. --
			--------------------------------------------------------------
			if prefix_curmessage <= table.getn(prefix_messages) then
				if prefix_time >= prefix_messages[prefix_curmessage][1] then
					MESSAGEMAN:Broadcast(prefix_messages[prefix_curmessage][2]);
					prefix_curmessage = prefix_curmessage + 1;
				end
			end
			
			self:queuecommand('Update2');
			
		end"


		Update2Command="%function(self)
		self:sleep(0.02);
		self:queuecommand('Update');
		end"

	/>
	
	<BitmapText
		Font="Common Normal"
		Text="test"
		OnCommand="x,SCREEN_CENTER_X;y,SCREEN_CENTER_Y;effectclock,music;playcommand,SetTime;hidden,1"
		SetTimeCommand="%function(self) self:settext(self:GetSecsIntoEffect()); prefix_time = PREFSMAN:GetPreference('GlobalOffsetSeconds') - (0.002 - 0.002) + tonumber(self:GetText()); self:sleep(0.02); self:queuecommand('SetTime'); end"
	/>
	
	<!-- Aux actor, VERY IMPORTANT -->
	<Layer
		Type="Quad"
		OnCommand=""
		InitCommand="%function(self) auxvar = self; self:hidden(1) end"
		IllusionMessageCommand="finishtweening;aux,0;linear,240/175/8;aux,100;linear,240/175/8;aux,0"
		VibZOutMessageCommand="finishtweening;aux,150;linear,240/175/4;aux,0"
		ZJumpMessageCommand="%function()
			for i,v in pairs(prefix_plr) do
				if v then
					if i == 1 then
						for j = 1,2 do
							v:decelerate(240/175/16*3);
							v:z(math.random(0,250));
							v:rotationz(math.random(-30,0));
							v:x(math.random(SCREEN_CENTER_X-100,SCREEN_CENTER_X));
							
							v:accelerate(240/175/16*3);
							v:z(-900);
							v:rotationz(0);
							v:x(SCREEN_CENTER_X);
						end
					else
						v:sleep(240/175/16*3);
						for j = 1,2 do
							v:decelerate(240/175/16*3);
							v:z(math.random(0,250));
							v:rotationz(math.random(0,30));
							v:x(math.random(SCREEN_CENTER_X,SCREEN_CENTER_X+100));
							
							v:accelerate(240/175/16*3);
							v:z(-900);
							v:rotationz(0);
							v:x(SCREEN_CENTER_X);
						end
					end
				end
			end
		end"
		ZJumpEndMessageCommand="%function()
			for i,v in pairs(prefix_plr) do
				if v then
					if i == 1 then
						v:decelerate(240/175/16*3);
						v:z(math.random(0,250));
						v:rotationz(math.random(-30,0));
						v:x(math.random(SCREEN_CENTER_X-100,SCREEN_CENTER_X));
						v:accelerate(240/175/16*3);
						v:z(-900);
						v:rotationz(0);
						v:x(SCREEN_CENTER_X);
						
						v:decelerate(240/175/16*2.5);
						v:z(math.random(0,250));
						v:rotationz(math.random(-30,0));
						v:x(math.random(SCREEN_CENTER_X-100,SCREEN_CENTER_X));
						v:accelerate(240/175/16*2.5);
						v:z(-900);
						v:rotationz(0);
						v:x(SCREEN_CENTER_X);
						
						v:decelerate(240/175/16*2.5);
						v:z(math.random(0,250));
						v:rotationz(math.random(-30,0));
						v:x(math.random(SCREEN_CENTER_X-100,SCREEN_CENTER_X));
						v:accelerate(240/175/16*2.5);
						v:z(-900);
						v:rotationz(0);
						v:x(SCREEN_CENTER_X);
					else
						v:sleep(240/175/16*3);
						v:decelerate(240/175/16*2.5);
						v:z(math.random(0,250));
						v:rotationz(math.random(0,30));
						v:x(math.random(SCREEN_CENTER_X,SCREEN_CENTER_X+100));
						v:accelerate(240/175/16*2.5);
						v:z(-900);
						v:rotationz(0);
						v:x(SCREEN_CENTER_X);
						
						v:decelerate(240/175/16*3);
						v:z(math.random(0,250));
						v:rotationz(math.random(0,30));
						v:x(math.random(SCREEN_CENTER_X,SCREEN_CENTER_X+100));
						v:accelerate(240/175/16*3);
						v:z(-900);
						v:rotationz(0);
						v:x(SCREEN_CENTER_X);
					end
				end
			end
		end"
		ZJumpShort1MessageCommand="%function()
			for i,v in pairs(prefix_plr) do
				if v then
					if i == 1 then
						for j = 1,2 do
							v:decelerate(240/175/16*3);
							v:z(math.random(0,250));
							v:rotationz(math.random(-30,0));
							v:x(math.random(SCREEN_CENTER_X-100,SCREEN_CENTER_X));
							
							v:accelerate(240/175/16*3);
							v:z(-900);
							v:rotationz(0);
							v:x(SCREEN_CENTER_X);
						end
					else
						v:sleep(240/175/16*3);
						v:decelerate(240/175/16*3);
						v:z(math.random(0,250));
						v:rotationz(math.random(0,30));
						v:x(math.random(SCREEN_CENTER_X,SCREEN_CENTER_X+100));
						
						v:accelerate(240/175/16*3);
						v:z(-900);
						v:rotationz(0);
						v:x(SCREEN_CENTER_X);
					end
				end
			end
		end"
		ZJumpShort2MessageCommand="%function()
			for i,v in pairs(prefix_plr) do
				if v then
					if i == 1 then
						for j = 1,2 do
							v:decelerate(240/175/16*2.5);
							v:z(math.random(0,250));
							v:rotationz(math.random(-30,0));
							v:x(math.random(SCREEN_CENTER_X-100,SCREEN_CENTER_X));
							
							v:accelerate(240/175/16*2.5);
							v:z(-900);
							v:rotationz(0);
							v:x(SCREEN_CENTER_X);
						end
					else
						v:sleep(240/175/16*2);
						v:decelerate(240/175/16*3);
						v:z(math.random(0,250));
						v:rotationz(math.random(0,30));
						v:x(math.random(SCREEN_CENTER_X,SCREEN_CENTER_X+100));
						
						v:accelerate(240/175/16*3);
						v:z(-900);
						v:rotationz(0);
						v:x(SCREEN_CENTER_X);
					end
				end
			end
		end"
		XWarpMessageCommand="%function()
			local rand = math.random(SCREEN_LEFT+150,SCREEN_RIGHT-150);
			for i,v in pairs(prefix_plr) do
				if v then
					v:x(rand);
				end
			end
		end"
		XResetMessageCommand="%function()
			for i,v in pairs(prefix_plr) do
				if v then
					v:x(SCREEN_CENTER_X);
				end
			end
		end"
		PhaseHorizMessageCommand="%function()
			SCREENMAN:GetTopScreen():decelerate(240/175/4);
			SCREENMAN:GetTopScreen():zoomx(0);
			SCREENMAN:GetTopScreen():x(SCREEN_CENTER_X);
			SCREENMAN:GetTopScreen():bounceend(240/175/8);
			SCREENMAN:GetTopScreen():zoomx(1);
			SCREENMAN:GetTopScreen():x(0);
		end"
		PhaseVertMessageCommand="%function()
			SCREENMAN:GetTopScreen():decelerate(240/175/4);
			SCREENMAN:GetTopScreen():zoomy(0);
			SCREENMAN:GetTopScreen():y(SCREEN_CENTER_Y);
			SCREENMAN:GetTopScreen():bounceend(240/175/8);
			SCREENMAN:GetTopScreen():zoomy(1);
			SCREENMAN:GetTopScreen():y(0);
		end"
		PhaseOutMessageCommand="%function()
			SCREENMAN:GetTopScreen():decelerate(240/175/16*3);
			SCREENMAN:GetTopScreen():zoom(0);
			SCREENMAN:GetTopScreen():x(SCREEN_CENTER_X);
			SCREENMAN:GetTopScreen():y(SCREEN_CENTER_Y);
			SCREENMAN:GetTopScreen():linear(240/175/16);
			SCREENMAN:GetTopScreen():zoom(1);
			SCREENMAN:GetTopScreen():x(0);
			SCREENMAN:GetTopScreen():y(0);
		end"
		ScreenHitMessageCommand="%function(self)
			local randrot = math.random(15,30);
			local randx = math.random(100,200);
			local randy = math.random(-100,100);
			prefix_rotinc = prefix_rotinc + 1;
			if math.mod(prefix_rotinc,2) == 0 then randrot = -randrot; randx = -randx; end
			
			self:finishtweening();
			self:aux(100);
			self:linear(240/175/16*3);
			self:aux(0);
			
			SCREENMAN:GetTopScreen():bounceend(240/175/16*3);
			SCREENMAN:GetTopScreen():x(SCREEN_CENTER_X*0.65+randx);
			SCREENMAN:GetTopScreen():y(SCREEN_CENTER_Y*0.65+randy);
			SCREENMAN:GetTopScreen():rotationz(randrot);
		end"
		ScreenHitMiniMessageCommand="%function(self)
			local randrot = math.random(15,30);
			local randx = math.random(100,200);
			local randy = math.random(-100,100);
			prefix_rotinc = prefix_rotinc + 1;
			if math.mod(prefix_rotinc,2) == 0 then randrot = -randrot; randx = -randx; end
			
			self:finishtweening();
			self:aux(100);
			self:linear(240/175/8);
			self:aux(0);
			
			SCREENMAN:GetTopScreen():bounceend(240/175/8);
			SCREENMAN:GetTopScreen():x(SCREEN_CENTER_X*0.65+randx);
			SCREENMAN:GetTopScreen():y(SCREEN_CENTER_Y*0.65+randy);
			SCREENMAN:GetTopScreen():rotationz(randrot);
		end"
	/>
	
	<Layer
		File="test"
		OnCommand="x,SCREEN_CENTER_X;y,SCREEN_CENTER_Y;diffusealpha,0"
		TestMessageCommand="%function(self)
			for i,v in pairs(prefix_plr) do
				local multi = -1; if i == 2 then multi = 1; end
				if v then
					v:x(SCREEN_CENTER_X);
					v:y(SCREEN_CENTER_Y);
					v:GetChild('Judgment'):x(160*multi);
					v:GetChild('Combo'):x(160*multi);
				end
			end
			
			self:diffusealpha(1);
			self:sleep(240/175/4);
			self:diffusealpha(0);
			SCREENMAN:GetTopScreen():zoom(1);
			SCREENMAN:GetTopScreen():x(0);
			SCREENMAN:GetTopScreen():y(0);
			SCREENMAN:GetTopScreen():z(0);
			SCREENMAN:GetTopScreen():rotationx(0);
			SCREENMAN:GetTopScreen():rotationy(0);
			SCREENMAN:GetTopScreen():rotationz(0);
			SCREENMAN:GetTopScreen():rotationz(0);
			SCREENMAN:GetTopScreen():GetChild('SongBackground'):x(0);
			SCREENMAN:GetTopScreen():GetChild('SongBackground'):y(0);
		end"
	/>
	
</children></ActorFrame>