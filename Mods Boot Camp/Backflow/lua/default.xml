<ActorFrame><children>

	<Layer
		Type="Quad"
		InitCommand="hidden,1"
		OnCommand="sleep,GAMESTATE:GetCurrentSong():MusicLengthSeconds()"
	/>
	
	<Layer
		Type="Quad"
		InitCommand="hidden,1"
		OnCommand="%function(self)
				fgcurcommand = 1;
				checked = false;
				prefix_time = 0;
				
				prefix_curmessage = 1;
				
				prefix_inc = 1;
				
				prefix_messages = {
					{5.192,'Hey'},
					{18.434,'Hey'},
					
					{30.537,'Jump'},
					{31.365,'JumpBack'},
					{32.192,'Jump'},
					{32.503,'JumpBack'},
					{32.813,'Jump'},
					
					{37.158,'JumpBack'},
					{37.986,'Jump'},
					{38.813,'JumpBack'},
					{39.123,'Jump'},
					{39.434,'JumpBack'},
					
					{50.089,'ViolentSpin'},
					{50.917,'ViolentSpinBack'},
					{51.744,'ViolentSpin'},
					
					{57.123,'Jiggy'},
					{57.951,'Jiggy'},
					{58.779,'Jiggy'},
					
					{60.434,'Jiggy'},
					{61.261,'Jiggy'},
					
					{63.744,'Jiggy'},
					{64.572,'Jiggy'},
					{65.399,'Jiggy'},
					
					{57.123+240/145*8,'Jiggy'},
					{57.951+240/145*8,'Jiggy'},
					{58.779+240/145*8,'Jiggy'},
					
					{60.434+240/145*8,'Jiggy'},
					{61.261+240/145*8,'Jiggy'},
					
					{63.744+240/145*8,'Jiggy'},
					{64.572+240/145*8,'Jiggy'},
					{65.399+240/145*8,'Jiggy'},
					
					{82.779,'VibMulti'},
				};
				
				
				prefix_mods = {
				
				{0,200,'2.5x,-999999% Cover,*10000 No Beat','end'},
				
				{0,28.986,'*10000 Centered,*10000 Sudden,*10000 130% SuddenOffset','end'},
				{28.986,30.000,'*10000 No Centered,*10000 No Sudden','end'},
				
				{0,0.123,'*10000 200% Mini','len'},
				{0.123,2.917,'*0.725 No Mini','end'},
				
				{3.123,9.330,'*10000 200% Beat','end'},
				{9.744,14.710,'*10000 200% Beat','end'},
				{16.365,22.572,'*10000 200% Beat','end'},
				{22.986,25.468,'*10000 200% Beat','end'},
				{26.296,27.951,'*10000 200% Beat','end'},
				
				{0.020,999,'*2 No Reverse','end'},
				{0.020,240/145/8,'*2 50% Reverse','len'},
				{0.020+240/145/4*1,240/145/8,'*2 50% Reverse','len'},
				{0.020+240/145/4*2,240/145/8,'*2 50% Reverse','len'},
				{0.020+240/145/4*3,240/145/8,'*2 50% Reverse','len'},
				{0.020+240/145/4*4,240/145/8,'*2 50% Reverse','len'},
				{0.020+240/145/4*5,240/145/8,'*2 50% Reverse','len'},
				
				{2.503,240/145/16,'*16 Flip','len'},
				{2.606,240/145/16,'*16 No Flip,*16 Invert','len'},
				{2.710,240/145/16,'*16 No Flip,*16 No Invert','len'},
				{2.813,240/145/16,'*16 Flip,*16 -100% Invert','len'},
				{2.917,240/145/16,'*16 Flip,*16 No Invert','len'},
				{2.968,240/145/16,'*32 No Flip,*32 Invert','len'},
				{3.020,240/145/16,'*32 Flip,*64 -100% Invert','len'},
				{3.072,240/145/16,'*32 Flip,*32 No Invert','len'},
				{3.123,240/145/16,'*32 No Flip,*32 No Invert','len'},
				
				{3.744,240/145/16*3,'*24 150% Mini','len'},
				{4.054,240/145/16*3,'*24 No Mini','len'},
				
				{5.813,240/145,'*32 No Tipsy,*32 No Drunk,*64 No Bumpy','len'},
				{5.813,240/145/16,'*32 400% Tipsy','len'},
				{6.020,240/145/16,'*32 400% Drunk','len'},
				{6.227,240/145/8,'*64 1600% Bumpy','len'},
				
				{6.951,240/145/16*3,'*4 25% Reverse,*4 25% Flip,*20 -125% Mini,*32 250% SuddenOffset','len'},
				{7.261,240/145/16*3,'*4 No Reverse,*4 No Flip,*20 No Mini,*32 130% SuddenOffset','len'},
				
				{8.503,240/145,'*32 Overhead','len'},
				{8.503,240/145/16,'*32 400% Hallway','len'},
				
				{9.537,240/145/12,'*8 50% Reverse,*8 -50% Alternate','len'},
				{9.675,240/145/24*3,'*8 No Reverse,*8 50% Alternate','len'},
				{9.882,240/145/4,'*8 No Reverse,*8 No Alternate','len'},
				
				{10.365,240/145/16*3,'*24 150% Mini','len'},
				{10.675,240/145/16*3,'*24 No Mini','len'},
				
				{11.606,240/145/2,'*8 No Tornado,*12 2.5x','len'},
				{11.606,240/145/8,'*8 200% Tornado,*12 0x','len'},
				
				{13.261,240/145/16,'*4 25% Cross','len'},
				{13.365,240/145/8,'*8 -25% Cross,*4 25% Reverse','len'},
				{13.572,240/145/16,'*4 No Cross,*4 No Reverse','len'},
				
				{13.675,15.000,'*4 No Reverse,*4 No Split,*4 No Cross,*4 No Alternate','end'},
				{13.675,240/145/16,'*4 50% Cross','len'},
				{13.675+240/145/16*2,240/145/16,'*4 -50% Cross,*4 50% Reverse','len'},
				{13.675+240/145/16*4,240/145/16,'*4 50% Cross','len'},
				{13.675+240/145/16*6,240/145/16,'*4 -50% Cross,*4 50% Reverse','len'},
				
				{14.917,999,'*16 No Drunk,*16 No Tipsy,*64 No Dizzy,*8 No Stealth','end'},
				{14.917,0.050,'*10000 100% Drunk,*10000 100% Tipsy,*10000 400% Dizzy,*10000 50% Stealth','len'},
				{15.123,0.050,'*10000 -100% Drunk,*10000 -100% Tipsy,*10000 -400% Dizzy,*10000 50% Stealth','len'},
				{15.330,0.050,'*10000 100% Drunk,*10000 100% Tipsy,*10000 400% Dizzy,*10000 50% Stealth','len'},
				{15.537,0.050,'*10000 -100% Drunk,*10000 -100% Tipsy,*10000 -400% Dizzy,*10000 50% Stealth','len'},
				{15.744,0.050,'*10000 100% Drunk,*10000 100% Tipsy,*10000 400% Dizzy,*10000 50% Stealth','len'},
				{15.848,0.050,'*10000 -100% Drunk,*10000 -100% Tipsy,*10000 -400% Dizzy,*10000 50% Stealth','len'},
				
				{15.951,240/145/8,'*4 36% Reverse','len'},
				{16.158,240/145/16,'*4 No Reverse,*2 18% Split,*2 18% Cross,*2 18% Alternate','len'},
				{16.261,240/145/16,'*2 No Cross,*2 No Alternate,*2 18% Split','len'},
				{16.365,240/145/16,'*1 9% Split,*1 Alternate,*1 -9% Cross','len'},
				{16.468,240/145/16,'*1 No Split,*1 No Alternate,*1 No Cross','len'},
				
				{16.986,240/145/16*3,'*24 150% Mini','len'},
				{17.296,240/145/16*3,'*24 No Mini','len'},
				
				{19.054,240/145,'*32 No Tipsy,*32 No Drunk,*64 No Bumpy','len'},
				{19.054,240/145/16,'*32 400% Tipsy','len'},
				{19.261,240/145/16,'*32 400% Drunk','len'},
				{19.468,240/145/8,'*64 1600% Bumpy','len'},
				
				{20.192,240/145/16*3,'*4 25% Reverse,*4 25% Flip,*20 -125% Mini,*32 250% SuddenOffset','len'},
				{20.503,240/145/16*3,'*4 No Reverse,*4 No Flip,*20 No Mini,*32 130% SuddenOffset','len'},
				
				{21.744,240/145,'*32 Overhead','len'},
				{21.744,240/145/16,'*32 400% Hallway','len'},
				
				{22.779,240/145/12,'*8 50% Reverse,*8 -50% Alternate','len'},
				{22.917,240/145/24*3,'*8 No Reverse,*8 50% Alternate','len'},
				{23.123,240/145/4,'*8 No Reverse,*8 No Alternate','len'},
				
				{23.606,240/145/16*3,'*24 150% Mini','len'},
				{23.917,240/145/16*3,'*24 No Mini','len'},
				
				{24.848,240/145/2,'*8 No Tornado,*12 2.5x','len'},
				{24.848,240/145/8,'*8 200% Tornado,*12 0x','len'},
				
				{25.675,240/145/16*5,'*1.4 400% Centered,*16 Mini,*8 10% Alternate,*12 15% Cross','len'},
				{26.192,240/145/16*3,'*8 Centered,*16 No Mini,*8 No Alternate,*12 No Cross','len'},
				
				{26.503,240/145/16,'*4 25% Cross','len'},
				{26.606,240/145/8,'*8 -25% Cross,*4 25% Reverse','len'},
				{26.813,240/145/16,'*4 No Cross,*4 No Reverse','len'},
				
				{26.917,28.500,'*4 No Reverse,*4 No Split,*4 No Cross,*4 No Alternate','end'},
				{26.917,240/145/16,'*4 50% Cross','len'},
				{26.917+240/145/16*2,240/145/16,'*4 -50% Cross,*4 50% Reverse','len'},
				{26.917+240/145/16*4,240/145/16,'*4 50% Cross','len'},
				{26.917+240/145/16*6,240/145/16,'*4 -50% Cross,*4 50% Reverse','len'},
				
				{28.158,28.986,'*36 2.5x,*24 No Drunk','end'},
				{28.158,240/145/8,'*12 0x,*8 200% Drunk','len'},
				{28.468,240/145/8,'*12 0x,*8 -200% Drunk','len'},
				
				{28.986,30.537,'*2 150% Mini','end'},
				{30.537,240/145/2,'*2.4167 100% Mini','len'},
				{31.365,240/145/2,'*2.4167 50% Mini','len'},
				{32.192,33.123,'*0.55 No Mini','end'},
				
				{33.123,240/145,'*2 400% Drunk,-200% Mini,*0.25 50% Flip,0x','len'},
				{34.779,240/145,'*2 No Drunk,No Mini,*0.25 No Flip','len'},
				
				{36.434,37.158,'*8 150% Mini','end'},
				{37.158,240/145/2,'*2.4167 100% Mini','len'},
				{37.986,240/145/2,'*2.4167 50% Mini','len'},
				{38.813,33.123,'*0.55 No Mini','end'},
				
				{39.744,240/145,'*2 400% Drunk,-200% Mini,*0.25 50% Flip,0x','len'},
				{41.399,240/145,'*2 No Drunk,No Mini,*0.25 No Flip','len'},
				{41.399,55.468,'2x','end'},
				
				{29.606,240/145/2,'*10000 1600% Beat','len'},
				{30.848,240/145/4,'*10000 -1600% Beat','len'},
				{31.675,240/145/4,'*10000 1600% Beat','len'},
				{36.227,240/145/2,'*10000 1600% Beat','len'},
				{37.468,240/145/4,'*10000 -1600% Beat','len'},
				{38.296,240/145/4,'*10000 1600% Beat','len'},
				
				{43.054,48.848,'*16 -1000% Dizzy','end'},
				{43.054,240/145/16,'*8 1000% Dizzy','len'},
				{43.054+240/145/8*1,240/145/16,'*16 1000% Dizzy','len'},
				{43.054+240/145/8*2,240/145/16,'*16 1000% Dizzy','len'},
				{43.054+240/145/8*3,240/145/16,'*16 1000% Dizzy','len'},
				{43.054+240/145/8*4,240/145/16,'*16 1000% Dizzy','len'},
				{43.054+240/145/8*5,240/145/16,'*16 1000% Dizzy','len'},
				{43.054+240/145/8*6,240/145/16,'*16 1000% Dizzy','len'},
				{43.054+240/145/8*7,240/145/16,'*16 1000% Dizzy','len'},
				{43.054+240/145/8*8,240/145/16,'*16 1000% Dizzy','len'},
				{43.054+240/145/8*9,240/145/16,'*16 1000% Dizzy','len'},
				{43.054+240/145/8*10,240/145/16,'*16 1000% Dizzy','len'},
				{43.054+240/145/8*11,240/145/16,'*16 1000% Dizzy','len'},
				{43.054+240/145/8*12,240/145/16,'*16 1000% Dizzy','len'},
				{43.054+240/145/8*13,240/145/16,'*16 1000% Dizzy','len'},
				{43.054+240/145/8*14,240/145/16,'*16 1000% Dizzy','len'},
				{43.054+240/145/8*15,240/145/16,'*16 1000% Dizzy','len'},
				{43.054+240/145/8*16,240/145/16,'*16 1000% Dizzy','len'},
				{43.054+240/145/8*17,240/145/16,'*16 1000% Dizzy','len'},
				{43.054+240/145/8*18,240/145/16,'*16 1000% Dizzy','len'},
				{43.054+240/145/8*19,240/145/16,'*16 1000% Dizzy','len'},
				{43.054+240/145/8*20,240/145/16,'*16 1000% Dizzy','len'},
				{43.054+240/145/8*21,240/145/16,'*16 1000% Dizzy','len'},
				{43.054+240/145/8*22,240/145/16,'*16 1000% Dizzy','len'},
				{43.054+240/145/8*23,240/145/16,'*16 1000% Dizzy','len'},
				{43.054+240/145/8*24,240/145/16,'*16 1000% Dizzy','len'},
				{43.054+240/145/8*25,240/145/16,'*16 1000% Dizzy','len'},
				{43.054+240/145/8*26,240/145/16,'*16 1000% Dizzy','len'},
				{43.054+240/145/8*27,240/145/16,'*16 1000% Dizzy','len'},
				{43.054+240/145/8*28,240/145/16,'*16 1000% Dizzy','len'},
				
				{43.054,52.986,'*64 No Drunk,*64 No Tipsy','end'},
				{43.054,240/145/24,'*64 500% Drunk,*64 500% Tipsy','len'},
				{43.261,240/145/24,'*64 -500% Drunk,*64 -500% Tipsy','len'},
				{43.572,240/145/24,'*64 500% Drunk,*64 500% Tipsy','len'},
				{44.710,240/145/24,'*64 -500% Drunk,*64 -500% Tipsy','len'},
				{44.917,240/145/24,'*64 500% Drunk,*64 500% Tipsy','len'},
				{45.227,240/145/24,'*64 -500% Drunk,*64 -500% Tipsy','len'},
				{46.365,240/145/24,'*64 500% Drunk,*64 500% Tipsy','len'},
				{46.572,240/145/24,'*64 -500% Drunk,*64 -500% Tipsy','len'},
				{46.882,240/145/24,'*64 500% Drunk,*64 500% Tipsy','len'},
				{48.020,240/145/24,'*64 -500% Drunk,*64 -500% Tipsy','len'},
				{48.227,240/145/24,'*64 500% Drunk,*64 500% Tipsy','len'},
				{48.537,240/145/24,'*64 -500% Drunk,*64 -500% Tipsy','len'},
				{49.675,240/145/24,'*64 500% Drunk,*64 500% Tipsy','len'},
				{49.882,240/145/24,'*64 -500% Drunk,*64 -500% Tipsy','len'},
				{50.503,240/145/24,'*64 500% Drunk,*64 500% Tipsy','len'},
				{50.710,240/145/24,'*64 -500% Drunk,*64 -500% Tipsy','len'},
				{51.330,240/145/24,'*64 500% Drunk,*64 500% Tipsy','len'},
				{51.537,240/145/24,'*64 -500% Drunk,*64 -500% Tipsy','len'},
				{52.158,240/145/24,'*64 500% Drunk,*64 500% Tipsy','len'},
				{52.365,240/145/24,'*64 -500% Drunk,*64 -500% Tipsy','len'},
				
				{43.572,240/145,'*16 Reverse','len'},
				{45.227,240/145,'*16 No Reverse','len'},
				{46.882,240/145,'*16 Reverse','len'},
				{48.537,240/145,'*16 No Reverse','len'},
				{49.882,240/145/2,'*16 Reverse','len'},
				{50.710,240/145/2,'*16 No Reverse','len'},
				{51.537,240/145/2,'*16 Reverse','len'},
				{52.365,240/145/2,'*16 No Reverse','len'},
				
				{48.848,50.503,'*24 No Mini','len'},
				{48.848,0.050,'*10000 200% Mini','len'},
				{48.986,0.050,'*10000 200% Mini','len'},
				{49.123,0.050,'*10000 200% Mini','len'},
				{49.261,0.050,'*10000 200% Mini','len'},
				{49.399,0.050,'*10000 200% Mini','len'},
				{49.537,0.050,'*10000 200% Mini','len'},
				
				{49.675,52.986,'*10000 No Dizzy,Blind','end'},
				{50.089,240/145/4,'*10000 1256% Dizzy','len'},
				{50.917,240/145/4,'*10000 -1256% Dizzy','len'},
				{51.744,240/145/4,'*10000 1256% Dizzy','len'},
				
				{52.986,55.365,'*24 -200% Tipsy','end'},
				{52.986,240/145/16,'*12 200% Tipsy','len'},
				{52.986+240/145/8*1,240/145/16,'*24 200% Tipsy','len'},
				{52.986+240/145/8*2,240/145/16,'*24 200% Tipsy','len'},
				{52.986+240/145/8*3,240/145/16,'*24 200% Tipsy','len'},
				{52.986+240/145/8*4,240/145/16,'*24 200% Tipsy','len'},
				{52.986+240/145/8*5,240/145/16,'*24 200% Tipsy','len'},
				{52.986+240/145/8*6,240/145/16,'*24 200% Tipsy','len'},
				{52.986+240/145/8*7,240/145/16,'*24 200% Tipsy','len'},
				{52.986+240/145/8*8,240/145/16,'*24 200% Tipsy','len'},
				{52.986+240/145/8*9,240/145/16,'*24 200% Tipsy','len'},
				{52.986+240/145/8*10,240/145/16,'*24 200% Tipsy','len'},
				{52.986+240/145/8*11,240/145/16,'*24 200% Tipsy','len'},
				{55.365,56.000,'*12 No Tipsy','end'},
				
				{55.468,999,'*10000 No Centered','end'}, -- make a cleaner transition for this
				
				{59.606,240/145/16*3,'*8 200% Mini,*20 -500% Flip','len'},
				{59.917,240/145/16*3,'*12 No Mini,*30 No Flip','len'},
				
				{62.089,240/145/16*3,'*16 -100% Flip,*8 50% Invert','len'},
				{62.399,240/145/16*3,'*42 150% Flip,*16 50% Invert','len'},
				{62.710,240/145/16*3,'*24 No Flip,*16 No Invert','len'},
				
				{64.365,66.020,'*128 No Bumpy','end'},
				{64.365,240/145/16,'*128 2000% Bumpy','len'},
				{65.192,240/145/16,'*128 2000% Bumpy','len'},
				
				{66.020,67.000,'*16 No Stealth','end'},
				{66.020,240/145/16,'*16 Stealth','len'},
				
				{66.020,68.710,'*10000 1.5x,*10000 Mini','end'},
				{66.227,68.710,'*0.8475 400% Centered,*48 No Drunk,*48 No Tipsy,Blind','end'},
				{68.710,70.365,'*2.5 No Centered,*1.15 2.5x,*1.15 No Mini','end'},
				
				{66.227,0.050,'*10000 400% Drunk','len'},
				{66.641,0.050,'*10000 -400% Drunk','len'},
				{67.054,0.050,'*10000 400% Tipsy','len'},
				{67.261,0.050,'*10000 400% Drunk','len'},
				{67.572,0.050,'*10000 -400% Tipsy','len'},
				{67.675,0.050,'*10000 -400% Drunk','len'},
				{67.779,0.050,'*10000 400% Drunk','len'},
				{67.882,0.050,'*10000 -400% Drunk','len'},
				{68.192,0.050,'*10000 400% Drunk','len'},
				
				{69.537,240/145/16*3,'*8 0x','len'},
				{69.848,71.000,'*16 No Tornado,*48 No Dizzy,*48 No Bumpy,*4 2.5x','end'},
				{69.848,0.050,'*10000 400% Tornado,*10000 1200% Dizzy,*10000 1200% Bumpy','len'},
				
				{72.848,240/145/16*3,'*8 200% Mini,*20 -500% Flip','len'},
				{73.158,240/145/16*3,'*12 No Mini,*30 No Flip','len'},
				
				{75.020,240/145/16,'*16 40% Mini','len'},
				{75.123,240/145/16,'*16 80% Mini','len'},
				{75.227,240/145/16,'*16 120% Mini','len'},
				
				{75.330,240/145/16*3,'*16 -100% Flip,*8 50% Invert,*8 80% Mini','len'},
				{75.641,240/145/16*3,'*42 150% Flip,*16 50% Invert,*8 40% Mini','len'},
				{75.951,240/145/16*3,'*24 No Flip,*16 No Invert,*8 No Mini','len'},
				
				{79.468,82.779,'*0.3 Brake,*0.6 200% Tornado','end'},
				
				{88.779,240/145/4,'*10000 1600% Beat','len'},
				
				{89.399,100.986,'*0.5 1000% Bumpy','end'},
				
				{100.986,102.641,'*16 No Drunk,*16 No Tipsy,*8 No Bumpy','end'},
				{100.986,0.050,'*10000 300% Drunk,*10000 300% Tipsy','len'},
				{101.296,0.050,'*10000 -300% Drunk,*10000 -300% Tipsy','len'},
				{101.606,0.050,'*10000 300% Drunk,*10000 300% Tipsy','len'},
				
				{101.917,240/145/16,'*8 15% Reverse,*8 15% Flip','len'},
				{102.020,240/145/8,'*8 30% Reverse,*8 30% Flip','len'},
				
				{102.227,115.882,'*2.5 Mini,*0.75 No Reverse,*0.75 No Flip,*4 5x,*2.5 Distant,*2.5 Wave','end'},
				
				{108.434,240/145/16,'*24 400% Drunk','len'},
				{108.537,240/145/16,'*48 -400% Drunk','len'},
				{108.641,240/145/16,'*48 400% Drunk','len'},
				{108.744,240/145/16,'*48 -400% Drunk','len'},
				{108.848,240/145/4,'*24 No Drunk','len'},
				
				{108.951,111.000,'*8 Mini','end'},
				{108.951,0.050,'*10000 -100% Mini','len'},
				
				{109.261,120.000,'*3.5 150% Bumpy','end'},
				
				{115.882,116.503,'*1.25 No Mini,5x,*2.5 Distant,Wave','end'},
				{116.503,200,'*0.6 200% Mini,5x,*2.5 Distant,Wave','end'},
				}
				
				
				
				for i = 89.399,100.800,240/145/4 do
					if i > 95.700 and i < 96.100 then table.insert(prefix_messages,{95.813,'VibBeat'}); end
					if i > 100.200 and i < 101.000 then table.insert(prefix_messages,{100.365,'VibBeat'}); end
					table.insert(prefix_messages,{i,'VibBeat'});
				end
				
				for i = 102.641,107.800,240/145/4 do
					if i > 105.600 and i < 106.000 then table.insert(prefix_messages,{105.744,'VibBeat'}); end
					if i > 107.300 and i < 107.800 then table.insert(prefix_messages,{107.399,'VibBeat'}); end
					table.insert(prefix_messages,{i,'VibBeat'});
					if i > 107.500 then
						table.insert(prefix_messages,{107.813,'VibBeat'});
						table.insert(prefix_messages,{108.123,'VibBeat'});
					end
				end
				
				for i = 109.261,111.800,240/145/4 do
					table.insert(prefix_messages,{i,'VibBeat'});
					if i > 112.261 then table.insert(prefix_messages,{107.813,'VibBeat'}); end
				end
				
				for i = 112.572,114.500,240/145/4 do
					table.insert(prefix_messages,{i,'VibBeat'});
				end
				
				prefix_plr = {};
				
				self:queuecommand('Update');
			end"
		
		UpdateCommand="%function(self)
		
			local beat = GAMESTATE:GetSongBeat();
			prefix_inc = prefix_inc + 1;
			
			-----------------------
			-- Player mod resets --
			-----------------------
			GAMESTATE:ApplyGameCommand('mod,clearall')
			
			--------------------------------------------------------------------------------------------
			-- Mod reader code originally coded by Taronuke, remade to support end times and lengths. --
			--------------------------------------------------------------------------------------------
			for i,v in pairs(prefix_mods) do
				if prefix_time >=v[1] then
					if (v[4] == 'len' and prefix_time <=v[1]+v[2]) or (v[4] == 'end' and prefix_time <=v[2]) then
						if table.getn(v) == 5 then
							GAMESTATE:ApplyGameCommand('mod,'..v[3],v[5]);
						else
							GAMESTATE:ApplyGameCommand('mod,'..v[3]);
						end
					end
				end
			end
			
			
			
			if beat >= 0 and not checked then
				
				table.insert(prefix_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP1'));
				table.insert(prefix_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP2'));
				checked = true;
				
				SCREENMAN:GetTopScreen():GetChild('Overlay'):hidden(1);
				SCREENMAN:GetTopScreen():GetChild('Underlay'):hidden(1);
				for i,v in pairs(prefix_plr) do
					local multi = -1; if i == 2 then multi = 1; end
					if v then
						v:rotationx(0);							
						v:rotationy(0);
						v:rotationz(0);
						v:x(SCREEN_CENTER_X+160*multi);
						v:y(SCREEN_CENTER_Y);
						v:zoomx(1);
						v:zoomy(1);
						v:GetChild('Judgment'):stopeffect();
						
						SCREENMAN:GetTopScreen():GetChild('ScoreP'..i):hidden(1);
						SCREENMAN:GetTopScreen():GetChild('LifeP'..i):hidden(1);
						
						v:y(SCREEN_CENTER_Y-135);
						
					end
				end
			end
			
			if beat >= 70 and fgcurcommand == 1 then
				for i,v in pairs(prefix_plr) do
					if v then
						v:y(SCREEN_CENTER_Y);
					end
				end
				fgcurcommand = fgcurcommand + 1;
			end
			
			if beat >= 126.5 and fgcurcommand == 2 then
				for i,v in pairs(prefix_plr) do
					local multi = -1; if i == 2 then multi = 1; end
					if v then
						v:linear(240/145/8*3);
						v:zoomx(2);
						v:addx(-128*multi);
						
						v:linear(240/145*1.5);
						v:zoomx(1);
						v:x(SCREEN_CENTER_X);
						v:y(SCREEN_CENTER_Y);
						
						v:GetChild('Judgment'):sleep(240/145/8*3);
						v:GetChild('Judgment'):linear(240/145*1.5);
						v:GetChild('Judgment'):x(160*multi);
						v:GetChild('Combo'):sleep(240/145/8*3);
						v:GetChild('Combo'):linear(240/145*1.5);
						v:GetChild('Combo'):x(160*multi);
					end
				end
				fgcurcommand = fgcurcommand + 1;
			end
			
			
			
			if beat >= 136 and fgcurcommand == 3 or
				beat >= 152 and fgcurcommand == 4 or
				beat >= 166 and fgcurcommand == 6 or
				beat >= 184 and fgcurcommand == 7 then
				for i,v in pairs(prefix_plr) do
					local multi = -1; if i == 2 then multi = 1; end
					if v then
						if fgcurcommand == 6 then
							v:linear(240/145/2);
							v:x(SCREEN_CENTER_X);
							
							v:GetChild('Judgment'):linear(240/145/2);
							v:GetChild('Judgment'):x(160*multi);
							v:GetChild('Combo'):linear(240/145/2);
							v:GetChild('Combo'):x(160*multi);
						end
						
						v:linear(240/145/16*3);
						v:rotationx(450);
						v:sleep(0);
						v:rotationx(0);
						v:zoomx(3);
						v:decelerate(240/145/16*3);
						v:zoomx(1);
					end
				end
				fgcurcommand = fgcurcommand + 1;
			end
			
			
			
			if beat >= 159.750 and fgcurcommand == 5 then
				for i,v in pairs(prefix_plr) do
					local multi = -1; if i == 2 then multi = 1; end
					if v then
						v:x(SCREEN_CENTER_X+multi*160);
						v:GetChild('Judgment'):x(0);
						v:GetChild('Combo'):x(0);
					end
				end
				fgcurcommand = fgcurcommand + 1;
			end
			
			
			
			
			-------------------------
			-- BEAT SPECIFIC STUFF --
			-------------------------
			
			if beat >= 72 and beat < 100 then
				for i,v in pairs(prefix_plr) do
					local multi = -1; if i == 2 then multi = 1; end
					if v then
						v:x(SCREEN_CENTER_X+multi*160-multi*auxvar:getaux());
						v:rotationz(auxvar:getaux()/320*360);
						v:y(SCREEN_CENTER_Y-math.abs(math.sin(auxvar:getaux()/320*math.pi))*200);
					end
				end
			end
			
			if beat >= 138 and beat < 144 or
				beat >= 146 and beat < 150 or
				beat >= 154 and beat <= 159.6 or
				beat >= 170 and beat <= 176 or
				beat >= 178 and beat <= 182 or
				beat >= 186 and beat <= 192 then
				for i,v in pairs(prefix_plr) do
					local multi = -1; if i == 2 then multi = 1; end
					if v then
						
						if beat < 160 then
							--v:zoom(1+math.abs(auxvar:getaux())/50);
							v:skewx(auxvar:getaux()/100);
							v:rotationz(auxvar:getaux()/4);
							v:x(SCREEN_CENTER_X-auxvar:getaux()*1.5);
						else
							v:skewx(auxvar:getaux()/50*multi);
							v:rotationz(auxvar:getaux()/2*multi);
							v:x(SCREEN_CENTER_X-auxvar:getaux()*5*multi);
						end
					end
					
					if beat > 170 then
						GAMESTATE:ApplyGameCommand('mod,*10000 '..math.abs(auxvar:getaux()*4)..' % Bumpy');
						SCREENMAN:GetTopScreen():zoom(1-math.abs(auxvar:getaux())/150);
						SCREENMAN:GetTopScreen():x(math.abs(auxvar:getaux())/150*SCREEN_CENTER_X);
						SCREENMAN:GetTopScreen():y(math.abs(auxvar:getaux())/150*SCREEN_CENTER_Y);
					end
				end
			end
			
			if beat >= 200 and beat < 2160 then
				for i,v in pairs(prefix_plr) do
					local multi = -1; if i == 2 then multi = 1; end
					if v then
						v:vibrate();
						v:effectmagnitude(0,0,auxvar:getaux());
						
						if math.mod(prefix_inc,2) == 0 then
							if i == 1 then
								v:z(auxvar:getaux()*1);
							else
								v:z(auxvar:getaux()*2);
							end
						else
							if i == 1 then
								v:z(auxvar:getaux()*-1);
							else
								v:z(auxvar:getaux()*-2);
							end
						end
					end
				end
			end
			
			--------------------------------------------------------------
			-- Message reader to make specific values of the actor aux. --
			--------------------------------------------------------------
			if prefix_curmessage <= table.getn(prefix_messages) then
				if prefix_time >= prefix_messages[prefix_curmessage][1] then
					MESSAGEMAN:Broadcast(prefix_messages[prefix_curmessage][2]);
					prefix_curmessage = prefix_curmessage + 1;
				end
			end
			
			self:queuecommand('Update2');
			
		end"


		Update2Command="%function(self)
		self:sleep(0.02);
		self:queuecommand('Update');
		end"

	/>
	
	<BitmapText
		Font="Common Normal"
		Text="test"
		OnCommand="x,SCREEN_CENTER_X;y,SCREEN_CENTER_Y;effectclock,music;playcommand,SetTime;hidden,1"
		SetTimeCommand="%function(self) self:settext(self:GetSecsIntoEffect()); prefix_time = PREFSMAN:GetPreference('GlobalOffsetSeconds') - (-0.008 - 0.005) + tonumber(self:GetText()); self:sleep(0.02); self:queuecommand('SetTime'); end"
	/>
	
	<!-- Aux actor, VERY IMPORTANT -->
	<Layer
		Type="Quad"
		OnCommand=""
		InitCommand="%function(self) auxvar = self; self:hidden(1) end"
		JiggyMessageCommand="finishtweening;aux,0;decelerate,240/145/32*3;aux,100;accelerate,240/145/32*3;aux,0;decelerate,240/145/32*3;aux,-100;accelerate,240/145/32*3;aux,0"
		JumpMessageCommand="finishtweening;aux,0;linear,240/145/8;aux,320"
		JumpBackMessageCommand="finishtweening;aux,320;linear,240/145/8;aux,0"
		VibMultiMessageCommand="finishtweening;aux,0;linear,240/145/4*14;aux,250;linear,240/145/4;aux,0"
		VibBeatMessageCommand="finishtweening;aux,200;linear,240/145/16*3;aux,0"
		ViolentSpinMessageCommand="%function()
			for i,v in pairs(prefix_plr) do
				if v then
					v:rotationz(0);
					v:linear(240/145/4);
					v:rotationz(720);
				end
			end
		end"
		ViolentSpinBackMessageCommand="%function()
			for i,v in pairs(prefix_plr) do
				if v then
					v:linear(240/145/4);
					v:rotationz(0);
				end
			end
		end"
		HeyMessageCommand="%function()
			for i,v in pairs(prefix_plr) do
				if v then
					v:linear(240/145/32);
					v:zoom(2.5);
					v:rotationz(-45);
					v:linear(240/145/32*3);
					v:zoom(1);
					v:rotationz(0);
				end
			end
		end"
	/>
	
	
	
</children></ActorFrame>