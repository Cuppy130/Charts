<ActorFrame><children>

	<Layer
		Type="Quad"
		InitCommand="hidden,1"
		OnCommand="sleep,GAMESTATE:GetCurrentSong():MusicLengthSeconds()"
	/>
	
	<Layer
		Type="Quad"
		InitCommand="hidden,1"
		OnCommand="%function(self)
				fgcurcommand = 1;
				checked = false;
				prefix_time = 0;
				
				prefix_curmessage = 1;
				
				
				prefix_messages = {
				--{25.612,'SkewTwitch'},
				};
				
				
				prefix_mods = {
				
				{0,200,'2.25x,-999999% Cover,*10000 No Beat','end'},
				
				{0,12.812,'*64 2.25x,*16 No Flip,*16 No Invert,*10000 No Dark','end'},
				{6.812,0.200,'*32 100x','len'},
				{7.612,0.200,'*32 100x','len'},
				{8.412,0.200,'*32 100x','len'},
				{10.012,0.200,'*32 100x','len'},
				
				{0.012,0.312,'*10000 Dark','end',1},
				{0.312,0.612,'*10000 Dark','end',2},
				{0.612,0.812,'*10000 Dark','end',1},
				{0.812,1.012,'*10000 Dark','end',2},
				{1.012,1.212,'*10000 Dark','end',1},
				{1.212,1.412,'*10000 Dark','end',2},
				{1.412,1.512,'*10000 Dark','end',1},
				{1.512,1.612,'*10000 Dark','end',2},
				{1.612,1.912,'*10000 Dark','end',1},
				{1.912,2.212,'*10000 Dark','end',2},
				{2.212,2.412,'*10000 Dark','end',1},
				{2.412,2.545,'*10000 Dark','end',2},
				{2.545,2.679,'*10000 Dark','end',1},
				{2.679,2.812,'*10000 Dark','end',2},
				{2.812,2.912,'*10000 Dark','end',1},
				{2.912,3.212,'*10000 Dark','end',2},
				{3.212,3.512,'*10000 Dark','end',1},
				{3.512,3.812,'*10000 Dark','end',2},
				{3.812,4.012,'*10000 Dark','end',1},
				{4.012,4.212,'*10000 Dark','end',2},
				{4.212,4.412,'*10000 Dark','end',1},
				{4.412,4.612,'*10000 Dark','end',2},
				{4.612,4.812,'*10000 Dark','end',1},
				{4.812,5.112,'*10000 Dark','end',2},
				{5.112,5.412,'*10000 Dark','end',1},
				{5.412,5.612,'*10000 Dark','end',2},
				{5.612,5.812,'*10000 Dark','end',1},
				{5.812,6.012,'*10000 Dark','end',2},
				
				{6.412,11.212,'*16 No Mini','end'},
				{6.412,0.050,'*10000 -100% Mini','len'},
				{7.112,0.050,'*10000 -100% Mini','len'},
				{8.012,0.050,'*10000 -100% Mini','len'},
				{8.712,0.050,'*10000 -100% Mini','len'},
				{9.612,0.050,'*10000 -100% Mini','len'},
				{10.312,0.050,'*10000 -100% Mini','len'},
				{10.812,0.050,'*10000 -100% Mini','len'},
				
				
				{6.812,240/150/24,'*16 Invert','len'},
				{6.812+240/150/24*1,240/150/24,'*16 Flip','len'},
				{6.812+240/150/24*2,240/150/24,'*16 -100% Invert,*16 Flip','len'},
				
				{10.012,240/150/24,'*16 Invert','len'},
				{10.012+240/150/24*1,240/150/24,'*16 Flip','len'},
				{10.012+240/150/24*2,240/150/24,'*16 -100% Invert,*16 Flip','len'},
				
				{11.212,12.412,'*1.5 200% Mini','end'},
				{12.412,0.100,'*16 135% Mini','len'},
				{12.512,0.100,'*16 90% Mini','len'},
				{12.612,0.100,'*16 45% Mini','len'},
				{12.712,0.100,'*16 No Mini','len'},
				
				{12.412,24.012,'*8 200% Bumpy','end'},
				
				{20.412,1.000,'*32 No Dizzy,*2.5 No Stealth,*1.25 No Dark','len'},
				{20.412,0.050,'*10000 1000% Dizzy,*10000 Stealth,*10000 Dark','len'},
				
				{22.012,240/150/4,'*16 0.5x,*16 No Bumpy','len'},
				{22.412,240/150/4,'*16 2.25x,*16 200% Bumpy','len'},
				
				{24.012,25.612,'*8 No Bumpy','end'},
				
				{24.012,25.212,'*1.5 0.25x','end'},
				{25.212,0.100,'*8 0.75x','len'},
				{25.312,0.100,'*8 1.25x','len'},
				{25.412,0.100,'*8 1.75x','len'},
				{25.512,0.100,'*8 2.25x','len'},
				
				{25.212,36.812,'*2 -50% Tornado,*2 50% Flip,*4 Wave','end'},
				
				{36.812,38.012,'*2 0x,*2 No Wave','end'},
				{38.012,44.412,'*10000 45% Reverse,*16 8x,*10000 -850% Centered,*8 -200% Mini,*0.8 20% Flip,*10 500% Bumpy,*1 50% Drunk','end'},
				{43.212,44.412,'*0.9 Stealth','end'},
				{44.412,44.812,'*4 No Stealth,*10000 No Reverse,*10000 No Centered,*10000 2.25x,*8 No Mini,*0.8 No Flip,*10000 No Bumpy,*1 No Drunk','end'},
				
				{44.612,999,'*2 2.25x','end'},
				{44.612,0.200,'*16 0x','len'},
				{44.812,0.050,'*10000 Tornado','len'},
				{46.212,0.200,'*16 0x','len'},
				{46.412,0.050,'*10000 Tornado','len'},
				
				{48.012,51.212,'*1 No Drunk,*0.5 No Tipsy','len'},
				{48.012,0.100,'*20 200% Drunk,*10 100% Tipsy','len'},
				
				{48.012,51.012,'*0.35 Stealth','end'},
				{51.012,52.000,'*8 No Stealth','end'},
				
				{51.012,999,'*10000 No Dizzy,*8 No Invert','end'},
				{51.012,240/150/8,'*10000 1256% Dizzy','len'},
				{51.812,240/150/8,'*10000 -1256% Dizzy','len'},
				{52.612,240/150/8,'*10000 1256% Dizzy','len'},
				{54.212,240/150/8,'*10000 -1256% Dizzy','len'},
				{55.012,240/150/8,'*10000 1256% Dizzy','len'},
				{57.412,240/150/8,'*10000 -1256% Dizzy','len'},
				{58.212,240/150/8,'*10000 1256% Dizzy','len'},
				{59.012,240/150/8,'*10000 -1256% Dizzy','len'},
				{63.812,240/150/8,'*10000 1256% Dizzy','len'},
				{64.612,240/150/8,'*10000 -1256% Dizzy','len'},
				{65.412,240/150/8,'*10000 1256% Dizzy','len'},
				{67.012,240/150/8,'*10000 -1256% Dizzy','len'},
				{67.812,240/150/8,'*10000 1256% Dizzy','len'},
				{70.212,240/150/8,'*10000 -1256% Dizzy','len'},
				{71.012,240/150/8,'*10000 1256% Dizzy','len'},
				{71.812,240/150/8,'*10000 -1256% Dizzy','len'},
				
				{51.412,240/150/8,'*8 Invert','len'},
				{52.212,240/150/8,'*8 Invert','len'},
				{53.012,240/150/8,'*8 Invert','len'},
				{53.412,240/150/8,'*8 Invert','len'},
				{53.812,240/150/8,'*8 Invert','len'},
				{54.612,240/150/8,'*8 Invert','len'},
				{55.412,240/150/8,'*8 Invert','len'},
				{55.812,240/150/8,'*8 Invert','len'},
				{56.212,240/150/8,'*8 Invert','len'},
				{56.612,240/150/8,'*8 Invert','len'},
				{57.812,240/150/8,'*8 Invert','len'},
				{58.612,240/150/8,'*8 Invert','len'},
				{59.412,240/150/8,'*8 Invert','len'},
				{59.812,240/150/8,'*8 Invert','len'},
				{60.612,240/150/8,'*8 Invert','len'},
				{61.412,240/150/8,'*8 Invert','len'},
				
				{62.412,64.012,'*16 No Drunk,*16 No Tipsy','len'},
				{62.412,0.050,'*10000 200% Drunk,*10000 200% Tipsy','len'},
				{62.679,0.050,'*10000 -200% Drunk,*10000 -200% Tipsy','len'},
				{62.945,0.050,'*10000 200% Drunk,*10000 200% Tipsy','len'},
				{63.212,0.050,'*10000 -200% Drunk,*10000 -200% Tipsy','len'},
				
				{62.412,63.612,'0x','end'},
				
				{62.412,240/150/6,'*8 -50% Mini,*0.8 5% Flip','len'},
				{62.679,240/150/6,'*8 -100% Mini,*0.8 10% Flip','len'},
				{62.945,240/150/6,'*8 -150% Mini,*0.8 15% Flip','len'},
				{63.212,240/150/4,'*8 -200% Mini,*0.8 20% Flip','len'},
				
				{63.212,240/150/4,'*3 Stealth','len'},
				{63.612,69.612,'*3 No Stealth,*10000 45% Reverse,*10000 8x,*10000 -850% Centered,*8 -200% Mini,*0.8 20% Flip,*10 500% Bumpy,*1 50% Drunk,','end'},
				{69.612,70.412,'*3 No Stealth,*10000 No Reverse,*10000 2.5x,*10000 No Centered,*8 No Mini,*0.8 No Flip,*20 No Bumpy,*2 No Drunk,','end'},
				
				{70.612,240/150/8,'*8 Invert','len'},
				{71.412,240/150/8,'*8 Invert','len'},
				{72.212,240/150/8,'*8 Invert','len'},
				{72.612,240/150/8,'*8 Invert','len'},
				
				{75.212,77.612,'*1 200% Mini','end'},
				{77.612,79.212,'*1.25 No Mini','end'},
				
				{77.612,77.712,'*10000 1500% Bumpy','end'},
				{77.712,88.412,'*8 200% Bumpy','end'},
				
				{85.212,1.000,'*32 No Dizzy,*2.5 No Stealth,*1.25 No Dark','len'},
				{85.212,0.050,'*10000 1000% Dizzy,*10000 Stealth,*10000 Dark','len'},
				
				{86.812,240/150/4,'*16 0.5x,*16 No Bumpy','len'},
				{87.212,240/150/4,'*16 2.25x,*16 200% Bumpy','len'},
				
				{88.412,120.000,'*5 No Bumpy','end'},
				
				{88.812,0.300,'*8 30% Mini','len'},
				{89.112,0.300,'*8 60% Mini','len'},
				{89.412,0.300,'*8 90% Mini','len'},
				{89.712,0.300,'*8 120% Mini','len'},
				{90.012,0.200,'*8 150% Mini','len'},
				{90.212,120.000,'*8 180% Mini','end'},
				{90.812,120.000,'*0.4 180% Distant,*0.4 No Mini,*4 100x','end'},
				
				
				{12.612,18.212,'*10000 200% Beat','end'},
				{19.012,20.212,'*10000 200% Beat','end'},
				{20.612,21.812,'*10000 200% Beat','end'},
				{22.212,23.812,'*10000 200% Beat','end'},
				{25.412,37.812,'*10000 200% Beat','end'},
				--{38.212,44.212,'*10000 200% Beat','end'},
				{44.612,45.012,'*10000 200% Beat','end'},
				{46.212,47.012,'*10000 200% Beat','end'},
				{47.412,47.812,'*10000 200% Beat','end'},
				{51.012,62.212,'*10000 200% Beat','end'},
				{70.212,75.412,'*10000 200% Beat','end'},
				{79.012,83.012,'*10000 200% Beat','end'},
				{83.812,85.012,'*10000 200% Beat','end'},
				{85.412,86.612,'*10000 200% Beat','end'},
				{87.012,88.612,'*10000 200% Beat','end'},
				
				
				}
				
				
				
				prefix_plr = {};
				
				self:queuecommand('Update');
			end"
		
		UpdateCommand="%function(self)
		
			local beat = GAMESTATE:GetSongBeat();
			
			-----------------------
			-- Player mod resets --
			-----------------------
			GAMESTATE:ApplyGameCommand('mod,clearall')
			
			--------------------------------------------------------------------------------------------
			-- Mod reader code originally coded by Taronuke, remade to support end times and lengths. --
			--------------------------------------------------------------------------------------------
			for i,v in pairs(prefix_mods) do
				if prefix_time >=v[1] then
					if (v[4] == 'len' and prefix_time <=v[1]+v[2]) or (v[4] == 'end' and prefix_time <=v[2]) then
						if table.getn(v) == 5 then
							GAMESTATE:ApplyGameCommand('mod,'..v[3],v[5]);
						else
							GAMESTATE:ApplyGameCommand('mod,'..v[3]);
						end
					end
				end
			end
			
			
			
			if beat >= 0 and not checked then
				
				table.insert(prefix_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP1'));
				table.insert(prefix_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP2'));
				checked = true;
				
				SCREENMAN:GetTopScreen():GetChild('Overlay'):hidden(1);
				SCREENMAN:GetTopScreen():GetChild('Underlay'):hidden(1);
				for i,v in pairs(prefix_plr) do
					local multi = -1; if i == 2 then multi = 1; end
					if v then
						v:rotationx(0);							
						v:rotationy(0);
						v:rotationz(0);
						v:x(SCREEN_CENTER_X+160*multi);
						v:y(SCREEN_CENTER_Y);
						v:zoomx(1);
						v:zoomy(1);
						v:GetChild('Judgment'):stopeffect();
						
						SCREENMAN:GetTopScreen():GetChild('ScoreP'..i):hidden(1);
						SCREENMAN:GetTopScreen():GetChild('LifeP'..i):hidden(1);
					end
				end
			end
			
			if beat >= 60 and fgcurcommand == 1 then
				for i,v in pairs(prefix_plr) do
					if v then
						
					end
				end
				fgcurcommand = fgcurcommand + 1;
			end
			
			
			
			
			-------------------------
			-- BEAT SPECIFIC STUFF --
			-------------------------
			if beat > 64 and beat < 96 then
				for i,v in pairs(prefix_plr) do
					if v then
						--v:x(SCREEN_CENTER_X+(math.sin(beat*math.pi/2)*auxvar:getaux()))
					end
				end
			end
			
			--------------------------------------------------------------
			-- Message reader to make specific values of the actor aux. --
			--------------------------------------------------------------
			if prefix_curmessage <= table.getn(prefix_messages) then
				if prefix_time >= prefix_messages[prefix_curmessage][1] then
					MESSAGEMAN:Broadcast(prefix_messages[prefix_curmessage][2]);
					prefix_curmessage = prefix_curmessage + 1;
				end
			end
			
			self:queuecommand('Update2');
			
		end"


		Update2Command="%function(self)
		self:sleep(0.02);
		self:queuecommand('Update');
		end"

	/>
	
	<BitmapText
		Font="Common Normal"
		Text="test"
		OnCommand="x,SCREEN_CENTER_X;y,SCREEN_CENTER_Y;effectclock,music;playcommand,SetTime;hidden,1"
		SetTimeCommand="%function(self) self:settext(self:GetSecsIntoEffect()); prefix_time = PREFSMAN:GetPreference('GlobalOffsetSeconds') - (0.006 - 0.007) + tonumber(self:GetText()); self:sleep(0.02); self:queuecommand('SetTime'); end"
	/>
	
	<!-- Aux actor, VERY IMPORTANT -->
	<Layer
		Type="Quad"
		OnCommand=""
		InitCommand="%function(self) auxvar = self; self:hidden(1) end"
		SkewTwitchMessageCommand="finishtweening;aux,0;linear,9.6;aux,1.5;linear,1.6;aux,0"
	/>
	
</children></ActorFrame>