<ActorFrame><children>

	<Layer
		Type="Quad"
		InitCommand="hidden,1"
		OnCommand="sleep,GAMESTATE:GetCurrentSong():MusicLengthSeconds()"
	/>
	
	<Layer
		Type="Quad"
		InitCommand="hidden,1"
		OnCommand="%function(self)
				fgcurcommand = 1;
				checked = false;
				prefix_time = 0;
				
				prefix_curmessage = 1;
				
				
				prefix_messages = {
				
				{5.097,'FirstCollision'},
				{15.944,'FirstCollision'},
				
				{16.283,'PhaseOne'},
				{16.961,'PhaseTwo'},
				{17.639,'PhaseOne'},
				{18.995,'PhaseOne'},
				{19.673,'PhaseTwo'},
				
				{37.639,'FirstCollision'},
				{74.249,'FirstCollision'},
				
				{85.097,'FirstCollision'},
				
				{85.436,'PhaseOne'},
				{86.114,'PhaseTwo'},
				{86.792,'PhaseOne'},
				{88.148,'PhaseOne'},
				{88.826,'PhaseTwo'},

				{90.859,'SlideRight'},
				{93.571,'SlideLeft'},
				{96.283,'SlideRight'},
				{98.995,'SlideLeft'},
				{101.707,'SlideRight'},
				{104.419,'SlideLeft'},
				{107.131,'SlideRight'},
				{109.843,'SlideLeft'},
				
				};
				
				
				prefix_mods = {
				
				{0,200,'2x,-999999% Cover,*10000 No Beat','end'},
				
				{9.504,10.181,'*4 400% Drunk,*2 200% Tipsy','end'},
				{10.181,11.000,'*4 No Drunk,*2 No Tipsy','end'},
				
				{10.690,15.436,'*10000 800% Beat','end'},
				
				{0,37.978,'*16 No Invert,*16 No Flip','end'},
				{0.266,240/177/16*3,'*16 Flip','len'},
				{0.944,240/177/16*3,'*16 Flip','len'},
				{1.198,240/177/16,'*16 Invert','len'},
				{1.368,240/177/8,'*32 210% Distant','len'},
				{1.368+240/177/8,240/177/16,'*32 140% Distant','len'},
				{1.368+240/177/16*3,240/177/16*3,'*32 70% Distant','len'},
				{1.368+240/177/4*1.5,240/177/8,'*32 Overhead','len'},
				{2.046,240/177/2,'*24 No Mini','len'},
				{2.046,240/177/8,'*24 150% Mini','len'},
				{2.046+240/177/16*3,240/177/16*3,'*24 150% Mini','len'},
				{2.978,240/177/16*3,'*16 Flip','len'},
				{3.656,240/177/16*3,'*16 Flip','len'},
				{3.910,240/177/16,'*16 Invert','len'},
				{4.080,240/177/8,'*32 210% Distant','len'},
				{4.080+240/177/8,240/177/16,'*32 140% Distant','len'},
				{4.080+240/177/16*3,240/177/16*3,'*32 70% Distant','len'},
				{4.080+240/177/4*1.5,240/177/8,'*32 Overhead','len'},
				{5.690,240/177/16*3,'*16 Flip','len'},
				{6.368,240/177/16*3,'*16 Flip','len'},
				{6.622,240/177/16,'*16 Invert','len'},
				{6.792,240/177/8,'*32 210% Distant','len'},
				{6.792+240/177/8,240/177/16,'*32 140% Distant','len'},
				{6.792+240/177/16*3,240/177/16*3,'*32 70% Distant','len'},
				{6.792+240/177/4*1.5,240/177/8,'*32 Overhead','len'},
				{7.470,240/177/2,'*24 No Mini','len'},
				{7.470,240/177/8,'*24 150% Mini','len'},
				{7.470+240/177/16*3,240/177/16*3,'*24 150% Mini','len'},
				{8.402,240/177/16*3,'*16 Flip','len'},
				{9.080,240/177/16*3,'*16 Flip','len'},
				{9.334,240/177/16,'*16 Invert','len'},
				{11.114,240/177/16*3,'*16 Flip','len'},
				{11.792,240/177/16*3,'*16 Flip','len'},
				{12.046,240/177/16,'*16 Invert','len'},
				{12.215,240/177/8,'*32 210% Distant','len'},
				{12.215+240/177/8,240/177/16,'*32 140% Distant','len'},
				{12.215+240/177/16*3,240/177/16*3,'*32 70% Distant','len'},
				{12.215+240/177/4*1.5,240/177/8,'*32 Overhead','len'},
				{12.893,240/177/2,'*24 No Mini','len'},
				{12.893,240/177/8,'*24 150% Mini','len'},
				{12.893+240/177/16*3,240/177/16*3,'*24 150% Mini','len'},
				{13.826,240/177/16*3,'*16 Flip','len'},
				{14.504,240/177/16*3,'*16 Flip','len'},
				{14.758,240/177/16,'*16 Invert','len'},
				{14.927,240/177/8,'*32 210% Distant','len'},
				{14.927+240/177/8,240/177/16,'*32 140% Distant','len'},
				{14.927+240/177/16*3,240/177/16*3,'*32 70% Distant','len'},
				{14.927+240/177/4*1.5,240/177/8,'*32 Overhead','len'},
				{15.944,20.351,'*10000 Hidden','end',1},
				{15.944,20.351,'*10000 Sudden','end',2},
				
				{18.317,240/177/2,'*24 No Mini','len'},
				{18.317,240/177/8,'*24 150% Mini','len'},
				{18.317+240/177/16*3,240/177/16*3,'*24 150% Mini','len'},
				
				{15.605,20.351,'*2 1.75x','end'},
				{20.351,37.639,'*2 1.5x,*8 800% Bumpy','end'},
				
				{32.385,240/177/4,'*10000 800% Beat','len'},
				
				{33.232,240/177/4,'*4 0x','len'},
				{33.571,240/177/4,'*16 1.5x','len'},
				
				{34.588,240/177/16,'*32 400% Drunk','len'},
				{34.673,240/177/16,'*64 -400% Drunk','len'},
				{34.758,240/177/16,'*64 400% Drunk','len'},
				{34.843,240/177/16,'*64 -400% Drunk','len'},
				{34.927,240/177/4,'*32 No Drunk','len'},
				
				{35.097,240/177/16,'*64 1000% Dizzy','len'},
				{35.187,240/177/4,'*64 No Dizzy','len'},
				
				{35.436,240/177/4,'*2 200% Centered','len'},
				{35.775,240/177/4,'*4 No Centered','len'},
				
				{36.453,240/177/8,'*8 200% Distant','len'},
				{36.622,240/177/4,'*16 No Distant','len'},
				
				{36.792,240/177/8,'*8 -50% Flip','len'},
				{36.961,240/177/8,'*8 -100% Flip','len'},
				{37.131,240/177/16,'*24 50% Flip','len'},
				{37.215,240/177/4,'*4 No Flip','len'},
				
				{37.300,240/177/4,'*4 Stealth','len'},
				
				{37.639,40.000,'*2 2x,*24 No Bumpy,*4 No Stealth','end'},
				
				{37.639,37.978,'*6 200% Mini','end'},
				{37.978,40.690,'*10000 200% Mini,*10000 No Flip,','end'},
				{40.690,43.402,'*2 No Centered','end'},
				
				{37.978,240/177/16*5,'*12 -500% Mini','len',1},
				{38.232,240/177/16*3,'*10 -500% Flip','len',1},
				{38.487,240/177/16*4,'*15 -500% Mini','len',1},
				{38.656,240/177/16*2,'*12.5 -500% Flip','len',1},
				{38.910,240/177/16*4,'*12 -500% Mini','len',1},
				{39.165,240/177/16*2,'*24 -500% Flip','len',1},
				{39.334,240/177/16*5,'*12 -500% Mini','len',1},
				{39.588,240/177/16*3,'*10 -500% Flip','len',1},
				{39.843,240/177/16*5,'*15 -500% Mini','len',1},
				{40.012,240/177/16*3,'*10 -500% Flip','len',1},
				{40.351,40.690,'*8 No Mini','end',1},
				
				{38.232,240/177/16*4,'*12 -500% Mini','len',2},
				{38.487,240/177/16*2,'*24 -500% Flip','len',2},
				{38.656,240/177/16*5,'*12 -500% Mini','len',2},
				{38.910,240/177/16*3,'*10 -500% Flip','len',2},
				{39.165,240/177/16*4,'*15 -500% Mini','len',2},
				{39.334,240/177/16*2,'*12.5 -500% Flip','len',2},
				{39.588,240/177/16*4,'*12 -500% Mini','len',2},
				{39.843,240/177/16*2,'*24 -500% Flip','len',2},
				{40.012,40.690,'*8 No Mini','end',2},
				
				{40.690,240/177/16*3,'*2 200% Centered','len',1},
				{41.198,240/177/16*2,'*2 200% Centered','len',1},
				{41.622,240/177/16*3,'*2 200% Centered','len',1},
				{40.944,240/177/16*3,'*2 200% Centered','len',2},
				{41.368,240/177/16*3,'*2 200% Centered','len',2},
				{41.876,240/177/16*2,'*2 200% Centered','len',2},
				
				{43.063,44.000,'*12 No Invert','end',1},
				{43.063,240/177/16,'*12 Invert','len',1},
				{43.232,240/177/16,'*12 Invert','len',1},
				
				{42.046,55.605,'*0.85 Reverse','end'},
				{43.402,55.605,'*2 250% Hallway,*2 -90% Flip,*2 50% Mini,*2 -110% Centered,*8 8x','end'},
				
				{46.114,56.961,'*4 No Bumpy,*32 No Drunk','end'},
				{46.114,240/177*2,'*4 5000% Bumpy','len'},
				{51.537,240/177*2,'*4 5000% Bumpy','len'},
				
				{48.826,240/177/16,'*32 1000% Drunk','len'},
				{48.826+240/177/16*1,240/177/16,'*64 -1000% Drunk','len'},
				{48.826+240/177/16*2,240/177/16,'*64 1000% Drunk','len'},
				{48.826+240/177/16*3,240/177/16,'*64 -1000% Drunk','len'},
				{48.826+240/177/16*4,240/177/16,'*64 1000% Drunk','len'},
				
				{51.537,240/177/16,'*32 1000% Drunk','len'},
				{51.537+240/177/16*1,240/177/16,'*64 -1000% Drunk','len'},
				{51.537+240/177/16*2,240/177/16,'*64 1000% Drunk','len'},
				{51.537+240/177/16*3,240/177/16,'*64 -1000% Drunk','len'},
				
				{54.249,240/177/16,'*32 1000% Drunk','len'},
				{54.249+240/177/16*1,240/177/16,'*64 -1000% Drunk','len'},
				{54.249+240/177/16*2,240/177/16,'*64 1000% Drunk','len'},
				{54.249+240/177/16*3,240/177/16,'*64 -1000% Drunk','len'},
				{54.249+240/177/16*4,240/177/16,'*64 1000% Drunk','len'},
				
				{55.605,56.622,'*8 1.5x,*4 Overhead,*2 No Centered,*8 No Bumpy','end'},
				
				{56.622,67.470,'*10000 500% Invert,*6 No Mini,1.5x,*16 400% Bumpy','end'},
				{56.622,67.470,'*8 200% Drunk','end',1},
				{56.622,67.470,'*8 -200% Drunk','end',2},
				
				{56.961,240/177/16,'*24 -500% Mini','len',1},
				{57.470,240/177/16,'*24 -500% Mini','len',2},
				{57.978,240/177/16,'*24 -500% Mini','len',1},
				{58.487,240/177/16,'*24 -500% Mini','len',2},
				{58.995,240/177/16,'*24 -500% Mini','len',1},
				{59.334,240/177/16,'*24 -500% Mini','len',2},
				
				{56.961+240/177*2,240/177/16,'*24 -250% Mini','len',1},
				{57.470+240/177*2,240/177/16,'*24 -250% Mini','len',2},
				{57.978+240/177*2,240/177/16,'*24 -250% Mini','len',1},
				{58.487+240/177*2,240/177/16,'*24 -250% Mini','len',2},
				{58.995+240/177*2,240/177/16,'*24 -250% Mini','len',1},
				{59.334+240/177*2,240/177/16,'*24 -250% Mini','len',2},
				
				{56.961+240/177*4,240/177/16,'*24 -250% Mini','len',1},
				{57.470+240/177*4,240/177/16,'*24 -250% Mini','len',2},
				{57.978+240/177*4,240/177/16,'*24 -250% Mini','len',1},
				{58.487+240/177*4,240/177/16,'*24 -250% Mini','len',2},
				{58.995+240/177*4,240/177/16,'*24 -250% Mini','len',1},
				{59.334+240/177*4,240/177/16,'*24 -250% Mini','len',2},
				
				{56.961+240/177*6,240/177/16,'*24 -250% Mini','len',1},
				{57.470+240/177*6,240/177/16,'*24 -250% Mini','len',2},
				{57.978+240/177*6,240/177/16,'*24 -250% Mini','len',1},
				{58.487+240/177*6,240/177/16,'*24 -250% Mini','len',2},
				
				{67.131,67.470,'*10000 500% Invert,*16 No Bumpy,*8 No Drunk','end'},
				{67.470,67.809,'*10000 No Invert,*16 No Bumpy,*8 No Drunk','end'},
				
				{67.809,68.487,'*4 Stealth,*4 Dark','end'},
				{68.487,69.165,'*4 No Stealth,*10000 Wave','end'},
				{68.487,79.334,'*4 Dark,*10000 Wave','end'},
				
				{69.153+0,69.153+37.978,'*16 No Invert,*16 No Flip','end'},
				{69.153+0.266,240/177/16*3,'*16 Flip','len'},
				{69.153+0.944,240/177/16*3,'*16 Flip','len'},
				{69.153+1.198,240/177/16,'*16 Invert','len'},
				{69.153+1.368,240/177/8,'*32 210% Distant','len'},
				{69.153+1.368+240/177/8,240/177/16,'*32 140% Distant','len'},
				{69.153+1.368+240/177/16*3,240/177/16*3,'*32 70% Distant','len'},
				{69.153+1.368+240/177/4*1.5,240/177/8,'*32 Overhead','len'},
				{69.153+2.046,240/177/2,'*24 No Mini','len'},
				{69.153+2.046,240/177/8,'*24 150% Mini','len'},
				{69.153+2.046+240/177/16*3,240/177/16*3,'*24 150% Mini','len'},
				{69.153+2.978,240/177/16*3,'*16 Flip','len'},
				{69.153+3.656,240/177/16*3,'*16 Flip','len'},
				{69.153+3.910,240/177/16,'*16 Invert','len'},
				{69.153+4.080,240/177/8,'*32 210% Distant','len'},
				{69.153+4.080+240/177/8,240/177/16,'*32 140% Distant','len'},
				{69.153+4.080+240/177/16*3,240/177/16*3,'*32 70% Distant','len'},
				{69.153+4.080+240/177/4*1.5,240/177/8,'*32 Overhead','len'},
				{69.153+5.690,240/177/16*3,'*16 Flip','len'},
				{69.153+6.368,240/177/16*3,'*16 Flip','len'},
				{69.153+6.622,240/177/16,'*16 Invert','len'},
				{69.153+6.792,240/177/8,'*32 210% Distant','len'},
				{69.153+6.792+240/177/8,240/177/16,'*32 140% Distant','len'},
				{69.153+6.792+240/177/16*3,240/177/16*3,'*32 70% Distant','len'},
				{69.153+6.792+240/177/4*1.5,240/177/8,'*32 Overhead','len'},
				{69.153+7.470,240/177/2,'*24 No Mini','len'},
				{69.153+7.470,240/177/8,'*24 150% Mini','len'},
				{69.153+7.470+240/177/16*3,240/177/16*3,'*24 150% Mini','len'},
				{69.153+8.402,240/177/16*3,'*16 Flip','len'},
				{69.153+9.080,240/177/16*3,'*16 Flip','len'},
				{69.153+9.334,240/177/16,'*16 Invert','len'},
				{69.153+11.114,240/177/16*3,'*16 Flip','len'},
				{69.153+11.792,240/177/16*3,'*16 Flip','len'},
				{69.153+12.046,240/177/16,'*16 Invert','len'},
				{69.153+12.215,240/177/8,'*32 210% Distant','len'},
				{69.153+12.215+240/177/8,240/177/16,'*32 140% Distant','len'},
				{69.153+12.215+240/177/16*3,240/177/16*3,'*32 70% Distant','len'},
				{69.153+12.215+240/177/4*1.5,240/177/8,'*32 Overhead','len'},
				{69.153+12.893,240/177/2,'*24 No Mini','len'},
				{69.153+12.893,240/177/8,'*24 150% Mini','len'},
				{69.153+12.893+240/177/16*3,240/177/16*3,'*24 150% Mini','len'},
				{69.153+13.826,240/177/16*3,'*16 Flip','len'},
				{69.153+14.504,240/177/16*3,'*16 Flip','len'},
				{69.153+14.758,240/177/16,'*16 Invert','len'},
				{69.153+14.927,240/177/8,'*32 210% Distant','len'},
				{69.153+14.927+240/177/8,240/177/16,'*32 140% Distant','len'},
				{69.153+14.927+240/177/16*3,240/177/16*3,'*32 70% Distant','len'},
				{69.153+14.927+240/177/4*1.5,240/177/8,'*32 Overhead','len'},
				
				{71.198,240/177/16,'*16 12.5% Reverse','len'},
				{71.198+240/177/16*1,240/177/16,'*16 25% Reverse','len'},
				{71.198+240/177/16*2,240/177/16,'*16 37.5% Reverse','len'},
				{71.198+240/177/16*3,240/177/16,'*16 50% Reverse','len'},
				{71.198+240/177/16*4,240/177/16,'*16 62.5% Reverse','len'},
				{71.198+240/177/16*5,240/177/16,'*16 75% Reverse','len'},
				{71.198+240/177/16*6,240/177/16,'*16 87.5% Reverse','len'},
				{71.198+240/177/16*7,76.622,'*16 100.01% Reverse','end'},
				
				{76.622,240/177/16,'*16 87.5% Reverse','len'},
				{76.622+240/177/16*1,240/177/16,'*16 75% Reverse','len'},
				{76.622+240/177/16*2,240/177/16,'*16 62.5% Reverse','len'},
				{76.622+240/177/16*3,240/177/16,'*16 50% Reverse','len'},
				{76.622+240/177/16*4,240/177/16,'*16 37.5% Reverse','len'},
				{76.622+240/177/16*5,240/177/16,'*16 25% Reverse','len'},
				{76.622+240/177/16*6,240/177/16,'*16 12.5% Reverse','len'},
				{76.622+240/177/16*7,78.000,'*16 No Reverse','end'},
				
				{78.656,79.334,'*4 400% Drunk,*2 200% Tipsy','end'},
				{79.334,80.012,'*4 No Drunk,*2 No Tipsy,*2 No Dark','end'},
				
				{79.843,84.588,'*10000 400% Beat','end'},
				
				{82.046,240/177/16,'*16 12.5% Reverse','len'},
				{82.046+240/177/16*1,240/177/16,'*16 25% Reverse','len'},
				{82.046+240/177/16*2,240/177/16,'*16 37.5% Reverse','len'},
				{82.046+240/177/16*3,240/177/16,'*16 50% Reverse','len'},
				{82.046+240/177/16*4,240/177/16,'*16 62.5% Reverse','len'},
				{82.046+240/177/16*5,240/177/16,'*16 75% Reverse','len'},
				{82.046+240/177/16*6,240/177/16,'*16 87.5% Reverse','len'},
				{82.046+240/177/16*7,87.470,'*16 100.01% Reverse','end'},
				
				{87.470,240/177/16,'*16 87.5% Reverse','len'},
				{87.470+240/177/16*1,240/177/16,'*16 75% Reverse','len'},
				{87.470+240/177/16*2,240/177/16,'*16 62.5% Reverse','len'},
				{87.470+240/177/16*3,240/177/16,'*16 50% Reverse','len'},
				{87.470+240/177/16*4,240/177/16,'*16 37.5% Reverse','len'},
				{87.470+240/177/16*5,240/177/16,'*16 25% Reverse','len'},
				{87.470+240/177/16*6,240/177/16,'*16 12.5% Reverse','len'},
				{87.470+240/177/16*7,78.000,'*16 No Reverse','end'},
				
				{87.470+240/177/16*7,78.000,'*16 No Reverse','end'},
				
				{85.097,90.181,'*10000 -500% Flip,*10000 500% Invert','end'},
				{89.504,90.181,'*4 Stealth,*4 Dark','end'},
				{90.181,90.859,'*10000 50% Mini,*10000 1000% Invert,*10000 No Flip,*10000 2.5x','end'},
				
				{90.859,999,'*10000 50% Mini,*10000 1000% Invert,*10000 2.5x','end'},
				
				{92.893+240/177/16*0,240/177/8,'*8 25% Reverse','len',1},
				{92.893+240/177/16*1,240/177/8,'*8 25% Reverse','len',2},
				{92.893+240/177/16*2,240/177/8,'*8 50% Reverse','len',1},
				{92.893+240/177/16*3,240/177/8,'*8 50% Reverse','len',2},
				{92.893+240/177/16*4,240/177/8,'*8 75% Reverse','len',1},
				{92.893+240/177/16*5,240/177/8,'*8 75% Reverse','len',2},
				{92.893+240/177/16*6,95.605,'*8 100.01% Reverse','end',1},
				{92.893+240/177/16*7,95.605,'*8 100.01% Reverse','end',2},
				
				{95.605,240/177/16*3,'*8 66% Reverse','len'},
				{95.859,240/177/16*3,'*8 33% Reverse','len'},
				{96.114,240/177/16*3,'*8 No Reverse','len'},
				
				{98.317+240/177/16*0,240/177/8,'*8 25% Reverse','len',1},
				{98.317+240/177/16*1,240/177/8,'*8 25% Reverse','len',2},
				{98.317+240/177/16*2,240/177/8,'*8 50% Reverse','len',1},
				{98.317+240/177/16*3,240/177/8,'*8 50% Reverse','len',2},
				{98.317+240/177/16*4,240/177/8,'*8 75% Reverse','len',1},
				{98.317+240/177/16*5,240/177/8,'*8 75% Reverse','len',2},
				{98.317+240/177/16*6,103.741,'*8 100.01% Reverse','end',1},
				{98.317+240/177/16*7,103.741,'*8 100.01% Reverse','end',2},
				
				{103.741+240/177/16*0,240/177/8,'*8 75% Reverse','len',1},
				{103.741+240/177/16*1,240/177/8,'*8 75% Reverse','len',2},
				{103.741+240/177/16*2,240/177/8,'*8 50% Reverse','len',1},
				{103.741+240/177/16*3,240/177/8,'*8 50% Reverse','len',2},
				{103.741+240/177/16*4,240/177/8,'*8 25% Reverse','len',1},
				{103.741+240/177/16*5,240/177/8,'*8 25% Reverse','len',2},
				{103.741+240/177/16*6,109.165,'*8 No Reverse','end',1},
				{103.741+240/177/16*7,109.165,'*8 No Reverse','end',2},
				
				{109.165+240/177/16*0,240/177/8,'*8 25% Reverse','len',1},
				{109.165+240/177/16*1,240/177/8,'*8 25% Reverse','len',2},
				{109.165+240/177/16*2,240/177/8,'*8 50% Reverse','len',1},
				{109.165+240/177/16*3,240/177/8,'*8 50% Reverse','len',2},
				{109.165+240/177/16*4,240/177/8,'*8 75% Reverse','len',1},
				{109.165+240/177/16*5,240/177/8,'*8 75% Reverse','len',2},
				{109.165+240/177/16*6,111.876,'*8 100.01% Reverse','end',1},
				{109.165+240/177/16*7,111.876,'*8 100.01% Reverse','end',2},
				
				{111.876,240/177/16*3,'*8 16% Reverse','len'},
				{112.131,240/177/16*3,'*8 33% Reverse','len'},
				{112.385,120.000,'*8 50% Reverse','end'},
				{112.554,120.000,'*16 5000% Tipsy,*16 5000% Bumpy,*10000 Centered,*10000 No Reverse,*10000 0x','end'},
				{112.724,120.000,'*2 100x,600% Distant','end'},
				
				}
				
				
				
				prefix_plr = {};
				
				self:queuecommand('Update');
			end"
		
		UpdateCommand="%function(self)
		
			local beat = GAMESTATE:GetSongBeat();
			
			-----------------------
			-- Player mod resets --
			-----------------------
			GAMESTATE:ApplyGameCommand('mod,clearall')
			
			--------------------------------------------------------------------------------------------
			-- Mod reader code originally coded by Taronuke, remade to support end times and lengths. --
			--------------------------------------------------------------------------------------------
			for i,v in pairs(prefix_mods) do
				if prefix_time >=v[1] then
					if (v[4] == 'len' and prefix_time <=v[1]+v[2]) or (v[4] == 'end' and prefix_time <=v[2]) then
						if table.getn(v) == 5 then
							GAMESTATE:ApplyGameCommand('mod,'..v[3],v[5]);
						else
							GAMESTATE:ApplyGameCommand('mod,'..v[3]);
						end
					end
				end
			end
			
			
			
			if beat >= 0 and not checked then
				
				table.insert(prefix_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP1'));
				table.insert(prefix_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP2'));
				checked = true;
				
				SCREENMAN:GetTopScreen():GetChild('Overlay'):hidden(1);
				SCREENMAN:GetTopScreen():GetChild('Underlay'):hidden(1);
				for i,v in pairs(prefix_plr) do
					local multi = -1; if i == 2 then multi = 1; end
					if v then
						v:rotationx(0);							
						v:rotationy(0);
						v:rotationz(0);
						v:x(SCREEN_CENTER_X+160*multi);
						v:y(SCREEN_CENTER_Y);
						v:zoomx(1);
						v:zoomy(1);
						v:GetChild('Judgment'):stopeffect();
						
						SCREENMAN:GetTopScreen():GetChild('ScoreP'..i):hidden(1);
						SCREENMAN:GetTopScreen():GetChild('LifeP'..i):hidden(1);
						
						v:x(SCREEN_CENTER_X);
						v:GetChild('Judgment'):x(160*multi);
						v:GetChild('Combo'):x(160*multi);
					end
				end
			end
			
			if beat >= 14 and fgcurcommand == 1 or
				beat >= 46 and fgcurcommand == 2 or
				beat >= 110 and fgcurcommand == 4 or
				beat >= 218 and fgcurcommand == 7 or
				beat >= 250 and fgcurcommand == 8 then
				local multi = 1; if fgcurcommand == 2 or fgcurcommand == 7 then multi = -1; end
				SCREENMAN:GetTopScreen():decelerate(240/177/16*3);
				SCREENMAN:GetTopScreen():zoom(0.1);
				SCREENMAN:GetTopScreen():x(SCREEN_CENTER_X*0.9);
				SCREENMAN:GetTopScreen():y(SCREEN_CENTER_Y*0.9);
				SCREENMAN:GetTopScreen():rotationz(45*multi);
				SCREENMAN:GetTopScreen():accelerate(240/177/16);
				SCREENMAN:GetTopScreen():zoom(2);
				SCREENMAN:GetTopScreen():x(-SCREEN_CENTER_X/2);
				SCREENMAN:GetTopScreen():y(-SCREEN_CENTER_Y/2);
				SCREENMAN:GetTopScreen():rotationz(-30*multi);
				SCREENMAN:GetTopScreen():decelerate(240/177/8);
				SCREENMAN:GetTopScreen():zoom(1);
				SCREENMAN:GetTopScreen():x(0);
				SCREENMAN:GetTopScreen():y(0);
				SCREENMAN:GetTopScreen():rotationz(0);
				fgcurcommand = fgcurcommand + 1;
			end
			
			
			
			if beat >= 64 and fgcurcommand == 3 then
				for i,v in pairs(prefix_plr) do
					if v then
						v:bounce();
						v:GetChild('Judgment'):bounce();
						v:GetChild('Combo'):bounce();
						v:effectclock('bgm');
						v:GetChild('Judgment'):effectclock('bgm');
						v:GetChild('Combo'):effectclock('bgm');
						v:effectperiod(1);
						v:GetChild('Judgment'):effectperiod(1);
						v:GetChild('Combo'):effectperiod(1);
						if i == 1 then
							v:effectmagnitude(-128,0,0);
							v:GetChild('Judgment'):effectmagnitude(128,0,0);
							v:GetChild('Combo'):effectmagnitude(128,0,0);
							v:effectdelay(3);
							v:GetChild('Judgment'):effectdelay(3);
							v:GetChild('Combo'):effectdelay(3);
						else
							v:effectmagnitude(128,0,0);
							v:GetChild('Judgment'):effectmagnitude(-128,0,0);
							v:GetChild('Combo'):effectmagnitude(-128,0,0);
							v:effectdelay(3);
							v:GetChild('Judgment'):effectdelay(3);
							v:GetChild('Combo'):effectdelay(3);
							v:effectoffset(2);
							v:GetChild('Judgment'):effectoffset(2);
							v:GetChild('Combo'):effectoffset(2);
						end
					end
				end
				fgcurcommand = fgcurcommand + 1;
			end
			
			
			
			if beat >= 167 and fgcurcommand == 5 then
				for i,v in pairs(prefix_plr) do
					local multi = -1; if i == 2 then multi = 1; end
					if v then
						v:x(SCREEN_CENTER_X+multi*320);
						v:GetChild('Judgment'):x(multi*-160);
						v:GetChild('Combo'):x(multi*-160);
					end
				end
				fgcurcommand = fgcurcommand + 1;
			end
			
			if beat >= 199 and fgcurcommand == 6 then
				for i,v in pairs(prefix_plr) do
					local multi = -1; if i == 2 then multi = 1; end
					if v then
						v:x(SCREEN_CENTER_X);
						v:GetChild('Judgment'):x(multi*160);
						v:GetChild('Combo'):x(multi*160);
					end
				end
				fgcurcommand = fgcurcommand + 1;
			end
			
			
			
			if beat >= 251 and fgcurcommand == 9 then
				for i,v in pairs(prefix_plr) do
					local multi = -1; if i == 2 then multi = 1; end
					if v then
						
						v:x(SCREEN_CENTER_X+640*multi);
						v:GetChild('Judgment'):x(multi*-480);
						v:GetChild('Combo'):x(multi*-480);
					end
				end
				fgcurcommand = fgcurcommand + 1;
			end
			
			if beat >= 266 and fgcurcommand == 10 then
				for i,v in pairs(prefix_plr) do
					local multi = -1; if i == 2 then multi = 1; end
					if v then
						v:x(SCREEN_CENTER_X+multi*480 - 220);
						v:GetChild('Judgment'):x(multi*-400);
						v:GetChild('Judgment'):basezoomx(0.5);
						v:GetChild('Judgment'):basezoomy(0.5);
						v:GetChild('Combo'):hidden(1);
					end
				end
				fgcurcommand = fgcurcommand + 1;
				
			end
			
			if beat >= 300 and fgcurcommand == 11 then
				for i,v in pairs(prefix_plr) do
					local multi = -1; if i == 2 then multi = 1; end
					if v then
						v:bob();
						v:effectmagnitude(0,20*multi,0);
						v:effectclock('bgm');
						v:effectperiod(2);
					end
				end
				fgcurcommand = fgcurcommand + 1;
			end
			
			if beat >= 328 and fgcurcommand == 12 then
				for i,v in pairs(prefix_plr) do
					if v then
						v:stopeffect();
					end
				end
				fgcurcommand = fgcurcommand + 1;
			end
			
			
			
			
			
			
			
			
			
			
			-------------------------
			-- BEAT SPECIFIC STUFF --
			-------------------------
			if beat > 15 and beat < 17 or
				beat > 47 and beat < 49 or
				beat > 111 and beat < 113 or
				beat > 219 and beat < 221 or
				beat > 251 and beat < 253 or
				beat > 315 and beat < 317 then
				for i,v in pairs(prefix_plr) do
					SCREENMAN:GetTopScreen():vibrate();
					SCREENMAN:GetTopScreen():effectmagnitude(auxvar:getaux(),auxvar:getaux(),0);
					
					if beat < 120 then
						v:x(SCREEN_CENTER_X);
						v:stopeffect();
						v:GetChild('Judgment'):stopeffect();
						v:GetChild('Combo'):stopeffect();
					end
				end
			end
			
			if beat > 48 and beat < 62 then
				for i,v in pairs(prefix_plr) do
					if v then
						v:x(SCREEN_CENTER_X+_G['auxvarp'..i]:getaux()*2);
						GAMESTATE:ApplyGameCommand('mod,*10000 '.._G['auxvarp'..i]:getaux()*2 .. '% Drunk,*10000 '.._G['auxvarp'..i]:getaux()*2 .. '% Tipsy',i);
					end
				end
			end
			
			if beat > 64 and beat < 111 then
				if math.mod(beat,4) < 1 then
					GAMESTATE:ApplyGameCommand('mod,*10000 '..math.sin(beat*math.pi)*50 .. '% Invert,*10000 '..math.sin(beat*math.pi)*-50 .. '% Flip',1);
			elseif math.mod(beat,4) < 2 then
					GAMESTATE:ApplyGameCommand('mod,*10000 '..math.sin(beat*math.pi)*25 .. '% Reverse,*10000 '..math.sin(beat*math.pi)*-25 .. '% Split',1);
					GAMESTATE:ApplyGameCommand('mod,*10000 '..math.sin(beat*math.pi)*-25 .. '% Reverse,*10000 '..math.sin(beat*math.pi)*25 .. '% Split',2);
			elseif math.mod(beat,4) < 3 then
					GAMESTATE:ApplyGameCommand('mod,*10000 '..math.sin(beat*math.pi)*50 .. '% Invert,*10000 '..math.sin(beat*math.pi)*-50 .. '% Flip',2);
				else
					GAMESTATE:ApplyGameCommand('mod,*10000 '..math.sin(beat*math.pi)*25 .. '% Split',1);
					GAMESTATE:ApplyGameCommand('mod,*10000 '..math.sin(beat*math.pi)*-25 .. '% Split',2);
				end
				
				for i,v in pairs(prefix_plr) do
					if v then
						if i == 1 then
							if math.mod(beat,4) < 1 then
								v:x(SCREEN_CENTER_X+math.sin(beat*math.pi)*64);
								v:GetChild('Judgment'):x(-math.sin(beat*math.pi)*64-160);
								v:GetChild('Combo'):x(-math.sin(beat*math.pi)*64-160);
							else
								v:x(SCREEN_CENTER_X);
								v:GetChild('Judgment'):x(-160);
								v:GetChild('Combo'):x(-160);
							end
						end
						
						if i == 2 then
							if math.mod(beat,4) >= 2 and math.mod(beat,4) < 3 then
								v:x(SCREEN_CENTER_X-math.sin(beat*math.pi)*64);
								v:GetChild('Judgment'):x(math.sin(beat*math.pi)*64+160);
								v:GetChild('Combo'):x(math.sin(beat*math.pi)*64+160);
							else
								v:x(SCREEN_CENTER_X);
								v:GetChild('Judgment'):x(160);
								v:GetChild('Combo'):x(160);
							end
						end
					end
				end
			end
			
			
			if beat > 252 and beat < 264.25 then
				for i,v in pairs(prefix_plr) do
					local multi = -1; if i == 2 then multi = 1; end
					if v then
						v:x(SCREEN_CENTER_X-_G['auxvarp'..i]:getaux()*2 + 640*multi);
						v:GetChild('Judgment'):x(multi*-480 + _G['auxvarp'..i]:getaux()*2);
						v:GetChild('Combo'):x(multi*-480 + _G['auxvarp'..i]:getaux()*2);
						GAMESTATE:ApplyGameCommand('mod,*10000 '.._G['auxvarp'..i]:getaux()*8 .. '% Tipsy',i);
					end
				end
			end
			
			
			--------------------------------------------------------------
			-- Message reader to make specific values of the actor aux. --
			--------------------------------------------------------------
			if prefix_curmessage <= table.getn(prefix_messages) then
				if prefix_time >= prefix_messages[prefix_curmessage][1] then
					MESSAGEMAN:Broadcast(prefix_messages[prefix_curmessage][2]);
					prefix_curmessage = prefix_curmessage + 1;
				end
			end
			
			self:queuecommand('Update2');
			
		end"


		Update2Command="%function(self)
		self:sleep(0.02);
		self:queuecommand('Update');
		end"

	/>
	
	<BitmapText
		Font="Common Normal"
		Text="test"
		OnCommand="x,SCREEN_CENTER_X;y,SCREEN_CENTER_Y;effectclock,music;playcommand,SetTime;hidden,1"
		SetTimeCommand="%function(self) self:settext(self:GetSecsIntoEffect()); prefix_time = PREFSMAN:GetPreference('GlobalOffsetSeconds') - (0.002 - -0.002) + tonumber(self:GetText()); self:sleep(0.02); self:queuecommand('SetTime'); end"
	/>
	
	<!-- Aux actor, VERY IMPORTANT -->
	<Layer
		Type="Quad"
		OnCommand=""
		InitCommand="%function(self) auxvar = self; self:hidden(1) end"
		FirstCollisionMessageCommand="finishtweening;aux,100;linear,240/177/4;aux,0"
		SlideRightMessageCommand="%function()
			for i,v in pairs(prefix_plr) do
				local multi = -1; if i == 2 then multi = 1; end
				if v then
					if i == 1 then
						v:bounceend(240/177/16*3);
						v:addx(96);
						v:sleep(240/177/16*3);
						
						v:bounceend(240/177/16*2);
						v:addx(96);
						v:sleep(240/177/16*3);
						
						v:bounceend(240/177/16*3);
						v:addx(96);
						v:sleep(240/177/16*2);
						
						v:bounceend(240/177/16*3);
						v:addx(96);
						v:sleep(240/177/16*3);
						
						v:bounceend(240/177/16*2);
						v:addx(96);
					else
						v:sleep(240/177/16*3);
						
						v:bounceend(240/177/16*3);
						v:addx(96);
						v:sleep(240/177/16*2);
						
						v:bounceend(240/177/16*3);
						v:addx(96);
						v:sleep(240/177/16*3);
						
						v:bounceend(240/177/16*2);
						v:addx(96);
						v:sleep(240/177/16*3);
						
						v:bounceend(240/177/16*3);
						v:addx(96);
						v:sleep(240/177/16*2);
					end
				end
			end
		end"
		SlideLeftMessageCommand="%function()
			for i,v in pairs(prefix_plr) do
				local multi = -1; if i == 2 then multi = 1; end
				if v then
					if i == 1 then
						v:bounceend(240/177/16*3);
						v:addx(-96);
						v:sleep(240/177/16*3);
						
						v:bounceend(240/177/16*2);
						v:addx(-96);
						v:sleep(240/177/16*3);
						
						v:bounceend(240/177/16*3);
						v:addx(-96);
						v:sleep(240/177/16*2);
						
						v:bounceend(240/177/16*3);
						v:addx(-96);
						v:sleep(240/177/16*3);
						
						v:bounceend(240/177/16*2);
						v:addx(-96);
					else
						v:sleep(240/177/16*3);
						
						v:bounceend(240/177/16*3);
						v:addx(-96);
						v:sleep(240/177/16*2);
						
						v:bounceend(240/177/16*3);
						v:addx(-96);
						v:sleep(240/177/16*3);
						
						v:bounceend(240/177/16*2);
						v:addx(-96);
						v:sleep(240/177/16*3);
						
						v:bounceend(240/177/16*3);
						v:addx(-96);
						v:sleep(240/177/16*2);
					end
				end
			end
		end"
	/>
	
	<Layer
		Type="Quad"
		OnCommand=""
		InitCommand="%function(self) auxvarp1 = self; self:hidden(1) end"
		PhaseOneMessageCommand="finishtweening;aux,0;decelerate,240/177/16*3/2;aux,-100;accelerate,240/177/16*3/2;aux,0;sleep,240/177/16*3;decelerate,240/177/16;aux,-100;accelerate,240/177/16;aux,0"
		PhaseTwoMessageCommand="finishtweening;aux,0;sleep,240/177/16*3;decelerate,240/177/16*3/2;aux,-100;accelerate,240/177/16*3/2;aux,0;"
	/>
	<Layer
		Type="Quad"
		OnCommand=""
		InitCommand="%function(self) auxvarp2 = self; self:hidden(1) end"
		PhaseOneMessageCommand="finishtweening;aux,0;sleep,240/177/16*3;decelerate,240/177/16*3/2;aux,100;accelerate,240/177/16*3/2;aux,0;"
		PhaseTwoMessageCommand="finishtweening;aux,0;decelerate,240/177/16*3/2;aux,100;accelerate,240/177/16*3/2;aux,0;sleep,240/177/16*3;decelerate,240/177/16;aux,100;accelerate,240/177/16;aux,0"
	/>
	
</children></ActorFrame>