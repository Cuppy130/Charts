<ActorFrame><children>

	<Layer
		Type="Quad"
		InitCommand="hidden,1"
		OnCommand="sleep,GAMESTATE:GetCurrentSong():MusicLengthSeconds()"
	/>
	
	<Layer
		Type="Quad"
		InitCommand="hidden,1"
		OnCommand="%function(self)
				fgcurcommand = 1;
				checked = false;
				prefix_time = 0;
				
				prefix_curmessage = 1;
				
				
				prefix_messages = {
				--{25.612,'SkewTwitch'},
				};
				
				
				prefix_mods = {
				
				{0,200,'2.25x,-999999% Cover,*10000 No Beat','end'},
				
				{0.000,13.345,'*10000 90% Stealth,1x,*10000 -270% Mini,*10000 30% Flip,*10000 Dark','len'},
				{6.679,13.345,'*1.5 No Stealth,*0.75 No Dark','end'},
				{13.345,13.642,'*4 1.4x,*8 -180% Mini,*0.8 20% Flip','end'},
				{13.642,13.938,'*4 1.8x,*8 -90% Mini,*0.8 10% Flip','end'},
				{13.938,14.234,'*4 2.25x,*8 No Mini,*0.8 No Flip','end'},
				
				{13.345,24.901,'*1.5 150% Wave','end'},
				{14.012,25.565,'*10000 Beat','end'},
				{25.790,30.000,'*1.5 No Wave','end'},
				
				{14.234,14.679,'*1.5 4x','end'},
				{14.679,14.901,'*1.5 0x','end'},
				{14.901,15.123,'*1.5 4x','end'},
				{15.123,15.568,'*1.5 0x','end'},
				{15.568,15.790,'*1.5 4x','end'},
				{15.790,16.012,'*1.5 0x','end'},
				{16.012,16.234,'*1.5 4x','end'},
				{16.234,16.456,'*1.5 0x','end'},
				{16.456,16.679,'*1.5 4x','end'},
				{16.679,16.901,'*1.5 0x','end'},
				{16.901,17.790,'*1.5 4x','end'},
				{17.790,18.234,'*1.5 0x','end'},
				{18.234,18.456,'*1.5 4x','end'},
				{18.456,18.679,'*1.5 0x','end'},
				{18.679,19.123,'*1.5 4x','end'},
				{19.123,19.345,'*1.5 0x','end'},
				{19.345,19.568,'*1.5 4x','end'},
				{19.568,21.345,'*1.5 0x','end'},
				
				{21.345,21.790,'*1.5 4x','end'},
				{21.790,22.012,'*1.5 0x','end'},
				{22.012,22.234,'*1.5 4x','end'},
				{22.234,22.679,'*1.5 0x','end'},
				{22.679,22.901,'*1.5 4x','end'},
				{22.901,23.123,'*1.5 0x','end'},
				{23.123,23.345,'*1.5 4x','end'},
				{23.345,23.568,'*1.5 0x','end'},
				{23.568,23.790,'*1.5 4x','end'},
				{23.790,24.012,'*1.5 0x','end'},
				{24.012,24.901,'*1.5 4x','end'},
				
				{25.568,26.234,'*32 1000% Dizzy,*10000 No Beat','end'},
				{25.790,41.790,'*2.25 Reverse','end'},
				{25.790,26.012,'*2.25 50% Flip','end'},
				{26.012,26.679,'*2.25 No Flip','end'},
				{26.012,26.679,'*32 No Dizzy','end'},
				
				{26.679,240/135/4,'*3 150% Distant','len'},
				{27.123,240/135/8,'*12 150% Hallway','len'},
				{27.345,240/135/8,'*12 150% Distant','len'},
				{27.568,240/135/8,'*12 150% Hallway','len'},
				{27.790,240/135/8,'*12 150% Distant','len'},
				{28.012,240/135/8,'*6 150% Overhead','len'},
				
				{28.679,43.123,'*8 No Boost','end'}, -- mods to counter this are below, in a 'for' loop
				
				{30.234,30.679,'*4 Stealth','end'},
				{30.679,31.123,'*4 No Stealth','end'},
				
				{33.790,34.679,'*1.5 Tornado','end'},
				{34.679,36.000,'*1.5 No Tornado','end'},
				
				{41.790,240/135/12,'*4 83% Reverse','len'},
				{41.938,240/135/12,'*4 66% Reverse','len'},
				{42.086,240/135/12,'*4 50% Reverse','len'},
				{42.234,240/135/12,'*4 33% Reverse','len'},
				{42.382,240/135/12,'*4 17% Reverse','len'},
				{42.531,240/135/12,'*4 No Reverse','len'},
				
				{41.790,54.234,'Boost','end'},
				
				{44.012,0.074,'*10000 Flip','len'},
				{44.086,0.074,'*10000 Flip,*10000 -100% Invert','len'},
				{44.160,0.074,'*10000 Invert,*10000 No Flip','len'},
				{44.234,0.111,'*10000 Flip,*10000 No Invert','len'},
				{44.345,0.250,'*10000 No Flip,*10000 No Invert','len'},
				
				{47.568,0.074,'*10000 Flip','len'},
				{47.642,0.074,'*10000 Flip,*10000 -100% Invert','len'},
				{47.716,0.074,'*10000 Invert,*10000 No Flip','len'},
				{47.790,0.111,'*10000 Flip,*10000 No Invert','len'},
				{47.901,0.250,'*10000 No Flip,*10000 No Invert','len'},
				
				{51.123,0.074,'*10000 Flip','len'},
				{51.197,0.074,'*10000 Flip,*10000 -100% Invert','len'},
				{51.271,0.074,'*10000 Invert,*10000 No Flip','len'},
				{51.345,0.111,'*10000 Flip,*10000 No Invert','len'},
				{51.456,0.250,'*10000 No Flip,*10000 No Invert','len'},
				
				{52.901,0.074,'*10000 Flip','len'},
				{52.975,0.074,'*10000 Flip,*10000 -100% Invert','len'},
				{53.049,0.074,'*10000 Invert,*10000 No Flip','len'},
				{53.123,0.111,'*10000 Flip,*10000 No Invert','len'},
				{53.234,0.250,'*10000 No Flip,*10000 No Invert','len'},
				
				
				
				{42.679,240/135/4*2,'*1.5 150% Hallway','len'},
				{43.568,240/135/4*3,'*2 150% Distant','len'},
				{44.901,240/135/4*1,'*6 150% Hallway','len'},
				{45.345,240/135/4*1,'*6 150% Distant','len'},
				{45.790,240/135/4*1,'*6 150% Hallway','len'},
				
				{42.679+240/135*2,240/135/4*2,'*3 150% Distant','len'},
				{43.568+240/135*2,240/135/4*3,'*2 150% Hallway','len'},
				{44.901+240/135*2,240/135/4*1,'*6 150% Distant','len'},
				{45.345+240/135*2,240/135/4*1,'*6 150% Hallway','len'},
				{45.790+240/135*2,240/135/4*1,'*6 150% Distant','len'},
				
				{42.679+240/135*4,240/135/4*2,'*3 150% Hallway','len'},
				{43.568+240/135*4,240/135/4*3,'*2 150% Distant','len'},
				{44.901+240/135*4,240/135/4*1,'*6 150% Hallway','len'},
				{45.345+240/135*4,240/135/4*1,'*6 150% Distant','len'},
				{45.790+240/135*4,240/135/4*1,'*6 150% Hallway','len'},
				
				{42.679+240/135*6,240/135/4*2,'*3 150% Distant','len'},
				{43.568+240/135*6,240/135/4*3,'*1 Overhead','len'},
				
				
				
				{55.123,57.568,'*0.6 Stealth,*0.6 Dark','end'},
				{56.901,85.345,'*1.5 Distant,*1.5 Mini,*0.75 75% Bumpy','end'},
				{57.345,57.568,'*10000 0x','end'},
				{57.568,85.345,'*6 5x,*1.5 No Stealth','end'},
				{85.345,999,'*6 2.25x,*1.3 No Distant,*1.3 No Mini,*0.65 No Bumpy','end'},
				{86.234,999,'1.5x','end'},
				
				{58.679,240/135/4,'*5 3x','len'},
				{59.123,240/135/4,'*5 5x','len'},
				{59.568,62.234,'*5 3x','end'},
				
				{62.234,240/135/4,'*5 5x','len'},
				{62.679,240/135/4,'*5 3x','len'},
				{63.123,240/135/4,'*5 5x','len'},
				{63.568,65.790,'*5 3x','end'},
				
				{65.790,240/135/4,'*5 5x','len'},
				{66.234,240/135/4,'*5 3x','len'},
				{66.679,69.345,'*5 5x','end'},
				
				{69.345,240/135/4,'*5 3x','len'},
				{69.790,72.901,'*5 5x','end'},
				
				{72.901,240/135/4,'*5 3x','len'},
				{73.345,240/135/4,'*5 5x','len'},
				{73.790,76.456,'*5 3x','end'},
				
				{76.456,240/135/4,'*5 5x','len'},
				{76.901,240/135/4,'*5 3x','len'},
				{77.345,240/135/4,'*5 5x','len'},
				{77.790,80.012,'*5 3x','end'},
				
				{80.012,240/135/4,'*5 5x','len'},
				{80.456,240/135/4,'*5 3x','len'},
				{80.901,69.345,'*5 5x','end'},
				
				{83.568,240/135/4,'*5 3x','len'},
				{84.012,85.345,'*5 5x','end'},
				
				{82.234,83.568,'*12 Mini','end'},
				{82.234,0.050,'*16 No Mini','len'},
				{82.382,0.050,'*16 No Mini','len'},
				{82.531,0.050,'*16 No Mini','len'},
				
				
				
				{60.012,240/135/8,'*8 200% Drunk','len'},
				{60.234,240/135/8,'*16 -200% Drunk','len'},
				{60.456,240/135/8,'*16 200% Drunk','len'},
				{60.679,240/135/8,'*16 -200% Drunk','len'},
				{60.901,240/135/8,'*16 200% Drunk','len'},
				{61.123,240/135/8,'*16 -200% Drunk','len'},
				{61.345,240/135/8,'*8 No Drunk','len'},
				
				{64.012,240/135/8,'*8 -200% Drunk','len'},
				{64.234,240/135/16,'*32 200% Drunk','len'},
				{64.345,240/135/16,'*32 -200% Drunk','len'},
				{64.456,240/135/8,'*16 200% Drunk','len'},
				{64.679,240/135/8,'*16 -200% Drunk','len'},
				{64.901,240/135/8,'*8 No Drunk','len'},
				
				{67.123,240/135/8,'*8 200% Drunk','len'},
				{67.345,240/135/8,'*16 -200% Drunk','len'},
				{67.568,240/135/8,'*16 200% Drunk','len'},
				{67.790,240/135/8,'*16 -200% Drunk','len'},
				{68.012,240/135/8,'*16 200% Drunk','len'},
				{68.234,240/135/8,'*16 -200% Drunk','len'},
				{68.456,240/135/8,'*8 No Drunk','len'},
				
				{70.234,240/135/8,'*16 200% Drunk','len'},
				{70.456,240/135/8,'*16 -200% Drunk','len'},
				{70.679,240/135/8,'*16 200% Drunk','len'},
				{70.901,240/135/8,'*16 -200% Drunk','len'},
				{71.123,240/135/8,'*8 No Drunk','len'},
				
				{60.012+240/135*8,240/135/8,'*8 200% Drunk','len'},
				{60.234+240/135*8,240/135/8,'*16 -200% Drunk','len'},
				{60.456+240/135*8,240/135/8,'*16 200% Drunk','len'},
				{60.679+240/135*8,240/135/8,'*16 -200% Drunk','len'},
				{60.901+240/135*8,240/135/8,'*16 200% Drunk','len'},
				{61.123+240/135*8,240/135/8,'*16 -200% Drunk','len'},
				{61.345+240/135*8,240/135/8,'*8 No Drunk','len'},
				
				{64.012+240/135*8,240/135/8,'*8 -200% Drunk','len'},
				{64.234+240/135*8,240/135/16,'*32 200% Drunk','len'},
				{64.345+240/135*8,240/135/16,'*32 -200% Drunk','len'},
				{64.456+240/135*8,240/135/8,'*16 200% Drunk','len'},
				{64.679+240/135*8,240/135/8,'*16 -200% Drunk','len'},
				{64.901+240/135*8,240/135/8,'*8 No Drunk','len'},
				
				{81.345,240/135/8,'*16 200% Drunk','len'},
				{81.568,240/135/8,'*16 -200% Drunk','len'},
				{81.790,240/135/8,'*16 200% Drunk','len'},
				{82.012,240/135/8,'*16 -200% Drunk','len'},
				{82.234,240/135/8,'*8 No Drunk','len'},
				
				{84.456,240/135/8,'*8 200% Drunk','len'},
				{84.679,240/135/8,'*16 -200% Drunk','len'},
				{84.901,240/135/8,'*16 200% Drunk','len'},
				{85.123,240/135/8,'*16 -200% Drunk','len'},
				{85.345,240/135/8,'*16 200% Drunk','len'},
				{85.568,240/135/8,'*16 -200% Drunk','len'},
				{85.790,240/135/8,'*16 200% Drunk','len'},
				{86.012,240/135/8,'*8 No Drunk','len'},
				
				
				{86.901,87.123,'*10000 Dark','end',2},
				{86.901,999,'*10000 Hidden,*10000 Sudden,*10000 -95% HiddenOffset,*10000 -125% SuddenOffset','end',2},
				{87.123,999,'*10000 Flip,*4 Dark','end',2},
				{86.901,87.123,'*10000 Hidden,*10000 Sudden,*10000 -95% HiddenOffset,*10000 1000% SuddenOffset,','end',1},
				{87.123,999,'*10000 Hidden,*10000 Sudden,*10000 -95% HiddenOffset,*10000 -125% SuddenOffset,*4 Dark','end',1},
				
				{87.123+240/135/2*0,0.889,'*4 50% Dark','len',2},
				{87.123+240/135/2*1,0.889,'*4 50% Dark','len',1},
				{87.123+240/135/2*2,0.889,'*4 50% Dark','len',2},
				{87.123+240/135/2*3,0.889,'*4 50% Dark','len',1},
				{87.123+240/135/2*4,0.889,'*4 50% Dark','len',2},
				{87.123+240/135/2*5,0.889,'*4 50% Dark','len',1},
				{87.123+240/135/2*6,0.889,'*4 50% Dark','len',2},
				{87.123+240/135/2*7,0.889,'*4 50% Dark','len',1},
				{87.123+240/135/2*8,0.889,'*4 50% Dark','len',2},
				{87.123+240/135/2*9,0.889,'*4 50% Dark','len',1},
				{87.123+240/135/2*10,0.889,'*4 50% Dark','len',2},
				{87.123+240/135/2*11,0.889,'*4 50% Dark','len',1},
				{87.123+240/135/2*12,0.889,'*4 50% Dark','len',2},
				{87.123+240/135/2*13,0.889,'*4 50% Dark','len',1},
				
				{87.123+240/135/2*14,0.889*2,'*4 50% Dark','len',2},
				{87.123+240/135/2*16,0.889*2,'*4 50% Dark','len',1},
				{87.123+240/135/2*18,0.889*4,'*4 50% Dark','len',2},
				
				{87.123,0.800,'*4 1000% HiddenOffset,*4 1000% SuddenOffset','len',1},
				{88.012,0.889,'*4 1000% SuddenOffset','len',1},
				{87.123+240/135*1,0.800,'*4 1000% HiddenOffset,*4 1000% SuddenOffset','len',1},
				{88.012+240/135*1,0.889,'*4 1000% SuddenOffset','len',1},
				{87.123+240/135*2,0.800,'*4 1000% HiddenOffset,*4 1000% SuddenOffset','len',1},
				{88.012+240/135*2,0.889,'*4 1000% SuddenOffset','len',1},
				{87.123+240/135*3,0.800,'*4 1000% HiddenOffset,*4 1000% SuddenOffset','len',1},
				{88.012+240/135*3,0.889,'*4 1000% SuddenOffset','len',1},
				{87.123+240/135*4,0.800,'*4 1000% HiddenOffset,*4 1000% SuddenOffset','len',1},
				{88.012+240/135*4,0.889,'*4 1000% SuddenOffset','len',1},
				{87.123+240/135*5,0.800,'*4 1000% HiddenOffset,*4 1000% SuddenOffset','len',1},
				{88.012+240/135*5,0.889,'*4 1000% SuddenOffset','len',1},
				{87.123+240/135*6,0.800,'*4 1000% HiddenOffset,*4 1000% SuddenOffset','len',1},
				{88.012+240/135*6,0.889,'*4 1000% SuddenOffset','len',1},
				{87.123+240/135*7,1.700,'*2 1000% HiddenOffset,*2 1000% SuddenOffset','len',1},
				{88.901+240/135*7,1.778,'*2 1000% SuddenOffset','len',1},
				{87.123+240/135*9,999,'1000% HiddenOffset,1000% SuddenOffset','len',1},
				
				{87.123,0.889,'*4 1000% SuddenOffset','len',2},
				{88.012,0.800,'*4 1000% HiddenOffset,*4 1000% SuddenOffset','len',2},
				{87.123+240/135*1,0.889,'*4 1000% SuddenOffset','len',2},
				{88.012+240/135*1,0.800,'*4 1000% HiddenOffset,*4 1000% SuddenOffset','len',2},
				{87.123+240/135*2,0.889,'*4 1000% SuddenOffset','len',2},
				{88.012+240/135*2,0.800,'*4 1000% HiddenOffset,*4 1000% SuddenOffset','len',2},
				{87.123+240/135*3,0.889,'*4 1000% SuddenOffset','len',2},
				{88.012+240/135*3,0.800,'*4 1000% HiddenOffset,*4 1000% SuddenOffset','len',2},
				{87.123+240/135*4,0.889,'*4 1000% SuddenOffset','len',2},
				{88.012+240/135*4,0.800,'*4 1000% HiddenOffset,*4 1000% SuddenOffset','len',2},
				{87.123+240/135*5,0.889,'*4 1000% SuddenOffset','len',2},
				{88.012+240/135*5,0.800,'*4 1000% HiddenOffset,*4 1000% SuddenOffset','len',2},
				{87.123+240/135*6,0.889,'*4 1000% SuddenOffset','len',2},
				{88.012+240/135*6,0.800,'*4 1000% HiddenOffset,*4 1000% SuddenOffset','len',2},
				{87.123+240/135*7,1.778,'*2 1000% SuddenOffset','len',2},
				{88.901+240/135*7,1.700,'*2 1000% HiddenOffset,*2 1000% SuddenOffset','len',2},
				{87.123+240/135*9,999,'1000% SuddenOffset','len',2},
				
				
				}
				
				
				for i = 0,31 do
					table.insert(prefix_mods,{28.679+240/135/4*i,0.222,'*4 Boost','len'});
				end
				
				for i = 0,15 do
					local multi = 1; if math.mod(i,2) == 0 then multi = -1; end
					if i ~= 7 then
						table.insert(prefix_mods,{29.123+240/135*i,0.444,'*10000 '.. 400*multi ..'% Beat','len'});
					end
				end
				
				prefix_plr = {};
				
				self:queuecommand('Update');
			end"
		
		UpdateCommand="%function(self)
		
			local beat = GAMESTATE:GetSongBeat();
			
			-----------------------
			-- Player mod resets --
			-----------------------
			GAMESTATE:ApplyGameCommand('mod,clearall')
			
			--------------------------------------------------------------------------------------------
			-- Mod reader code originally coded by Taronuke, remade to support end times and lengths. --
			--------------------------------------------------------------------------------------------
			for i,v in pairs(prefix_mods) do
				if prefix_time >=v[1] then
					if (v[4] == 'len' and prefix_time <=v[1]+v[2]) or (v[4] == 'end' and prefix_time <=v[2]) then
						if table.getn(v) == 5 then
							GAMESTATE:ApplyGameCommand('mod,'..v[3],v[5]);
						else
							GAMESTATE:ApplyGameCommand('mod,'..v[3]);
						end
					end
				end
			end
			
			
			
			if beat >= 0 and not checked then
				
				table.insert(prefix_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP1'));
				table.insert(prefix_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP2'));
				checked = true;
				
				SCREENMAN:GetTopScreen():GetChild('Overlay'):hidden(1);
				SCREENMAN:GetTopScreen():GetChild('Underlay'):hidden(1);
				for i,v in pairs(prefix_plr) do
					local multi = -1; if i == 2 then multi = 1; end
					if v then
						v:rotationx(0);							
						v:rotationy(0);
						v:rotationz(0);
						v:x(SCREEN_CENTER_X+160*multi);
						v:y(SCREEN_CENTER_Y);
						v:zoomx(1);
						v:zoomy(1);
						v:zoomz(1);
						v:GetChild('Judgment'):stopeffect();
						
						SCREENMAN:GetTopScreen():GetChild('ScoreP'..i):hidden(1);
						SCREENMAN:GetTopScreen():GetChild('LifeP'..i):hidden(1);
						
					end
				end
			end
			
			if beat >= 194 and fgcurcommand == 1 then
				for i,v in pairs(prefix_plr) do
					local multi = -1; if i == 2 then multi = 1; end
					if v then
						v:decelerate(240/135/8*3);
						v:x(SCREEN_CENTER_X);
						v:GetChild('Judgment'):x(160*multi);
						v:GetChild('Combo'):x(160*multi);
						v:rotationy(1440*multi);
					end
				end
				fgcurcommand = fgcurcommand + 1;
			end
			
			
			
			-------------------------
			-- BEAT SPECIFIC STUFF --
			-------------------------
			if beat > 64 and beat < 96 then
				for i,v in pairs(prefix_plr) do
					if v then
						--v:x(SCREEN_CENTER_X+(math.sin(beat*math.pi/2)*auxvar:getaux()))
					end
				end
			end
			
			--------------------------------------------------------------
			-- Message reader to make specific values of the actor aux. --
			--------------------------------------------------------------
			if prefix_curmessage <= table.getn(prefix_messages) then
				if prefix_time >= prefix_messages[prefix_curmessage][1] then
					MESSAGEMAN:Broadcast(prefix_messages[prefix_curmessage][2]);
					prefix_curmessage = prefix_curmessage + 1;
				end
			end
			
			self:queuecommand('Update2');
			
		end"


		Update2Command="%function(self)
		self:sleep(0.02);
		self:queuecommand('Update');
		end"

	/>
	
	<BitmapText
		Font="Common Normal"
		Text="test"
		OnCommand="x,SCREEN_CENTER_X;y,SCREEN_CENTER_Y;effectclock,music;playcommand,SetTime;hidden,1"
		SetTimeCommand="%function(self) self:settext(self:GetSecsIntoEffect()); prefix_time = PREFSMAN:GetPreference('GlobalOffsetSeconds') - (0.000 - 0.002) + tonumber(self:GetText()); self:sleep(0.02); self:queuecommand('SetTime'); end"
	/>
	
	<!-- Aux actor, VERY IMPORTANT -->
	<Layer
		Type="Quad"
		OnCommand=""
		InitCommand="%function(self) auxvar = self; self:hidden(1) end"
		SkewTwitchMessageCommand="finishtweening;aux,0;linear,9.6;aux,1.5;linear,1.6;aux,0"
	/>
	
</children></ActorFrame>