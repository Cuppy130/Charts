<ActorFrame><children>

	<Layer
		Type="Quad"
		InitCommand="hidden,1"
		OnCommand="sleep,GAMESTATE:GetCurrentSong():MusicLengthSeconds()"
	/>
	
	<Layer
		Type="Quad"
		InitCommand="hidden,1"
		OnCommand="%function(self)
				fgcurcommand = 1;
				checked = false;
				prefix_time = 0;
				prefix_inc = 1;
				
				prefix_curmessage = 1;
				
				
				prefix_messages = {
					{20.169,'RollAround'},
					
					{23.582,'RotRand'},
					{23.738,'RotRand'},
					{23.893,'RotRand'},
					{23.996,'RotRand'},
					{24.151,'RotRand'},
					{24.307,'RotRand'},
					{24.410,'RotRand'},
					{24.513,'RotRand'},
					{24.617,'RotRand'},
					{24.720,'RotRand'},
					{24.824,'RotRand'},
					{24.979,'RotRand'},
					{25.134,'RotReset'},
					
					{25.341,'Skew'},
					
					{33.410,'RollAround'},
					
					{36.824,'RotRand'},
					{36.979,'RotRand'},
					{37.134,'RotRand'},
					{37.238,'RotRand'},
					{37.393,'RotRand'},
					{37.548,'RotReset'},
					
					{55.664,'ZoomZ'},
					{59.414,'ZoomZ'},
					{63.164,'ZoomZ'},
					{67.383,'ZoomZ'},
					
					{70.664,'ZoomZ'},
					{74.414,'ZoomZ'},
					{78.164,'ZoomZ'},
					{82.383,'ZoomZ'},
				};
				
				
				prefix_mods = {
				
				{0,200,'2.25x,-999999% Cover,*10000 No Beat','end'},
				{0.000,8.686,'Drunk,Tipsy','end'},
				
				{55.899,240/128/4,'*10000 1600% Beat','len',1},
				{55.899,240/128/4,'*10000 -1600% Beat','len',2},
				{55.899+240/128/2*1,240/128/4,'*10000 -1600% Beat','len',1},
				{55.899+240/128/2*1,240/128/4,'*10000 1600% Beat','len',2},
				{55.899+240/128/2*2,240/128/4,'*10000 1600% Beat','len',1},
				{55.899+240/128/2*2,240/128/4,'*10000 -1600% Beat','len',2},
				{55.899+240/128/2*3,240/128/4,'*10000 -1600% Beat','len',1},
				{55.899+240/128/2*3,240/128/4,'*10000 1600% Beat','len',2},
				{55.899+240/128/2*4,240/128/4,'*10000 1600% Beat','len',1},
				{55.899+240/128/2*4,240/128/4,'*10000 -1600% Beat','len',2},
				{55.899+240/128/2*5,240/128/4,'*10000 -1600% Beat','len',1},
				{55.899+240/128/2*5,240/128/4,'*10000 1600% Beat','len',2},
				{55.899+240/128/2*6,240/128/4,'*10000 1600% Beat','len',1},
				{55.899+240/128/2*6,240/128/4,'*10000 -1600% Beat','len',2},
				--{55.899+240/128/2*7,240/128/4,'*10000 -1600% Beat','len',1},
				--{55.899+240/128/2*7,240/128/4,'*10000 1600% Beat','len',2},
				{55.899+240/128/2*8,240/128/4,'*10000 1600% Beat','len',1},
				{55.899+240/128/2*8,240/128/4,'*10000 -1600% Beat','len',2},
				{55.899+240/128/2*9,240/128/4,'*10000 -1600% Beat','len',1},
				{55.899+240/128/2*9,240/128/4,'*10000 1600% Beat','len',2},
				{55.899+240/128/2*10,240/128/4,'*10000 1600% Beat','len',1},
				{55.899+240/128/2*10,240/128/4,'*10000 -1600% Beat','len',2},
				{55.899+240/128/2*11,240/128/4,'*10000 -1600% Beat','len',1},
				{55.899+240/128/2*11,240/128/4,'*10000 1600% Beat','len',2},
				{55.899+240/128/2*12,240/128/4,'*10000 1600% Beat','len',1},
				{55.899+240/128/2*12,240/128/4,'*10000 -1600% Beat','len',2},
				{55.899+240/128/2*13,240/128/4,'*10000 -1600% Beat','len',1},
				{55.899+240/128/2*13,240/128/4,'*10000 1600% Beat','len',2},
				{55.899+240/128/2*14,240/128/4,'*10000 1600% Beat','len',1},
				{55.899+240/128/2*14,240/128/4,'*10000 -1600% Beat','len',2},
				
				{70.899,240/128/4,'*10000 1600% Beat','len',1},
				{70.899,240/128/4,'*10000 -1600% Beat','len',2},
				{70.899+240/128/2*1,240/128/4,'*10000 -1600% Beat','len',1},
				{70.899+240/128/2*1,240/128/4,'*10000 1600% Beat','len',2},
				{70.899+240/128/2*2,240/128/4,'*10000 1600% Beat','len',1},
				{70.899+240/128/2*2,240/128/4,'*10000 -1600% Beat','len',2},
				{70.899+240/128/2*3,240/128/4,'*10000 -1600% Beat','len',1},
				{70.899+240/128/2*3,240/128/4,'*10000 1600% Beat','len',2},
				{70.899+240/128/2*4,240/128/4,'*10000 1600% Beat','len',1},
				{70.899+240/128/2*4,240/128/4,'*10000 -1600% Beat','len',2},
				{70.899+240/128/2*5,240/128/4,'*10000 -1600% Beat','len',1},
				{70.899+240/128/2*5,240/128/4,'*10000 1600% Beat','len',2},
				{70.899+240/128/2*6,240/128/4,'*10000 1600% Beat','len',1},
				{70.899+240/128/2*6,240/128/4,'*10000 -1600% Beat','len',2},
				--{70.899+240/128/2*7,240/128/4,'*10000 -1600% Beat','len',1},
				--{70.899+240/128/2*7,240/128/4,'*10000 1600% Beat','len',2},
				{70.899+240/128/2*8,240/128/4,'*10000 1600% Beat','len',1},
				{70.899+240/128/2*8,240/128/4,'*10000 -1600% Beat','len',2},
				{70.899+240/128/2*9,240/128/4,'*10000 -1600% Beat','len',1},
				{70.899+240/128/2*9,240/128/4,'*10000 1600% Beat','len',2},
				{70.899+240/128/2*10,240/128/4,'*10000 1600% Beat','len',1},
				{70.899+240/128/2*10,240/128/4,'*10000 -1600% Beat','len',2},
				{70.899+240/128/2*11,240/128/4,'*10000 -1600% Beat','len',1},
				{70.899+240/128/2*11,240/128/4,'*10000 1600% Beat','len',2},
				{70.899+240/128/2*12,240/128/4,'*10000 1600% Beat','len',1},
				{70.899+240/128/2*12,240/128/4,'*10000 -1600% Beat','len',2},
				{70.899+240/128/2*13,240/128/4,'*10000 -1600% Beat','len',1},
				{70.899+240/128/2*13,240/128/4,'*10000 1600% Beat','len',2},
				{70.899+240/128/2*14,240/128/4,'*10000 1600% Beat','len',1},
				{70.899+240/128/2*14,240/128/4,'*10000 -1600% Beat','len',2},
				
				{8.686,13.651,'*0.45 0x,*8 No Drunk,*8 No Tipsy','end'},
				
				{10.341,10.910,'*32 250% Centered','end'},
				{10.651,240/145/4,'*32 235% Centered','len'},
				{10.910,240/145/4,'*32 220% Centered','len'},
				{11.117,240/145/4,'*32 205% Centered','len'},
				{11.272,240/145/4,'*32 190% Centered','len'},
				{11.376,240/145/4,'*32 175% Centered','len'},
				{11.427,240/145/4,'*32 160% Centered','len'},
				{11.479,240/145/4,'*32 145% Centered','len'},
				{11.531,240/145/4,'*32 130% Centered','len'},
				{11.582,240/145/4,'*32 115% Centered','len'},
				{11.634,240/145/4,'*32 100% Centered','len'},
				{11.686,240/145/4,'*32 85% Centered','len'},
				{11.738,240/145/4,'*32 70% Centered','len'},
				{11.789,240/145/4,'*32 55% Centered','len'},
				{11.841,240/145/4,'*32 40% Centered','len'},
				{11.893,240/145/4,'*32 27% Centered','len'},
				{11.944,240/145/4,'*32 14% Centered','len'},
				{11.996,240/145/4,'*32 No Centered','len'},
				
				{13.651,14.065,'*4 0.75x','end'},
				{14.065,14.479,'*4 1.5x','end'},
				{14.479,15.307,'*4 2.25x','end'},
				
				{14.893,41.789,'*4 Wave,*4 Bumpy','end'},
				
				{15.100,27.100,'*10000 200% Beat','end'},
				
				{18.720,240/145,'*8 Overhead','len'},
				{18.720,0.050,'*10000 200% Hallway','len'},
				{19.134,0.050,'*10000 200% Hallway','len'},
				{19.548,0.050,'*10000 200% Distant','len'},
				
				{18.720+240/145*8,240/145,'*8 Overhead','len'},
				{18.720+240/145*8,0.050,'*10000 250% Hallway','len'},
				{19.134+240/145*8,0.050,'*10000 250% Hallway','len'},
				{19.548+240/145*8,0.050,'*10000 250% Distant','len'},
				
				{26.479,26.686,'*4 50% Flip,*4 50% Reverse,*16 -200% Mini','end'},
				{26.686,28.000,'*4 No Flip,*4 No Reverse,*16 No Mini','end'},
				
				{26.893,28.134,'*3 0.5x,*4 No Bumpy,*4 No Wave','end'},
				{27.720,27.927,'*8 Hidden,*10000 20% HiddenOffset','end'},
				{27.927,28.134,'*8 Sudden,*10000 -20% SuddenOffset,*8 Hidden,*10000 20% HiddenOffset','end'},
				{28.134,28.548,'*10000 2.25x,*8 No Hidden,*8 No Sudden','end'},
				
				{28.341,37.444,'*10000 200% Beat','end'},
				
				{29.376,240/145/8,'*8 0x','len'},
				{29.582,240/145/8,'*8 2.25x','len'},
				{29.789,240/145/8,'*8 0x','len'},
				{29.996,240/145/4,'*8 2.25x','len'},
				
				{37.651,37.858,'*16 200% Mini','end'},
				{37.858,38.065,'*10000 No Mini,*10000 Flip,*10000 50% Stealth','end'},
				{38.065,39.000,'*4 No Flip,*2 No Stealth','end'},
				
				{38.893,40.000,'*8 No Tornado,*40 No Dizzy','end'},
				{38.893,0.050,'*10000 200% Tornado,*10000 1000% Dizzy','len'},
				
				{39.513,240/145/8,'*8 Invert','len'},
				{39.720,240/145/8,'*8 No Invert','len'},
				
				{40.341,240/145/16,'*16 28% Mini','len'},
				{40.341+240/145/16*1,240/145/16,'*8 56% Mini','len'},
				{40.341+240/145/16*2,240/145/16,'*8 84% Mini','len'},
				{40.341+240/145/16*3,240/145/16,'*8 112% Mini','len'},
				{40.341+240/145/16*4,240/145/16,'*8 140% Mini','len'},
				{40.341+240/145/16*5,240/145/16,'*8 168% Mini','len'},
				{40.341+240/145/16*6,240/145/16,'*8 144% Mini','len'},
				{40.341+240/145/16*7,240/145/16,'*8 120% Mini','len'},
				{40.341+240/145/16*8,240/145/16,'*8 96% Mini','len'},
				{40.341+240/145/16*9,240/145/16,'*8 72% Mini','len'},
				{40.341+240/145/16*10,240/145/16,'*8 48% Mini','len'},
				{40.341+240/145/16*11,240/145/16,'*8 24% Mini','len'},
				{40.341+240/145/16*12,240/145/16,'*8 No Mini','len'},
				
				{20.272,21.100,'*1.5 150% Mini,*0.75 -75% Flip,*4 No Bumpy,*4 No Wave','end'},
				{21.100,22.000,'*1.5 No Mini,*0.75 No Flip,*4 No Bumpy,*4 No Wave','end'},
				
				{33.513,34.341,'*1.5 150% Mini,*0.75 -75% Flip,*4 No Bumpy,*4 No Wave','end'},
				{34.341,35.500,'*1.5 No Mini,*0.75 No Flip,*4 No Bumpy,*4 No Wave','end'},
				
				{41.789,48.646,'*1.5 2.25x','end'},
				{41.789,240/140/16,'*24 0x','len'},
				{43.504,240/140/16,'*24 0x','len'},
				{45.218,240/140/16,'*24 0x','len'},
				{46.932,240/140/16,'*24 0x','len'},
				
				{48.646,52.075,'*3 2.25x','end'},
				{48.646,240/140/16,'*24 0x','len'},
				{49.504,240/140/16,'*24 0x','len'},
				{50.361,240/140/16,'*24 0x','len'},
				{51.218,240/140/16,'*24 0x','len'},
				
				{52.075,53.789,'*3 100x','end'},
				{53.789,55.664,'*3 2.25x','end'},
				
				{53.789,86.492,'*10000 500% Invert','end'},
				{86.492,87.000,'*10000 No Invert','end'},
				
				{55.664,70.196,'50% Wave','end',1},
				{55.664,70.196,'-50% Wave','end',2},
				
				{56.133,56.367,'*6 4x','end',1},
				{56.133,56.367,'*6 0x','end',2},
				{56.367,56.719,'*6 0x','end',1},
				{56.367,56.719,'*6 4x','end',2},
				{56.719,57.071,'*6 4x','end',1},
				{56.719,57.071,'*6 0x','end',2},
				{57.071,58.000,'*6 2.25x','end'},
				
				{56.133+240/128*4,56.367+240/128*4,'*4 4x','end',1},
				{56.133+240/128*4,56.367+240/128*4,'*4 0x','end',2},
				{56.367+240/128*4,56.719+240/128*4,'*4 0x','end',1},
				{56.367+240/128*4,56.719+240/128*4,'*4 4x','end',2},
				{56.719+240/128*4,57.071+240/128*4,'*4 4x','end',1},
				{56.719+240/128*4,57.071+240/128*4,'*4 0x','end',2},
				{57.071+240/128*4,58.000+240/128*4,'*4 2.25x','end'},
				
				{61.289,0.050,'*10000 50% Stealth','len'},
				{66.914,0.050,'*10000 50% Stealth','len'},
				{70.196,0.050,'*10000 50% Stealth','len'},
				{76.289,0.050,'*10000 50% Stealth','len'},
				{81.914,0.050,'*10000 50% Stealth','len'},
				
				{61.758,62.227,'*4 0x,*24 2000% Dizzy','end',1},
				{61.758,62.227,'*4 0x,*24 -2000% Dizzy','end',2},
				{62.227,63.633,'*2 2.25x,*12 No Dizzy','end'},
				
				{65.508,240/140/8,'*8 200% Hallway','len',1},
				{65.508,240/140/8,'*8 200% Distant','len',2},
				{65.742,240/140/8,'*16 200% Distant','len',1},
				{65.742,240/140/8,'*16 200% Hallway','len',2},
				{65.977,240/140/8,'*16 200% Hallway','len',1},
				{65.977,240/140/8,'*16 200% Distant','len',2},
				{66.211,240/140/8,'*16 200% Distant','len',1},
				{66.211,240/140/8,'*16 200% Hallway','len',2},
				{66.446,240/140/8,'*16 200% Hallway','len',1},
				{66.446,240/140/8,'*16 200% Distant','len',2},
				{66.680,240/140/4,'*8 Overhead','len',1},
				{66.680,240/140/4,'*8 Overhead','len',2},
				
				{70.664,85.000,'*32 No Drunk','end'},
				
				{70.899,71.485,'*32 400% Drunk','end',1},
				{71.485,71.836,'*32 400% Drunk','end',2},
				{71.836,72.774,'*32 -400% Drunk','end',1},
				{72.774,73.360,'*32 -400% Drunk','end',2},
				{73.360,73.711,'*32 400% Drunk','end',1},
				{73.711,74.649,'*32 400% Drunk','end',2},
				{74.649,75.235,'*32 -400% Drunk','end',1},
				{75.235,75.586,'*32 -400% Drunk','end',2},
				{75.586,76.524,'*32 400% Drunk','end',1},
				{76.524,77.110,'*32 400% Drunk','end',2},
				{77.110,78.399,'*32 -400% Drunk','end',1},
				{78.399,78.985,'*32 -400% Drunk','end',2},
				{78.985,79.336,'*32 400% Drunk','end',1},
				{79.336,80.156,'*32 400% Drunk','end',2},
				{80.156,80.274,'*32 -400% Drunk','end',1},
				{80.274,80.860,'*32 -400% Drunk','end',2},
				{80.860,81.221,'*32 400% Drunk','end',1},
				{81.221,82.031,'*32 400% Drunk','end',2},
				{82.031,82.149,'*32 -400% Drunk','end',1},
				{82.149,82.735,'*32 -400% Drunk','end',2},
				{82.735,83.086,'*32 400% Drunk','end',1},
				{83.086,83.789,'*32 400% Drunk','end',2},
				
				{77.461,79.000,'*24 No Mini','end'},
				{77.461,240/128/32,'*32 -500% Mini','len'},
				{77.696,240/128/32,'*32 -500% Mini','len'},
				{77.930,240/128/32,'*32 -500% Mini','len'},
				{78.164,240/128/32,'*32 -500% Mini','len'},
				
				{83.789,85.664,'*1 No Sudden,*1 No Stealth,*1 2.25x','end'},
				
				{84.258,87.319,'*4 -1000% Mini,Dark','end'},
				{85.664,91.457,'Blind','end'},
				{87.319,88.000,'*10000 No Mini','end'},
				
				--{85.664,999,'2.75x','end'},
				{85.871,112.147,'Dark','end'},
				
				{88.975,91.457,'*0.25 No Dark','end'},
				{91.457,92.285,'*4 Dark','end'},
				
				{87.319,91.664,'*10000 0.5x,*10000 Sudden','end'},
				{91.457,92.000,'*4 No Sudden','end'},
				{91.664,91.871,'*8 1.25x','end'},
				{91.871,92.078,'*8 2x','end'},
				{92.078,999,'*8 2.75x','end'},
				
				{92.078,111.940,'*10000 Reverse','end',1},
				{92.078,112.417,'*10000 Dark','end'},
				
				--{92.078,999,'*10000 314% Dizzy','end',1},
				--{92.492,999,'*10000 -314% Dizzy','end',2},
				
				{106.147,110.000,'*8 No Drunk','end'},
				{106.147,0.050,'*10000 800% Drunk','len'},
				{107.802,0.050,'*10000 -800% Drunk','len'},
				
				{112.147,113.802,'*0.6 Brake,*2 No Dark','end'},
				
				{114.423,240/145/8,'*8 Invert','len'},
				{114.630,240/145/8,'*8 No Invert,*8 Flip','len'},
				{114.837,240/145/8,'*8 -100% Invert,*8 Flip','len'},
				{115.044,240/145/8,'*8 No Invert,*8 No Flip','len'},
				
				{115.457,150.000,'*4 5000% Tornado','end',1},
				{115.457,150.000,'*4 -5000% Tornado','end',2},
				
				}
				
				
				
				prefix_plr = {};
				
				self:queuecommand('Update');
			end"
		
		UpdateCommand="%function(self)
		
			local beat = GAMESTATE:GetSongBeat();
			
			-----------------------
			-- Player mod resets --
			-----------------------
			GAMESTATE:ApplyGameCommand('mod,clearall')
			
			--------------------------------------------------------------------------------------------
			-- Mod reader code originally coded by Taronuke, remade to support end times and lengths. --
			--------------------------------------------------------------------------------------------
			for i,v in pairs(prefix_mods) do
				if prefix_time >=v[1] then
					if (v[4] == 'len' and prefix_time <=v[1]+v[2]) or (v[4] == 'end' and prefix_time <=v[2]) then
						if table.getn(v) == 5 then
							GAMESTATE:ApplyGameCommand('mod,'..v[3],v[5]);
						else
							GAMESTATE:ApplyGameCommand('mod,'..v[3]);
						end
					end
				end
			end
			
			
			
			if beat >= 0 and not checked then
				
				table.insert(prefix_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP1'));
				table.insert(prefix_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP2'));
				checked = true;
				
				SCREENMAN:GetTopScreen():GetChild('Overlay'):hidden(1);
				SCREENMAN:GetTopScreen():GetChild('Underlay'):hidden(1);
				for i,v in pairs(prefix_plr) do
					local multi = -1; if i == 2 then multi = 1; end
					if v then
						v:rotationx(0);							
						v:rotationy(0);
						v:rotationz(0);
						v:x(SCREEN_CENTER_X+160*multi);
						v:y(SCREEN_CENTER_Y);
						v:zoomx(1);
						v:zoomy(1);
						v:GetChild('Judgment'):stopeffect();
						
						SCREENMAN:GetTopScreen():GetChild('ScoreP'..i):hidden(1);
						SCREENMAN:GetTopScreen():GetChild('LifeP'..i):hidden(1);
					end
				end
			end
			
			if beat >= 100 and fgcurcommand == 1 then
				for i,v in pairs(prefix_plr) do
					local multi = -1; if i == 2 then multi = 1; end
					if v then
					
						for j = 1,4 do
							v:linear(240/145/16);
							v:x(SCREEN_CENTER_X);
							v:zoomx(2);
							v:GetChild('Judgment'):linear(240/145/16);
							v:GetChild('Judgment'):x(80*multi);
							v:GetChild('Judgment'):zoomx(0.5);
							v:GetChild('Combo'):linear(240/145/16);
							v:GetChild('Combo'):x(80*multi);
							v:GetChild('Combo'):zoomx(0.5);
							v:linear(240/140 - 240/140/16);
							v:addx(multi*(160-j*20));
							v:GetChild('Judgment'):linear(240/140 - 240/140/16);
							v:GetChild('Judgment'):x(multi*j*20);
							v:GetChild('Judgment'):zoomx(1);
							v:GetChild('Combo'):linear(240/140 - 240/140/16);
							v:GetChild('Combo'):x(multi*j*20);
							v:GetChild('Combo'):zoomx(1);
							v:zoomx(1);
						end
						
						for j = 1,4 do
							v:linear(240/145/16);
							v:x(SCREEN_CENTER_X);
							v:GetChild('Judgment'):linear(240/145/16);
							v:GetChild('Judgment'):x(80*multi);
							v:GetChild('Judgment'):zoomx(0.5);
							v:GetChild('Combo'):linear(240/145/16);
							v:GetChild('Combo'):x(80*multi);
							v:GetChild('Combo'):zoomx(0.5);
							v:zoomx(2);
							v:linear(240/140/2 - 240/140/16);
							v:addx(multi*(80-j*20));
							v:GetChild('Judgment'):linear(240/140/2 - 240/140/16);
							v:GetChild('Judgment'):x(80*multi + j*20*multi);
							v:GetChild('Judgment'):zoomx(1);
							v:GetChild('Combo'):linear(240/140/2 - 240/140/16);
							v:GetChild('Combo'):x(80*multi + j*20*multi);
							v:GetChild('Combo'):zoomx(0.5);
							v:zoomx(1);
						end
					end
				end
				fgcurcommand = fgcurcommand + 1;
			end
			
			
			
			if beat >= 128 and fgcurcommand == 2 then
				for i,v in pairs(prefix_plr) do
					local multi = -1; if i == 2 then multi = 1; end
					if v then
						
						--v:x(SCREEN_CENTER_X);
						--v:GetChild('Judgment'):x(multi*160);
						--v:GetChild('Combo'):x(multi*160);
						
						v:x(SCREEN_CENTER_X+multi*320);
						v:GetChild('Judgment'):x(0);
						v:GetChild('Judgment'):x(multi*-160);
						v:GetChild('Combo'):x(0);
						v:GetChild('Combo'):x(multi*-160);
					end
				end
				fgcurcommand = fgcurcommand + 1;
			end
			
			
			if beat >= 198 and fgcurcommand == 3 then
				for i,v in pairs(prefix_plr) do
					local multi = -1; if i == 2 then multi = 1; end
					if v then
						
						v:x(SCREEN_CENTER_X);
						v:GetChild('Judgment'):x(multi*160);
						v:GetChild('Combo'):x(multi*160);
						
						--v:x(SCREEN_CENTER_X+multi*320);
						--v:GetChild('Judgment'):x(multi*160);
						--v:GetChild('Combo'):x(multi*160);
					end
				end
				fgcurcommand = fgcurcommand + 1;
			end
			
			
			
			-------------------------
			-- BEAT SPECIFIC STUFF --
			-------------------------
			if beat > 47.750 and beat < 52.5 or
				beat > 79.750 and beat < 84.5 then
				for i,v in pairs(prefix_plr) do
					if v then
						v:rotationx(math.cos(beat*math.pi*2)*auxvar:getaux())
						v:rotationy(math.sin(beat*math.pi*2)*auxvar:getaux())
					end
				end
			end
			
			if beat > 211.5 and beat < 260 then
				for i,v in pairs(prefix_plr) do
					if v then
						local add = 0;
						if i == 1 then add = 180; end
						if beat < 259.500 then
							v:rotationx(math.sin(beat*math.pi)*90 + 90 + add);
							v:GetChild('Judgment'):rotationx((math.sin(beat*math.pi)*90 + 90 + add)*-1);
							v:GetChild('Combo'):rotationx((math.sin(beat*math.pi)*90 + 90 + add)*-1);
						else
							v:rotationx(0);
							v:GetChild('Judgment'):rotationx(0);
							v:GetChild('Combo'):rotationx(0);
							GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse');
						end
					end
				end
			end
			
			--------------------------------------------------------------
			-- Message reader to make specific values of the actor aux. --
			--------------------------------------------------------------
			if prefix_curmessage <= table.getn(prefix_messages) then
				if prefix_time >= prefix_messages[prefix_curmessage][1] then
					MESSAGEMAN:Broadcast(prefix_messages[prefix_curmessage][2]);
					prefix_curmessage = prefix_curmessage + 1;
				end
			end
			
			self:queuecommand('Update2');
			
		end"


		Update2Command="%function(self)
		self:sleep(0.02);
		self:queuecommand('Update');
		end"

	/>
	
	<BitmapText
		Font="Common Normal"
		Text="test"
		OnCommand="x,SCREEN_CENTER_X;y,SCREEN_CENTER_Y;effectclock,music;playcommand,SetTime;hidden,1"
		SetTimeCommand="%function(self) self:settext(self:GetSecsIntoEffect()); prefix_time = PREFSMAN:GetPreference('GlobalOffsetSeconds') - (-0.402 - -0.409) + tonumber(self:GetText()); self:sleep(0.02); self:queuecommand('SetTime'); end"
	/>
	
	<!-- Aux actor, VERY IMPORTANT -->
	<Layer
		Type="Quad"
		OnCommand=""
		InitCommand="%function(self) auxvar = self; self:hidden(1) end"
		RollAroundMessageCommand="finishtweening;aux,0;linear,240/145/16;aux,50;sleep,240/145 - 240/145/16;linear,240/145/16;aux,0"
		ZoomZMessageCommand="%function()
			for i,v in pairs(prefix_plr) do
				local multi = -1; if i == 2 then multi = 1; end
				if v then
					v:zoomz(75);
					v:decelerate(240/128/4);
					v:zoomz(1);
				end
			end
		end"
		RotRandMessageCommand="%function()
			local multi = -1; if math.mod(prefix_inc,2) == 0 then multi = 1; end
			local rand = math.random(15,30)*multi;
			for i,v in pairs(prefix_plr) do
				if v then
					v:rotationz(rand);
				end
			end
			prefix_inc = prefix_inc + 1;
		end"
		RotResetMessageCommand="%function()
			for i,v in pairs(prefix_plr) do
				if v then
					v:rotationz(0);
				end
			end
		end"
		SkewMessageCommand="%function()
			for i,v in pairs(prefix_plr) do
				if v then
					v:linear(240/145/16);
					v:skewx(1);
					v:linear(240/145/16);
					v:skewx(-1);
					v:linear(240/145/16);
					v:skewx(0);
					v:sleep(240/145/16);
					
					v:linear(240/145/16);
					v:skewx(-1);
					v:linear(240/145/16);
					v:skewx(1);
					v:linear(240/145/16);
					v:skewx(0);
					v:sleep(240/145/16);
				end
			end
		end"
	/>
	
</children></ActorFrame>