<ActorFrame><children>

	<Layer
		Type="Quad"
		InitCommand="hidden,1"
		OnCommand="sleep,GAMESTATE:GetCurrentSong():MusicLengthSeconds()"
	/>
	
	<Layer
		Type="Quad"
		InitCommand="hidden,1"
		OnCommand="%function(self)
				fgcurcommand = 1;
				checked = false;
				prefix_time = 0;
				
				prefix_curmessage = 1;
				
				
				prefix_messages = {
				{35.921,'SmallVib'},
				{36.376,'Rotation'},
				{92.739,'Rotation2'},
				};
				
				
				prefix_mods = {
				
				{0,200,'2.25x,-999999% Cover,*10000 No Beat','end'},
				
				{0,5.694,'*10000 Beat','end'},
				
				{5.694,7.285,'0.5x,*1.25 -200% Mini','end'},
				
				{7.285,21.830,'*0.06875 -100% Flip,*0.14 No Mini,*0.1 2.25x,*0.1 150% Wave','end'},
				{20.012,21.376,'*1.5 No Wave','end'},
				{21.376,32.739,'*4 0.15x,*3 150% Mini,*16 2000% Bumpy,*2 Centered,*8 -97% SuddenOffset,*8 800% Sudden,*2 25% Flip','end'},
				
				{21.830,31.376,'*10000 314.15925% Dizzy','end'},
				{31.376,32.739,'*4 No Dizzy','end'},
				
				{32.739,34.557,'*0.25 200% Mini,*1 10000% Bumpy,*0.015 -110% SuddenOffset,800% Sudden,*0.01 0x,Centered,25% Flip','end'},
				{34.557,35.921,'*0.25 150% Mini,*1 2000% Bumpy,*0.015 -97% SuddenOffset,800% Sudden,*0.01 0.22x,Centered,25% Flip','end'},
				
				{35.921,50.467,'*10000 150% Mini,*10000 2000% Bumpy,*10000 -97% SuddenOffset,0.22x,*10000 Centered,*10000 25% Flip,*10000 800% Sudden','end'},
				
				{36.148,50.239,'*10000 200% Beat','end'},
				
				{36.376,50.239,'*0.1 0.15x,*0.1 -97.5% SuddenOffset','end'},
				
				{50.239,50.921,'*4 2x,*4 No Mini,*48 No Bumpy,*3 No Centered,*8 No SuddenOffset,*24 No Sudden,*2 No Flip','end'},
				
				{50.921,57.739,'*0.5 -400% Mini,*0.05 40% Reverse,*10000 Sudden,*10000 130% SuddenOffset,*0.25 1x','end'},
				{57.739,58.194,'*10 No Mini,*1 No Flip,*10000 No Sudden,*2 0.5x,*8 200% Tornado','end'},
				
				{58.194,83.648,'*8 200% Tornado,0.5x,*10000 No Centered,*4 No Stealth','end'},
				
				{58.194,240/132*2 - 0.050,'*0.52 400% Centered','len'},
				{58.194+240/132*2*1,240/132*2 - 0.050,'*0.52 400% Centered','len'},
				{58.194+240/132*2*2,240/132*2 - 0.050,'*0.52 400% Centered','len'},
				{58.194+240/132*2*3,240/132*2 - 0.050,'*0.52 400% Centered','len'},
				{58.194+240/132*2*4,240/132*2 - 0.050,'*0.52 400% Centered','len'},
				{58.194+240/132*2*5,240/132*2 - 0.050,'*0.52 400% Centered','len'},
				{58.194+240/132*2*6,240/132*2,'*0.52 400% Centered','len'},
				
				{61.376+240/132*2*0,240/132/4,'*4 Stealth','len'},
				{61.376+240/132*2*1,240/132/4,'*4 Stealth','len'},
				{61.376+240/132*2*2,240/132/4,'*4 Stealth','len'},
				{61.376+240/132*2*3,240/132/4,'*4 Stealth','len'},
				{61.376+240/132*2*4,240/132/4,'*4 Stealth','len'},
				{61.376+240/132*2*5,240/132/4,'*4 Stealth','len'},
				
				{61.830+240/132*2*0,240/132*2,'*10000 100.01% Reverse','len'},
				{61.830+240/132*2*1,240/132*2,'*10000 No Reverse','len'},
				{61.830+240/132*2*2,240/132*2,'*10000 100.01% Reverse','len'},
				{61.830+240/132*2*3,240/132*2,'*10000 No Reverse','len'},
				{61.830+240/132*2*4,240/132*2,'*10000 100.01% Reverse','len'},
				{61.830+240/132*2*5,240/132*2,'*10000 No Reverse','len'},
				
				{72.285,87.285,'*4 200% Bumpy','end'},
				{83.648,87.285,'*1.1 No Centered,*1.1 No Tornado,*1.1 No Bumpy','end'},
				
				{85.467,87.285,'*9 No Mini','end'},
				{85.467,240/132/8,'*9 200% Mini','len'},
				{85.921,240/132/8,'*9 200% Mini','len'},
				{86.376,240/132/8,'*9 200% Mini','len'},
				{86.830,240/132/8,'*9 200% Mini','len'},
				{85.467,240/132/2,'*1.5 -150% Flip','len'},
				{86.376,240/132/2,'*2.5 50% Flip','len'},
				
				{87.285,90.467,'50% Flip,*0.628 200% Distant,4x','end'},
				{90.467,92.000,'*2 2.25x','end'},
				{90.467,240/132/16,'37% Flip,*8 150% Distant','len'},
				{90.580,240/132/16,'25% Flip,*8 100% Distant','len'},
				{90.694,240/132/16,'12% Flip,*8 50% Distant','len'},
				{90.807,240/132/16,'No Flip,*8 Overhead','len'},
				
				{90.921,999,'*16 0.15x,*3 150% Mini,*32 2000% Bumpy,*4 Centered,*4 -97% SuddenOffset,*8 800% Sudden,*2 25% Flip','end'},
				
				{101.830,999,'*0.165 200% Mini,*1.5 10000% Bumpy,*0.01 -110% SuddenOffset,800% Sudden,*0.01 0x,Centered,25% Flip','end'},
				
				
				{0,200,'*10000 Stealth,*10000 Dark','end',2},
				
				}
				
				
				
				prefix_plr = {};
				
				self:queuecommand('Update');
			end"
		
		UpdateCommand="%function(self)
		
			local beat = GAMESTATE:GetSongBeat();
			
			-----------------------
			-- Player mod resets --
			-----------------------
			GAMESTATE:ApplyGameCommand('mod,clearall')
			
			--------------------------------------------------------------------------------------------
			-- Mod reader code originally coded by Taronuke, remade to support end times and lengths. --
			--------------------------------------------------------------------------------------------
			for i,v in pairs(prefix_mods) do
				if prefix_time >=v[1] then
					if (v[4] == 'len' and prefix_time <=v[1]+v[2]) or (v[4] == 'end' and prefix_time <=v[2]) then
						if table.getn(v) == 5 then
							GAMESTATE:ApplyGameCommand('mod,'..v[3],v[5]);
						else
							GAMESTATE:ApplyGameCommand('mod,'..v[3]);
						end
					end
				end
			end
			
			
			
			if beat >= 0 and not checked then
				
				table.insert(prefix_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP1'));
				table.insert(prefix_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP2'));
				checked = true;
				
				SCREENMAN:GetTopScreen():GetChild('Overlay'):hidden(1);
				SCREENMAN:GetTopScreen():GetChild('Underlay'):hidden(1);
				for i,v in pairs(prefix_plr) do
					local multi = -1; if i == 2 then multi = 1; end
					if v then
						v:rotationx(0);							
						v:rotationy(0);
						v:rotationz(0);
						v:x(SCREEN_CENTER_X+160*multi);
						v:y(SCREEN_CENTER_Y);
						v:zoomx(1);
						v:zoomy(1);
						v:GetChild('Judgment'):stopeffect();
						
						SCREENMAN:GetTopScreen():GetChild('ScoreP'..i):hidden(1);
						SCREENMAN:GetTopScreen():GetChild('LifeP'..i):hidden(1);
						
						v:x(SCREEN_CENTER_X);
						v:GetChild('Judgment'):x(160*multi);
						v:GetChild('Combo'):x(160*multi);
					end
				end
			end
			
			if beat >= 48 and fgcurcommand == 1 then
				for i,v in pairs(prefix_plr) do
					if v then
						v:GetChild('Judgment'):rotationz(0);
						v:GetChild('Combo'):rotationz(0);
						
						v:linear(10);
						v:rotationz(3960);
						
						v:GetChild('Judgment'):linear(10);
						v:GetChild('Judgment'):rotationz(-3960);
						v:GetChild('Combo'):linear(10);
						v:GetChild('Combo'):rotationz(-3960);
					end
				end
				fgcurcommand = fgcurcommand + 1;
			end
			
			if beat >= 203 and fgcurcommand == 2 then
				for i,v in pairs(prefix_plr) do
					if v then
						v:vibrate();
						v:effectmagnitude(5,5,0);
					end
				end
				fgcurcommand = fgcurcommand + 1;
			end
			
			
			
			
			-------------------------
			-- BEAT SPECIFIC STUFF --
			-------------------------
			if beat > 79 and beat < 80 then
				for i,v in pairs(prefix_plr) do
					if v then
						v:vibrate();
						v:effectmagnitude(auxvar:getaux(),auxvar:getaux(),0);
					end
				end
			end
			
			if beat > 80 and beat < 112 then
				for i,v in pairs(prefix_plr) do
					if v then
						v:effectmagnitude(0,0,0);
						v:rotationx(math.cos(beat*math.pi/2)*auxvar:getaux());
						v:rotationy(math.sin(beat*math.pi/2)*auxvar:getaux());
					end
				end
			end
			
			if beat > 204 and beat < 219.500 then
				for i,v in pairs(prefix_plr) do
					if v then
						v:effectmagnitude(0,0,0);
						v:rotationx(math.cos(beat*math.pi/2)*auxvar:getaux());
						v:rotationy(math.sin(beat*math.pi/2)*auxvar:getaux());
					end
				end
			end
			
			if beat > 219.500 and beat < 999 then
				for i,v in pairs(prefix_plr) do
					if v then
						v:effectmagnitude(0,0,0);
						v:rotationx(math.cos(beat*math.pi/2)*auxvar:getaux());
						v:rotationy(-math.sin(beat*math.pi/2)*auxvar:getaux());
					end
				end
			end
			
			--------------------------------------------------------------
			-- Message reader to make specific values of the actor aux. --
			--------------------------------------------------------------
			if prefix_curmessage <= table.getn(prefix_messages) then
				if prefix_time >= prefix_messages[prefix_curmessage][1] then
					MESSAGEMAN:Broadcast(prefix_messages[prefix_curmessage][2]);
					prefix_curmessage = prefix_curmessage + 1;
				end
			end
			
			self:queuecommand('Update2');
			
		end"


		Update2Command="%function(self)
		self:sleep(0.02);
		self:queuecommand('Update');
		end"

	/>
	
	<BitmapText
		Font="Common Normal"
		Text="test"
		OnCommand="x,SCREEN_CENTER_X;y,SCREEN_CENTER_Y;effectclock,music;playcommand,SetTime;hidden,1"
		SetTimeCommand="%function(self) self:settext(self:GetSecsIntoEffect()); prefix_time = PREFSMAN:GetPreference('GlobalOffsetSeconds') - (0.006 - 0.000) + tonumber(self:GetText()); self:sleep(0.02); self:queuecommand('SetTime'); end"
	/>
	
	<!-- Aux actor, VERY IMPORTANT -->
	<Layer
		Type="Quad"
		OnCommand=""
		InitCommand="%function(self) auxvar = self; self:hidden(1) end"
		SmallVibMessageCommand="finishtweening;aux,10;linear,240/132/4;aux,0"
		RotationMessageCommand="finishtweening;aux,0;linear,240/132*4;aux,3;sleep,240/132*2;linear,240/132*1.5;aux,0"
		Rotation2MessageCommand="finishtweening;aux,0;linear,240/132/4*12;aux,3;sleep,240/132/4*3;linear,240/132/8;aux,0;linear,240/132/8;aux,3;sleep,240/132/4*3;linear,240/132/4;aux,0"
	/>
	
</children></ActorFrame>