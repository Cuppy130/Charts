<ActorFrame><children>

	<Layer
		Type="Quad"
		InitCommand="hidden,1"
		OnCommand="sleep,GAMESTATE:GetCurrentSong():MusicLengthSeconds()"
	/>
	
	<Layer
		Type="Quad"
		InitCommand="hidden,1"
		OnCommand="%function(self)
				fgcurcommand = 1;
				checked = false;
				prefix_time = 0;
				
				prefix_curmessage = 1;
				
				
				prefix_messages = {
				
				{2.100,'Growl'},
				
				{7.397,'Tall'},
				{8.320,'Yai'},
				{10.627,'NullMini'},
				{11.089,'Tall'},
				{12.012,'Yai'},
				{14.320,'Short'},
				{14.781,'Tall'},
				{15.704,'Yai'},
				
				{17.550,'MiniShort'},
				
				{22.166,'Tall2'},
				{24.250,'Growl'},
				{24.935,'YaiShort'},
				{25.397,'Short2'},
				{25.858,'Tall2'},
				{28.397,'YaiSuperShort'},
				{29.550,'Tall2'},
				
				{31.627,'Growl'},
				
				{32.320,'YaiShort'},
				{32.781,'Short2'},
				{33.243,'Tall2'},
				
				{64.627,'VibVerse'},
				
				
				{103.397,'Tall'},
				{104.320,'Yai'},
				
				{106.627,'NullMini'},
				
				{107.089,'Tall'},
				{108.012,'Yai'},
				
				{109.781,'ShortTall'},
				
				{111.704,'Yai'},
				
				{113.550,'MiniShort'},
				};
				
				
				prefix_mods = {
				
				{0,200,'2.5x,-999999% Cover,*10000 No Beat','end'},
				
				{0.000,2.089,'*10000 Beat','end'},
				
				{3.243,240/130/8,'*8 Stealth','len'},
				{3.474,240/130/4,'*8 No Stealth','len'},
				
				{3.704,240/130/4,'*0.5 No Brake','len'},
				{3.704,0.050,'*10000 20% Brake','len'},
				{3.704+240/130/4*1,240/130/4,'*1 No Brake','len'},
				{3.704+240/130/4*1,0.050,'*10000 40% Brake','len'},
				{3.704+240/130/4*2,240/130/4,'*1.5 No Brake','len'},
				{3.704+240/130/4*2,0.050,'*10000 60% Brake','len'},
				{3.704+240/130/4*3,240/130/4,'*2 No Brake','len'},
				{3.704+240/130/4*3,0.050,'*10000 80% Brake','len'},
				
				{5.550,240/130/2,'*16 2000% Dizzy','len'},
				{6.474,240/130/2,'*32 No Dizzy','len'},
				
				{9.243,10.627,'*8 Mini','end'},
				
				{9.474,240/130/16,'*12 150% Distant','len'},
				{9.474+240/130/16*1,240/130/16,'*24 150% Hallway','len'},
				{9.474+240/130/16*2,240/130/16,'*24 150% Distant','len'},
				{9.474+240/130/16*3,240/130/16,'*24 150% Hallway','len'},
				{9.474+240/130/16*4,240/130/16,'*12 Overhead','len'},
				
				{10.166,240/130/4,'*12 No Tornado,*24 No Bumpy','len'},
				{10.166,0.050,'*10000 400% Tornado,*10000 800% Bumpy','len'},
				
				{12.935,13.281,'*8 Mini','end'},
				{13.281,14.000,'*8 No Mini','end'},
				
				{13.166,13.627,'*24 150% Distant','end'},
				{13.512,240/130/24,'*32 150% Hallway','len'},
				{13.627,240/130/24,'*32 150% Distant','len'},
				{13.704,240/130/24,'*32 150% Hallway','len'},
				{13.781,240/130/4,'*16 Overhead','len'},
				
				
				{13.858,240/130/16,'*10000 40% Stealth','len'},
				{13.974,240/130/16,'*10000 75% Stealth','len'},
				{14.089,240/130/16,'*10000 90% Stealth','len'},
				{14.204,240/130/16,'*10000 Stealth','len'},
				{14.320,240/130/16,'*4 No Stealth','len'},
				
				{16.397,16.512,'*12 75% Mini','end'},
				{16.512,16.627,'*12 150% Mini','end'},
				{16.627,17.000,'*8 No Mini','end'},
				
				{16.858,240/130/24,'*16 150% Hallway','len'},
				{16.935,240/130/24,'*32 150% Distant','len'},
				{17.012,240/130/24,'*32 150% Hallway','len'},
				{17.089,240/130/16,'*24 150% Distant','len'},
				{17.204,240/130/16,'*24 150% Hallway','len'},
				{17.320,240/130/4,'*8 Overhead','len'},
				
				
				{18.474,0.461,'*1.1 25% Reverse,*1.1 25% Flip,*5.5 -125% Mini','len'},
				{18.474,0.077,'*24 200% Drunk','len'},
				{18.550,0.077,'*48 -200% Drunk','len'},
				{18.627,0.077,'*48 200% Drunk','len'},
				{18.704,0.231,'*24 No Drunk','len'},
				{18.935,0.461,'*4 No Reverse,*4 No Flip,*20 No Mini','len'},
				
				{18.474+0.6923,0.461,'*1.1 25% Reverse,*1.1 25% Flip,*5.5 -125% Mini','len'},
				{18.474+0.6923,0.077,'*24 -200% Drunk','len'},
				{18.550+0.6923,0.077,'*48 200% Drunk','len'},
				{18.627+0.6923,0.077,'*48 -200% Drunk','len'},
				{18.704+0.6923,0.231,'*24 No Drunk','len'},
				{18.935+0.6923,0.461,'*4 No Reverse,*4 No Flip,*20 No Mini','len'},
				
				{18.474+0.6923*2,0.461,'*1.1 25% Reverse,*1.1 25% Flip,*5.5 -125% Mini','len'},
				{18.474+0.6923*2,0.077,'*24 200% Drunk','len'},
				{18.550+0.6923*2,0.077,'*48 -200% Drunk','len'},
				{18.627+0.6923*2,0.077,'*48 200% Drunk','len'},
				{18.704+0.6923*2,0.231,'*24 No Drunk','len'},
				{18.935+0.6923*2,0.461,'*4 No Reverse,*4 No Flip,*20 No Mini','len'},
				
				{20.550,240/130/8,'*8 Tipsy','len'},
				{20.781,240/130/8,'*8 No Tipsy','len'},
				
				{23.089,240/130/2,'*8 No Tipsy','len'},
				{23.089,240/130/16*3,'*8 Tipsy','len'},
				--{24.474,240/130/2,'*8 No Tipsy','len'},
				--{24.474,240/130/16*3,'*8 Tipsy','len'},
				{26.781,240/130/2,'*8 No Tipsy','len'},
				{26.781,240/130/16*3,'*8 Tipsy','len'},
				{28.166,240/130/2,'*8 No Tipsy','len'},
				{28.166,240/130/16*3,'*8 Tipsy','len'},
				{30.474,240/130/2,'*8 No Tipsy','len'},
				{30.474,240/130/16*3,'*8 Tipsy','len'},
				{34.166,240/130/2,'*8 No Tipsy','len'},
				{34.166,240/130/16*3,'*8 Tipsy','len'},
				
				{22.397,240/130/8,'*8 Drunk','len'},
				{22.627,240/130/8,'*16 -100% Drunk','len'},
				{22.858,240/130/8,'*8 No Drunk','len'},
				--{23.781,240/130/8,'*8 Drunk','len'},
				--{24.012,240/130/8,'*16 -100% Drunk','len'},
				--{24.243,240/130/8,'*8 No Drunk','len'},
				{26.089,240/130/8,'*8 Drunk','len'},
				{26.320,240/130/8,'*16 -100% Drunk','len'},
				{26.550,240/130/8,'*8 No Drunk','len'},
				{27.474,240/130/8,'*8 Drunk','len'},
				{27.704,240/130/8,'*16 -100% Drunk','len'},
				{27.935,240/130/8,'*8 No Drunk','len'},
				{29.781,240/130/8,'*8 Drunk','len'},
				{30.012,240/130/8,'*16 -100% Drunk','len'},
				{30.243,240/130/8,'*8 No Drunk','len'},
				{33.474,240/130/8,'*8 Drunk','len'},
				{33.704,240/130/8,'*16 -100% Drunk','len'},
				{33.935,240/130/8,'*8 No Drunk','len'},
				
				{34.858,35.320,'*4 No Mini','end'},
				{34.858,0.050,'*10000 -100% Mini','len'},
				
				{35.320,240/130/8,'*8 -25% Flip','len'},
				{35.520,240/130/8,'*8 -50% Flip','len'},
				{35.781,240/130/8,'*8 -75% Flip','len'},
				{36.012,240/130/8,'*8 -50% Flip','len'},
				{36.243,240/130/8,'*8 -25% Flip','len'},
				{36.474,240/130/8,'*8 No Flip','len'},
				
				{36.935,40.627,'*0.25 200% Drunk','end'},
				{40.627,48.012,'*0.25 -200% Drunk','end'},
				{48.012,51.704,'*0.25 No Drunk','end'},
				
				{36.704,50.089,'*10000 200% Beat','end'},
				
				
				
				{21.243,21.704,'*4 200% Mini','end'},
				{21.704,22.500,'*4 No Mini','end'},
				
				{28.627,29.089,'*4 200% Mini','end'},
				{29.089,30.000,'*4 No Mini','end'},
				
				{49.858,240/130/2,'*16 2000% Dizzy','len'},
				{50.781,240/130/2,'*32 No Dizzy','len'},
				
				{51.704,59.089,'*8 No Drunk,*8 No Tipsy','end'},
				
				{51.704,0.050,'*48 400% Drunk,*48 400% Tipsy','len'},
				{52.050,0.050,'*48 -400% Drunk,*48 -400% Tipsy','len'},
				{52.397,0.050,'*48 400% Drunk,*48 400% Tipsy','len'},
				{52.627,0.050,'*48 -400% Drunk,*48 -400% Tipsy','len'},
				{52.974,0.050,'*48 400% Drunk,*48 400% Tipsy','len'},
				{53.320,0.050,'*48 -400% Drunk,*48 -400% Tipsy','len'},
				{53.666,0.050,'*48 400% Drunk,*48 400% Tipsy','len'},
				{54.012,0.050,'*48 -400% Drunk,*48 -400% Tipsy','len'},
				{54.358,0.050,'*48 400% Drunk,*48 400% Tipsy','len'},
				{54.704,0.050,'*48 -400% Drunk,*48 -400% Tipsy','len'},
				{54.935,0.050,'*48 400% Drunk,*48 400% Tipsy','len'},
				{55.166,0.050,'*48 -400% Drunk,*48 -400% Tipsy','len'},
				{55.397,0.050,'*48 400% Drunk,*48 400% Tipsy','len'},
				{55.743,0.050,'*48 -400% Drunk,*48 -400% Tipsy','len'},
				{56.089,0.050,'*48 400% Drunk,*48 400% Tipsy','len'},
				{56.320,0.050,'*48 -400% Drunk,*48 -400% Tipsy','len'},
				{56.666,0.050,'*48 400% Drunk,*48 400% Tipsy','len'},
				{57.012,0.050,'*48 -400% Drunk,*48 -400% Tipsy','len'},
				{57.358,0.050,'*48 400% Drunk,*48 400% Tipsy','len'},
				{57.704,0.050,'*48 -400% Drunk,*48 -400% Tipsy','len'},
				{58.050,0.050,'*48 400% Drunk,*48 400% Tipsy','len'},
				{58.397,0.050,'*48 -400% Drunk,*48 -400% Tipsy','len'},
				{58.627,0.050,'*48 400% Drunk,*48 400% Tipsy','len'},
				{58.858,0.050,'*48 -400% Drunk,*48 -400% Tipsy','len'},
				
				{59.089,67.000,'*48 No Drunk,*48 No Tipsy','end'},
				{59.089,0.050,'*48 400% Drunk,*48 400% Tipsy','len'},
				{59.204,0.050,'*48 -400% Drunk,*48 -400% Tipsy','len'},
				{59.435,0.050,'*48 400% Drunk,*48 400% Tipsy','len'},
				{59.550,0.050,'*48 -400% Drunk,*48 -400% Tipsy','len'},
				{59.781,0.050,'*48 400% Drunk,*48 400% Tipsy','len'},
				{59.897,0.050,'*48 -400% Drunk,*48 -400% Tipsy','len'},
				{60.012,0.050,'*48 400% Drunk,*48 400% Tipsy','len'},
				{60.127,0.050,'*48 -400% Drunk,*48 -400% Tipsy','len'},
				{60.358,0.050,'*48 400% Drunk,*48 400% Tipsy','len'},
				{60.474,0.050,'*48 -400% Drunk,*48 -400% Tipsy','len'},
				{60.704,0.050,'*48 400% Drunk,*48 400% Tipsy','len'},
				{60.820,0.050,'*48 -400% Drunk,*48 -400% Tipsy','len'},
				{61.050,0.050,'*48 400% Drunk,*48 400% Tipsy','len'},
				{61.166,0.050,'*48 -400% Drunk,*48 -400% Tipsy','len'},
				{61.397,0.050,'*48 400% Drunk,*48 400% Tipsy','len'},
				{61.512,0.050,'*48 -400% Drunk,*48 -400% Tipsy','len'},
				{61.743,0.050,'*48 400% Drunk,*48 400% Tipsy','len'},
				{61.858,0.050,'*48 -400% Drunk,*48 -400% Tipsy','len'},
				
				{64.627,73.858,'Blind','end'},
				{65.550,69.474,'*2 Dark','end'},
				{69.000,69.474,'*10000 -500% Mini','end'},
				{69.000,69.474,'*10000 Invert','end',1},
				{69.000,69.474,'*10000 -100% Invert','end',2},
				{69.474,70.397,'*0.5 No Dark,*6 No Mini,*1.125 No Invert','end'},
				
				{73.166,73.627,'*10000 400% Beat','end',1},
				{73.166,73.627,'*10000 -400% Beat','end',2},
				
				{73.397,88.166,'*2 -75% Expand,*4 200% Drunk','end'},
				{88.166,101.550,'*2 Mini,*10000 0.225x, *10000 -500% Reverse,*10000 90.9% Centered,*24 1200% Bumpy,-25% Expand,*2 Drunk','end'},
				{99.704,103.397,'*0.6 No Mini,*7 No Bumpy,*0.15 No Expand,*0.6 No Drunk','end'},
				{101.550,104.000,'*10000 2.5x,*10000 No Reverse,*10000 No Centered','end'},
				
				
				{79.627,240/130/8,'*8 -25% Flip','len'},
				{79.858,240/130/8,'*8 -50% Flip','len'},
				{80.089,240/130/8,'*8 -75% Flip','len'},
				{80.320,240/130/8,'*8 -50% Flip','len'},
				{80.550,240/130/8,'*8 -25% Flip','len'},
				{80.781,240/130/8,'*8 No Flip','len'},
				
				{87.012,240/130/8,'*8 -25% Flip','len'},
				{87.243,240/130/8,'*8 -50% Flip','len'},
				{87.474,240/130/8,'*8 -75% Flip','len'},
				{87.704,240/130/8,'*8 -50% Flip','len'},
				{87.935,240/130/8,'*8 -25% Flip','len'},
				{88.166,240/130/8,'*8 No Flip','len'},
				
				{94.397,240/130/8,'*16 -50% Flip','len'},
				{94.627,240/130/8,'*16 -100% Flip','len'},
				{94.858,240/130/8,'*16 -150% Flip','len'},
				{95.089,240/130/8,'*16 -100% Flip','len'},
				{95.320,240/130/8,'*16 -50% Flip','len'},
				{95.550,240/130/8,'*16 No Flip','len'},
				
				{101.550,240/130/2,'*16 2000% Dizzy','len'},
				{102.474,240/130/2,'*32 No Dizzy','len'},
				
				{101.781,240/130/8,'*8 -25% Flip','len'},
				{102.012,240/130/8,'*8 -50% Flip','len'},
				{102.243,240/130/8,'*8 -75% Flip','len'},
				{102.474,240/130/8,'*8 -50% Flip','len'},
				{102.704,240/130/8,'*8 -25% Flip','len'},
				{102.935,240/130/8,'*8 No Flip','len'},
				
				{9.243+96,10.627+96,'*8 Mini','end'},
				
				{9.474+96,240/130/16,'*12 150% Distant','len'},
				{9.474+96+240/130/16*1,240/130/16,'*24 150% Hallway','len'},
				{9.474+96+240/130/16*2,240/130/16,'*24 150% Distant','len'},
				{9.474+96+240/130/16*3,240/130/16,'*24 150% Hallway','len'},
				{9.474+96+240/130/16*4,240/130/16,'*12 Overhead','len'},
				
				{10.166+96,240/130/4,'*12 No Tornado,*24 No Bumpy','len'},
				{10.166+96,0.050,'*10000 400% Tornado,*10000 800% Bumpy','len'},
				
				{108.935,109.397,'*8 Mini','end'},
				{109.397,110.000,'*8 No Mini','end'},
				
				{109.166,240/130/16,'*12 150% Distant','len'},
				{109.281,240/130/16,'*12 Overhead','len'},
				
				{109.627,240/130/24,'*16 150% Distant','len'},
				{109.704,240/130/24,'*32 150% Hallway','len'},
				{109.781,240/130/4,'*16 Overhead','len'},
				
				{16.858+96,240/130/24,'*16 150% Hallway','len'},
				{16.935+96,240/130/24,'*32 150% Distant','len'},
				{17.012+96,240/130/24,'*32 150% Hallway','len'},
				{17.089+96,240/130/16,'*24 150% Distant','len'},
				{17.204+96,240/130/16,'*24 150% Hallway','len'},
				{17.320+96,240/130/4,'*8 Overhead','len'},
				
				{114.474+0.6923*0,0.461,'*1.1 25% Reverse,*1.1 25% Flip,*5.5 -125% Mini','len'},
				{114.474+0.6923*0,0.077,'*24 200% Drunk','len'},
				{114.550+0.6923*0,0.077,'*48 -200% Drunk','len'},
				{114.627+0.6923*0,0.077,'*48 200% Drunk','len'},
				{114.704+0.6923*0,0.231,'*24 No Drunk','len'},
				{114.935+0.6923*0,0.461,'*4 No Reverse,*4 No Flip,*20 No Mini','len'},
				
				{114.474+0.6923*1,0.461,'*1.1 25% Reverse,*1.1 25% Flip,*5.5 -125% Mini','len'},
				{114.474+0.6923*1,0.077,'*24 -200% Drunk','len'},
				{114.550+0.6923*1,0.077,'*48 200% Drunk','len'},
				{114.627+0.6923*1,0.077,'*48 -200% Drunk','len'},
				{114.704+0.6923*1,0.231,'*24 No Drunk','len'},
				{114.935+0.6923*1,0.461,'*4 No Reverse,*4 No Flip,*20 No Mini','len'},
				
				{114.474+0.6923*2,0.461,'*1.1 25% Reverse,*1.1 25% Flip,*5.5 -125% Mini','len'},
				{114.474+0.6923*2,0.077,'*24 200% Drunk','len'},
				{114.550+0.6923*2,0.077,'*48 -200% Drunk','len'},
				{114.627+0.6923*2,0.077,'*48 200% Drunk','len'},
				{114.704+0.6923*2,0.231,'*24 No Drunk','len'},
				{114.935+0.6923*2,0.461,'*4 No Reverse,*4 No Flip,*20 No Mini','len'},
				
				{114.474+0.6923*3,0.461,'*1.1 25% Reverse,*1.1 25% Flip,*5.5 -125% Mini','len'},
				{114.474+0.6923*3,0.077,'*24 -200% Drunk','len'},
				{114.550+0.6923*3,0.077,'*48 200% Drunk','len'},
				{114.627+0.6923*3,0.077,'*48 -200% Drunk','len'},
				{114.704+0.6923*3,0.231,'*24 No Drunk','len'},
				{114.935+0.6923*3,0.461,'*4 No Reverse,*4 No Flip,*20 No Mini','len'},
				
				{117.243,200,'*16 200% Mini','end'},
				
				}
				
				
				prefix_inc = 1;
				
				
				local inc = 1;
				for i = 62.089,64.600,240/130/16 do
					local multi = 1; if math.mod(inc,2) == 0 then multi = -1; end
					table.insert(prefix_mods,{i,0.050,'*48 '.. multi*400 ..'% Drunk,*48 '.. multi*400 ..'% Tipsy','len'});
					inc = inc + 1;
				end
				
				inc = 1;
				for i = 64.627,66.474,240/130/32 do
					local multi = 1; if math.mod(inc,2) == 0 then multi = -1; end
					--table.insert(prefix_mods,{i,240/130/32,'*'.. 24+i ..' '.. multi*400+i*15 ..'% Drunk,*'.. 24+i ..' '.. multi*400+i*15 ..'% Tipsy','len'});
					--table.insert(prefix_mods,{i,240/130/32,'*48 '.. multi*400 ..'% Drunk,*48 '.. multi*400 ..'% Tipsy','len'});
					inc = inc + 1;
				end
				
				
				prefix_plr = {};
				
				self:queuecommand('Update');
			end"
		
		UpdateCommand="%function(self)
		
			prefix_inc = prefix_inc + 1;
			local beat = GAMESTATE:GetSongBeat();
			
			-----------------------
			-- Player mod resets --
			-----------------------
			GAMESTATE:ApplyGameCommand('mod,clearall')
			
			--------------------------------------------------------------------------------------------
			-- Mod reader code originally coded by Taronuke, remade to support end times and lengths. --
			--------------------------------------------------------------------------------------------
			for i,v in pairs(prefix_mods) do
				if prefix_time >=v[1] then
					if (v[4] == 'len' and prefix_time <=v[1]+v[2]) or (v[4] == 'end' and prefix_time <=v[2]) then
						if table.getn(v) == 5 then
							GAMESTATE:ApplyGameCommand('mod,'..v[3],v[5]);
						else
							GAMESTATE:ApplyGameCommand('mod,'..v[3]);
						end
					end
				end
			end
			
			
			
			if beat >= 0 and not checked then
				
				table.insert(prefix_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP1'));
				table.insert(prefix_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP2'));
				checked = true;
				
				SCREENMAN:GetTopScreen():GetChild('Overlay'):hidden(1);
				SCREENMAN:GetTopScreen():GetChild('Underlay'):hidden(1);
				for i,v in pairs(prefix_plr) do
					local multi = -1; if i == 2 then multi = 1; end
					if v then
						v:rotationx(0);							
						v:rotationy(0);
						v:rotationz(0);
						v:x(SCREEN_CENTER_X+160*multi);
						v:y(SCREEN_CENTER_Y);
						v:zoomx(1);
						v:zoomy(1);
						v:GetChild('Judgment'):stopeffect();
						
						SCREENMAN:GetTopScreen():GetChild('ScoreP'..i):hidden(1);
						SCREENMAN:GetTopScreen():GetChild('LifeP'..i):hidden(1);
						
						v:x(SCREEN_CENTER_X);
						v:GetChild('Judgment'):x(160*multi);
						v:GetChild('Combo'):x(160*multi);
					end
				end
			end
			
			
			
			
			if beat >= 46 and fgcurcommand == 1 then
				for i,v in pairs(prefix_plr) do
					local multi = -1; if i == 2 then multi = 1; end
					if v then
						v:bounce();
						v:effectmagnitude(0,-100,0);
						v:effectperiod(0.5);
						v:effectclock('bgm');
					end
				end
				fgcurcommand = fgcurcommand + 1;
			end
			
			if beat >= 48 and fgcurcommand == 2 then
				for i,v in pairs(prefix_plr) do
					local multi = -1; if i == 2 then multi = 1; end
					if v then
						v:stopeffect();
					end
				end
				fgcurcommand = fgcurcommand + 1;
			end
			
			if beat >= 62 and fgcurcommand == 3 then
				for i,v in pairs(prefix_plr) do
					local multi = -1; if i == 2 then multi = 1; end
					if v then
						v:bounce();
						v:effectmagnitude(0,-100,0);
						v:effectperiod(1/3);
						v:effectclock('bgm');
					end
				end
				fgcurcommand = fgcurcommand + 1;
			end
			
			if beat >= 63 and fgcurcommand == 4 then
				for i,v in pairs(prefix_plr) do
					local multi = -1; if i == 2 then multi = 1; end
					if v then
						v:bounce();
						v:effectmagnitude(0,-100,0);
						v:effectperiod(0.5);
						v:effectclock('bgm');
					end
				end
				fgcurcommand = fgcurcommand + 1;
			end
			
			if beat >= 64 and fgcurcommand == 5 then
				for i,v in pairs(prefix_plr) do
					local multi = -1; if i == 2 then multi = 1; end
					if v then
						v:stopeffect();
					end
				end
				fgcurcommand = fgcurcommand + 1;
			end
			
			if beat >= 86 and fgcurcommand == 6 then
				for i,v in pairs(prefix_plr) do
					if v then
						v:linear(240/130/4);
						v:rotationy(360);
						v:linear(240/130/4);
						v:rotationx(360);
						v:sleep(240/130*1.5);
						v:linear(240/130/4);
						v:rotationy(0);
						v:linear(240/130/4);
						v:rotationx(0);
						v:sleep(240/130*1.5);
						v:linear(240/130/4);
						v:rotationy(-360);
						v:linear(240/130/4);
						v:rotationx(-360);
						v:sleep(0.01);
						v:rotationy(0);
						v:rotationx(0);
					end
				end
				fgcurcommand = fgcurcommand + 1;
			end
			
			
			
			if beat >= 158 and fgcurcommand == 7 then
				for i,v in pairs(prefix_plr) do
					local multi = -1; if i == 2 then multi = 1; end
					if v then
						v:linear(240/130/4);
						v:rotationx(180*multi);
						v:rotationy(180*multi);
						v:rotationz(180*multi);
					end
				end
				fgcurcommand = fgcurcommand + 1;
			end
			
			
			
			
			-------------------------
			-- BEAT SPECIFIC STUFF --
			-------------------------
			if beat > 4 and beat < 6 or
				beat > 52 and beat < 54 or
				beat > 68 and beat < 70 then
				GAMESTATE:ApplyGameCommand('mod,*10000 '..auxvar:getaux()..'% Drunk,*10000 '..auxvar:getaux()..'% Tipsy');
			end
			
			if beat >= 23 and beat <= 24 or
				beat >= 38 and beat <= 40 or
				beat >= 231 and beat <= 232 or
				beat >= 246 and beat <= 248 then
				local multi = 1; if math.mod(prefix_inc,2) == 0 then multi = -1; end
				GAMESTATE:ApplyGameCommand('mod,*10000 '..auxvar:getaux() * multi..'% Mini');
			end
			
			if beat > 140 and beat < 148 then
				for i,v in pairs(prefix_plr) do
					if v then
						v:vibrate();
						v:effectmagnitude(auxvar:getaux(),auxvar:getaux(),0);
					end
				end
			end
			
			
			--------------------------------------------------------------
			-- Message reader to make specific values of the actor aux. --
			--------------------------------------------------------------
			if prefix_curmessage <= table.getn(prefix_messages) then
				if prefix_time >= prefix_messages[prefix_curmessage][1] then
					MESSAGEMAN:Broadcast(prefix_messages[prefix_curmessage][2]);
					prefix_curmessage = prefix_curmessage + 1;
				end
			end
			
			self:queuecommand('Update2');
			
		end"


		Update2Command="%function(self)
		self:sleep(0.02);
		self:queuecommand('Update');
		end"

	/>
	
	<BitmapText
		Font="Common Normal"
		Text="test"
		OnCommand="x,SCREEN_CENTER_X;y,SCREEN_CENTER_Y;effectclock,music;playcommand,SetTime;hidden,1"
		SetTimeCommand="%function(self) self:settext(self:GetSecsIntoEffect()); prefix_time = PREFSMAN:GetPreference('GlobalOffsetSeconds') - (0.006 - -0.001) + tonumber(self:GetText()); self:sleep(0.02); self:queuecommand('SetTime'); end"
	/>
	
	<!-- Aux actor, VERY IMPORTANT -->
	<Layer
		Type="Quad"
		OnCommand=""
		InitCommand="%function(self) auxvar = self; self:hidden(1) end"
		CentrifugeMessageCommand="finishtweening;aux,0;linear,2;aux,90"
		VibVerseMessageCommand="finishtweening;aux,0;linear,240/130;aux,500;sleep,1;aux,0"
		GrowlMessageCommand="finishtweening;aux,0;accelerate,240/130/8;aux,1000;decelerate,240/130/8;aux,0"
		NullMiniMessageCommand="finishtweening;aux,100;linear,240/130/4;aux,0"
		MiniShortMessageCommand="finishtweening;aux,0;linear,240/130/8;aux,100;linear,240/130/8;aux,0;linear,240/130/8;aux,100;linear,240/130/8;aux,0"
		TallMessageCommand="%function()
			for i,v in pairs(prefix_plr) do
				if v then
					v:decelerate(0.461);
					v:zoomy(2);
					v:zoomx(0.5);
					v:spring(0.461/1.5);
					v:zoomy(1);
					v:zoomx(1);
				end
			end
		end"
		Tall2MessageCommand="%function()
			for i,v in pairs(prefix_plr) do
				if v then
					v:zoomy(2);
					v:zoomx(0.5);
					v:decelerate(0.461);
					v:zoomy(1);
					v:zoomx(1);
				end
			end
		end"
		ShortMessageCommand="%function()
			for i,v in pairs(prefix_plr) do
				if v then
					v:decelerate(0.461);
					v:zoomy(0.5);
					v:zoomx(2);
				end
			end
		end"
		Short2MessageCommand="%function()
			for i,v in pairs(prefix_plr) do
				if v then
					v:zoomy(0.5);
					v:zoomx(2);
					v:decelerate(0.461);
					v:zoomy(1);
					v:zoomx(1);
				end
			end
		end"
		
		ShortTallMessageCommand="%function()
			for i,v in pairs(prefix_plr) do
				if v then
					v:decelerate(240/130/2);
					v:zoomy(0.5);
					v:zoomx(2);
					
					v:decelerate(240/130/4);
					v:zoomy(2);
					v:zoomx(0.5);
					
					v:spring(240/130/4);
					v:zoomy(1);
					v:zoomx(1);
				end
			end
		end"
		
		YaiMessageCommand="%function()
			for i,v in pairs(prefix_plr) do
				if v then
					v:decelerate(0.23077);
					v:skewx(1);
					v:decelerate(0.23077);
					v:skewx(-1);
					v:decelerate(0.23077/2);
					v:skewx(1);
					v:decelerate(0.23077/2);
					v:skewx(-1);
					v:decelerate(0.23077/2);
					v:skewx(0);
				end
			end
		end"
		YaiShortMessageCommand="%function()
			for i,v in pairs(prefix_plr) do
				if v then
					v:decelerate(0.23077);
					v:skewx(1);
					v:decelerate(0.23077);
					v:skewx(0);
				end
			end
		end"
		YaiSuperShortMessageCommand="%function()
			for i,v in pairs(prefix_plr) do
				if v then
					v:decelerate(0.23077/2);
					v:skewx(-1);
					v:decelerate(0.23077/2);
					v:skewx(0);
				end
			end
		end"
	/>
	
</children></ActorFrame>