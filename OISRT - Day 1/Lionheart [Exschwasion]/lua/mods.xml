<Mods LoadCommand = "%xero(function(self)
	
	card {0, 48, 'â–¡', 5, {.3, .3, .3}}
	card {48, 112, 'we do a little scrolling', 7, {.2, .5, 1}}
	card {112, 180, 'just read the center of the screen 4head', 9, {1, .2, .5}}
	
	if not P1 or not P2 then
		backToSongWheel('Two Player Mode Required')
		return
	end

	plr = {1, 2, 3, 4}
	
	-- judgment / combo proxies
	for pn = 1, 2 do
		setupJudgeProxy(PJ[pn], P[pn]:GetChild('Judgment'), pn)
		setupJudgeProxy(PC[pn], P[pn]:GetChild('Combo'), pn)
	end
	-- player proxies
	for pn = 1, #PP do
		PP[pn]:SetTarget(P[pn])
		P[pn]:hidden(1)
		P[pn]:SetFarDist(9999)
		if pn > 2 then
			P[pn]:SetAwake(false)
			P[pn]:SetInputPlayer((pn+1)%2)
			P[pn]:GetChild('Judgment'):hidden(1)
			P[pn]:GetChild('Combo'):hidden(1)
			PP[pn]:hidden(1)
		end
	end
	-- your code goes here here here here here:
	
	bg_upper:SetTexture(upper_tex:GetTexture())
	bg_lower:SetTexture(lower_tex:GetTexture())
	bg_upper_2:SetTexture(upper_tex:GetTexture())
	bg_lower_2:SetTexture(lower_tex:GetTexture())
	bg_upper:croptop(1)
	bg_lower:cropbottom(1)
	bg_upper_2:croptop(1)
	bg_lower_2:cropbottom(1)
	bg_upper_2:addx(-SCREEN_WIDTH)
	bg_lower_2:addx(-SCREEN_WIDTH)
	func {44, 2, inOutCirc, 1, .5, function(p)
		bg_upper:croptop(p)
		bg_lower:cropbottom(p)
		bg_upper_2:croptop(p)
		bg_lower_2:cropbottom(p)
	end}
	
	for i, v in ipairs(ztile) do
		v:stretchto(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT)
		v:customtexturerect(0,0, SCREEN_WIDTH/48, SCREEN_HEIGHT/48)
		v:texcoordvelocity(0,0)
		v:diffusealpha(i * .02)
		v:blend('add')
		v:z(-1000 + 200 * i)
	end
	
	setdefault {2, 'xmod', 100, 'dizzyholds', 100, 'stealthtype', 100, 'stealthpastreceptors', 100, 'approachtype', 100, 'modtimer', 100, 'hidemines', 400, 'zoomz', 100, 'splinextype', 1, 'ztilealphamult'}
	
	definemod{'realx', function(p, pn)
		local a = P[pn]
		if a then a:x(SCREEN_CENTER_X + p) end
	end}
	set{0, -SCREEN_WIDTH * .25, 'realx', plr = 1}
	set{0, SCREEN_WIDTH * .25, 'realx', plr = 2}
	
	func {0, function() GAMESTATE:ForceSmoothLines(0) end}
	
	definemod{'coolsquarezoom', 'coolsquarealpha', 'coolsquarerot', function(zoom, alpha, rot)
		coolsquare:zoomto(zoom, zoom)
		coolsquare:diffusealpha(alpha)
		coolsquare:rotationz(rot)
	end}
	ease {16, 28, outSine, .3, 'coolsquarealpha'}
	ease {16, 28, inOutSine, 301.7, 'coolsquarezoom'}
	func {48, function() coolsquare:hidden(1) end}
	
	for i = 0, 3 do
		local rev = 50-50*(i%2*2-1)
		for col = 0, 3 do
			ease {-.5 + 4 * i + col * .5, 1, inOutExpo, rev, 'reverse'..col}
			ease {-.25 + 4 * i + col * .5, .75, bounce, 20, 'tinyx'..col}
			ease {-.25 + 4 * i + col * .5, .75, bounce, -10, 'tinyy'..col}
		end
		ease {1.5 + 4 * i, 1, inOutExpo, 0, 'flip', 100, 'invert'}
		ease {2.25 + 4 * i, 1, inOutExpo, 25, 'flip', -75, 'invert'}
		ease {3 + 4 * i, 1, inOutExpo, 0, 'flip', 0, 'invert'}
	end
	
	--ease {15, 1, inQuad, 50, 'movey'}
	set {16, 100, 'drawsize', 100, 'sudden', 200, 'suddenoffset', 200, 'bumpyperiod'}
	ease {16, 32, linear, 60, 'rotationx', math.rad(60) * -75, 'confusionxoffset', -50, 'reverse'}
	--ease {16, 32, linear, -20, 'rotationy', plr = 1}
	--ease {16, 32, linear, 20, 'rotationy', plr = 2}
	add {16, 32, linear, 50, 'brake'}
	for i = 0, 15 do
		--ease {16 + i, 1, bounce, 0, 'movey'}
		--ease {32 + .5*i, 1, bounce, 0, 'movey'}
		set {16 + i, -100, 'tiny'}
		ease {16 + i, 1, linear, 0, 'tiny'}
		set {32 + .5*i, -150, 'tiny'}
		ease {32 + .5*i, .5, linear, 0, 'tiny'}
		set {40 + .25*i, -200, 'tiny'}
		ease {40 + .25*i, .5, linear, 0, 'tiny'}
		
		ease {15 + i, 2, spike, 100, 'bumpy'}
		ease {31.5 + .5*i, 1, spike, 100, 'bumpy'}
		ease {39.25 + .25*i, .5, spike, 100, 'bumpy'}
		--add {16 + i, 0, outCirc, 50, 'brake'}
		--add{16 + i, 1, pop, 50, 'brake'}
		--add {32 + .5*i, 0, outCirc, 50, 'brake'}
		--add {32 + .5*i, .5, pop, 50, 'brake'}
		--set {16 + i, 50, 'brake'}
		--ease {16 + i, 1, linear, 0, 'brake'}
		--set {32 + .5*i, 50, 'brake'}
		--ease {32 + .5*i, 1, linear, 0, 'brake'}
	end
	for i = 0, 7 do
		ease {40 + .5*i, 1, bounce, 0, 'movey'}
		--add {40 + .5*i, 0, outCirc, 50, 'brake'}
		--add {40+ .5*i, .5, linear, -50, 'brake'}
	end
	for i = 0, 5 do
		set {19 + 4 * i, 0, 'confusionoffset'}
		ease {19 + 4 * i, 2, inOutCirc, 628 * (i%2*2-1), 'confusionoffset'}
		add {19 + 4 * i, 2, inOutCirc, 90 * (i%2*2-1), 'coolsquarerot'}
	end

	set {40, 0, 'confusionoffset'}
	ease {40, 4, linear, 628 * 3, 'confusionoffset'}
	set {44, 0, 'confusionoffset'}
	ease {40, 4, inOutSine, 0, 'confusionxoffset', 0, 'movey'}
	ease {44, 2, inOutCirc, 0, 'brake', 0, 'drunk'}
	ease {43.5, 1, inOutCirc, 80, 'rotationx', 60, 'zoomx', 150, 'zoomy'}
	ease {43.5, 1, inOutCirc, 0, 'reverse'}
	ease {44.5, 1, inOutCirc, -45, 'rotationx', 150, 'zoomx', 60, 'zoomy', 50, 'skewx'}
	--ease {45.5, 1, inOutCirc, 50, 'tornado'}
	ease {45.5, .5, inCirc, 0, 'rotationx', 100, 'zoomx', 100, 'zoomy', 0, 'skewx'}
	ease {46, .5, outCirc, 20, 'rotationx', 80, 'zoomx', 130, 'zoomy', -50, 'drunk', -50, 'skewx'}
	ease {47.5, .5, inSine, 0, 'rotationx', 100, 'zoomx', 100, 'zoomy', 0, 'drunk', 0, 'skewx'}
	ease {46, 1, bounce, 50, 'gayholds'}
	local beet = {0, 1, 2, 2.75, 3.5}
	for i, v in ipairs(beet) do
		for j = 0, 6 do
			local mult = (i%2*2-1)*(j%2*2-1)
			local beat = 16 + v + 4 * j
			if beat < 40 then
				ease {beat, 0.5, outCirc, (j + 3)/6 * 100 * mult, 'drunk'}
			else
				ease {beat, 0.5, outCirc, 0, 'drunk'}
			end
			--ease {16 + v + 4 * j, 0.5, outCirc, (j + 3)/6 * 20 * mult, 'confusionoffset'}
			add {beat, 1, pop, 25, 'brake'}
			add {beat, 1, pop, 20, 'coolsquarezoom'}
		end
	end
	ease {46, 2, outSine, 25, 'mini', 20, 'orient'}
	set {46, 0, 'realx'}
	set {46, -300, 'movex', plr = 1}
	set {46, 300, 'movex', plr = 2}
	set {46, -900, 'movex', plr = 3}
	set {46, 900, 'movex', plr = 4}
	func {46, function()
		for pn = 3, 4 do
			if P[pn] then
				P[pn]:SetAwake(true)
				PP[pn]:hidden(0)
				P[pn]:x(SCREEN_CENTER_X)
			end
		end
	end}
	func {108, function()
		for pn = 3, 4 do
			if P[pn] then
				P[pn]:SetAwake(false)
				PP[pn]:hidden(1)
			end
		end
	end}
	definemod {'splineupper', 'splinelower', 'rotsplineupper', 'rotsplinelower', function(top, bottom, toprot, bottomrot)
		for pn = 1, 4 do
			local a = P[pn]
			if a then
				a:SetXSpline(0, -1, top, 200, -1)
				a:SetXSpline(1, -1, top, 250, -1)
				a:SetXSpline(2, -1, bottom, 350, -1)
				a:SetRotZSpline(0, -1, toprot, 200, -1)
				a:SetRotZSpline(1, -1, toprot, 250, -1)
				a:SetRotZSpline(2, -1, bottomrot, 350, -1)
				a:SetSkewSpline(0, -1, -toprot, 200, -1)
				a:SetSkewSpline(1, -1, -toprot, 250, -1)
				a:SetSkewSpline(2, -1, -bottomrot, 350, -1)
				a:NoClearSplines(true)
			end
		end
		local topoffset = (SCREEN_WIDTH * top/600)%SCREEN_WIDTH
		local bottomoffset = (SCREEN_WIDTH * bottom/600)%SCREEN_WIDTH
		bg_upper:x(SCREEN_CENTER_X + topoffset)
		bg_lower:x(SCREEN_CENTER_X + bottomoffset)
		bg_upper_2:x(SCREEN_CENTER_X - SCREEN_WIDTH + topoffset)
		bg_lower_2:x(SCREEN_CENTER_X - SCREEN_WIDTH + bottomoffset)
	end}
	
	for j = 0, 7 do
		for i = 0, j == 7 and 3 or 6 do
			set {48 + 8 * j + i, -100, 'tiny'}
			ease {48 + 8 * j + i, 1.5, outQuad, 0, 'tiny'}
		end
	end
	set {0, -50, 'drunkzperiod', 4000, 'drunkzspacing'}
	for i = 0, 29 do
		ease {48 + 2 * i, 2, spike, 200 * (i%2*2-1), 'drunkz'}
		ease {48 + 2 * i, 2, spike, 50, 'wave'}
	end
	local beet = {0, 1, 2, 2.75, 3.5, 4, 5, 6}
	for i, v in ipairs(beet) do
		for j = 0, 3 do
			local beab = 80 + v + 8 * j
			if beab < 108 then
			--ease {80 + v + 8 * j, .75, outCirc, (j + 2)/5 * 120 * (i%2*2-1), 'drunk'}
				ease {beab, .75, pop, 15 + j * 3, 'flip'}
				ease {beab, .75, pop, (beab - 80) * 1.5, 'stealth'}
			end
		end
	end
	for j = 0, 1 do
		for i = 0, 7 do
			add {32 * j + 47 + 2 * i, 2, inOutExpo, 300, 'splineupper'}
			add {32 * j + 48 + 2 * i, 2, inOutExpo, 300, 'splinelower'}
			ease {32 * j + 47 + 2 * i, 2, spike, 60, 'rotsplineupper'}
			ease {32 * j + 48 + 2 * i, 2, spike, 60, 'rotsplinelower'}
			if i%2 == 1 then
				acc {32 * j + 49 + 2 * i, -600, 'movex'}
			end
		end
		for i = 0, j == 1 and 5 or 7 do
			add {32 * j + 63 + 2 * i, 2, inOutExpo, -300, 'splineupper'}
			add {32 * j + 64 + 2 * i, 2, inOutExpo, -300, 'splinelower'}
			ease {32 * j + 63 + 2 * i, 2, spike, -60, 'rotsplineupper'}
			ease {32 * j + 64 + 2 * i, 2, spike, -60, 'rotsplinelower'}
			if i%2 == 1 then
				acc {32 * j + 65 + 2 * i, 600, 'movex'}
			end
		end
	end
	
	definemod {'tilescroll', function(p)
		bgtile_upper:texcoordvelocity(0, p)
		bgtile_lower:texcoordvelocity(0, p)
		bgtile_upper_2:texcoordvelocity(0, p * .75)
		bgtile_lower_2:texcoordvelocity(0, p * .75)
	end}
	
	definemod {'squarerot', function(p)
		square_lower:rotationz(p)
		square_upper:rotationz(p)
	end}
	
	local ord = {
		{0, 1, 2, 3},
		{2, 3, 0, 1},
		{0, 2, 1, 3},
		{1, 3, 0, 2},
	}
	for i = 0, 7 do
		local rev = 50-50*(i%2*2-1)
		for j, v in ipairs(ord[i%#ord+1]) do
			local offset = j > 2 and .5 or 0
			ease {46 + 8 * i + offset, 1, inOutCirc, rev, 'reverse'..v}
		end
		
		local start = i%2*45
		set {46.5 + 8 * i, start, 'squarerot'}
		ease {46.5 + 8 * i, 1, inOutCirc, start + 45, 'squarerot'}
		ease {46.5 + 8 * i, 1, inOutCirc, (i%2*2 - 1), 'tilescroll'}
	end
	
	local function snap(beat, dur, ez, start, stop, mod)
		set {beat, start, mod}
		ease {beat, dur, ez, stop, mod}
	end
	for i = 0, 3 do
		snap(79 + .25*i, .5, outQuad, -100, 0, 'tiny')
		snap(79 + .25*i, .5, outQuad, (i%2*2-1)*50, 0, 'noteskew')
	end
	for i = 0, 1 do
		snap(47.5 + .25*i, .5, outQuad, -100, 0, 'tiny')
		snap(47.5 + .25*i, .5, outQuad, (i%2*2-1)*50, 0, 'noteskew')
		snap(63.5 + .25*i, .5, outQuad, -100, 0, 'tiny')
		snap(63.5 + .25*i, .5, outQuad, (i%2*2-1)*50, 0, 'noteskew')
		snap(95.5 + .25*i, .5, outQuad, -100, 0, 'tiny')
		snap(95.5 + .25*i, .5, outQuad, (i%2*2-1)*50, 0, 'noteskew')
	end
	for i = 0, 15 do
		for col = 0, 3 do
			snap(108 + .25*i, .5, outQuad, -50 - 3 * i, 0, 'tiny'..col)
			snap(108 + .25*i, .5, outQuad, -50 - 3 * i, 0, 'tinyz'..col)
		end
		--snap(108 + .25*i, .5, outQuad, (i%2*2-1)*100, 0, 'noteskew')
	end
	
	set {80, 500, 'bumpyzperiod', -200, 'bumpyzoffset'}
	set {108, -300, 'movex', plr = 1}
	set {108, 300, 'movex', plr = 2}
	set {108, 0, 'realx', 0, 'splineupper', 0, 'splinelower'}
	ease {80, 32, linear, -30, 'rotationx', math.rad(-30) * -100, 'confusionxoffset', 50, 'mini', 60, 'bumpyz'}
	ease {108, 4, inOutSine, 0, 'bumpyz'}
	add {80, 32, linear, 50, 'brake'}
	ease {102, 6, linear, 0, 'brake', 0, 'mini'}
	ease {107, 1, linear, 200, 'tiny', plr = {3, 4}}
	set {108, 500, 'bumpyperiod', 100, 'drawsize', -200, 'bumpyoffset', 10000, 'arrowpathgirth', 200, 'arrowpathdrawsize'}
	ease {108, 4, inCirc, 0, 'movex', 100, 'rotationx', math.rad(50) * -100, 'confusionxoffset', 0, 'confusionoffset', -400, 'tiny', -400, 'tinyz'}
	ease {112, 2, outExpo, 150, 'rotationx', math.rad(150) * -110, 'confusionxoffset', -200, 'z', 500, 'movey', -400, 'centered2', -100, 'tiny', -100, 'tinyz', 10, 'orient', 2.5, 'xmod', 40, 'orient'}
	set {112, 200, 'tiny1', 200, 'tiny3', plr = 2}
	set {112, 200, 'tiny0', 200, 'tiny2', plr = 1}
	ease {112, 2, outExpo, -50, 'flip', 100, 'mini'}
	ease {112, 2, outExpo, -100, 'parabolaz'}
	ease {112, 64, inOutSine, -250, 'bumpy'}
	--ease {108, 64, inOutSine, -1000, 'parabolax', plr = 1}
	--ease {108, 64, inOutSine, 1000, 'parabolax', plr = 2}
	func {112, 68, function(beat, poptions)
		for pn = 1, 2 do
			poptions[pn].parabolax = math.sin(beat * math.pi * 0.125) * (beat - 108) * 15 * (pn * 2 - 3)
		end
	end}
	
	func {108, function()
		local colors = {{1, .2, .5}, {.2, .5, 1}}
		for pn = 1, 2 do
			local a = P[pn]
			if a then
				for col = 0, 3 do
					a:SetNumPathGradientPoints(col, 3)
					a:SetPathGradientPoint(0, col, -4)
					a:SetPathGradientPoint(1, col, 0)
					a:SetPathGradientPoint(2, col, 12)
					a:SetPathGradientColor(0, col, colors[pn][1], colors[pn][2], colors[pn][3], 0)
					a:SetPathGradientColor(1, col, colors[pn][1], colors[pn][2], colors[pn][3], 1)
					a:SetPathGradientColor(2, col, colors[pn][1], colors[pn][2], colors[pn][3], 0)
				end
			end
		end
	end}
	definemod {'gradientleft', 'gradientright', function(l, r)
		gradient_left:diffusealpha(l)
		gradient_right:diffusealpha(r)
	end}
	for i, v in ipairs(beet) do
		local dur = 1
		if i == 5 then dur = 0.5
		elseif i >= 3 then dur = 0.75 end
		for j = 0, 15 do
			local beat = 112 + v + 4 * j
			local pn = 1.5 + .5 * (j%2*2-1)*(i%2*2-1)
			if beat < 176 then
				for col = 0, 3 do
					if col % 2 == 2 - pn then
						ease {beat, dur, bounce, 30, 'arrowpath'..col, plr = pn}
					end
				end
				ease {beat, dur, outExpo, -300, 'tiny', plr = pn}
				ease {beat, dur, outExpo, -70, 'tiny', plr = 3 - pn}
				ease {beat, dur, outExpo, -300, 'tinyz', plr = pn}
				ease {beat, dur, outExpo, -70, 'tinyz', plr = 3 - pn}
				
				ease {beat, dur * .5, outCirc, 40 * (i%2*2-1) * (j%2*2-1), 'tipsy', plr = pn}
				ease {beat + dur * .5, dur * .5, inCirc, 0, 'tipsy', plr = pn}
				ease {beat, dur, pop, 20, 'brake'}
				add {beat - dur * .5, dur, inOutSine, 100, 'ztilepos'}
				
				local gr = pn == 1 and 'gradientleft' or 'gradientright'
				ease {beat, dur * 1.5, pop, .4, gr}
			end
		end
	end
	set {176, -97, 'spiralzperiod'}
	ease {176, .5, linear, 50, 'arrowpath'}
	ease {176, 4, linear, 200, 'mini', 200, 'gayholds', 100, 'longboys', 300, 'spiralz', 0, 'arrowpath'}

	func {108, 4, inOutSine, 0, 1, function(p)
		bg_upper:rotationx(-p*45)
		bg_lower:rotationx(p*45)
		bg_upper:diffusealpha(1 - inQuad(p))
		bg_lower:diffusealpha(1 - inQuad(p))
	end}
	func {108, function() ztiles:hidden(0) end}
	definemod {'ztilepos', 'ztilealphamult', function(p, a)
		for i, v in ipairs(ztile) do
			local z = -900 + (i * 200 + p)%1600
			local alpha = (i*200 + p)%1600/1600*.2
			v:z(z)
			v:diffusealpha(alpha * a)
		end
	end}
	func {108, 64, function(beat)
		for i, v in ipairs(ztile) do
			v:texcoordvelocity(math.sin((beat + i * .25) * math.pi * .125) * .5, math.cos((beat + i * .25) * math.pi * .125) * .5)
		end
	end}
	ease {176, 4, linear, 0, 'ztilealphamult'}
	add {176, 4, outSine, -400, 'ztilepos'}
end)"
Type = "ActorFrame"
><children>
	<!-- top half -->
	<Layer Type="Quad" OnCommand="%xero(function(self) self:stretchto(0,0,SCREEN_WIDTH,SCREEN_HEIGHT) self:diffuse(0, 0, 0, 1) self:clearzbuffer(1) end)" />
	<Layer Type="Polygon" DrawMode="Quads" Vertices="4" Name="gradient_upper" OnCommand="%xero(function(self)
		local pos = {{0, 0, 0}, {SCREEN_WIDTH, 0, 0}, {SCREEN_WIDTH, SCREEN_CENTER_Y, 0}, {0, SCREEN_CENTER_Y, 0}}
		local color = {{.2, .5, 1}, {.2, .5, 1}, {.04, .1, .2}, {.04, .1, .2}}
		for i = 0, 3 do
			self:SetVertexPosition(i, pos[i+1][1], pos[i+1][2], pos[i+1][3])
			self:SetVertexColor(i, color[i+1][1], color[i+1][2], color[i+1][3], .3)
		end
	end)"/>
	<Layer File="img/tile" Name="bgtile_upper_2" OnCommand="%xero(function(self)
		self:stretchto(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT)
		self:customtexturerect(0,0, SCREEN_WIDTH/48, SCREEN_HEIGHT/48)
		self:texcoordvelocity(0,0)
		self:diffusealpha(.05)
		self:blend('add')
	end)"/>
	<Layer File="img/tile" Name="bgtile_upper" OnCommand="%xero(function(self)
		self:stretchto(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT)
		self:customtexturerect(0,0, SCREEN_WIDTH/64, SCREEN_HEIGHT/64)
		self:texcoordvelocity(0,0)
		self:diffusealpha(.1)
		self:blend('add')
	end)"/>
	<Layer File="img/square" Name="square_upper" OnCommand="%xero(function(self)
		self:xy(SCREEN_CENTER_X, SCREEN_CENTER_Y)
		self:zoomto(301.7, 301.7)
		self:diffusealpha(.8)
		self:blend('weightedmultiply')
	end)"/>
	<Layer Type="ActorFrameTexture" Name="upper_tex" InitCommand="%xero.aft" />
	
	<!-- bottom half -->
	<Layer Type="Quad" OnCommand="%xero(function(self) self:stretchto(0,0,SCREEN_WIDTH,SCREEN_HEIGHT) self:diffuse(0, 0, 0, 1) self:clearzbuffer(1) end)" />
	<Layer Type="Polygon" DrawMode="Quads" Vertices="4" Name="gradient_lower" OnCommand="%xero(function(self)
		local pos = {{0, SCREEN_CENTER_Y, 0}, {SCREEN_WIDTH, SCREEN_CENTER_Y, 0}, {SCREEN_WIDTH, SCREEN_HEIGHT, 0}, {0, SCREEN_HEIGHT, 0}}
		local color = {{.2, .04, .1}, {.2, .04, .1}, {1, .2, .5}, {1, .2, .5}}
		for i = 0, 3 do
			self:SetVertexPosition(i, pos[i+1][1], pos[i+1][2], pos[i+1][3])
			self:SetVertexColor(i, color[i+1][1], color[i+1][2], color[i+1][3], .3)
		end
	end)"/>
	<Layer File="img/tile" Name="bgtile_lower_2" OnCommand="%xero(function(self)
		self:stretchto(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT)
		self:customtexturerect(0,0, SCREEN_WIDTH/48, SCREEN_HEIGHT/48)
		self:texcoordvelocity(0,0)
		self:diffusealpha(.05)
		self:blend('add')
	end)"/>
	<Layer File="img/tile" Name="bgtile_lower" OnCommand="%xero(function(self)
		self:stretchto(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT)
		self:customtexturerect(0,0, SCREEN_WIDTH/64, SCREEN_HEIGHT/64)
		self:texcoordvelocity(0,0)
		self:diffusealpha(.1)
		self:blend('add')
	end)"/>
	<Layer File="img/square" Name="square_lower" OnCommand="%xero(function(self)
		self:xy(SCREEN_CENTER_X, SCREEN_CENTER_Y)
		self:zoomto(301.7, 301.7)
		self:diffusealpha(.8)
		self:blend('weightedmultiply')
	end)"/>
	<Layer Type="ActorFrameTexture" Name="lower_tex" InitCommand="%xero.aft" />
	
	<Layer Type="Quad" OnCommand="%xero(function(self) self:stretchto(0,0,SCREEN_WIDTH,SCREEN_HEIGHT) self:diffuse(0, 0, 0, 1) self:clearzbuffer(1) end)" />
	<Layer File="img/square" Name="coolsquare" OnCommand="%xero(function(self)
		self:xy(SCREEN_CENTER_X, SCREEN_CENTER_Y)
		self:zoomto(301.7, 301.7)
		self:diffusealpha(.3)
		self:blend('add')
	end)"/>
	<Layer Type="Polygon" DrawMode="Quads" Vertices="4" Name="gradient_left" OnCommand="%xero(function(self)
		local pos = {{0, 0, 0}, {SCREEN_WIDTH, 0, 0}, {SCREEN_WIDTH, SCREEN_HEIGHT, 0}, {0, SCREEN_HEIGHT, 0}}
		local color = {{.2, .5, 1, 1}, {.04, .1, .2, 0}, {.04, .1, .2, 0}, {.2, .5, 1, 1}}
		for i = 0, 3 do
			self:SetVertexPosition(i, pos[i+1][1], pos[i+1][2], pos[i+1][3])
			self:SetVertexColor(i, color[i+1][1], color[i+1][2], color[i+1][3], color[i+1][4] * .3)
		end
		self:diffusealpha(0)
	end)"/>
	<Layer Type="Polygon" DrawMode="Quads" Vertices="4" Name="gradient_right" OnCommand="%xero(function(self)
		local pos = {{0, 0, 0}, {SCREEN_WIDTH, 0, 0}, {SCREEN_WIDTH, SCREEN_HEIGHT, 0}, {0, SCREEN_HEIGHT, 0}}
		local color = {{.2, .04, .1, 0}, {1, .2, .5, 1}, {1, .2, .5, 1}, {.2, .04, .1, 0}}
		for i = 0, 3 do
			self:SetVertexPosition(i, pos[i+1][1], pos[i+1][2], pos[i+1][3])
			self:SetVertexColor(i, color[i+1][1], color[i+1][2], color[i+1][3], color[i+1][4] * .3)
		end
		self:diffusealpha(0)
	end)"/>
	<Layer Type="ActorFrame" OnCommand="%xero(function(self) self:SetDrawByZPosition(true) self:fov(90) self:hidden(1) end)" Name="ztiles"><children>
		<Layer File="img/tile" Name="ztile[1]"/>
		<Layer File="img/tile" Name="ztile[2]"/>
		<Layer File="img/tile" Name="ztile[3]"/>
		<Layer File="img/tile" Name="ztile[4]"/>
		<Layer File="img/tile" Name="ztile[5]"/>
		<Layer File="img/tile" Name="ztile[6]"/>
		<Layer File="img/tile" Name="ztile[7]"/>
		<Layer File="img/tile" Name="ztile[8]"/>
	</children></Layer>
	<Layer Type="ActorFrame" OnCommand="%xero(function(self) self:SetDrawByZPosition(true) self:fov(90) end)"><children>
		<Layer Type="Sprite" Name="bg_upper" OnCommand="%xero.sprite"/>
		<Layer Type="Sprite" Name="bg_lower" OnCommand="%xero.sprite"/>
		<Layer Type="Sprite" Name="bg_upper_2" OnCommand="%xero.sprite"/>
		<Layer Type="Sprite" Name="bg_lower_2" OnCommand="%xero.sprite"/>
	</children></Layer>
	
	<Layer Type = "ActorProxy" Name = "PC[1]" />
	<Layer Type = "ActorProxy" Name = "PC[2]" />
	<Layer Type = "ActorProxy" Name = "PJ[1]" />
	<Layer Type = "ActorProxy" Name = "PJ[2]" />
	<Layer Type = "ActorProxy" Name = "PP[1]" />
	<Layer Type = "ActorProxy" Name = "PP[2]" />
	<Layer Type = "ActorProxy" Name = "PP[3]" />
	<Layer Type = "ActorProxy" Name = "PP[4]" />
</children></Mods>
