<Mods LoadCommand = "%xero(function(self)
	if not P1 or not P2 then
		backToSongWheel('Two Player Mode Required')
		return
	end

	-- judgment / combo proxies
	for pn = 1, 2 do
		setupJudgeProxy(PJ[pn], P[pn]:GetChild('Judgment'), pn)
		setupJudgeProxy(PC[pn], P[pn]:GetChild('Combo'), pn)
	end
	-- player proxies
	
	P[1]:fov(45)
	P[2]:fov(45)
	
	for pn = 1, #PP do
		PP[pn]:SetTarget(P[pn])
		P[pn]:hidden(1)
		
	end
	
	_WIDESCREEN = false
	if sw >= 800 then
		_WIDESCREEN = true
	end
	
	
	------------------------------------------- your code goes here here:
	local boundarybreak = false
	
	if boundarybreak then
		SCREENMAN:GetTopScreen():zoom(0.5)
		SCREENMAN:GetTopScreen():x(SCREEN_CENTER_X/2)
		SCREENMAN:GetTopScreen():y(SCREEN_CENTER_Y/2)
	end
	function outInExpo(t)
		t = t * 2
		if t < 1 then
			return outExpo(t)/2
		else
			
			return 0.5 + inExpo(t-1)/2
		end
	end
	
	
																																			--the funny
																																			function funny()
																																				local funnytext = {
																																					'it really do be like that sometimes',
																																					'this happened to my buddy eric',
																																					'among us in real life',
																																					'i love video games',
																																					'you\'re telling me that a shrimp fried this rice?',
																																					'we live in a society',
																																					':man_swimming: :person_swimming: :woman_swimming:',
																																					'vs lbh ner ernqvat guvf, lbh\'er n areq',
																																					'tag your friends to totally dps2004 them',
																																					'karen you wench release me from this console window at once',
																																					'clown-to-clown communication in action.',
																																					'look behind you :)',
																																					'oof ouch owie my bones',
																																					'i am living in your walls',
																																					'this modfile is sponsored by Raid: Shadow Legends',
																																					'that shit looks like the battle pass',
																																					'alvin and the chipmunks 1080p free download 2022 no virus (legit)',
																																					'hmm... getting a lot of Boss Baby vibes from this...',
																																					'the j',
																																					'you are now breathing automatically',
																																					'Hello this is Neil Cicierega aka Lemon Demon please give me your credit card information',
																																					'ayo the pizza here',
																																					'thank you for subscribing to Cat Facts',
																																					'ah, yes. ITGn\'t.',
																																					'tacs evasion',
																																					'i may be stupid',
																																					'fun fact: my eyes are upside-down!',
																																					'apply directly to the forehead',
																																					'i am become modder, destroyer of worlds',
																																					'press alt+f4 for a really cool easter egg',
																																					'based and #FF004D-pilled',
																																					'i am unable to react with frog, so i do not wish to be here anymore',
																																					--'if there were two guys on the moon and one of them killed the other with a rock would that be fucked up or what?',
																																					'perish.',
																																					'when you dance down the street like you\'ve had too much feet, you\'re in looooove',
																																					'mom found the poop sock',
																																					'how do you study for a drug test',
																																					'you\'ve met with a terrible fate, haven\'t you?',
																																					'road work ahead? i sure hope it does!',
																																				}
																																				local funnystring = funnytext[math.random(1,#funnytext)]
																																				--print(funnytext[6])
																																				local underscores = ''
																																				local spaces = ''
																																				
																																				for i = 1, string.len(funnystring) do
																																					underscores = underscores .. '_'
																																					spaces = spaces .. ' '
																																				end
																																				print('        __' .. underscores)
																																				print('       /  ' ..    spaces   .. '\\')
																																				print('      |  ' .. funnystring .. '  |')
																																				print('       \\  ' .. underscores .. '/')
																																				print('        |/')
																																				print('  .$&%.')
																																				print('  /. .\\ ')
																																				print('  \\___/')
																																				print('    _')
																																				print('   /#\\')
																																				print(' * |#| *')
																																				print('   ')
																																				print('   ^ ^')
																																				
																																			end
																																			--no more funny >:(
	
	
	local xscale = SCREEN_WIDTH / 640
	local yscale = SCREEN_HEIGHT / 480
	
	drivenp1:SetTarget(PP[1])
	drivenp2:SetTarget(PP[2])
	drivenp3:SetTarget(PP[1])
	drivenp4:SetTarget(PP[2])

	drivenp1:y(SCREEN_HEIGHT*-1)
	drivenp2:y(SCREEN_HEIGHT*-1)
	drivenp3:y(SCREEN_HEIGHT*-2)
	drivenp4:y(SCREEN_HEIGHT*1)
	
	drivenp1:hidden(1)
	drivenp2:hidden(1)
	drivenp3:hidden(1)
	drivenp4:hidden(1)

	
	
	
	-------------------------------------------floaty guy controller
	dpsmodelids = {0,0,1,1,2,2}
	
	dps = {
		x=SCREEN_CENTER_X, 
		y= SCREEN_HEIGHT*2,
		rx = 0,
		ry = 0,
		rz = 0,
		zx = 1,
		zy = 1,
		sine = xscale * 30,
		pose = 0,
	}
	
	func {0,270,function(beat,poptions)
		
		for i,v in ipairs(dpsactors) do

			if dpsmodelids[i] == dps.pose then
				v:hidden(0)
				v:x(dps.x)
				v:y(dps.y+math.sin(beat/2)*dps.sine)
				v:rotationx(dps.rx)
				v:rotationy(dps.ry)
				v:rotationz(dps.rz)
				v:zoomx(dps.zx*25)
				v:zoomy(dps.zy*25)
			else
				v:hidden(1)
			end
		end
	
	
	end}
	function youp(i)
		func {i-0.25,0.25, inSine,0,-10, function(p) 
			dps.rz = p
		end}
		func {i, function() 
			dps.pose = 1
			dps.rz = 0
		end}
		func {i,1.5, inExpo,SCREEN_CENTER_Y,0-SCREEN_CENTER_Y, function(p) 
			dps.y = p
		end}
	end
	func {14,4, outExpo,SCREEN_HEIGHT*2,SCREEN_CENTER_Y, function(p) 
		dps.y = p
	end}
	youp(30)
	func {76, function()
		dps.pose = 2
		dps.sine = 0
		dps.y = SCREEN_CENTER_Y
		dps.rz = -360
		dps.zx = 0
		dps.zy = 1
	end}
	func {76,4, outExpo,0,1,function(p)
		dps.rz = -360 + p*340
		dps.zx = p
		dps.rx = p*-20
	end}
	func {80,1, outExpo,0,1,function(p)
		dps.pose = 0
		dps.rz = -20 + 20*p
		dps.rx = -20 + 20*p
		--dps.zy = 0.75 + 0.25*p
		dps.sine = (xscale * 30) * p
	end}
	youp(86.75)
	
	func {152, function()
		dps.pose = 2
	end}
	func {152,4, outExpo,SCREEN_HEIGHT*2,SCREEN_CENTER_Y,function(p)
		
		dps.y = p
	end}
	func {152,4, outExpo,360,0,function(p)
		
		dps.rz = p
	end}
	
	func {155, function()
		dps.pose = 0
	end}
	func {158,1.5, inExpo,1,0,function(p)
		
		dps.pose = 1
		dps.zx = p
	end}
	
	
	
	
	
	definemod{'rotx','roty','rotz',function(xDegrees, yDegrees, zDegrees, plr) -- from mang
            local function mindf_reverseRotation(angleX, angleY, angleZ)
                local sinX = math.sin(angleX);
                local cosX = math.cos(angleX);
                local sinY = math.sin(angleY);
                local cosY = math.cos(angleY);
                local sinZ = math.sin(angleZ);
                local cosZ = math.cos(angleZ);
                return { math.atan2(-cosX*sinY*sinZ-sinX*cosZ,cosX*cosY),
                        math.asin(-cosX*sinY*cosZ+sinX*sinZ),
                        math.atan2(-sinX*sinY*cosZ-cosX*sinZ,cosY*cosZ) }
            end
            local DEG_TO_RAD = math.pi / 180
            local angles = mindf_reverseRotation(xDegrees * DEG_TO_RAD, yDegrees * DEG_TO_RAD, zDegrees * DEG_TO_RAD)
            local rotationx,rotationy,rotationz=
                xDegrees,
                yDegrees,
                zDegrees
            local confusionxoffset,confusionyoffset,confusionzoffset=
                (angles[1]*100),
                (angles[2]*100),
                (angles[3]*100)

            return rotationx,rotationy,rotationz,confusionxoffset,confusionyoffset,confusionzoffset
        end,
        'rotationx','rotationy','rotationz','confusionxoffset','confusionyoffset','confusionzoffset'
    }
	
	function bump(i,size,dur,skew)
		set {i,size,'bumpyx'}
		set {i,size*-0.5,'movex'}
		if skew then
			set {i,size*0.5,'skewy'}
		end
		ease {i,dur,outSine,0,'movex'}
		ease {i,dur,outSine,0,'bumpyx'}
		if skew then
			ease {i,dur,outSine,0,'skewy'}
		end
	end
	function idkyeah(i,size)

		size = size or 50
		bump(i+0.00,size,0.5)
		bump(i+0.50,-size,0.5)
		bump(i+1.00,size,0.25)
		bump(i+1.25,-size,0.5)
		bump(i+1.75,size,0.5)
	
		bump(i+2.25,-size,0.5)
		bump(i+2.75,size,0.25)
		bump(i+3.00,-size,0.25)
		bump(i+3.25,size,0.25)
		bump(i+3.50,-size,0.5)

	end
	
	function snapppp(i,p)
		ease {i, 1, outExpo,
			p,  'reverse0',
			0-p, 'reverse1',
			p,  'reverse2',
			0-p, 'reverse3'
		}
	end
	
	function rotat_e(i,alt,morealt)
		alt = alt or false
		morealt = morealt or false
		if i%2==1 then
			if ((i-1)/2)%2==0 then
				if alt then
					set {i, 45, 'rotz',plr = 1}
					set {i, -45, 'rotz',plr = 2}
					
				else
					set {i, 45, 'rotz'}
				end
				ease {i, 1, outSine, 0, 'rotz'}
				func {i,1, outSine,1.1,1,function(a)
					itgtext:zoomy(a)
				end}
				func {i,1, outSine,1.05,1,function(a)
					itgtext:zoomx(a)
				end}

			else
				if alt then
					set {i, -45, 'rotz',plr = 1}
					set {i, 45, 'rotz',plr = 2}
					
				else
					set {i, -45, 'rotz'}
				end
				ease {i, 1, outSine, 0, 'rotz'}
				func {i,1, outSine,1.1,1,function(a)
					itgtext:zoomx(a)
				end}
				func {i,1, outSine,1.05,1,function(a)
					itgtext:zoomy(a)
				end}
				
			end
			if morealt then
				set {i,-75,'flip'}
				ease {i,1,outSine,-50,'flip'}
			else
				set {i,-25,'flip'}
				ease {i,1,outSine,0,'flip'}
			end
			
		else
			-- add cool vertical bounce
		end
	end
	
	function spin(i,bigspin)
		bigspin = bigspin or false

		ease {i, 2, linear, -180, 'roty'}
		ease {i+2, 2, linear, 0, 'roty'}
		ease {i+4, 4, linear, -360, 'roty'}
		ease {i+8, 2, linear, -180, 'roty'}
		ease {i+10, 2, linear, -360, 'roty'}
		if not bigspin then
			ease {i+12, 4, outSine, 0, 'roty'}
		else
			ease {i+12, 4, outSine, 720, 'roty'}
			set {i+16, 0, 'roty'}
		end
	
	
	end
	
	function tornadospike(i,p,l)
		l = l or 4
		p = p or 100
		ease {i,l*0.25, outExpo,
			p, 'tornado'
		}
		ease {i, l, linear,
			0, 'tornado'
		}
	end
	
	
	----------------------------------------------- definemod
    definemod{'p1x', function(percent)
        P[1]:x(percent- SCREEN_WIDTH*0.25)
    end}
    definemod{'p2x', function(percent)
        P[2]:x(percent- SCREEN_WIDTH*0.75)
    end}
    definemod{'p1y', function(percent)
        P[1]:y(percent- SCREEN_HEIGHT*0.5)
    end}
    definemod{'p2y', function(percent)
        P[2]:y(percent- SCREEN_HEIGHT*0.5)
    end}
	
    PP[1]:xy(SCREEN_WIDTH*0.25, SCREEN_CENTER_Y)
    PP[2]:xy(SCREEN_WIDTH*0.75, SCREEN_CENTER_Y)
    P[1]:SetVanishX(SCREEN_WIDTH*0.25)
    P[2]:SetVanishX(SCREEN_WIDTH*0.75)
	
	setdefault {2.5, 'xmod',
				-100, 'arrowpathdrawsizeback',
				15, 'arrowpathdrawsize',
				100, 'stealthpastreceptors',
				100, 'dizzyholds',
				600, 'bumpyxperiod',
				50, 'drawsizeback',
				SCREEN_WIDTH*0.25,'p1x',
				SCREEN_WIDTH*0.75,'p2x',
				SCREEN_HEIGHT*0.5,'p1y',
				SCREEN_HEIGHT*0.5,'p2y',
	}
	func{0, function() -- thanks sora
		touch_all_mods()
		funny()
	end}
		
	
	set {0,50,'stealth'}
	set {0,100,'arrowpath'}
	ease {0,32, linear, 300, 'bumpyxperiod'}
	
	idkyeah(0,50)
	idkyeah(4,75)
	idkyeah(8,100)
	idkyeah(12,125)
	idkyeah(16,100)
	idkyeah(20,100)
	idkyeah(24,100)
	idkyeah(32)
	idkyeah(36)
	idkyeah(40)
	idkyeah(44)
	
	bump(28+0.00,150,0.5)
	bump(28+0.50,-150,0.5)
	bump(28+1.00,150,0.25)
	bump(28+1.25,-150,0.5)
	bump(28+1.75,150,0.5)
	
	
	
	ease {14,1, outExpo,0,'stealth'}
	ease {16,1, outSine,0,'arrowpath'}
	ease {20,12,inQuad, SCREEN_WIDTH*0.3,'p1x'}
	ease {20,12,inQuad, SCREEN_WIDTH*0.7,'p2x'}
	ease {20,11,inQuad,
		300, 'tipsy',
	} 
	set {31,400,'tipsy'}
	set {31,SCREEN_HEIGHT*0.4,'p1y'}
	set {31,SCREEN_HEIGHT*0.4,'p2y'}
	ease {31,1,outExpo,
		0,'tipsy',
		SCREEN_HEIGHT*0.5,'p1y',
		SCREEN_HEIGHT*0.5,'p2y'
	}
	ease {32, 0.5,outExpo,
		SCREEN_WIDTH*0.5,'p1x',
		SCREEN_WIDTH*0.5,'p2x'
	}
	
	
	
	local baseheight = 40*yscale
	
	for i=33,48 do
		rotat_e(i)
	end 
	
	
	func {31,1, outSine, 1,0, function(a)
		itgbg:diffusealpha(a) flash:diffusealpha(a*0.5)
	end}
	
	func {32,15,function(beat,poptions)
        P[1]:y(baseheight - 40*math.abs(math.sin(beat*math.pi))*yscale)
        P[2]:y(baseheight - 40*math.abs(math.sin(beat*math.pi))*yscale)

    end}
	
	set {47, baseheight + SCREEN_HEIGHT*0.5, 'p1y'}
	set {47, baseheight + SCREEN_HEIGHT*0.5, 'p2y'}
	ease{47, 1, outExpo, 
		SCREEN_HEIGHT*0.5, 'p1y',
		SCREEN_HEIGHT*0.5, 'p2y'
	}
	set {48, 100, 'drawsize'}
	set {48, 50, 'beat'}
	ease {48, 3, outSine, 40, 'rotx'}
	spin(48)
	spin(64,true)
	ease {76, 4, outSine, 
		0, 'rotx',
		100, 'beat',
		50, 'stealth',
		100, 'boost',
		SCREEN_WIDTH*0.25,'p1x',
		SCREEN_WIDTH*0.75,'p2x'
	}
	ease {86.75, 1, outExpo,
		0, 'boost',
		0, 'stealth',
		100, 'beat',
	}
	
	
	if _WIDESCREEN then
		ease {87,1,inQuad, SCREEN_WIDTH*0.35,'p1x'}
	ease {87,1,inQuad, SCREEN_WIDTH*0.65,'p2x'}
	else
	ease {87,1,inQuad, SCREEN_WIDTH*0.3,'p1x'}
	ease {87,1,inQuad, SCREEN_WIDTH*0.7,'p2x'}
	end
	
	func {87.5,38,function(beat,poptions)
        P[1]:y(baseheight - 40*math.abs(math.sin(beat*math.pi))*yscale)
        P[2]:y(baseheight - 40*math.abs(math.sin(beat*math.pi))*yscale)
	
    end}
	
	for i=88,125 do
		rotat_e(i,false)
	end 
	
	ease {95, 1, outExpo,
		-20, 'reverse0', plr = 1
	}
	ease {95.25, 1, outExpo,
		20, 'reverse1', plr = 1
	}
	ease {95.5, 1, outExpo,
		-20, 'reverse2', plr = 1
	}
	ease {95.75, 1, outExpo,
		20, 'reverse3', plr = 1
	}
	ease {96, 1, outExpo,
		-20, 'reverse0', plr = 2
	}
	ease {96.25, 1, outExpo,
		20, 'reverse1', plr = 2
	}
	ease {96.5, 1, outExpo,
		-20, 'reverse2', plr = 2
	}
	ease {96.75, 1, outExpo,
		20, 'reverse3', plr = 2
	}
	
	for i=97,123,4 do
		snapppp(i,10)
		snapppp(i+2,-10)
	end
	
	ease {132, 8, inOutQuad,
		-50, 'flip',
		SCREEN_WIDTH*0.5 - 32,'p1x',
		SCREEN_WIDTH*0.5 + 32,'p2x'
	}
	
	ease {125,2, outSine,
		0, 'beat',
		100, 'sudden',
		150, 'suddenoffset',
		10, 'drunk',
		100, 'arrowpath',
		0, 'reverse0',
		0, 'reverse1',
		0, 'reverse2',
		0, 'reverse3',
	}

	ease {127.5,1, outQuad,
		SCREEN_HEIGHT*0.2, 'p1y',
		SCREEN_HEIGHT*-0.35, 'p2y',
		1.5, 'xmod',
		10, 'tornado'
	}
	func {127.5, 3, outExpo, 0,1, function(p)
		itgtext:zoom(1-p*0.2)
		if _WIDESCREEN then
			sides_wide:zoom(2-p)
		else
			sides:zoom(2-p)
		end
		bn:zoom(1+p*0.5)
	end}
	func {128, function()
		drivenp1:hidden(0)
		drivenp2:hidden(0)
		drivenp3:hidden(0)
		drivenp4:hidden(0)
		driveny = 0
		mdy = 0
		P[1]:fov(0)
		P[2]:fov(0)
	end}
	func {128, 152-128, linear,0, SCREEN_HEIGHT*4.8, function(p)
		driveny = p + 280*yscale -- todo: fix this number
		
	end}
	func {128, 152-128, function(beat, poptions)
		mdy = driveny % SCREEN_HEIGHT
		P[1]:y(mdy)
		P[2]:y(mdy- SCREEN_CENTER_Y) 

	end}
	ease {128, 152-128, linear,
		50, 'arrowpath'
	}

	func{152, 3, outExpo, P[1]:GetY() , 0, function(p)
		P[1]:y(p)
	end,persist = false}
	func{152, 3, outExpo, P[2]:GetY()+ SCREEN_CENTER_Y , 0, function(p)
		P[2]:y(p)
	end,persist = false}
	ease{152, 3, outExpo,
		2.5, 'xmod',
		0.25*SCREEN_WIDTH, 'p1x',
		0.75*SCREEN_WIDTH, 'p2x',
		0, 'flip'
	}
	func{152, 2.5, outExpo, SCREEN_HEIGHT*-1, SCREEN_HEIGHT*-2, function(p)
		drivenp1:y(p)
		drivenp2:y(p)
		
	end}
	--oh god its finally over

	function resetall()
		P[1]:y(SCREEN_HEIGHT*0.0)
		P[2]:y(0)
		drivenp1:x(0)
		drivenp1:y(0)
		drivenp2:x(0)
		drivenp2:y(0)
		drivenp3:x(0)
		drivenp3:y(0)
		drivenp4:x(0)
		drivenp4:y(0)
		--PP[1]:y(SCREEN_HEIGHT*0.5)
		--PP[2]:y(SCREEN_HEIGHT*0.5)
	end

	func {155, function()
		resetall()
	end,persist = true}



	ease{155,0.5, outExpo,
		25, 'skewx',
		0, 'tornado',
		0, 'drunk',
		0, 'arrowpath'
	}
	ease{155.25,0.5, outExpo,
		-25, 'skewx'
	}
	ease{155.5,0.5, outExpo,
		50, 'skewx'
	}
	ease{155.75,0.5, outExpo,
		-50, 'skewx'
	}
	ease{156,1, outExpo,
		0, 'skewx'
	}

	
	ease {157, 1,inExpo,
		SCREEN_WIDTH*0.5,'p1x',
		SCREEN_WIDTH*0.5,'p2x',
		-50, 'flip'
	}
	func {158, 1,inExpo,0,32, function(p)
		PP[1]:hidden(1)
		PP[2]:hidden(1)
		drivenp1:y(0-p)
		drivenp2:x(p)
		drivenp3:x(0-p)
		drivenp4:y(p)
	end}
	
	ease {159,1, outExpo,
		100, 'tipsy',
		50, 'gayholds'
	}
	
	idkyeah(160,75)
	idkyeah(164,75)
	idkyeah(168,75)
	idkyeah(172,75)
	idkyeah(176,75)
	idkyeah(180,75)
	idkyeah(184,75)
	idkyeah(188,75)
	
	tornadospike(160,100,3.5)
	tornadospike(163.5,-100)
	tornadospike(168,100,3.5)
	tornadospike(171.5,-100)
	tornadospike(176,100,3.5)
	tornadospike(179.5,-100)
	tornadospike(184,100,3.5)
	tornadospike(187.5,-100)
	
	
	
	ease {191,1, inExpo,
	 0, 'tipsy',
	 0, 'gayholds',
	 0, 'flip'
	}
	func {191, 1,inExpo,1,0, function(p)
		
		drivenp1:y(0-p*(32))
		drivenp2:x(p*(32))
		drivenp3:x(0-p*(32))
		drivenp4:y(p*(32))
		P[1]:fov(45 - 45*p)
		P[2]:fov(45 - 45*p)
	end}
	
	func {192, 3, outExpo, 1,0, function(p)
		itgtext:zoom(1-p*0.2)
		if _WIDESCREEN then
			sides_wide:zoom(2-p)
		else
			sides:zoom(2-p)
		end
		bn:zoom(1+p*0.5)
	end}
	
	
	func {192, function()
		resetall()
		PP[1]:hidden(0)
		PP[2]:hidden(0)
		drivenp1:hidden(1)
		drivenp2:hidden(1)
		drivenp3:hidden(1)
		drivenp4:hidden(1)
		--print(PP[1]:GetY())
	end,persist = true}
	idkyeah(192,50)
	bump(196+0.00,50,0.5)
	bump(196+0.50,-50,0.5)
	bump(196+1.00,50,0.25)
	bump(196+1.25,-50,0.5)
	bump(196+1.75,50,0.5)
	bump(196+2.00,-100,0.5)
	bump(196+2.25,100,0.5)
	bump(196+2.50,-100,0.5)
	bump(196+2.75,100,0.5)
	bump(196+3.00,-150,0.5)
	bump(196+3.25,150,0.5)
	bump(196+3.50,-150,0.5)
	func {199.5,16,function(beat,poptions)
        P[1]:y(baseheight - 40*math.abs(math.sin(beat*math.pi))*yscale)
        P[2]:y(baseheight - 40*math.abs(math.sin(beat*math.pi))*yscale)
	
    end}
	for i=201,216 do
		rotat_e(i,true)
	end
	
	for i=201,213,4 do
		snapppp(i,10)
		snapppp(i+2,-10)
	end
	for i=217,228,4 do
		snapppp(i,5)
		snapppp(i+2,-5)
	end
	
	
	func {216, function()
		resetall()
		PP[2]:hidden(1)
		drivenp2:hidden(0)
		drivenp4:hidden(0)
		
	end}
	func {216, 4, outExpo, function(p)
	 drivenp2:x(p*256)
	 drivenp4:x(p*-256)
	end}
	set {216, 100, 'drawsize'}
	set {216, 50, 'beat'}
	set {216, 0, 'sudden'}
	
	ease {216, 3, outSine, 40, 'rotx'}

	ease {216,   2, linear, -180, 'roty',plr=1}
	ease {216+2, 2, linear, 0, 'roty',plr=1}
	ease {216+4, 4, linear, -360, 'roty',plr=1}
	ease {216+8, 2, linear, -180, 'roty',plr=1}
	ease {216+10, 2, linear, -360, 'roty',plr=1}
	ease {216+12, 4, outSine, 720, 'roty',plr=1}
	set {216+16, 0, 'roty',plr=1}
	
	ease {216,   2, linear, 180, 'roty',plr=2}
	ease {216+2, 2, linear, 0, 'roty',plr=2}
	ease {216+4, 4, linear, 360, 'roty',plr=2}
	ease {216+8, 2, linear, 180, 'roty',plr=2}
	ease {216+10, 2, linear, 360, 'roty',plr=2}
	ease {216+12, 4, outSine, -720, 'roty',plr=2}
	set {216+16, 0, 'roty',plr=2}
	ease {228, 4, outSine, 
		0, 'rotx',
		0, 'beat',
		0, 'reverse0',
		0, 'reverse1',
		0, 'reverse2',
		0, 'reverse3',
	}
	bump(232,50,0.5,true)
	bump(232.5,-50,0.5,true)
	bump(232.75,50,0.5,true)
	bump(233.25,-50,0.5,true)
	bump(233.5,50,0.5,true)
	bump(234,-50,0.5,true)
	bump(234.25,50,0.5,true)
	bump(234.75,-50,0.5,true)
	bump(235.5,50,0.5,true)
	for i = 236,256,4 do
		ease {i, 2, outExpo,
			25, 'skewx'
		}
		ease {i+2, 2, outExpo,
			-25, 'skewx'
		}
	end
	ease {260, 2, outExpo,
		25, 'skewx'
	}
	ease {261, 2, outExpo,
		0, 'skewx'
	}
	
	func {235.5,261-235,function(beat,poptions)
        P[1]:y(baseheight - 40*math.abs(math.sin(beat*math.pi))*yscale)
        P[2]:y(baseheight - 40*math.abs(math.sin(beat*math.pi))*yscale)
	
    end}
	for i=236,261 do
		rotat_e(i,true)
	end
	for i=237,261,4 do
		snapppp(i,-5)
		snapppp(i+2,5)
	end
	
	ease {244, 4, outSine, 
		50, 'stealth',
		100, 'boost',
	}
	set {262.5,
		20, 'reverse0',
		-20, 'reverse1',
		20, 'reverse2',
		-20, 'reverse3'
	}
	ease {262.5, 2, outExpo, 
		0, 'reverse0',
		0, 'reverse1',
		0, 'reverse2',
		0, 'reverse3',
	}

	func {262.5, 2, outExpo, xscale*256, 0, function(p)
		drivenp2:x(p)
		drivenp4:x(0-p)
	end}
	set {263,
		-20, 'reverse0',
		20, 'reverse1',
		-20, 'reverse2',
		20, 'reverse3'
	}
	ease {263, 1, outExpo,
		0, 'zoomx'
	}
	ease {263, 2, outExpo, 
		0, 'reverse0',
		0, 'reverse1',
		0, 'reverse2',
		0, 'reverse3',
	}
	func {264, function()
		P[1]:hidden(1)
		P[2]:hidden(1)
		PP[1]:hidden(1)
		PP[2]:hidden(1)
		drivenp1:hidden(1)
		drivenp2:hidden(1)
		drivenp3:hidden(1)
		drivenp4:hidden(1)
	end}
	
	
	
	--------------------------------------------BG STUFF
	
	func {8,6,outInExpo,SCREEN_CENTER_X*-1, SCREEN_CENTER_X*3, function(p)
		lyrics[1]:x(p)
	end}
	
	func {12,4,outInExpo,SCREEN_CENTER_X*3, SCREEN_CENTER_X*-1, function(p)
		lyrics[2]:x(p)
	end}
	
	func {14,6,outInExpo,SCREEN_CENTER_X*-1, SCREEN_CENTER_X*3, function(p)
		lyrics[3]:x(p)
	end}
	
	func {18,4,outInExpo,SCREEN_CENTER_Y*-1, SCREEN_CENTER_Y*3, function(p)
		lyrics[4]:y(p)
	end}
	func {22,6,outInExpo,SCREEN_CENTER_Y*3, SCREEN_CENTER_Y*-1, function(p)
		lyrics[5]:y(p)
	end}
	func {24,4,outInExpo,SCREEN_CENTER_Y*3, SCREEN_CENTER_Y*-1, function(p)
		lyrics[6]:y(p)
	end}
	func {30, 2, outExpo, 0, 1, function(p)
		lyrics[7]:diffusealpha(p)
	end}
	func {31, 1, outExpo, 1, 0, function(p)
		lyrics[7]:diffusealpha(p)
	end}
	func {32, 4, outQuad, 1, 0, function(p)
		lyrics[8]:zoom(1+0.5*p)
		lyrics[8]:diffusealpha(p)
	end}
	func {46, 1.5, outExpo, SCREEN_CENTER_Y*-0.5, SCREEN_CENTER_Y, function(p)
		lyrics[9]:y(p)
	end}
	func {48, 8, outExpo, SCREEN_CENTER_Y*1, SCREEN_CENTER_Y*-0.5, function(p)
		lyrics[9]:y(p)
	end}
	
	func {80, 4, outInExpo, SCREEN_CENTER_Y*-1, SCREEN_CENTER_Y*3, function(p)
		lyrics[10]:y(p)
	end}
	func {83, 4, outInExpo, SCREEN_CENTER_Y*3, SCREEN_CENTER_Y*-1, function(p)
		lyrics[11]:y(p)
	end}
	func {95, 4, outInExpo, SCREEN_CENTER_X*3, SCREEN_CENTER_X*-1, function(p)
		qs[1]:x(p)
	end}
	func {95.25, 3, outInExpo, SCREEN_CENTER_X*3, SCREEN_CENTER_X*-1, function(p)
		qs[2]:x(p)
	end}
	func {95.5, 3, outInExpo, SCREEN_CENTER_X*3, SCREEN_CENTER_X*-1, function(p)
		qs[3]:x(p)
	end}
	func {95.75, 3, outInExpo, SCREEN_CENTER_X*3, SCREEN_CENTER_X*-1, function(p)
		qs[4]:x(p)
	end}
	func {96,3, outInExpo, SCREEN_CENTER_X*3, SCREEN_CENTER_X*-1, function(p)
		qs[5]:x(p)
	end}
	func {96.25, 3, outInExpo, SCREEN_CENTER_X*3, SCREEN_CENTER_X*-1, function(p)
		qs[6]:x(p)
	end}
	func {96.5, 4, outInExpo, SCREEN_CENTER_X*-1, SCREEN_CENTER_X*3, function(p)
		lyrics[12]:x(p)
	end}
	func {98, 4, outInExpo, SCREEN_CENTER_Y*-1, SCREEN_CENTER_Y*3, function(p)
		lyrics[13]:y(p)
	end}
	func {101, 4, outInExpo, SCREEN_CENTER_Y*3, SCREEN_CENTER_Y*-1, function(p)
		lyrics[14]:y(p)
	end}
	func {106, 4, outInExpo, SCREEN_CENTER_Y*3, SCREEN_CENTER_Y*-1, function(p)
		lyrics[15]:y(p)
	end}
	func {156, 4, outInExpo, SCREEN_CENTER_X*-1, SCREEN_CENTER_X*3, function(p)
		lyrics[16]:x(p)
	end}
	func {157.25, 3, outInExpo, SCREEN_CENTER_X*3, SCREEN_CENTER_X*-1, function(p)
		lyrics[17]:x(p)
	end}
	func {194, 1, inExpo, SCREEN_CENTER_Y, SCREEN_CENTER_Y*3, function(p)
		itgtext:y(p)
	end}
	func {194.5, 1.5, outInExpo, SCREEN_CENTER_Y*-1, SCREEN_CENTER_Y*3, function(p)
		lyrics[18]:y(p)
	end}
	func {195.5, 1.5, outInExpo, SCREEN_CENTER_Y*-1, SCREEN_CENTER_Y*3, function(p)
		lyrics[19]:y(p)
	end}
	func {196.5, 1.5, outInExpo, SCREEN_CENTER_Y*-1, SCREEN_CENTER_Y*3, function(p)
		lyrics[20]:y(p)
	end}
	func {197.5, 1, outInExpo, SCREEN_CENTER_Y*-1, SCREEN_CENTER_Y*3, function(p)
		lyrics[19]:y(p)
	end}
	func {198, 1, outInExpo, SCREEN_CENTER_Y*-1, SCREEN_CENTER_Y*3, function(p)
		lyrics[20]:y(p)
	end}
	func {198.5, 1, outInExpo, SCREEN_CENTER_Y*-1, SCREEN_CENTER_Y*3, function(p)
		lyrics[21]:y(p)
	end}
	func {199, 1, outInExpo, SCREEN_CENTER_Y*-1, SCREEN_CENTER_Y*3, function(p)
		lyrics[22]:y(p)
	end}
	func {199.5, 2, outExpo, SCREEN_CENTER_Y*-1, SCREEN_CENTER_Y, function(p)
		itgtext:y(p)
	end}
	
	func {80+120, 4, outInExpo, SCREEN_CENTER_Y*-1, SCREEN_CENTER_Y*3, function(p)
		lyrics[10]:y(p)
	end}
	func {83+120, 4, outInExpo, SCREEN_CENTER_Y*3, SCREEN_CENTER_Y*-1, function(p)
		lyrics[11]:y(p)
	end}
	
	func {96+112,3, outInExpo, SCREEN_CENTER_X*2.5, SCREEN_CENTER_X*-1.5, function(p)
		qs[5]:x(p)
	end}
	func {96.25+112, 3, outInExpo, SCREEN_CENTER_X*2.5, SCREEN_CENTER_X*-1.5, function(p)
		qs[6]:x(p)
	end}
	func {96.5+112, 4, outInExpo, SCREEN_CENTER_X*-1, SCREEN_CENTER_X*3, function(p)
		lyrics[12]:x(p)
	end}
	func {98+112, 4, outInExpo, SCREEN_CENTER_Y*-1, SCREEN_CENTER_Y*3, function(p)
		lyrics[13]:y(p)
	end}
	func {101+112, 4, outInExpo, SCREEN_CENTER_Y*3, SCREEN_CENTER_Y*-1, function(p)
		lyrics[14]:y(p)
	end}
	
	--------------yftdrtfyghuyftrdtyuoiuytrertyuiuytredfghxfcgvhbdsa
	func {80+120+48, 4, outInExpo, SCREEN_CENTER_Y*-1, SCREEN_CENTER_Y*3, function(p)
		lyrics[10]:y(p)
	end}
	func {83+120+48, 4, outInExpo, SCREEN_CENTER_Y*3, SCREEN_CENTER_Y*-1, function(p)
		lyrics[11]:y(p)
	end}
	
	func {96+112+48,3, outInExpo, SCREEN_CENTER_X*2.5, SCREEN_CENTER_X*-1.5, function(p)
		qs[5]:x(p)
	end}
	func {96.25+112+48, 3, outInExpo, SCREEN_CENTER_X*2.5, SCREEN_CENTER_X*-1.5, function(p)
		qs[6]:x(p)
	end}
	func {96.5+112+48, 4, outInExpo, SCREEN_CENTER_X*-1, SCREEN_CENTER_X*3, function(p)
		lyrics[12]:x(p)
	end}
	func {98+112+48, 4, outInExpo, SCREEN_CENTER_Y*-1, SCREEN_CENTER_Y*3, function(p)
		lyrics[13]:y(p)
	end}
	func {101+112+48, 2, outExpo, 1,0, function(p)
		itgtext:zoom(p)
	end}
	func {101+112+48, 4, outExpo, SCREEN_CENTER_Y*2, SCREEN_CENTER_Y/3, function(p)
		lyrics[14]:y(p)
	end}
	
	--spellcards
	card {0, 32, 'Mavis BumpyX Teaches Typing', 6, '#FFFFFF'}
	card {32, 128, 'Polka Dot Hell', 7, '#FFFFFF'}
	card {128, 160, 'The rare and threatening Double Drivendrop', 8, '#FFFFFF'}
	card {160, 200, 'I I I I Video Video Video Video Love Love Love Love Games Games Games Games', 6, '#FFFFFF'}
	card {200, 264, 'Once more, with feeling this time!', 9, '#FFFFFF'}
end)"
Type = "ActorFrame"
><children>
	
	<Layer
	File="sides.png" Frag = "ditherscroll.frag"
	InitCommand="%function(self) sides = self end"
	OnCommand="%function(self) 		
	self:x(SCREEN_CENTER_X)
	self:y(SCREEN_CENTER_Y)
	self:texturefiltering(false)
	self:zoom(2)
	end"
	/>	
	<Layer
	File="sides_wide.png" Frag = "ditherscroll.frag"
	InitCommand="%function(self) sides_wide = self end"
	OnCommand="%function(self) 		
	self:x(SCREEN_CENTER_X)
	self:y(SCREEN_CENTER_Y)
	self:texturefiltering(false)
	self:zoom(2)
	end"
	/>	

	<Layer
	File="bn.png" Frag = "dither.frag"
	InitCommand="%function(self) bn = self end"
	OnCommand="%function(self) 		
	self:x(SCREEN_CENTER_X)
	self:y(SCREEN_CENTER_Y)
	self:texturefiltering(false)
	self:zoom(1)
	end"
	/>
	<Layer File = "the j.png" Frag = "dither.frag" InitCommand="%function(self) itgtext = self self:x(SCREEN_CENTER_X) self:y(SCREEN_CENTER_Y) self:texturefiltering(false) end " />
	
	
	<Layer File = "itg_wide.png" InitCommand="%function(self) itgbg = self self:x(SCREEN_CENTER_X) self:y(SCREEN_CENTER_Y) end" />
	
	
	
	<Layer
	File="balk.png"
	InitCommand="%function(self) flash = self end"
	OnCommand="%function(self) 		
	self:x(SCREEN_CENTER_X)
	self:y(SCREEN_CENTER_Y)
	self:zoom(20)
	self:diffusealpha(0.5)

	end"

	/>
	
	
	<Layer File = "lyrics1.png" InitCommand="%xero(function(self) if not lyrics then lyrics = {} end lyrics[1] = self self:x(SCREEN_CENTER_X*-2) self:y(SCREEN_CENTER_Y) end)" />
	<Layer File = "lyrics2.png" InitCommand="%xero(function(self) if not lyrics then lyrics = {} end lyrics[2] = self self:x(SCREEN_CENTER_X*-2) self:y(SCREEN_CENTER_Y) end)" />
	<Layer File = "lyrics3.png" InitCommand="%xero(function(self) if not lyrics then lyrics = {} end lyrics[3] = self self:x(SCREEN_CENTER_X*-2) self:y(SCREEN_CENTER_Y) end)" />
	<Layer File = "lyrics4.png" InitCommand="%xero(function(self) if not lyrics then lyrics = {} end lyrics[4] = self self:x(SCREEN_CENTER_X) self:y(SCREEN_CENTER_Y*-1) end)" />
	<Layer File = "lyrics5.png" InitCommand="%xero(function(self) if not lyrics then lyrics = {} end lyrics[5] = self self:x(SCREEN_CENTER_X) self:y(SCREEN_CENTER_Y*-1) end)" />
	<Layer File = "lyrics6.png" InitCommand="%xero(function(self) if not lyrics then lyrics = {} end lyrics[6] = self self:x(SCREEN_CENTER_X) self:y(SCREEN_CENTER_Y*-1) end)" />
	<Layer File = "lyrics9.png" Frag = "dither.frag" InitCommand="%xero(function(self) if not lyrics then lyrics = {} end lyrics[9] = self self:x(SCREEN_CENTER_X) self:y(SCREEN_CENTER_Y*-0.5) self:SetTextureFiltering(false) end)" />
	<Layer File = "lyrics10.png" Frag = "dither.frag" InitCommand="%xero(function(self) if not lyrics then lyrics = {} end lyrics[10] = self self:x(SCREEN_CENTER_X) self:y(SCREEN_CENTER_Y*-0.5) self:SetTextureFiltering(false) end)" />
	<Layer File = "lyrics11.png" Frag = "dither.frag" InitCommand="%xero(function(self) if not lyrics then lyrics = {} end lyrics[11] = self self:x(SCREEN_CENTER_X) self:y(SCREEN_CENTER_Y*3) self:SetTextureFiltering(false) end)" />
	<Layer File = "quicksnap1.png" Frag = "dither.frag" InitCommand="%xero(function(self) if not qs then qs = {} end qs[1] = self self:x(SCREEN_CENTER_X*3) self:y(SCREEN_CENTER_Y) self:SetTextureFiltering(false) end)" />
	<Layer File = "quicksnap2.png" Frag = "dither.frag" InitCommand="%xero(function(self) if not qs then qs = {} end qs[2] = self self:x(SCREEN_CENTER_X*3) self:y(SCREEN_CENTER_Y) self:SetTextureFiltering(false) end)" />
	<Layer File = "quicksnap3.png" Frag = "dither.frag" InitCommand="%xero(function(self) if not qs then qs = {} end qs[3] = self self:x(SCREEN_CENTER_X*3) self:y(SCREEN_CENTER_Y) self:SetTextureFiltering(false) end)" />
	<Layer File = "quicksnap4.png" Frag = "dither.frag" InitCommand="%xero(function(self) if not qs then qs = {} end qs[4] = self self:x(SCREEN_CENTER_X*3) self:y(SCREEN_CENTER_Y) self:SetTextureFiltering(false) end)" />
	<Layer File = "quicksnap5.png" Frag = "dither.frag" InitCommand="%xero(function(self) if not qs then qs = {} end qs[5] = self self:x(SCREEN_CENTER_X*3) self:y(SCREEN_CENTER_Y) self:SetTextureFiltering(false) end)" />
	<Layer File = "quicksnap6.png" Frag = "dither.frag" InitCommand="%xero(function(self) if not qs then qs = {} end qs[6] = self self:x(SCREEN_CENTER_X*3) self:y(SCREEN_CENTER_Y) self:SetTextureFiltering(false) end)" />
	<Layer File = "lyrics12.png" Frag = "dither.frag" InitCommand="%xero(function(self) if not lyrics then lyrics = {} end lyrics[12] = self self:x(SCREEN_CENTER_X*-1) self:y(SCREEN_CENTER_Y) self:SetTextureFiltering(false) end)" />
	<Layer File = "lyrics13.png" Frag = "dither.frag" InitCommand="%xero(function(self) if not lyrics then lyrics = {} end lyrics[13] = self self:x(SCREEN_CENTER_X) self:y(SCREEN_CENTER_Y*-1) self:SetTextureFiltering(false) end)" />
	<Layer File = "lyrics14.png" Frag = "dither.frag" InitCommand="%xero(function(self) if not lyrics then lyrics = {} end lyrics[14] = self self:x(SCREEN_CENTER_X) self:y(SCREEN_CENTER_Y*3) self:SetTextureFiltering(false) end)" />
	<Layer File = "lyrics15.png" Frag = "dither.frag" InitCommand="%xero(function(self) if not lyrics then lyrics = {} end lyrics[15] = self self:x(SCREEN_CENTER_X) self:y(SCREEN_CENTER_Y*3) self:SetTextureFiltering(false) end)" />
	<Layer File = "lyrics16.png" Frag = "dither.frag" InitCommand="%xero(function(self) if not lyrics then lyrics = {} end lyrics[16] = self self:x(SCREEN_CENTER_X*-1) self:y(SCREEN_CENTER_Y) self:SetTextureFiltering(false) end)" />
	<Layer File = "lyrics17.png" Frag = "dither.frag" InitCommand="%xero(function(self) if not lyrics then lyrics = {} end lyrics[17] = self self:x(SCREEN_CENTER_X*3) self:y(SCREEN_CENTER_Y) self:SetTextureFiltering(false) end)" />
	<Layer File = "go.png" Frag = "dither.frag" InitCommand="%xero(function(self) if not lyrics then lyrics = {} end lyrics[18] = self self:x(SCREEN_CENTER_X) self:y(SCREEN_CENTER_Y*-1) self:SetTextureFiltering(false) end)" />
	<Layer File = "1.png" Frag = "dither.frag" InitCommand="%xero(function(self) if not lyrics then lyrics = {} end lyrics[19] = self self:x(SCREEN_CENTER_X) self:y(SCREEN_CENTER_Y*-1) self:SetTextureFiltering(false) end)" />
	<Layer File = "2.png" Frag = "dither.frag" InitCommand="%xero(function(self) if not lyrics then lyrics = {} end lyrics[20] = self self:x(SCREEN_CENTER_X) self:y(SCREEN_CENTER_Y*-1) self:SetTextureFiltering(false) end)" />
	<Layer File = "3.png" Frag = "dither.frag" InitCommand="%xero(function(self) if not lyrics then lyrics = {} end lyrics[21] = self self:x(SCREEN_CENTER_X) self:y(SCREEN_CENTER_Y*-1) self:SetTextureFiltering(false) end)" />
	<Layer File = "4.png" Frag = "dither.frag" InitCommand="%xero(function(self) if not lyrics then lyrics = {} end lyrics[22] = self self:x(SCREEN_CENTER_X) self:y(SCREEN_CENTER_Y*-1) self:SetTextureFiltering(false) end)" />

	<Layer Type = "ActorProxy" InitCommand= "%function(self)
	drivenp1 = self
	end"/>
	<Layer Type = "ActorProxy" InitCommand= "%function(self)
	drivenp2 = self
	end"/>
	<Layer Type = "ActorProxy" InitCommand= "%function(self)
	drivenp3 = self
	end"/>
	<Layer Type = "ActorProxy" InitCommand= "%function(self)
	drivenp4 = self
	end"/>
	<Layer Type = "ActorProxy" Name = "PC[1]" />
	<Layer Type = "ActorProxy" Name = "PC[2]" />
	<Layer Type = "ActorProxy" Name = "PJ[1]" />
	<Layer Type = "ActorProxy" Name = "PJ[2]" />
	<Layer Type = "ActorProxy" Name = "PP[1]" />
	<Layer Type = "ActorProxy" Name = "PP[2]" />
	
	<!-- dps models -->
	
	<Layer Type="Quad" InitCommand="clearzbuffer,1;x,-1"/>
	
	<Layer File = "pose0.obj.txt" Frag = "whiteout.frag" OnCommand = "%function(self) 
		if dpsactors == nil then
			dpsactors = {}
		end
		dpsactors[1] = self 
		self:zoom(25) 
		self:x(SCREEN_CENTER_X)
		self:y(SCREEN_HEIGHT*2) 
		self:rotationy(90)
		self:SetTextureFiltering(false)
				self:SetLineWidth(4)
		self:SetLineColor(0,0,0,1)
		self:SetPolygonMode(1)
		

	end"/>
	<Layer File = "pose1.obj.txt" Frag = "whiteout.frag" OnCommand = "%function(self) 
		if dpsactors == nil then
			dpsactors = {}
		end
		dpsactors[3] = self 
		self:zoom(25) 
		self:x(SCREEN_CENTER_X)
		self:y(SCREEN_HEIGHT*2) 
		self:rotationy(90)
		self:SetTextureFiltering(false)
				self:SetLineWidth(4)
		self:SetLineColor(0,0,0,1)
		self:SetPolygonMode(1)
		

	end"/>
	<Layer File = "pose2.obj.txt" Frag = "whiteout.frag" OnCommand = "%function(self) 
		if dpsactors == nil then
			dpsactors = {}
		end
		dpsactors[5] = self 
		self:zoom(25) 
		self:x(SCREEN_CENTER_X)
		self:y(SCREEN_HEIGHT*2) 
		self:rotationy(90)
		self:SetTextureFiltering(false)
				self:SetLineWidth(4)
		self:SetLineColor(0,0,0,1)
		self:SetPolygonMode(1)
		

	end"/>
	<Layer Type="Quad" InitCommand="clearzbuffer,1;x,-1"/>
	
	<Layer File = "pose0.obj.txt" OnCommand = "%function(self) 
		if dpsactors == nil then
			dpsactors = {}
		end
		dpsactors[2] = self 
		self:zoom(25) 
		self:x(SCREEN_CENTER_X)
		self:y(SCREEN_HEIGHT*2) 
		self:rotationy(90)
		self:SetTextureFiltering(false)
		--self:SetPolygonMode(1)
		self:SetLineWidth(1)
		self:SetLineColor(1,1,1,1)

	end"/>
	
	<Layer File = "pose1.obj.txt" OnCommand = "%function(self) 
		if dpsactors == nil then
			dpsactors = {}
		end
		dpsactors[4] = self 
		self:zoom(25) 
		self:x(SCREEN_CENTER_X)
		self:y(SCREEN_HEIGHT*2) 
		self:rotationy(90)
		self:SetTextureFiltering(false)
		--self:SetPolygonMode(1)
		self:SetLineWidth(1)
		self:SetLineColor(1,1,1,1)

	end"/>
	<Layer File = "pose2.obj.txt" OnCommand = "%function(self) 
		if dpsactors == nil then
			dpsactors = {}
		end
		dpsactors[6] = self 
		self:zoom(25) 
		self:x(SCREEN_CENTER_X)
		self:y(SCREEN_HEIGHT*2) 
		self:rotationy(90)
		self:SetTextureFiltering(false)
		--self:SetPolygonMode(1)
		self:SetLineWidth(1)
		self:SetLineColor(1,1,1,1)

	end"/>
	
	<Layer File = "lyrics7.png" InitCommand="%xero(function(self) if not lyrics then lyrics = {} end lyrics[7] = self self:x(SCREEN_CENTER_X) self:y(SCREEN_CENTER_Y) self:diffusealpha(0) end)" />
	<Layer File = "lyrics8.png"  InitCommand="%xero(function(self) if not lyrics then lyrics = {} end lyrics[8] = self self:x(SCREEN_CENTER_X) self:y(SCREEN_CENTER_Y) self:diffusealpha(0) end)" />

</children></Mods>