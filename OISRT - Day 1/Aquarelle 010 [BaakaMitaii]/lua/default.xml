<ActorFrame
InitCommand="%function(self)

	nitg_version = FUCK_EXE and tonumber(GAMESTATE:GetVersionDate()) >= 20180617 --NotITG version number to check for, v3 by default
	
	if not nitg_version then
		SCREENMAN:SystemMessage('Outdated version of NotITG detected, mods will not work');
	end
	
	songName = GAMESTATE:GetCurrentSong():GetSongDir();
	
	m_bl = 60/128 --use this to define length of a beat for use in the rest of the song
	sw = SCREEN_WIDTH
	sh = SCREEN_HEIGHT --shortcuts
	
	function Plr(pn)
		return _G['P'..pn]
	end
end"
><children><ActorFrame Condition="nitg_version"
OnCommand="%function(self)
	nvidia = false
	alphamult = 1
	if string.find(string.lower(PREFSMAN:GetPreference('LastSeenVideoDriver')), 'nvidia') or string.find(string.lower(DISPLAY:GetVendor()),'nvidia') then
		Trace('NVidia graphics driver detected.')
		Trace('AFT multiplier set to 0.9')
		nvidia = true
		alphamult = 0.9
	end
	if not string.find(string.lower(PREFSMAN:GetPreference('VideoRenderers')), 'opengl')
	or string.find(string.lower(PREFSMAN:GetPreference('VideoRenderers')), 'd3d')
	and string.find(string.lower(PREFSMAN:GetPreference('VideoRenderers')), 'opengl') 
	and string.find(string.lower(PREFSMAN:GetPreference('VideoRenderers')), 'd3d') < 
	string.find(string.lower(PREFSMAN:GetPreference('VideoRenderers')), 'opengl') then
		SCREENMAN:SystemMessage('D3D Video Renderer detected. Expect textures to fail.');
	end
end"
><children>

	<Layer
		Type="Quad"
		InitCommand="hidden,1"
		OnCommand="sleep,1000"
	/>
	
	<Layer File="modhelpers" />
	<Layer File="easing" />
	<Layer File="spellcards" />
	
	<Layer
		Type="Quad"
		OnCommand="hidden,1"
		InitCommand="%function(self)
		
			checked = false;
		function mod_do(str,pn)
		if pn then	
			GAMESTATE:ApplyGameCommand('mod,'..str,pn)
		else
			GAMESTATE:ApplyGameCommand('mod,'..str)
		end
	end
			---------------------------------------------------------
			---------DOCUMENTATION-----------------------------------
			---------------------------------------------------------
			
			--function perframe( beat, endBeat )
				--return true if the current beat is between 'beat' and 'endBeat'
			
			--function mod_shader(beat,key,which)
				--turn on shader key at specified beat (up to 10 keys available, defined by 'which' = 0-9
				
			--function mod_insert(beat,len,mod,len_or_end,pn)
				--insert mod into beat mods table
			--function mod_insert2(time,len,mod,len_or_end,pn)
				--insert mod into time mods table
			--function mod_ease(beat, len, start_strength, end_strength, mod, len_or_end, ease_type, pn, sustain, opt1, opt2)
				--insert mod into ease mods table
			--function mod_perframe(start, end, function(beat, deltatime))
				--insert function into perframe reader
				
			--function mod_message(beat,msg,persistent)
				--insert something into the actions table.
				--msg can also be a function. If string, a message gets broadcast at that beat
				--if 'persistent' is true, message will run even if editor starts at a beat past it
				
			--function mod_blacklist(t,n)
				--check if number n occurs in table t
				--useful for doing 'every beat EXCEPT the contents of t'
				
			--function simple_m0d(beat,strength,mult,mod)
			--function simple_m0d2(beat,strength,mult,mod,pn)
			--function simple_m0d3(beat,strength,duration,bpm,mod,pn)
				--activate mods at specific beat but also deactivate them
				
			--function mod_wiggle(beat,num,div,amt,speed,mod,pn,first)
				--alternates a mod back and forth before resetting to 0
				
			--function mod_spring(beat,strength,num,mod,pn)
				--like mod_wiggle, but springier
			
			--function mod_springt(time,strength,dur,mod,pn)
				--time-based per-frame alternating mod that decreases based on how much time is left.
					--think doorstopper
			
			--function mod_springt2(time,strength,dur,mod,pn)
				--time-based per-frame alternating mod
			
			--function mod_spring_adjustable(beat,strength,num,period,mod,pn, first)
				--it's not very good
			
			--function mod_beat(beat,strength,pn)
				--turns on beat for the beat specified, at the desired strength	
			
			--function switcheroo_add(beat,which,speed,len,pn)
				--adds a column swap at the desired beat
			--[[	switcheroos = {normal = {0,0}, ldur = {0,0}, reset = {0,0},
					flip = {100,0}, rudl = {100,0}, invert = {0,100}, dlru = {0,100},
					ludr = {25,-75}, rdul = {75,75}, drlu = {25,125}, ulrd = {75,-125}, urld = {100,-100}}
			]]
			
			--function mod_sugarkiller(beat,duration,speed,minstealth,maxstealth,pn)
				--portable version of the effect from sugarkill X
			
			--function mod_bounce(beat,length,start,apex,mod,ease_type,pn)
			--function func_bounce(beat,length,start,apex,function,ease_type)
				--eases out from start to apex, then eases back in from apex to start
				--ease_type should be a string, i.e. 'Quad', 'Cubic', 'Circ'
			
			
			
			--function modulo(a, b)
				--returns the remainder when a is divided by b, works properly with negatives unlike math.mod
			
			--function randomXD(t)
				--returns a pseudo-random number between 0 and 1 seeded based on the given argument
				--returns 0.5 if t is 0 (useful sometimes!)
				
			---------------------------------------------------------
			--------END DOCUMENTATION--------------------------------
			---------------------------------------------------------
			
			local linear, inQuad, outQuad, inOutQuad, outInQuad, inCubic, outCubic, inOutCubic, outInCubic, inQuart, outQuart, inOutQuart, outInQuart, inQuint, outQuint, inOutQuint, outInQuint, inSine, outSine, inOutSine, outInSine, inExpo, outExpo, inOutExpo, outInExpo, inCirc, outCirc, inOutCirc, outInCirc, inElastic, outElastic, inOutElastic, outInElastic, inBack, outBack, inOutBack, outInBack, inBounce, outBounce, inOutBounce, outInBounce = ease.linear, ease.inQuad, ease.outQuad, ease.inOutQuad, ease.outInQuad, ease.inCubic, ease.outCubic, ease.inOutCubic, ease.outInCubic, ease.inQuart, ease.outQuart, ease.inOutQuart, ease.outInQuart, ease.inQuint, ease.outQuint, ease.inOutQuint, ease.outInQuint, ease.inSine, ease.outSine, ease.inOutSine, ease.outInSine, ease.inExpo, ease.outExpo, ease.inOutExpo, ease.outInExpo, ease.inCirc, ease.outCirc, ease.inOutCirc, ease.outInCirc, ease.inElastic, ease.outElastic, ease.inOutElastic, ease.outInElastic, ease.inBack, ease.outBack, ease.inOutBack, ease.outInBack, ease.inBounce, ease.outBounce, ease.inOutBounce, ease.outInBounce
			local me = mod_ease
			local mult = 1
			scx = SCREEN_CENTER_X
			scy = SCREEN_CENTER_Y
			init_modsp1 = '';
			init_modsp2 = '';
			
			mod_plr = {1,2};
			
			mod_firstSeenBeat = GAMESTATE:GetSongBeat(); --necessary to prevent long freezes
			
			mod_lasttime = 0
			
---------------------------------------------------------------------------------------
----------------------Begin tables 'n stuff--------------------------------------------
---------------------------------------------------------------------------------------

			--beat based mods
			--{beat_start, beat_end, mods, len_or_end, player_number}
			mods = {
		{0,9999,'*2 2x,*-1 overhead, *-1 approachtype, *-1 dizzyholds, *-1 stealthpastreceptors,*-1 modtimer,*1000 2.5x','end'},
		{0,9999,'*-1 -115% x,*-1 25% tiny','len'},
		{128,159,'*1 reverse','end'},
		{184,16,'*0.1254 dark,*0.1254 100% stealth','len'},
		
		
		{184,999,'*1000 1000 hidemines, *1000 disablemines','len'},
		
		
		}
			
			
			--beat-based ease mods
			--{beat_start, beat_end, mod_start, mod_end, mod/function, len_or_end, ease_type, player_number, sustainbeats, optional_param1, optional_param2}
			--valid ease types are:
				--linear
				--inQuad    outQuad    inOutQuad    outInQuad
				--inCubic   outCubic   inOutCubic   outInCubic
				--inQuart   outQuart   inOutQuart   outInQuart
				--inQuint   outQuint   inOutQuint   outInQuint
				--inSine    outSine    inOutSine    outInSine
				--inExpo    outExpo    inOutExpo    outInExpo
				--inCirc    outCirc    inOutCirc    outInCirc
				--inElastic outElastic inOutElastic outInElastic    --can take 2 optional parameters - amplitude & period
				--inBack    outBack    inOutBack    outInBack       --can take 1 optional parameter  - spring amount
				--inBounce  outBounce  inOutBounce  outInBounce
				
			mods_ease = {
				-- EXAMPLE TWEEN: from beat 0 to 4, make rotationz go from 360 to 0 with the inOutBack tween
				--{0, 4, 360, 0, 'rotationz', 'len', inOutBack},
				 				-- EXAMPLE TWEEN: from beat 4 to 8, rotate topscreen from 360 to 0 with the outBack tween
				--{4, 4, 360, 0, function(a) SCREENMAN:GetTopScreen():rotationz(a) end, 'len', outBack},
				
			}
			
			--time based mods
			mod_time = 0;
			--{time_start, time_end, mods, len_or_end, player_number}
			mods2 = {
			}
			
			-- you can now write perframe stuff without having to scroll down!
			-- {beat_start,beat_end,function(beat,deltatime)}
			mod_perframes = {
				--{18,24,function(beat,deltatime)
			
					
					-- do stuff every frame from beat 18-24
					-- print(beat,deltatime)
				--end},
			}
			------Barely Audible Noises------
			me(0,.5,0,10,'reverse0','len',inOutQuad)
			me(0,.5,0,10,'reverse3','len',inOutQuad)
			me(0.5,.5,0,10,'reverse1','len',inOutQuad)
			me(2,.5,0,10,'reverse2','len',inOutQuad)
			me(2.5,.5,0,10,'reverse3','len',inOutQuad)
			me(3,.5,0,10,'reverse1','len',inOutQuad)
			me(3.5,.5,0,10,'reverse0','len',inOutQuad)
			me(3.5,.5,0,10,'reverse2','len',inOutQuad)
			me(4.5,.5,0,10,'reverse1','len',inOutQuad)
			me(6.5,.5,0,10,'reverse1','len',inOutQuad)
			me(7.5,.5,0,10,'reverse2','len',inOutQuad)
			me(7.5,.5,0,10,'reverse3','len',inOutQuad)
			me(8.5,.5,0,10,'reverse1','len',inOutQuad)
			me(10.5,.5,0,10,'reverse3','len',inOutQuad)
			me(11,.5,0,10,'reverse2','len',inOutQuad)
			me(11.5,.5,0,10,'reverse0','len',inOutQuad)
			me(11.5,.5,0,10,'reverse1','len',inOutQuad)
			me(13,.5,0,10,'reverse2','len',inOutQuad)
			me(13.5,.5,0,10,'reverse3','len',inOutQuad)
			me(14.5,.5,0,10,'reverse2','len',inOutQuad)
			me(15.5,.5,0,10,'reverse0','len',inOutQuad)
			me(15.5,.5,0,10,'reverse3','len',inOutQuad)
			me(16.5,.5,0,10,'reverse2','len',inOutQuad)
			me(18.5,.5,0,10,'reverse0','len',inOutQuad)
			me(19,.5,0,10,'reverse1','len',inOutQuad)
			me(19.5,.5,0,10,'reverse2','len',inOutQuad)
			me(19.5,.5,0,10,'reverse3','len',inOutQuad)
			me(20.5,.5,0,10,'reverse1','len',inOutQuad)
			me(22.5,.5,0,10,'reverse2','len',inOutQuad)
			me(23.5,.5,0,10,'reverse0','len',inOutQuad)
			me(23.5,.5,0,10,'reverse3','len',inOutQuad)
			me(24.5,.5,0,10,'reverse2','len',inOutQuad)
			me(26.5,.5,0,10,'reverse2','len',inOutQuad)
			me(27,.5,0,10,'reverse1','len',inOutQuad)
			me(27.5,.5,0,10,'reverse3','len',inOutQuad)
			me(29.5,.5,0,10,'reverse2','len',inOutQuad)
			------For Loops Cereal------
			for i =39.5,40,.250 do
			me(i,.250,0,35*mult,'tipsy','len',inOutQuad)
			mult = -mult
			end
			
			for i =46,47.250,.250 do
			me(i,.250,0,35*mult,'tipsy','len',inOutQuad)
			mult = -mult
			end
			
			
			for i =47.375,47.625,.062 do
			me(i,.062,0,10*mult,'confusionOffset','len',inOutQuad)
			mult = -mult
			end
			
			for i =55.5,56,.250 do
			me(i,.250,0,35*mult,'tipsy','len',inOutQuad)
			mult = -mult
			end
			
			for i =62,64,.250 do
			me(i,.250,0,35*mult,'tipsy','len',inOutQuad)
			mult = -mult
			end
			
			for i =34,63,4 do
			me(i,4,0,50*mult,'dizzy','len',inOutQuad)
			me(i,4,50,0,'stealth','len',inOutQuad)
			me(i,4,95*mult,0,'drunk','len',inOutQuad)
			mult = -mult
			end
			for i =34,64,4 do
			me(i,4,50*mult,0,'dizzy','len',inOutQuad)
			mult = -mult
			end
			for i =64,92,8 do
			me(i,4,0,100,'reverse','len',inOutExpo)
			me(i,4,0,100,'flip','len',inOutExpo)
			mult = -mult
			end
			for i =68,92,8 do
			me(i,4,100,0,'reverse','len',inOutExpo)
			me(i,4,100,0,'flip','len',inOutExpo)
			mult = -mult
			end	
			for i=80,94,1 do
			me(i,.250,0,125,'tiny0','len',inOutQuad)
			me(i+.250,.250,0,125,'tiny1','len',inOutQuad)
			me(i+.5,.250,0,125,'tiny2','len',inOutQuad)
			me(i+.750,.250,0,125,'tiny3','len',inOutQuad)
			end
			for i =98.5,160,4 do
			me(i,.5,0,75,'tiny0','len',inOutQuad)
			me(i,.5,0,35*mult,'confusionOffset0','len',inOutQuad)
			me(i+.5,.5,0,75,'tiny1','len',inOutQuad)
			me(i+.5,.5,0,-35*mult,'confusionOffset1','len',inOutQuad)
			me(i+1,.5,0,75,'tiny2','len',inOutQuad)
			me(i+1,.5,0,35*mult,'confusionOffset2','len',inOutQuad)
			me(i+1.5,.5,0,75,'tiny3','len',inOutQuad)
			me(i+1.5,.5,0,-35*mult,'confusionOffset3','len',inOutQuad)
			mult = -mult
			end
			
			
			
			for i=96,158,16 do
			me(i,5,0,-15,'skewx','len',inOutQuad)
			me(i+5,3.5,-15,0,'skewx','len',inOutQuad)
			me(i,8,0,360,'movex','len',inOutQuad)
			end
			for i =98,157,4 do
			me(i,4,75*mult,0,'tipsy','len',inOutQuad)
			mult = -mult
			end
			for i=96,158,16 do
			me(i+8,5,0,15,'skewx','len',inOutQuad)
			me(i+13,3.5,15,0,'skewx','len',inOutQuad)
			me(i+8,8,360,0,'movex','len',inOutQuad)
			end
			
			for i =97,157.5,4 do
			me(i,.5,50,0,'stealth','len',inOutQuad)
			me(i+.5,.5,50,0,'stealth','len',inOutQuad)
			me(i,.5,-10,0,'mini','len',inOutQuad)
			me(i+.5,.5,-10,0,'mini','len',inOutQuad)
			end
			me(127,2,0,100,'reverse','len',inOutExpo)
			me(159,2,100,0,'reverse','len',inOutExpo)
			for i =160,188,8 do
			me(i,4,0,100,'reverse','len',inOutExpo)
			me(i,4,0,100,'flip','len',inOutExpo)
			mult = -mult
			end
			for i =164,188,8 do
			me(i,4,100,0,'reverse','len',inOutExpo)
			me(i,4,100,0,'flip','len',inOutExpo)
			mult = -mult
			end
			
			
			-----------Graphic Easing------------
			------Song Name with Text5-----
			me(0,16,0,1,function(a) BG4:diffusealpha(a) end,'len',outExpo)
			me(16,16,1,0,function(a) BG4:diffusealpha(a) end,'len',outExpo)
			------Lady with Text1-----
			me(32,8,0,0.2,function(a) BG:diffusealpha(a) end,'len',outExpo)
			me(32,16,0,1,function(a) BG:addy(a) end,'len',outExpo)
			me(44,16,1,0,function(a) BG:addy(a) end,'len',outExpo)
			me(40,8,0.2,0,function(a) BG:diffusealpha(a) end,'len',outExpo)
			me(38,8,0,1,function(a) BeeGee:diffusealpha(a) end,'len',outExpo)
			me(42,6,1,0,function(a) BeeGee:diffusealpha(a) end,'len',outExpo)
			me(38,8,0,1,function(a) BeeGee:addx(a) end,'len',outExpo)
			me(42,6,1,0,function(a) BeeGee:addx(a) end,'len',outExpo)
			------????? With Text2-----
			me(64,16,0,0.2,function(a) BG3:diffusealpha(a) end,'len',outExpo)
			me(64,16,0,1,function(a) BG3:addy(a) end,'len',outExpo)
			me(72,8,1,0,function(a) BG3:addy(a) end,'len',outExpo)
			me(72,8,0.2,0,function(a) BG3:diffusealpha(a) end,'len',outExpo)
			me(68,8,0,1,function(a) BG6:diffusealpha(a) end,'len',outExpo)
			me(72,4,1,0,function(a) BG6:diffusealpha(a) end,'len',outExpo)
			me(68,8,0,1,function(a) BG6:addx(a) end,'len',outExpo)
			me(72,4,1,0,function(a) BG6:addx(a) end,'len',outExpo)
			------Texts------
			me(96,8,0,1,function(a) BG8:diffusealpha(a) end,'len',outExpo)
			me(102,4,1,0,function(a) BG8:diffusealpha(a) end,'len',outExpo)
			me(96,8,0,1,function(a) BG8:addx(a) end,'len',outExpo)
			me(102,8,1,0,function(a) BG8:addx(a) end,'len',outExpo)
			me(100,8,0,0.2,function(a) BG14:diffusealpha(a) end,'len',outExpo)
			me(104,6,0.2,0,function(a) BG14:diffusealpha(a) end,'len',outExpo)
			me(100,8,0,1,function(a) BG14:addy(a) end,'len',outExpo)
			me(106,6,1,0,function(a) BG14:addy(a) end,'len',outExpo)
			me(112,8,0,1,function(a) BG5:diffusealpha(a) end,'len',outExpo)
			me(116,6,1,0,function(a) BG5:diffusealpha(a) end,'len',outExpo)
			me(112,8,0,1,function(a) BG5:addx(a) end,'len',outExpo)
			me(116,8,1,0,function(a) BG5:addx(a) end,'len',outExpo)
			me(128,8,0,1,function(a) BG10:diffusealpha(a) end,'len',outExpo)
			me(132,6,1,0,function(a) BG10:diffusealpha(a) end,'len',outExpo)
			me(128,8,0,1,function(a) BG10:addx(a) end,'len',outExpo)
			me(132,6,1,0,function(a) BG10:addx(a) end,'len',outExpo)
			me(160,8,0,1,function(a) BG11:diffusealpha(a) end,'len',outExpo)
			me(164,6,1,0,function(a) BG11:diffusealpha(a) end,'len',outExpo)
			me(160,8,0,1,function(a) BG11:addx(a) end,'len',outExpo)
			me(164,6,1,0,function(a) BG11:addx(a) end,'len',outExpo)
			----Credits----
			me(184,10,0,1,function(a) BG12:diffusealpha(a) end,'len',outExpo)
			me(196,10,1,0,function(a) BG12:diffusealpha(a) end,'len',outExpo)
			me(184,10,0,1,function(a) BG13:diffusealpha(a) end,'len',outExpo)
			me(196,10,1,0,function(a) BG13:diffusealpha(a) end,'len',outExpo)
			
			
			
			
			
			
			
			
			
			----------------------------------------------------
			----Perframe function made by TaroNuke--------------
			----------------------------------------------------
			
			
			
			
			
			
			
			
			
			
			
			
			
			--this is both a message broadcaster and a function runner
			--if you put {beat,'String'}, then 'String' is broadcast as a message on that beat
			--if you put {beat,function() somecode end}, then function() is run at that beat
			--see example on beat 0
			
			curaction = 1;
			--{beat,thing,persists}
			mod_actions = {
				{0,'GetProxy',true},
				{0,function()
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:GetChild('Judgment'):hidden(1)
							a:GetChild('Combo'):hidden(1)
							a:SetFarDist(10000)
						end
					end
					
					for pn=1,2 do
						local d = 0.25; if pn == 2 then d = 0.75 end
						local b = _G['jud'..pn..'p']
						if b then
							b:hidden(0);
							b:basezoomx(0.75);
							b:basezoomy(0.75);
							b:x(SCREEN_WIDTH*d)
							b:y(SCREEN_HEIGHT*0.5)
						end
						local c = _G['com'..pn..'p']
						if c then
							c:hidden(0);
							c:basezoomx(0.75);
							c:basezoomy(0.75);
							c:x(SCREEN_WIDTH*d)
							c:y(SCREEN_HEIGHT*0.5)
						end

					end
				end,true},
			}
			
---------------------------------------------------------------------------------------
----------------------Sort the actions table-------------------------------------------
---------------------------------------------------------------------------------------
			
			function modtable_compare(a,b)
				return a[1] < b[1]
			end
			
			if table.getn(mod_actions) > 1 then
				table.sort(mod_actions, modtable_compare)
			end
			
			self:queuecommand('Update');
			
		end"
		
		UpdateCommand="%function(self)
			local beat = GAMESTATE:GetSongBeat()
			
			if beat>=0 and not checked then
					local ThingsToGrab = {'BPMDisplay','LifeFrame','ScoreFrame','Lyrics','SongBackground','SongForeground','Overlay','Underlay'}
					local ThingsToHide = {'BPMDisplay','LifeFrame','ScoreFrame','Overlay','Underlay'}
					for pn=1,2 do
						_G['P'..pn] = SCREENMAN:GetTopScreen():GetChild('PlayerP'..pn) or nil;
						if _G['P'..pn] then
							table.insert(mod_plr, _G['P'..pn])
							_G['jud'..pn]=_G['P'..pn]:GetChild('Judgment');
							_G['com'..pn]=_G['P'..pn]:GetChild('Combo');
							
							_G['jud'..pn]:hidden(1)
							_G['com'..pn]:hidden(1)
							_G['P'..pn]:x(SCREEN_CENTER_X);
						end
						table.insert(ThingsToGrab,'LifeP'..pn); table.insert(ThingsToGrab,'ScoreP'..pn);
						table.insert(ThingsToHide,'LifeP'..pn); table.insert(ThingsToHide,'ScoreP'..pn);
					end	
					for i,v in ipairs(ThingsToGrab) do _G[v] = SCREENMAN:GetTopScreen():GetChild(v) or nil end	
					for i,v in ipairs(ThingsToHide) do if _G[v] then _G[v]:hidden(1) end end
					for i,v in ipairs(mod_plr) do if _G[v] then v:x(SCREEN_CENTER_X) end end
					
				checked = true;
			end
			mod_curtime = GAMESTATE:GetSongTime()
			local deltatime = mod_curtime - mod_lasttime
			mod_lasttime = mod_curtime
			
---------------------------------------------------------------------------------------
----------------------Begin table handlers---------------------------------------------
---------------------------------------------------------------------------------------
			
			disable = false;
			if disable ~= true and checked then
				if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --
					-----------------------
					-- Player mod resets --
					-----------------------
					for i=1,2 do
						GAMESTATE:ApplyModifiers('clearall',i)
						if _G['init_modsp'..i] then 
							GAMESTATE:ApplyModifiers(_G['init_modsp'..i],i)
						end
					end
									------------------------------------------------------------------------------
					-- custom mod reader by TaroNuke edited by WinDEU and re-stolen by TaroNuke --
					------------------------------------------------------------------------------
					for i,v in pairs(mods) do
						if v and table.getn(v) > 3 and v[1] and v[2] and v[3] and v[4] then
							if beat >=v[1] then
								if (v[4] == 'len' and beat <=v[1]+v[2]) or (v[4] == 'end' and beat <=v[2]) then
									if table.getn(v) == 5 then
										GAMESTATE:ApplyModifiers(v[3],v[5]);
									else
										GAMESTATE:ApplyModifiers(v[3]);
									end
								end
							end
						else
							v[1] = 0;
							v[2] = 0;
							v[3] = '';
							v[4] = 'error';
							SCREENMAN:SystemMessage('Bad mod in beat-based table (line '..i..')');
						end
					end
				
					-----------------------------------------------------------------------------------------------------
					-- WinDEU's time-based len/end version of the #swag custom mod reader #teamproofofconcept (c) 2015 --
					-----------------------------------------------------------------------------------------------------
					for i,v in pairs(mods2) do
						if v and table.getn(v) > 3 and v[1] and v[2] and v[3] and v[4] then
							if mod_time >=v[1] then
								if (v[4] == 'len' and mod_time <=v[1]+v[2]) or (v[4] == 'end' and mod_time <=v[2]) then
									if table.getn(v) == 5 then
										GAMESTATE:ApplyModifiers(v[3],v[5]);
									else
										GAMESTATE:ApplyModifiers(v[3]);
									end
								end
							end
						else
							v[1] = 0;
							v[2] = 0;
							v[3] = 'error';
							v[4] = 'error';
							SCREENMAN:SystemMessage('Bad mod in time-based table (line '..i..')');
						end
					end
				
					---------------------------------------
					-- Ease table (includes func_ease) --
					---------------------------------------
					for i,v in pairs(mods_ease) do
						if v and table.getn(v) > 6 and v[1] and v[2] and v[3] and v[4] and v[5] and v[6] and v[7] then
							if beat >=v[1] then
								if (v[6] == 'len' and beat <=v[1]+v[2]) or (v[6] == 'end' and beat <=v[2]) then
									local strength = v[7](beat - v[1], v[3], v[4] - v[3], v[6] == 'end' and v[2] - v[1] or v[2], v[10], v[11])
									if type(v[5]) == 'string' then
										local modstr = v[5] == 'xmod' and strength..'x' or (v[5] == 'cmod' and 'C'..strength or strength..' '..v[5])
										GAMESTATE:ApplyModifiers('*9999 '..modstr,v[8]);
									elseif type(v[5]) == 'function' then
										v[5](strength)
									end
								elseif (v[9] and ((v[6] == 'len' and beat <=v[1]+v[2]+v[9]) or (v[6] == 'end' and beat <=v[9]))) then
									if type(v[5]) == 'string' then
										local modstr = v[5] == 'xmod' and v[4]..'x' or (v[5] == 'cmod' and 'C'..v[4] or v[4]..' '..v[5])
										GAMESTATE:ApplyModifiers('*9999 '..modstr,v[8]);
									elseif type(v[5]) == 'function' then
										v[5](v[4])
									end
								end
							end
						else
							SCREENMAN:SystemMessage('Ease Error! (line '..i..' | beat: '.. v[1] .. ' | mod: '.. v[5] ..')');
						end
					end
				
					---------------------
					-- Perframe reader --
					---------------------
					if table.getn(mod_perframes)>0 then
						for i=1,table.getn(mod_perframes) do
							local a = mod_perframes[i]
							if beat > a[1] and beat < a[2] then
								a[3](beat,deltatime);
							end
						end
					end
				
					---------------------------------------
					-- Actions table --
					---------------------------------------
					while curaction<=table.getn(mod_actions) and GAMESTATE:GetSongBeat()>=mod_actions[curaction][1] do
						if mod_actions[curaction][3] or GAMESTATE:GetSongBeat() < mod_actions[curaction][1]+2 then
							if type(mod_actions[curaction][2]) == 'function' then
								mod_actions[curaction][2]()
							elseif type(mod_actions[curaction][2]) == 'string' then
								MESSAGEMAN:Broadcast(mod_actions[curaction][2]);
							end
						end
						curaction = curaction+1;
					end
				end
			end
			
			self:sleep(0.02);
			self:queuecommand('Update');

---------------------------------------------------------------------------------------
----------------------END DON'T TOUCH IT KIDDO-----------------------------------------
---------------------------------------------------------------------------------------
			
		end"
		
	/>
	
	<Layer
	File="Lady.png"
	InitCommand="%function(self)
	self:x(SCREEN_CENTER_X+160);
	self:y(SCREEN_CENTER_Y+50);
	self:diffusealpha(0);
	self:decelerate(3)
	self:addy(-150)
	BG=self
	end"
	/>

	<Layer
	File="Text1.png"
	InitCommand="%function(self)
	self:x(SCREEN_CENTER_X+350);
	self:y(SCREEN_CENTER_Y+65);
	self:diffusealpha(0);
	self:zoom(0.55)
	self:addx(-340)
	BeeGee=self
	end"
	/>

	<Layer
	File="Deemo.png"
	InitCommand="%function(self)
	self:x(SCREEN_CENTER_X+160);
	self:y(SCREEN_CENTER_Y-150);
	self:diffusealpha(0);
	self:decelerate(2)
	self:addy(75)
	BG3=self
	end"
	/>
	
	
	
	<Layer
	File="Text5.png"
	InitCommand="%function(self)
	self:x(SCREEN_CENTER_X+350);
	self:y(SCREEN_CENTER_Y);
	self:diffusealpha(0);
	self:zoom(0.7)
	BG4=self
	end"
	/>
	
	<Layer
	File="Text4.png"
	InitCommand="%function(self)
	self:x(SCREEN_CENTER_X+350);
	self:y(SCREEN_CENTER_Y+65);
	self:diffusealpha(0);
	self:addx(-250)
	self:zoom(0.6)
	BG5=self
	end"
	/>
	
	<Layer
	File="Text3.png"
	InitCommand="%function(self)
	self:x(SCREEN_CENTER_X+125);
	self:y(SCREEN_CENTER_Y+50);
	self:diffusealpha(0);
	self:zoom(0.5)
	self:addx(-125)
	self:decelerate(12)
	BG8=self
	end"
	/>
	
	<Layer
	File="Text2.png"
	InitCommand="%function(self)
	self:x(SCREEN_CENTER_X+300);
	self:y(SCREEN_CENTER_Y+200);
	self:diffusealpha(0);
	self:addx(-30)
	BG6=self
	end"
	/>
	
	<Layer
	File="Text1.png"
	InitCommand="%function(self)
	self:x(SCREEN_CENTER_X+350);
	self:y(SCREEN_CENTER_Y);
	self:diffusealpha(0);
	BG7=self
	end"
	/>
	
	<Layer
	File="Credits.png"
	InitCommand="%function(self)
	self:x(SCREEN_CENTER_X+350);
	self:y(SCREEN_CENTER_Y);
	self:diffusealpha(0);
	BG9=self
	end"
	/>
	
	
	<Layer
	File="Text6.png"
	InitCommand="%function(self)
	self:x(SCREEN_CENTER_X+125);
	self:y(SCREEN_CENTER_Y+50);
	self:diffusealpha(0);
	self:addx(-130)
	self:decelerate(12)
	self:zoom(0.4)
	BG10=self
	end"
	/>
	
	<Layer
	File="Text7.png"
	InitCommand="%function(self)
	self:x(SCREEN_CENTER_X+125);
	self:y(SCREEN_CENTER_Y+50);
	self:diffusealpha(0);
	self:zoom(0.5)
	self:addx(-110)
	BG11=self
	end"
	/>
	
	<Layer
	File="Alice.png"
	InitCommand="%function(self)
	self:x(SCREEN_CENTER_X-125);
	self:y(SCREEN_CENTER_Y+50);
	self:diffusealpha(0);
	self:zoom(0.8)
	BG12=self
	end"
	/>
	
	<Layer
	File="Credits.png"
	InitCommand="%function(self)
	self:x(SCREEN_CENTER_X+350);
	self:y(SCREEN_CENTER_Y-75);
	self:diffusealpha(0);
	self:zoom(0.7)
	BG13=self
	end"
	/>
	
	<Layer
	File="Deemo3.png"
	InitCommand="%function(self)
	self:x(SCREEN_CENTER_X-110);
	self:y(SCREEN_CENTER_Y-175);
	self:diffusealpha(0);
	self:zoom(0.7)
	self:decelerate(12)
	self:addy(45)
	BG14=self
	end"
	/>
	
	
	<ZZLAER Type="ActorFrame" InitCommand="%function(self) judc = self end"><children>
	<LAER Type="ActorProxy" InitCommand="%function(self) jud1p = self end"
	GetProxyMessageCommand="%function(self) if P1 then self:SetTarget(P1:GetChild('Judgment')) end end"/>
	<LAER Type="ActorProxy" InitCommand="%function(self) jud2p = self end"
	GetProxyMessageCommand="%function(self) if P2 then self:SetTarget(P2:GetChild('Judgment')) end end"/>
	</children></ZZLAER>
	<ZZLAER Type="ActorFrame" InitCommand="%function(self) comc = self end"><children>
	<LAER Type="ActorProxy" InitCommand="%function(self) com1p = self end"
	GetProxyMessageCommand="%function(self) if P1 then self:SetTarget(P1:GetChild('Combo')) end end"/>
	<LAER Type="ActorProxy" InitCommand="%function(self) com2p = self end"
	GetProxyMessageCommand="%function(self) if P2 then self:SetTarget(P2:GetChild('Combo')) end end"/>
	</children></ZZLAER>
	
	<!--This is for the time based mod reader-->
	<BitmapText
		Font="Common Normal"
		Text="test"
		OnCommand="x,SCREEN_CENTER_X;y,SCREEN_CENTER_Y;effectclock,music;playcommand,SetTime;hidden,1"
		SetTimeCommand="%function(self) self:settext(self:GetSecsIntoEffect()); mod_time = tonumber(self:GetText()); self:sleep(0.02); self:queuecommand('SetTime'); end"
	/>
	
</children></ActorFrame></children></ActorFrame>