<Mods LoadCommand = "%xero(function(self)
	if not P1 or not P2 then
		backToSongWheel('Two Player Mode Required')
		return
	end

	-- judgment / combo proxies
	for pn = 1, 2 do
		setupJudgeProxy(PJ[pn], P[pn]:GetChild('Judgment'), pn)
		setupJudgeProxy(PC[pn], P[pn]:GetChild('Combo'), pn)
	end
	-- player proxies
	for pn = 1, #PP do
		PP[pn]:SetTarget(P[pn])
		P[pn]:hidden(1)
	end
	-- your code goes here here:
	
	setdefault {
		2.5, 'xmod',
		100, 'dizzyholds',
		100, 'scrollspeedmult',
		100, 'stealthglowred',
		-99, 'zigzagperiod',
		500, 'bumpyxperiod',
		100, 'centerPlayfields'
	}

	local BEAT = 1
	local COL = 2
	local TYPE = 3

	local hat = 100
	for _, note in perc_main do
		local beat = note[BEAT]
		if note[COL] == 0 then
			add { beat-.25, .25, linear, 100, 'bass' }
			add { beat, note.length, inCirc, -100, 'bass' }
		elseif note[COL] == 1 then
			add { beat, .5, pop, 100, 'kick' }
		elseif note[COL] == 2 then
			add { beat, 1, pop, note[TYPE] == 'M' and 50 or 100, 'bark' }
		elseif note[COL] == 3 then
			if note[TYPE] == 1 then
				add { beat, 1, pop, hat, 'hat' }
				hat = -hat
			elseif note[TYPE] == 'M' then
				add { beat, 1, pop, hat/2, 'hat' }
				hat = -hat
			elseif note[TYPE] == 4 then
				local taps = (note.length*2)
				for i=0, taps do
					add { beat+(i/2), 1, pop, hat-(50*i/taps), 'hat' }
					hat = -hat
				end
			end
		end
	end
	definemod { 'bass', -100, 'tiny' } --fast in, out over hold
	definemod { 'kick', -50, 'mini' } --very fast in/out
	definemod { 'bark', 50, 'brake', -50, 'movey', 10, 'flip', -40, 'tornado' } --fast in/out
	definemod { 'hat', 100, 'bumpyx' } --fast in/out

	for _, note in cellos do
		local beat = note[BEAT]
		local cello_n = 'cello'..note[COL]
		add { beat, note.length, outCirc, 100, cello_n }
		add { beat+note.length, .5, outCirc, -100, cello_n }
	end
	definemod { 'cello0', -100, 'cello1' }
	definemod { 'cello1', 170, 'drunk' } --in over hold, out over .5 beats
	definemod { 'cello2', -100, 'cello3' }
	definemod { 'cello3', 170, 'tipsy' } --in over hold, out over .5 beats


	local pizz = 100
	for _, note in strings do
		local beat = note[BEAT]
		if note[COL] == 3 then
			add { beat, 1, outExpo, pizz, 'pizz' }
			add { beat, 2, pop, pizz, 'pizzlag' }
			pizz = -pizz
		elseif note[COL] == 2 then
			add { beat, .5, outExpo, 100, 'choral' }
			add { beat, 3, linear, -100, 'choral' }
		elseif note[COL] == 1 then
			acc { beat, 100, 'beep' }
			acc { beat + note.length, -100, 'beep' }
		elseif note[COL] == 0 then
			add { beat-.25, .25, linear, 100, 'crash' }
			add { beat, 2, linear, -100, 'crash' }
		end
	end
	local pizzmove = 100
	acc { -4, -50, 'pizz' }
	local skewscale = .3
	definemod { 'pizz', pizzmove, 'movex' }
	definemod { 'pizzlag', -pizzmove*skewscale, 'skewx', pizzmove*skewscale, 'noteskewx', -20, 'flip' }
	definemod { 'choral', 15, 'flip', 15, 'reverse', -60, 'tiny', 70, 'distant' }
	definemod { 'beep', 50, 'stealth', 100, 'dark' } --instant in/out
	definemod { 'crash', 150, 'distant' } --very fast in, out over 2 beats

	for _, note in ear_candy do
		local beat = note[BEAT]
		if note[COL] == 0 then
			add { beat-.25, .25, linear, 100, 'scrape' }
			add { beat, note.length, linear, -100, 'scrape' }
		elseif note[COL] == 1 then
			add { beat, note.length, tri, 100, 'zap' }
		elseif note[COL] == 2 then
			add { beat,             .25, linear,  100, 'aahh' }
			add { beat+note.length, .25, linear, -100, 'aahh' }
		elseif note[COL] == 3 then
			if (note[TYPE] == 2) then
				add { beat, note.length, linear, 100, 'weirdending' }
			else
				add { beat, note.length, outCirc, -100, 'weirdending' }
			end
		end
	end
	definemod { 'scrape', 400, 'skewx' } --very fast in, out over hold
	definemod { 'zap', 100, 'arrowpath', 100, 'zigzag' } --up and down over hold
	definemod { 'aahh', -15, 'reverse', 150, 'wave', 15, 'flip', 45, 'tiny' }
	setdefault { -97, 'spiralxperiod', -97, 'spiralyperiod', -97, 'spiralzperiod' }
	definemod { 'weirdending',
		200, 'spiralx', 200, 'spiraly',
		500, 'bumpy', 500, 'flip', 1000, 'tipsy', 700, 'drunk'
	}
	local p1DefaultX = P1:GetX()
	local p2DefaultX = P2:GetX()
	definemod { 'centerPlayfields', function(percent) 
		local scale = percent / 100
		P1:x((scale*scx) + ((1-scale)*p1DefaultX))
		P2:x((scale*scx) + ((1-scale)*p2DefaultX))
	end }

	local noisePerCol = 0.01
	for _, note in noise do
		local beat = note[BEAT]
		local amt = noisePerCol*(note[COL]+1)
		acc { beat,              amt, 'noise' }
		acc { beat+note.length, -amt, 'noise' }
	end	
	aft(mainAft)
	sprite(mainSprite)
	aftsprite(mainAft, mainSprite)
	definemod { 'noise', function(a)
		mainSprite:GetShader():uniform1f('amount', a)
	end }

	--card {start, end, 'spellcard name', (diff as int), '#420699'}
	card { 0, 36, 'Yup, Habanera 1', 4, '#000000' }
	card { 36, 68, 'It\'s an opera remix with weird sounds added', 4, '#000000' }
	card { 68, 98, 'In The Groove 2', 4, '#000000' }
	card { 98, 100, 'ZZZZZZZZZZZZZZZ', 1, '#FFFFFF' }
	card { 100, 130, 'In The Grove 2', 4, '#000000' }
	card { 130, 132, 'ZZZZZZZZZZZZZZZ', 1, '#FFFFFF' }
	card { 132, 192, 'Grove Grove Revolution', 4, '#000000' }
	card { 192, 244, 'GrooveNightsOpera', 4, '#000000' }
	card { 244, 252, 'eeh eeh.. u u OAOAOAOOAOOOAOAOAOAOAAOAAOAOA', 4, '#000000' }
	card { 252, 268, 'thx for playing!', 4, '#000000' }


end)"
Type = "ActorFrame"
><children>
	<Layer Type = "ActorProxy" Name = "PP[1]" />
	<Layer Type = "ActorProxy" Name = "PP[2]" />

	<Layer Type = "ActorFrameTexture" Name = "mainAft" />
	<Layer Type = "Sprite" Name = "mainSprite" Frag = "shaders/glitch-lines.frag" />

	<Layer Type = "ActorProxy" Name = "PC[1]" />
	<Layer Type = "ActorProxy" Name = "PC[2]" />
	<Layer Type = "ActorProxy" Name = "PJ[1]" />
	<Layer Type = "ActorProxy" Name = "PJ[2]" />
</children></Mods>
