<Mods LoadCommand = "%xero(function(self)
	if not P1 or not P2 then
		backToSongWheel('Two Player Mode Required')
		return
	end

	-- judgment / combo proxies
	for pn = 1, 2 do
		setupJudgeProxy(PJ[pn], P[pn]:GetChild('Judgment'), pn)
		setupJudgeProxy(PC[pn], P[pn]:GetChild('Combo'), pn)
	end
	-- player proxies
	for pn = 1, #PP do
		PP[pn]:SetTarget(P[pn])
		PP1[pn]:SetTarget(P[pn])
		PP2[pn]:SetTarget(P[pn])
		PP3[pn]:SetTarget(P[pn])
		PP4[pn]:SetTarget(P[pn])
		PP5[pn]:SetTarget(P[pn])
		PP6[pn]:SetTarget(P[pn])
		PP7[pn]:SetTarget(P[pn])
		
		P[pn]:hidden(1)
		P[pn]:SetFarDist(100000)
	end
	-- your code goes here here:
	---------------------------setup---------------------
	local circ_size = 0
	local circ_offset = 0

	local me = mod_ease

	local m = mod_insert

	local mb = mod_bounce

	local mk = mod_kick

	local mpf = mod_perframe

	local SineS, CubicS, QuintS, CircS, ElasticS, QuadS, QuartS, ExpoS, BackS, BounceS,
	SineO, CubicO, QuintO, CircO, ElasticO, QuadO, QuartO, ExpoO, BackO, BounceO,
	SineI, CubicI, QuintI, CircI, ElasticI, QuadI, QuartI, ExpoI, BackI, BounceI  
	= inOutSine, inOutCubic, inOutQuint, inOutCirc, inOutElastic, inOutQuad, inOutQuart, inOutExpo, inOutBack, inOutBounce,
	outSine, outCubic, outQuint, outCirc, outElastic, outQuad, outQuart, outExpo, outBack, outBounce,
	inSine, inCubic, inQuint, inCirc, inElastic, inQuad, inQuart, inExpo, inBack, inBounce

	
	-------------bg movement setup-------------------------------
	
	
	cube:zoomto(sw * 2, sw * 2)
	cube:xy(scx,scy)
	cube:customtexturerect(0,0,8 * sw / 640,8 * sw / 640)
	cube:texcoordvelocity(0.2,0.3)
	cube:diffusealpha(0.9)

	cube2:zoomto(sw * 2, sw * 2)
	cube2:xy(scx,scy)
	cube2:customtexturerect(0,0,8 * sw / 640,8 * sw / 640)
	cube2:texcoordvelocity(0.2,0.3)
	cube2:diffusealpha(1)
	
	

	grandient1:xywh(scx,scy,sw,sh)
	grandient2:xywh(scx,scy,sw,sh)

	bg8:xywh(scx,scy,sw,sh)
	bg7:xywh(scx,scy,sw,sh)
	bg6:xywh(scx,scy,sw,sh)
	bg5:xywh(scx,scy,sw,sh)
	bg4:xywh(scx,scy,sw,sh)
	bg3:xywh(scx,scy,sw,sh)
	bg2:xywh(scx,scy,sw,sh)
	bg1:xywh(scx,scy,sw,sh)

	

	--bg1:cropbottom(0.2)
	bg1:croptop(0.5)

	bg2:cropbottom(0.5)
	--bg2:croptop(0.4)

	self:fov(90)
	
	
	---------------------notedate setup-----------------------------

	baba = {
		{8.000,0,1},
		{8.750,3,1},
		{9.500,2,1},
		{10.250,1,1},

		{16.000,3,1},
		{16.750,0,1},
		{17.500,1,1},
		{18.250,2,1},
		
		{24.000,0,1},
		{24.750,3,1},
		{25.500,2,1},
		{26.250,1,1},
	
		{32.000,3,1},
		{32.750,0,1},
		{33.500,1,1},
		{34.250,2,1},
	
		--{39.250,0,1},
		--{40.000,0,1},
		--{40.000,3,1},
	}

	bebe = {
		{11.000,1,2,length=3.000},
		{19.000,2,2,length=3.000},
		{27.000,1,2,length=3.000},
		{35.500,2,2,length=4.250},
	}

	c2l = {
		{14.000,0,1},
		{14.250,3,1},
		{14.500,0,2,length=0.500},
		{15.000,3,1},
		{15.500,0,1},
		{15.750,3,1},
		{16.000,0,1},
		{22.000,0,1},
		{22.250,3,1},
		{22.500,0,1},
		{22.750,3,1},
		{23.000,0,1},
		{23.250,3,1},
		{30.000,0,1},
		{30.250,3,1},
		{30.500,0,1},
		{30.750,3,1},
		{31.000,0,1},
		{31.250,3,1},
		{31.750,0,1},
	}

	dududud = {
		{45.250,2,1},
		{45.500,1,1},
		{45.750,2,1},
		{46.000,1,1},
		{46.750,3,2,length=0.750},
		{47.500,0,2,length=1.229},
	}

	note = {
		{56.000,3,1},
		{56.250,2,1},
		{56.500,3,1},
		{56.750,2,1},
		{57.000,3,1},
		{57.250,2,1},
		{57.500,1,1},
		{57.750,2,1},
		{58.000,1,1},
		{58.250,2,1},
		{58.500,0,1},
		{58.750,1,1},
		{59.000,0,1},
		{59.250,1,1},
		{59.500,0,1},
		{59.750,3,1},
		{60.000,1,1},
		{60.250,3,1},
		{60.500,1,1},
		{60.750,3,1},
		{61.000,0,1},
		{61.250,2,1},
		{61.500,0,1},
		{61.750,2,1},
		{62.000,0,1},
		{62.250,1,1},
		{62.500,3,1},
		{62.750,1,1},
		
		{63.000,3,1},
		{63.250,2,1},
		{63.500,1,1},
		{63.750,0,1},
		--[[
		{64.000,3,1},
		{64.250,2,1},
		{64.500,1,1},
		{64.750,0,1},
		
		{65.000,3,1},
		{65.250,1,1},
		{65.500,2,1},
		{65.750,0,1},
		{66.000,3,1},
		{66.250,2,1},
		{66.500,1,1},
		{66.750,0,2,length=1.313},
		{68.000,3,1},
		{68.500,0,1},
		{69.000,3,1},
		{69.250,2,1},
		{69.500,1,1},
		{70.000,0,1},
		{70.500,2,1},
		{70.750,1,1},
		{71.000,3,2,length=1.000},
		{72.000,0,1},
		--]]
		{184.000,3,1},
		{184.500,0,1},
		{185.000,3,1},
		{185.500,0,1},
		{186.000,3,1},
		{186.500,0,1},
		{187.000,3,1},
		{187.500,0,1},
		{188.000,3,1},
		{188.500,0,1},
		{189.000,3,1},
		{189.500,0,1},
		{190.000,3,1},
		{190.500,0,1},
		{191.000,3,1},
		{191.500,0,1},
		{192.000,3,1},
		{192.500,0,1},
		--{192.750,3,1},
		{193.000,0,1},
		--{193.250,3,1},
		{193.500,0,1},
		--{193.750,3,1},
		{194.000,0,1},
		--{194.250,3,1},
		{194.500,0,1},
		--{194.750,3,1},
		{195.000,0,1},
		--{195.250,3,1},
		{195.500,0,1},
		--{195.750,3,1},
		
		{196.000,0,1},
		{196.250,3,1},
		{196.500,0,1},
		{196.750,3,1},
		{197.000,0,1},
		{197.250,3,1},
		{197.500,0,1},
		{197.750,3,1},
		{198.000,0,1},
		{198.250,3,1},
		{198.500,0,1},
		{198.750,3,1},
		{199.000,0,1},
		{199.250,3,1},
		{199.500,0,1},
		{199.750,3,1},
		{200.000,0,1},
	}

	tiiiiik = {
		--{63.750,3,1},
		{64.000,3,1},
		{65.000,2,1},
		{66.000,1,1},
		{67.000,0,1},
	}


	

	switch = {
		{137.000,3,1},
		{141.000,0,1},
		{145.000,3,1},
		{149.000,0,1},
		{153.000,3,1},
		{157.000,0,1},	
		{161.000,3,1},
		--{163.000,0,1},
		{165.000,0,1},
	}

	turnop = {
		{137.000,0,1},
		{139.000,0,1},
		{141.000,3,1},
		{143.000,3,1},
		{145.000,1,1},
		{147.000,1,1},
		{149.000,2,1},
		{150.000,2,1},
		{151.000,0,1},
		{153.000,0,1},
		{155.000,0,1},
		{157.000,3,1},
		{159.000,3,1},
		{160.000,1,1},
		{161.000,1,1},
		{162.000,2,1},
		{163.000,2,1},
		{164.000,0,1},
		{164.750,0,1},
		{165.500,0,1},
		{166.250,0,1},
		{167.000,0,1},
	}

	aaaaa = {
		{68.000,3,1},
		{68.500,0,1},
		{69.000,2,1},
		{69.250,1,1},
		{69.500,2,1},
		{70.000,0,1},
		{70.500,2,1},
		{70.750,1,1},
		{71.000,3,2,length=1.000},
		{72.000,0,2,length=1.000},
		{134.000,3,1},
		{134.500,0,1},
		{135.000,3,1},
		{136.000,3,1},
		{136.750,2,1},
		{137.500,1,1},
		{138.250,0,1},
		{139.000,3,1},
		{139.500,0,1},
		{140.000,3,1},
		{140.750,1,1},
		{141.500,2,1},
		{142.250,0,1},
		{143.000,3,2,length=1.000},
		{144.000,0,1},
		{144.750,2,1},
		{145.500,1,1},
		{146.250,3,1},
		{147.000,0,1},
		{147.500,3,1},
		{148.000,0,1},
		{148.750,1,1},
		{149.500,2,1},
		{150.000,3,2,length=0.750},
		{151.000,0,2,length=1.000},
		{152.000,3,1},
		{152.750,1,1},
		{153.500,2,1},
		{154.250,0,1},
		{155.000,3,1},
		{155.500,0,1},
		{156.000,3,1},
		{156.750,2,1},
		{157.500,1,1},
		{158.250,0,1},
		{159.000,3,2,length=1.000},
		{160.000,0,1},
		{160.750,1,1},
		{161.500,2,1},
		{162.250,3,1},
		{163.000,0,1},
		{163.500,3,1},
		{164.000,0,1},
		{164.750,2,1},
		{165.500,1,1},
		{166.000,3,1},
		{166.500,2,1},
		{167.000,3,1},
		{167.500,0,1},
		{168.000,3,1},

		{200.000,0,1},
		{200.250,1,1},
		{200.750,2,1},
		{201.250,3,1},
		{201.750,3,1},
		{202.000,1,1},
		{202.250,2,1},
		{202.500,0,1},
		{202.750,3,1},
		{203.000,0,1},
	}

	bic = {
		{56.000,3,1},
		{58.000,0,1},
		{60.000,3,1},
		{62.000,0,1},
		{64.000,3,1},
		{65.000,0,1},
		{66.000,3,1},
		{67.000,0,1},
		{68.000,3,1},
	}

	o = {
		{168.000,0,1},
		{170.000,1,1},
		{172.000,2,1},
		{174.000,3,1},
		{176.000,0,1},
		{178.000,1,1},
		{180.000,2,1},
		{182.000,3,1},
		--{184.000,0,1},
		
		--{186.000,0,1},
		--[[
		{185.000,3,1},
		{185.500,0,1},
		{186.000,3,1},
		{186.500,0,1},
		{187.000,3,1},
		{187.500,0,1},
		{188.000,3,1},
		{188.500,0,1},
		{189.000,3,1},
		{189.500,0,1},
		{190.000,3,1},
		{190.500,0,1},
		{191.000,3,1},
		{191.500,0,1},
		{192.000,3,1},
		{192.500,0,1},
		--{192.750,3,1},
		{193.000,0,1},
		--{193.250,3,1},
		{193.500,0,1},
		--{193.750,3,1},
		{194.000,0,1},
		--{194.250,3,1},
		{194.500,0,1},
		--{194.750,3,1},
		{195.000,0,1},
		--{195.250,3,1},
		{195.500,0,1},
		--{195.750,3,1},
		
		{196.000,0,1},
		{196.250,3,1},
		{196.500,0,1},
		{196.750,3,1},
		{197.000,0,1},
		{197.250,3,1},
		{197.500,0,1},
		{197.750,3,1},
		{198.000,0,1},
		{198.250,3,1},
		{198.500,0,1},
		{198.750,3,1},
		{199.000,0,1},
		{199.250,3,1},
		{199.500,0,1},
		{199.750,3,1},
		{200.000,0,1},
		--]]
	}
	

	dance = {
		{204.000,3,1},
		{204.750,0,1},
		{205.500,1,1},
		{206.000,2,1},
		{206.750,3,1},
		{207.250,0,1},
		{207.500,3,1},
		{208.000,1,1},
		{208.500,2,1},
		{209.000,1,1},
		{209.500,3,1},
		{210.000,2,1},
		{210.500,1,1},
		{211.000,2,1},
		{211.500,1,1},
		{212.000,0,1},
		{212.750,3,1},
		{213.500,1,1},
		{214.000,2,1},
		{214.750,0,1},
		{215.250,3,1},
		{215.500,0,1},
		{216.000,3,1},
		{216.500,2,1},
		{217.000,1,1},
		{217.500,2,1},
		{218.000,3,1},
		{218.500,1,1},
		{219.000,3,1},
		{219.500,0,1},
		{220.000,3,1},
		{220.750,0,1},
		{221.500,2,1},
		{222.000,1,1},
		{222.750,3,1},
		{223.250,0,1},
		{223.500,3,1},
		{224.000,2,1},
		{224.500,1,1},
		{225.000,0,1},
		{225.500,3,1},
		{226.000,1,1},
		{226.500,2,1},
		{227.000,1,1},
		{227.500,2,1},
		{228.000,0,1},
		{228.750,3,1},
		{229.500,2,1},
		{230.000,1,1},
		{230.750,0,1},
		{231.250,3,1},
		{231.500,0,1},
		{232.000,3,1},
		{232.500,1,1},
		{233.000,2,1},
		{233.500,0,1},
		{234.000,3,1},
		{236.000,3,1},
		{236.750,0,1},
		{237.500,2,1},
		{238.000,1,1},
		{238.750,3,1},
		{239.250,0,1},
		{239.500,3,1},
		{240.000,2,1},
		{240.500,1,1},
		{241.000,2,1},
		{241.500,3,1},
		{242.000,1,1},
		{242.500,2,1},
		{243.000,1,1},
		{243.500,2,1},
		{244.000,0,1},
		{244.750,3,1},
		{245.500,2,1},
		{246.000,1,1},
		{246.750,0,1},
		{247.250,3,1},
		{247.500,0,1},
		{248.000,3,1},
		{248.500,1,1},
		{249.000,2,1},
		{249.500,1,1},
		{250.000,3,1},
		{250.500,2,1},
		{251.000,3,1},
		{251.500,0,1},
		{252.000,3,1},
		{252.750,0,1},
		{253.500,1,1},
		{254.000,2,1},
		{254.750,3,1},
		{255.250,0,1},
		{255.500,3,1},
		{256.000,1,1},
		{256.500,2,1},
		{257.000,0,1},
		{257.500,3,1},
		{258.000,2,1},
		{258.500,1,1},
		{259.000,2,1},
		{259.500,1,1},
		{260.000,0,1},
		{260.750,3,1},
		{261.500,1,1},
		{262.000,2,1},
		{262.750,0,1},
		{263.250,3,1},
		{263.500,0,1},
		{264.000,3,1},
		{264.500,2,1},
		{265.000,1,1},
		{265.500,0,1},
		{266.000,3,1},
		{266.500,1,1},
		{267.000,3,2,length=0.500},
		{267.500,0,1},
	}

	push = {
		{72.000,3,1},
		{73.000,2,1},
		{73.500,0,1},
		{74.000,2,1},
		{74.500,3,1},
		{74.750,0,1},
		{75.250,0,1},
		{75.500,3,1},
	
		{77.000,2,2,length=0.500},
		{77.500,0,1},
		{77.750,3,1},
		{78.000,0,1},
		{78.250,1,1},
		{78.500,0,1},
		{78.750,3,1},
		{79.000,2,1},
		{79.250,3,2,length=0.500},
		
		{80.500,2,1},
		{80.750,1,1},
		{81.000,0,1},
		
		{82.500,1,2,length=0.500},
		{83.000,2,2,length=1.000},
		
		{84.000,0,2,length=1.000},
		{85.000,3,2,length=0.500},
		{85.500,1,1},
		{85.750,2,1},
		{86.000,1,2,length=0.750},
		{86.750,2,2,length=0.750},
		{87.500,0,2,length=0.500},
		{88.000,3,2,length=0.500},
		
		{90.500,3,1},
		{90.750,0,1},
		{91.000,3,1},
		{91.250,2,1},
		{91.500,1,1},
		{91.750,0,1},
		{92.000,0,1},
		{92.250,3,1},
		{92.750,0,1},
		
		{93.750,0,1},
		{94.000,3,1},
		{94.500,3,1},
		{95.000,0,1},
		{95.500,0,1},
		{96.000,3,1},
		{96.250,2,1},
		{96.500,3,1},
		{96.750,0,1},
		{97.000,1,1},
		{97.500,0,1},
		{97.750,3,1},
		{98.500,0,1},
		{98.750,1,1},
		{99.000,2,2,length=1.000},
		{100.000,3,1},
		{101.000,0,1},
		{102.000,3,1},
		{102.750,1,1},
		{103.000,2,1},
		{103.500,0,1},
		{104.000,3,1},
		{105.000,1,1},
		{105.500,0,1},
		{106.000,1,1},
		{106.500,3,1},
		{106.750,0,1},
		{107.250,0,1},
		{107.500,3,1},
		{108.000,0,1},
		{108.250,2,1},
		{108.750,0,1},
		{109.000,1,2,length=0.500},
		{109.500,0,1},
		{109.750,3,1},
		{110.000,0,1},
		{110.250,2,1},
		{110.500,0,1},
		{110.750,3,1},
		{111.000,1,1},
		{111.250,3,2,length=0.500},
		{112.000,0,1},
		{112.250,2,1},
		
		{114.500,2,2,length=0.500},
		{115.000,1,2,length=0.750},
		{115.500,0,1},
		{116.000,0,2,length=1.000},
		{117.000,3,2,length=0.500},
		{117.500,2,1},
		{117.750,1,1},
		{118.000,2,2,length=0.750},
		{118.750,1,2,length=0.750},
		{119.500,0,2,length=0.500},
		{120.000,3,2,length=0.500},
		{120.500,1,1},
		{121.000,3,1},
		{121.250,1,1},
		{121.500,2,1},
		{121.750,0,1},
		{122.000,1,1},
		
		{123.250,1,1},
		{123.500,2,1},
		{123.750,0,1},
		{124.000,0,1},
		{124.250,3,1},
		{124.750,0,1},
		{125.000,1,1},
		{125.250,2,1},
		{125.500,1,1},
		{125.750,0,1},
		{126.000,3,1},
		{126.500,3,1},
		{127.000,0,1},
		{127.500,0,1},
		{128.000,3,1},
		{128.250,1,1},
		{128.500,3,1},
		{128.750,0,1},
		{129.000,2,1},
		{129.500,0,1},
		{129.750,3,1},
		{130.500,0,1},
		{130.750,2,1},
		{131.000,1,1},
		{131.250,3,1},
		{131.500,0,1},
		
		{134.000,3,1},
		{134.500,0,1},
		{135.000,2,1},
		{160.000,1,1},
		{161.000,2,1},
		{162.000,3,1},
		{163.000,0,1},
		{164.000,1,1},
		{164.750,2,1},
		{165.500,3,1},
		{166.250,0,1},
		{167.000,3,1},
	}
	--------------------------node/definemod/------------------
	

	definemod { 'CircSize',
    function(p)
        circ_size = p
    end,
	}

	aux{'vibratex','vibratey'}
	node{'vibratex','vibratey',function(amtx,amty)
    for pn=1,2 do
        PP[pn]:vibrate(1)
        PP[pn]:effectmagnitude(amtx,amty,0)
    end
	end}

	definemod {'dcrop', function(crop)
		bg1:croptop(crop)
		bg2:cropbottom(.5-crop)
	end}

	definemod {'dcrop2', function(crop)
		bg3:croptop(crop)
		bg4:cropbottom(.5-crop)
	end}

	definemod {'dcrop3', function(crop)
		bg5:croptop(crop)
		bg6:cropbottom(.5-crop)
	end}

	definemod {'dcrop4', function(crop)
		bg7:croptop(crop)
		bg8:cropbottom(.5-crop)
	end}

	
	---------------------------mod starts------------------------------------
	
	GAMESTATE:ForceSmoothLines(0)
	
	set {0,2.5,'xmod',100,'cover',100,'dizzyholds',100,'modtimer',50,'drawsize',50,'drawsizeback',10,'drawdistancefront',100,'disablemines',100,'minestealth'}
	
	me(4,5,628*3,0,'confusionoffset','len',inOutExpo)

	me(0,3,200,200,'mini','len',inOutExpo)
	me(3,4,200,-50,'mini','len',inOutExpo)
	me(6,2,-50,0,'mini','len',inOutExpo)

	--me(3,5,0.5,2.3,'xmod','len',outExpo)
	--me(4,2,0,-720,'tinyx','len',inOutCubic)
	--me(5,3,-720,0,'tinyx','len',inOutCubic)
	
	ease{7,1,bounce,-950,'movez'}
	ease{15,1,bounce,-950,'movez'}
	ease{23,1,bounce,-950,'movez'}
	ease{31,1,bounce,-950,'movez'}
	
	local fluct = 1
	for i=1, table.getn(baba) do
	local beat = baba[i][1]
	local col = baba[i][2]
		if col == 0 then
		--add {beat, 1, outCubic, 90, 'rotationz2',plr=1}
		--add {beat, 1, outCubic, -90, 'rotationz2',plr=2}
		ease{beat,1,flip(BackO),-100,'rotationy',plr=1}
		ease{beat,1,flip(BackO),100,'rotationy',plr=2}
	
		elseif col == 3 then
		--add {beat, 1, outCubic, -90, 'rotationz2',plr=1}
		--add {beat, 1, outCubic, 90, 'rotationz2',plr=2}
		ease{beat,1,flip(BackO),100,'rotationy',plr=1}
		ease{beat,1,flip(BackO),-100,'rotationy',plr=2}
		
		elseif col == 1 then
		ease{beat,1,flip(BackO),100,'rotationx',plr=1}
		ease{beat,1,flip(BackO),-100,'rotationx',plr=2}
		
		elseif col == 2 then
		ease{beat,1,flip(QuartO),-100,'rotationx',plr=1}
		ease{beat,1,flip(QuartO),100,'rotationx',plr=2}
	
		end
		ease{beat,1,flip(outCubic),-900,'tiny'}

	fluct = fluct*-1
	end
	
	me(8,2.5,-200,0,'skewy','len',outExpo)
	me(8.75,2.5,200,0,'skewy','len',outExpo)
	me(9.50,2.5,-200,0,'skewx','len',outExpo)
	me(10.25,2.5,200,0,'skewx','len',outExpo)

	me(16,2.5,-200,0,'skewy','len',outExpo)
	me(16.75,2.5,200,0,'skewy','len',outExpo)
	me(17.50,2.5,-200,0,'skewx','len',outExpo)
	me(18.25,2.5,200,0,'skewx','len',outExpo)

	me(24,2.5,-200,0,'skewy','len',outExpo)
	me(24.75,2.5,200,0,'skewy','len',outExpo)
	me(25.50,2.5,-200,0,'skewx','len',outExpo)
	me(26.25,2.5,200,0,'skewx','len',outExpo)

	me(32,2.5,-200,0,'skewy','len',outExpo)
	me(32.75,2.5,200,0,'skewy','len',outExpo)
	me(33.50,2.5,-200,0,'skewx','len',outExpo)
	me(34.25,2.5,200,0,'skewx','len',outExpo)

	me(39.25,1,-700,0,'tipsy','len',outExpo)
	ease{39.25,1,flip(outCubic),-900,'tiny'}

	local fluct = 1
	for i=1, table.getn(bebe) do
	local beat = bebe[i][1]
	local col = bebe[i][2]
		if col == 1 then
		ease2 (beat, 4, flip(ExpoS), 360, 'rotationz2',1)
		ease2 (beat, 4, flip(ExpoS),-360, 'rotationz2',2)
		--add {beat, 3, flip(ExpoS), 360, 'rotationz2',plr=1}
		--add {beat, 3, flip(ExpoS), -360, 'rotationz2',plr=2}
		elseif col == 2 then
		ease2 (beat, 4, flip(ExpoS), -360, 'rotationz2',1)
		ease2 (beat, 4, flip(ExpoS),360, 'rotationz2',2)
		--add {beat, 3, flip(ExpoS), -360, 'rotationz2',plr=1}
		--add {beat, 3, flip(ExpoS), 360, 'rotationz2',plr=2}
		end
		ease{beat,1,flip(outCubic),-500,'tiny'}

	fluct = fluct*-1
	end

	
	local fluct = 1
	for i=1, table.getn(c2l) do
	local beat = c2l[i][1]
	local col = c2l[i][2]
		--mod_bounce(beat,1,0,-100*fluct,'drunk','Cubic','Cubic')
		--mod_bounce(beat,1,0,-100*fluct,'tipsy','Cubic','Cubic')
		ease {beat, 1, flip(ExpoS), -50*fluct, 'drunk'}
		ease {beat, 1, flip(ExpoS), -50*fluct, 'tipsy'}
	fluct = fluct*-1
	end

	me(11,5,200,0,'cubicx','len',inOutExpo)
	me(19,5,200,0,'cubicx','len',inOutExpo)
	me(27,5,-200,0,'cubicx','len',inOutExpo)
	me(35,7,-200,0,'cubicx','len',inOutExpo)

	me(11,5,200,0,'drunk','len',inOutExpo)
	me(19,5,200,0,'drunk','len',inOutExpo)
	me(27,5,-200,0,'drunk','len',inOutExpo)
	me(35,7,-300,0,'drunk','len',inOutExpo)

	me(11,5,200,0,'tipsy','len',inOutExpo)
	me(19,5,200,0,'tipsy','len',inOutExpo)
	me(27,5,-200,0,'tipsy','len',inOutExpo)
	me(35,7,-200,0,'tipsy','len',inOutExpo)
	------------------------------------------------------
	
	ease2 (40, 1, CubicS, 100, 'centered')
	ease2 (40, 1, CubicS, 200, 'tipsy')
	ease2 (40, 4, flip(ExpoS), 360, 'rotationz')
	ease2 (40, 4, ExpoS, 600, 'movez')
	ease2 (40, 1, ExpoS, 360, 'confusion')
	ease {40,4,outSine, 100,'dark'}
	
	
	local fluct = 1
	for i=1, table.getn(dududud) do
	local beat = dududud[i][1]
	local col = dududud[i][2]
	if col == 0 then
		ease {beat,1,flip(outCubic),500,'arrowpath0'}
		elseif col == 1 then
		ease {beat,1,flip(outCubic),500,'arrowpath1'}
		elseif col == 2 then
		ease {beat,1,flip(outCubic),500,'arrowpath2'}
		elseif col == 3 then
		ease {beat,1,flip(outCubic),500,'arrowpath3'}
		end
		ease{beat,1,flip(outQuart),50,'arrowpathdrawsize'}
		ease{beat,1,flip(inOutCubic),100,'arrowpathdrawsizeback'}
		ease{beat,1,flip(outQuart),1000,'arrowpathgirth'}
	fluct = fluct*-1
	end
	
	local fluct = 1
	for i=1, table.getn(tiiiiik) do
	local beat = tiiiiik[i][1]
	local col = tiiiiik[i][2]
		mod_kick(beat,2,0,-70,'orient','Expo','Quart')
    	mod_bounce(beat-0,2,0,50*fluct,'x','Quart','Cubic')
		mod_bounce(beat+0,2,0,-10*fluct,'rotationz','Cubic','Cubic')
		mod_kick(beat,2,0,100,'y','Expo','Quart')	
		mod_bounce(beat,1,0,-100*fluct,'cubicx','Cubic','Cubic')
	fluct = fluct*-1
	end
	
	local fluct = 1
	for i=1, table.getn(note) do
	local beat = note[i][1]
	local col = note[i][2]
		--mod_bounce(beat,1,0,-100*fluct,'drunk','Cubic','Cubic')
		--mod_bounce(beat,1,0,-100*fluct,'tipsy','Cubic','Cubic')
		ease {beat, 1, flip(inOutExpo), -100*fluct, 'drunk'}
		ease {beat, 1, flip(inOutExpo), 100*fluct, 'tipsy'}
		
		--add {beat, 1, outCubic, -1, 'tiny'}
   
	fluct = fluct*-1
	end


	ease2 (45, 1, CubicS, 0, 'centered')
	ease2 (45, 1, CubicS, 0, 'tipsy')
	ease2 (45, 4, flip(ExpoS), 0, 'rotationz')
	ease2 (45, 4, ExpoS, 0, 'movez')
	ease2 (45, 1, ExpoS, 0, 'confusion')
	ease {54,9,outSine, 0,'dark'}

	wiggle(64, 4.5, 1, BackO, 85, 'drunk')
	wiggle(64, 4.5, 1, BackO, 85, 'tipsy')
	wiggle(64, 4.5, 1, BackO, 35, 'rotationy')

	wiggle(68, 0, 1, BackO, 0, 'drunk')
	wiggle(68, 0, 1, BackO, 0, 'tipsy')
	wiggle(68, 0, 1, BackO, 0, 'rotationy')

	--me(67.25,4,-360*2,0,'rotationy','len',inOutSine)
	--me(68.25,4,628*8,0,'confusionyoffset','len',inOutSine)
	--ease{80.50, 6, inverse, -1000, 'y'}
	mb(68,2,30,-150,'mini','Sine','Cubic')
	me(67,2,-628,0,'confusion','len',outExpo)
	me(67,2,-200,0,'tiny','len',outExpo)
	me(69,3,70,0,'mini','len',outElastic)

	me(69,1,0,10,'reverse','len',outCirc)
	me(69.25,1,10,20,'reverse','len',outCirc)
	me(69.50,1,20,40,'reverse','len',outCirc)


	me(70,0.9,0,20,'flip','len',outQuart)
	me(70.50,0.9,20,-50,'flip','len',outQuart)
	me(71,0.9,-50,0,'flip','len',outQuart)
	

	me(70,1,0,-1000,'rotationx','len',outExpo)
	me(70.25,1,-1000,0,'rotationx','len',outExpo)
	me(71,1,-1000,0,'spiralx','len',outExpo)

	me(71,1,40,0,'reverse','len',outCirc)
	
	

	--ease{67,1,bounce,-950,'movez'}
	
	ease2 (68, 1, inverse, 1000, 'z')
	
	local fluct = 1
	for i=1, table.getn(aaaaa) do
	local beat = aaaaa[i][1]
	local col = aaaaa[i][2]
	if col == 0 then
		ease {beat,1,flip(CircO),300,'tipsy'}
		elseif col == 1 then
		ease {beat,1,flip(CircO),300,'drunk'}
		elseif col == 2 then
		ease {beat,1,flip(CircO),-300,'drunk'}
		elseif col == 3 then
		ease {beat,1,flip(CircO),-300,'tipsy'}
		end
		
	fluct = fluct*-1
	end

	
	local fluct = 1
	for i=1, table.getn(bic) do
	local beat = bic[i][1]
	local col = bic[i][2]
		ease {beat,2,flip(outCirc),25,'stealth'}
		ease {beat,1,flip(outCubic),-900,'tinyx'}

	fluct = fluct*-1
	end
	


	---------------------------------------------------------------
	set {71,200,'tiny0',plr=2}
	set {71,200,'tiny1',plr=2}
	set {71,200,'tiny2',plr=1}
	set {71,200,'tiny3',plr=1}

	set {104,0,'tiny0',plr=2}
	set {104,0,'tiny1',plr=2}
	set {104,0,'tiny2',plr=1}
	set {104,0,'tiny3',plr=1}

	set {105,200,'tiny0',plr=2}
	set {105,200,'tiny1',plr=1}
	set {105,200,'tiny2',plr=2}
	set {105,200,'tiny3',plr=1}

	set {133,0,'tiny0',plr=2}
	set {133,0,'tiny1',plr=1}
	set {133,0,'tiny2',plr=2}
	set {133,0,'tiny3',plr=1}

	for i = 72,99,2 do
		ease2(i,1.25,inverse,500*fluct,'movex')	
	fluct = fluct * -1
	end

	local fluct = 1
    for i = 72,102,1 do 
    mod_kick(i,2,50,-70,'orient','Expo','Quart')
   	mod_bounce(i+0,1,0,100*fluct,'movez','Cubic','Cubic',1)
    mod_bounce(i+0,1,0,-100*fluct,'movez','Cubic','Cubic',2)
	mod_kick(i,2,0,100,'wave','Expo','Quart')
	mod_kick(i,2,0,-70,'drunk','Expo','Quart')
    mod_bounce(i+0,1,0,-8*fluct,'rotationy','Cubic','Circ')
    mod_bounce(i+0,1,0,8*fluct,'rotationz','Cubic','Circ')
	--mod_kick(i,2,0,10,'brake','Expo','Quart')
    mod_kick(i,1,0,100,'y','Cubic','Cubic')
	--mod_kick(i,2,0,10,'boost','Expo','Quart')
    ease {i, 2, flip(outCubic), 100*fluct, 'x'}
	mod_kick(i,1,0,35*fluct,'square','Cubic','Circ')
    fluct = fluct*-1
    end

	mb(102,2,30,-150,'mini','Sine','Cubic')
	me(103,2,-628*8,0,'confusionoffset','len',outExpo)
	me(103,2,-200,0,'tiny','len',outExpo)
	me(104,2,70,0,'mini','len',outElastic)
	me(103,2,0,100,'reverse','len',outExpo)

	me(130,2,100,0,'reverse','len',outExpo)


	local fluct = 1
    for i = 105,131,1 do 
    mod_kick(i,2,500,-700,'orient','Expo','Quart')
   	mod_bounce(i+0,1,0,100*fluct,'movez','Cubic','Cubic',1)
    mod_bounce(i+0,1,0,-100*fluct,'movez','Cubic','Cubic',2)
	mod_kick(i,2,0,100,'wave','Expo','Quart')
	mod_kick(i,2,0,-70,'drunk','Expo','Quart')
    mod_bounce(i+0,1,0,-8*fluct,'rotationy','Cubic','Circ')
    mod_bounce(i+0,1,0,8*fluct,'rotationz','Cubic','Circ')
	--mod_kick(i,2,0,10,'brake','Expo','Quart')
    mod_kick(i,1,0,100,'y','Cubic','Cubic')
	--mod_kick(i,2,0,10,'boost','Expo','Quart')
    ease {i, 2, flip(outCubic), 100*fluct, 'x'}
    fluct = fluct*-1
    end

	me(103,2,-628,0,'rotationy2','len',outExpo)

	for i = 105,131,2 do
		ease2(i,1.25,inverse,500*fluct,'movex')	
	fluct = fluct * -1
	end

	local f = 1
	for i =1, table.getn(push) do
	local beat = push[i][1]
	local col = push[i][2]
		if col == 3 then
		--ease2(beat,1,CubicS,0,'rotationy')
		--mod_kick(beat,1,0,-35*f,'rotationz','Cubic','Circ')
		elseif col == 0 or col == 1 then
		--ease2(beat,1,BackS,-10*f,'rotationy')
		mod_kick(beat,1,0,-50*f,'skewx','Cubic','Circ')
		mod_kick(beat,1,0,50*f,'noteskewx','Cubic','Circ')
		
		
		--mod_kick(beat,1,0, 15*f,'rotationy','Cubic','Circ')
		elseif col == 2 then
		mod_kick(beat,1,0, 100*f,'tipsy','Cubic','Circ')
		--mod_bounce(beat,1,0,50,'brake','Sine','Sine')
		--mod_kick(beat,1,0,15,'reverse','Cubic','Circ')
		--mod_kick(beat,1,0,35*f,'rotationz','Cubic','Circ')
		mod_kick(beat,1,0,-50*f,'skewy','Cubic','Circ')
		mod_kick(beat,1,0,50*f,'noteskewy','Cubic','Circ')
		end
	f = f*-1
	end

	ease{84,2,outElastic,-50,'noteskewx',
		50,'skewx',
		0,'skewy'
	}

	ease{85,2,outElastic,50,'noteskewx',
		-50,'skewx',
		0,'skewy'
	}

	ease{86,2,outElastic,0,'noteskewx',
		0,'skewx',
		0,'skewy'
	}

	ease{116,2,outElastic,-50,'noteskewx',
		50,'skewx',
		0,'skewy'
	}

	ease{117,2,outElastic,50,'noteskewx',
		-50,'skewx',
		0,'skewy'
	}

	ease{118,2,outElastic,0,'noteskewx',
		0,'skewx',
		0,'skewy'
	}

	me(132,2,-628,0,'confusion','len',outExpo)
	me(151,2,-628,0,'rotationy2','len',outExpo)
	ease{131,1,bounce,-950,'movez'}
	ease{133,1,bounce,-950,'movez'}
	--me(129,5,628*3,0,'confusionyoffset','len',inOutCubic)
	------------------------------------------------------------

	--wiggle(64, 4, 1, inOutCubic, 50, 'rotationy')
	--wiggle(64, 4, 1, inOutCubic, -50, 'rotationx')
	--me(132,4,0,30,'mini','len',outCubic)
	ease2(134,1,CubicO,0,'orient')
	me(134,1,-500,0,'tipsy','len',outCubic)
	me(134.5,1,500,0,'tipsy','len',outCubic)
	me(135,1,-500,0,'tipsy','len',outCubic)

	me(134,1.5,0,100,'centered','len',inOutCubic)
	me(135,1.5,0,100,'reverse','len',inOutCubic,2)
	me(166,1.5,100,0,'centered','len',inOutCubic)
	me(165,1.5,100,0,'reverse','len',inOutCubic,2)
	me(135,1,0,100,'dizzyholds','len',outCubic)

	
	local fluct = 1
	for i=1, table.getn(switch) do
	local beat = switch[i][1]
	local col = switch[i][2]
		if col == 0 then
		ease2(beat,2,inverse,1000,'x',1)
		ease2(beat,2,inverse,-1000,'x',2)
		
		elseif col == 3 then
		ease2(beat,2,inverse,1000,'x',2)
		ease2(beat,2,inverse,-1000,'x',1)
		
		end
		ease2(beat,1,CubicO,100*fluct,'cubicx')
		ease2(beat,1,CubicO,200*fluct,'cubicz')
		ease2(beat,1,CubicO,50*fluct,'mini')
		--ease2(beat,1,CubicO,50*fluct,'tantipsy')
	fluct = fluct*-1
	end

	
	me(150,0.5,70,250,'zoomx','len',outCubic)
	me(151,0.5,250,100,'zoomx','len',outCubic)
	--me(150,0.5,250,50,'zoomy','len',outCubic)

	ease2(168,1,CubicO,0,'cubicx')
	ease2(168,1,CubicO,0,'cubicz')
	ease2(168,1,CubicO,0,'mini')
	--ease2(137,1,ExpoO,1,'dcrop')
	--ease2(139,1,ExpoO,0,'dcrop')
	--ease2(139,1,ExpoO,1,'dcrop2')

	
	
	local fluct = 1
	for i=1, table.getn(turnop) do
	local beat = turnop[i][1]
	local col = turnop[i][2]
		if col == 0 then
		--ease2(beat,1,CubicO,1,'dcrop2')
		ease2(beat,1,CubicO,1*fluct,'dcrop')
		--add {beat, 1, outCubic, 1*fluct, 'dcrop'}
		--add {beat, 1, outCubic, 1, 'dcrop2'}
		elseif col == 3 then
		--ease2(beat,1,CubicO,0,'dcrop')
		ease2(beat,1,CubicO,1*fluct,'dcrop2')
		elseif col == 1 then
		ease2(beat,1,CubicO,1*fluct,'dcrop3')
		elseif col == 2 then
		ease2(beat,1,CubicO,1*fluct,'dcrop4')
		--ease2(beat,1,CubicO,0,'dcrop2')
		--add {beat, 1, outCubic, 0, 'dcrop2'}
		end
		--ease2(beat,1,CubicO,1*fluct,'dcrop2')
		--ease2(beat,1,CubicO,1*fluct,'dcrop3')
	fluct = fluct*-1
	end

	ease2(169,1,ExpoO,0,'dcrop')
	ease2(168,2,inverse,-1000,'y')
	
	local fluct = 1
	for i = 168,190,2 do 
	ease2(i,2,inverse,-1000,'z')
	fluct = fluct*-1
	end



	local fluct = 1
	for i = 192,196,1 do 
	ease2(i,2,inverse,-1000,'z')
	fluct = fluct*-1
	end
	
		
	local fluct = 1
	for i=1, table.getn(o) do
	local beat = o[i][1]
	local col = o[i][2]
		
		if col == 0 then
			swap {beat, 1, outExpo, 'rldu'}
		elseif col == 1 then
			swap {beat, 1, outExpo, 'urld'}
		elseif col == 2 then
			swap {beat, 1, outExpo, 'durl'}
		elseif col == 3 then
			swap {beat, 1, outExpo, 'ldur'}
		end
			ease {beat, 1, flip(linear), 50, 'stealth'}
			mod_kick(beat,1,100, 150,'zoomx','Cubic','Cubic')
		
	fluct = fluct*-1
	end

	me(196.25,4,-360*8,0,'rotationy2','len',inOutSine)
	mb(199,2,30,-150,'mini','Sine','Cubic')
	me(198,2,-628,0,'confusionoffset','len',outExpo)
	me(198,2,-200,0,'tiny','len',outExpo)
	me(200,3,70,0,'mini','len',outElastic)


	--[[
	set {168, 90, 'coolrotationx', 400, 'zoomz', 50, 'flip',50,'dark',100,'spiralholds', 1.75,'xmod'}
	
	
	func {168, function()
		for pn = 1,2 do
			local a = P[pn]
			if a then
				a:x(scx)
			end
		end
	end}
		
	--ease2 (158, 16, inOutSine, 0,'coolrotationy')
	ease2 (198, 4, inOutSine, 360*10,'coolrotationy')
	--ease2 (210, 15, inOutSine, 360*2,'coolrotationx')
	

	func {168,32, function(b, poptions)
		for pn = 1,2 do
			for col = 0,3 do
				poptions[pn]['movex'..col] = 100*math.sin((col/2)*math.pi)
				poptions[pn]['movez'..col] = 100*math.cos((col/2)*math.pi)
			end
		end
	end}
	
	ease2 (199, 8, inverse, 1000,'zoomz')
	--ease2 (215, 1, inOutSine, 0,'coolrotationy')
	--ease2 (215, 1, inOutSine, 0,'coolrotationx')
	
	set {200, 0, 'coolrotationx', 0, 'zoomz', 0, 'flip',0,'dark',}
	--]]
	------------------------------------------------------------------------------------------------
	--reset{205, exclude = {'xmod', 'cover','dizzyholds','modtimer','flip','coolrotationx'}}
	--set{200,2.3,'xmod'}
	--[[
	local f = 1
	for i =1, table.getn(dance) do
	local beat = dance[i][1]
	local col = dance[i][2]
		if col == 3 then
		ease2(beat,1,CubicS,0,'rotationy')
		mod_kick(beat,1,0,-35*f,'rotationz','Cubic','Circ')
		elseif col == 0 or col == 1 then
		--ease2(beat,1,BackS,-10*f,'rotationy')
		mod_kick(beat,1,0,-50*f,'skewx','Cubic','Circ')
		mod_kick(beat,1,0,50*f,'noteskewx','Cubic','Circ')
		
		mod_kick(beat,1,0, 15*f,'rotationy','Cubic','Circ')
		elseif col == 2 then
		mod_kick(beat,1,0, 100*f,'tipsy','Cubic','Circ')
		--mod_bounce(beat,1,0,50,'brake','Sine','Sine')
		mod_kick(beat,1,0,15,'reverse','Cubic','Circ')
		mod_kick(beat,1,0,35*f,'rotationz','Cubic','Circ')

		mod_kick(beat,1,0,50*f,'skewx','Cubic','Circ')
		mod_kick(beat,1,0,-50*f,'noteskewx','Cubic','Circ')
		end
	f = f*-1
	end
	--]]
	local fluct = 1
    for i = 204,234,1 do 
    mod_kick(i,2,0,-70,'orient','Expo','Quart')
    mod_bounce(i+0,1,0,100*fluct,'movez','Cubic','Cubic')
    --mod_bounce(i+0,1,0,-100*fluct,'movez','Cubic','Cubic')
	mod_kick(i,2,0,100,'wave','Expo','Quart')
	mod_kick(i,2,0,-70,'drunk','Expo','Quart')
    mod_bounce(i+0,1,0,-10*fluct,'rotationy','Cubic','Circ')
    mod_bounce(i+0,1,0,-9*fluct,'rotationz','Cubic','Circ')
    mod_kick(i,1,0,100,'y','Cubic','Cubic')
    ease {i, 2, flip(outCubic), 100*fluct, 'x'}
    fluct = fluct*-1
    end

	local fluct = 1
    for i = 236,267,1 do 
    mod_kick(i,2,0,-70,'orient','Expo','Quart')
    mod_bounce(i+0,1,0,100*fluct,'movez','Cubic','Cubic')
    --mod_bounce(i+0,1,0,-100*fluct,'movez','Cubic','Cubic')
	mod_kick(i,2,0,100,'wave','Expo','Quart')
	mod_kick(i,2,0,-70,'drunk','Expo','Quart')
    mod_bounce(i+0,1,0,-10*fluct,'rotationy','Cubic','Circ')
    mod_bounce(i+0,1,0,-9*fluct,'rotationz','Cubic','Circ')
    mod_kick(i,1,0,100,'y','Cubic','Cubic')
   -- ease {i, 2, flip(outCubic), 100*fluct, 'x'}
    fluct = fluct*-1
    end

	me(234,2,0,100,'reverse','len',inOutCubic)
	me(267,2,100,0,'reverse','len',inOutCubic)
	ease2 (268, 2, inverse, 1000, 'z')
	me(202,2,0,-200,'x','len',inOutCubic,1)
	me(202,2,0,200,'x','len',inOutCubic,2)

	func {204, 30, function(beat, poptions)
	local sin = math.sin(beat*math.pi*0.25)
	local cos = math.cos(beat*math.pi*0.25)
		poptions[1].x = 200 * cos
		poptions[1].z = 200 * sin
		poptions[2].x = -200 * cos
		poptions[2].z = -200 * sin
	end}

	func {236, 31, function(beat, poptions)
	local sin = math.sin(beat*math.pi*0.25)
	local cos = math.cos(beat*math.pi*0.25)
		poptions[1].x = -200 * cos
		poptions[1].z = -200 * sin
		poptions[2].x = 200 * cos
		poptions[2].z = 200 * sin
	end}

	--me(233.50,1,-200,200,'x','len',inOutCubic,1)
	--me(233.50,1,200,-200,'x','len',inOutCubic,2)

	me(267,2,200,0,'x','len',inOutCubic,1)
	me(267,2,-200,0,'x','len',inOutCubic,2)
	--ease{203,208-203,SineS,1400,'x'}
	ease{268,1,inOutCubic,-100,'drunk',
		100,'tipsy',
		-10,'flip',
		50,'tiny',
		40,'arrowpath',
		3000,'arrowpathgirth',
		100,'arrowpathdrawsize',
		100,'arrowpathdrawsizeback'
	}
	
	ease{278,4,inOutCubic,0,'drunk',
		0,'tipsy',
		0,'flip',
		0,'tiny',
		0,'arrowpath',
		0,'arrowpathgirth',
		0,'arrowpathdrawsize',
		0,'arrowpathdrawsizeback'
	}
	
	ease2 (282, 1, CubicS, 100, 'centered')
	--ease2 (282, 1, CubicS, 100, 'invert')
	--ease2 (282, 1, CubicS, 200, 'tipsy')
	ease2 (282, 4, flip(ExpoS), -360, 'rotationz')
	ease2 (282, 4, ExpoS, 600, 'movez')
	--ease2 (282, 1, ExpoS, 360, 'rotationx2')
	ease {283.5,0.5,outSine, 100,'dark'}
	--ease {283.5,0.5,outCubic, 400,'tinyy'}
	--ease {283.5,0.5,outCubic, 200,'tinyx'}
	me(283.5,0.5,70,150,'zoomx','len',outCubic)
	me(283.5,0.5,250,50,'zoomy','len',outCubic)
	me(283.5,0.5,100,100,'hidemines','len',outCubic)
	--[[
	ease2 (268,1,QuartS, 90, 'rotationx2',2)
	ease2 (268,1,QuartS, 550, 'zoomz',2)
	ease2 (268,1,QuartS, 100, 'dark',2)
	ease2 (268,1,QuartS, 100, 'hidenoteflash',2)
	
	ease2 (268,1,QuartS, 200, 'tiny',2)
	ease2 (281,1,QuartS, 0, 'tiny',2)
	--]]
	--hide{274, 2, plr = 1, column = {0, 1, 2, 3}}

	--hide{272, 2, plr = 2, column = {0, 1, 2, 3}}

	--ease{268,1,inOutCubic,1,'hide',plr=2}
	----------------------------------spellcard---------------------------------------
	card {0, 40, 'Eurake Intro', 3, '#005d85'}
	card {40, 68, 'Flickering build up?', 2, '#05678e'}
	card {68, 131, 'Everybody push!', 4, '#109e9f'}
	card {131, 168, 'Nintedo me Swifty', 5, '#01a897'}
	card {168, 200, 'Wait thats not Xperanza-', 5, '#05c49b'}
	card {200, 268, 'My little PONEy', 3, '#0ccba9'}
	card {268, 282, 'Man what a nice Fresh Oho Oil', 1, '#03d2a6'}
	card {282, 283.50, 'Dont do lecture me with your haunted house knock-off', 1, '#03d2a6'}
	--------------------------func setup----------------
	func {0, 4, linear, 0, 0, function(p) bg1:diffusealpha(p) end}
	func {0, 4, linear, 0, 0, function(p) bg2:diffusealpha(p) end}

	func {68, 2, ExpoS, 0, 0.9, function(p) cube:diffusealpha(p) end}
	func {68, 2, ExpoS, 0, 0, function(p) grandient1:diffusealpha(p) end}
	func {68, 2, ExpoS, 0, 0.9, function(p) grandient2:diffusealpha(p) end}
	

	func {104, 2, ExpoS, 0.9, 0, function(p) grandient2:diffusealpha(p) end}
	func {104, 2, ExpoS, 0, 0.9, function(p) grandient1:diffusealpha(p) end}
	--func {104, 2, linear, 0.9, 0, function(p) cube:diffusealpha(p) end}
	--func {104, 1, linear, 0, 0.9, function(p) cube2:diffusealpha(p) end}

	func {134.5, 1, ExpoS, 0, 1, function(p) bg1:diffusealpha(p) end}
			
	func {134.5, 1, ExpoS, 0, 1, function(p) bg2:diffusealpha(p) end}
	func {134.5, 1, ExpoS, 0, 1, function(p) bg3:diffusealpha(p) end}
	func {134.5, 1, ExpoS, 0, 1, function(p) bg4:diffusealpha(p) end}
	func {134.5, 1, ExpoS, 0, 1, function(p) bg5:diffusealpha(p) end}
	func {134.5, 1, ExpoS, 0, 1, function(p) bg6:diffusealpha(p) end}
	func {134.5, 1, ExpoS, 0, 1, function(p) bg7:diffusealpha(p) end}
	func {134.5, 1, ExpoS, 0, 1, function(p) bg8:diffusealpha(p) end}
	
	func {166.5, 3, ExpoS, 1, 0, function(p) bg2:diffusealpha(p) end}
	func {166.5, 3, ExpoS, 1, 0, function(p) bg3:diffusealpha(p) end}
	func {166.5, 3, ExpoS, 1, 0, function(p) bg4:diffusealpha(p) end}
	func {166.5, 3, ExpoS, 1, 0, function(p) bg5:diffusealpha(p) end}
	func {166.5, 3, ExpoS, 1, 0, function(p) bg6:diffusealpha(p) end}
	func {166.5, 3, ExpoS, 1, 0, function(p) bg7:diffusealpha(p) end}
	func {166.5, 3, ExpoS, 1, 0, function(p) bg8:diffusealpha(p) end}

	func {166, 4, linear, 0, 0, function(p) WhiteQuad:hidden(p) end}
	func {166, 2, linear, 0, 1, function(p) WhiteQuad:diffusealpha(p) end}
	func {168, 4, linear, 1, 0, function(p) WhiteQuad:diffusealpha(p) end}

	func {200, 1, linear, 0.9, 0, function(p) grandient1:diffusealpha(p) end}
	func {200, 1, linear, 0, 0.9, function(p) grandient2:diffusealpha(p) end}
	func {234, 1, linear, 0, 0.9, function(p) grandient1:diffusealpha(p) end}
	func {234, 1, linear, 0.9, 0, function(p) grandient2:diffusealpha(p) end}
	func {268, 6, linear, 0.9, 0, function(p) grandient1:diffusealpha(p) end}
	func {268, 6, linear, 0.9, 0, function(p) cube:diffusealpha(p) end}
	
	--me(136,1,0,1,'dcrop','len',outBack)
	-----------------------------------------------------
	func{0,function()
		bg1:hidden(1)
		bg2:hidden(1)
		bg3:hidden(1)
		bg4:hidden(1)
		bg5:hidden(1)
		bg6:hidden(1)
		bg7:hidden(1)
		bg8:hidden(1)
		WhiteQuad:hidden(1)
	end}

	func{68,function()
		grandient2:hidden(0)
		grandient1:hidden(0)
		cube:hidden(0)
		cube2:hidden(1)
	end}

	--[[
	func{104,function()
		grandient1:hidden(0)
		grandient2:hidden(0)
		cube:hidden(1)
		cube2:hidden(0)
	end}
	--]]
	
	func{130,function()
		bg1:hidden(0)
		bg2:hidden(0)
		bg3:hidden(1)
		bg4:hidden(1)
		bg5:hidden(1)
		bg6:hidden(1)
		bg7:hidden(1)
		bg8:hidden(1)
		
	end}
	
	func{141,function()
		bg1:hidden(1)
		bg2:hidden(1)
		bg3:hidden(0)
		bg4:hidden(0)
		bg5:hidden(1)
		bg6:hidden(1)
		bg7:hidden(1)
		bg8:hidden(1)
		
	end}
	
	func{145,function()
		bg1:hidden(1)
		bg2:hidden(1)
		bg3:hidden(1)
		bg4:hidden(1)
		bg5:hidden(0)
		bg6:hidden(0)
		bg7:hidden(1)
		bg8:hidden(1)
		
	end}

	func{149,function()
		bg1:hidden(1)
		bg2:hidden(1)
		bg3:hidden(1)
		bg4:hidden(1)
		bg5:hidden(1)
		bg6:hidden(1)
		bg7:hidden(0)
		bg8:hidden(0)
		
	end}

	func{151,function()
		bg1:hidden(0)
		bg2:hidden(0)
		bg3:hidden(1)
		bg4:hidden(1)
		bg5:hidden(1)
		bg6:hidden(1)
		bg7:hidden(1)
		bg8:hidden(1)
		
	end}

	func{157,function()
		bg1:hidden(1)
		bg2:hidden(1)
		bg3:hidden(0)
		bg4:hidden(0)
		bg5:hidden(1)
		bg6:hidden(1)
		bg7:hidden(1)
		bg8:hidden(1)
		
	end}
	
	func{160,function()
		bg1:hidden(1)
		bg2:hidden(1)
		bg3:hidden(1)
		bg4:hidden(1)
		bg5:hidden(0)
		bg6:hidden(0)
		bg7:hidden(1)
		bg8:hidden(1)
		
	end}

	func{162,function()
		bg1:hidden(1)
		bg2:hidden(1)
		bg3:hidden(1)
		bg4:hidden(1)
		bg5:hidden(1)
		bg6:hidden(1)
		bg7:hidden(0)
		bg8:hidden(0)
		
	end}

	func{164,function()
		bg1:hidden(0)
		bg2:hidden(0)
		bg3:hidden(1)
		bg4:hidden(1)
		bg5:hidden(1)
		bg6:hidden(1)
		bg7:hidden(1)
		bg8:hidden(1)
		
	end}

	func{168,function()
		bg1:hidden(1)
		bg2:hidden(1)
		bg3:hidden(1)
		bg4:hidden(1)
		bg5:hidden(1)
		bg6:hidden(1)
		bg7:hidden(1)
		bg8:hidden(1)
		
	end}
	

	func{0,function()
		for pn = 1,2 do
			PP1[pn]:hidden(1)
			PP2[pn]:hidden(1)
			PP3[pn]:hidden(1)
			PP4[pn]:hidden(1)
			PP5[pn]:hidden(1)
			PP6[pn]:hidden(1)
			PP7[pn]:hidden(1)
		end
	end}

	func{168,function()
		for pn = 1,2 do
			PP1[pn]:hidden(1)
			PP2[pn]:hidden(1)
			PP3[pn]:hidden(1)
			PP4[pn]:hidden(1)
			PP5[pn]:hidden(1)
			PP6[pn]:hidden(1)
			PP7[pn]:hidden(1)

			PP1[pn]:z(-sw*0.5)
			PP2[pn]:z(-sw)
			PP3[pn]:z(-sw*5.5)
			PP4[pn]:z(-sw*2)
		end
	end}



	func{40,function()
        for pn = 1,2 do
            P[pn]:x(SCREEN_CENTER_X)
        end
    end}

	
end)"
Type = "ActorFrame"
><children>
	<!--
	<Layer
	Type="Quad"
	InitCommand="stretchto,200,200,250,250;diffuse,1,0,0,1"
	/>
	<Layer
	Type="Quad"
	InitCommand="stretchto,225,225,275,275;diffuse,0,1,0,1;blend,add"
	/>
	-->
	

	<Layer File = "../images/cube2.png" Name = "cube2" OnCommand="hidden,1"/>
	<Layer File = "../images/cube.png" Name = "cube" OnCommand="hidden,1"/>
	<Layer File = "../images/gradient2.png" Name = "grandient2" OnCommand="hidden,1"/>
	<Layer File = "../images/gradient1.png" Name = "grandient1" OnCommand="hidden,1"/>
	<Layer File = "../images/itg8.png" Name = "bg8" OnCommand="hidden,1"/>
	<Layer File = "../images/itg7.png" Name = "bg7" OnCommand="hidden,1"/>
	<Layer File = "../images/itg6.png" Name = "bg6" OnCommand="hidden,1"/>
	<Layer File = "../images/itg5.png" Name = "bg5" OnCommand="hidden,1" />
	<Layer File = "../images/itg4.png" Name = "bg4" OnCommand="hidden,1"/>
	<Layer File = "../images/itg3.png" Name = "bg3" OnCommand="hidden,1"/>
	<Layer File = "../images/itg2.png" Name = "bg2" OnCommand="hidden,1"/>
	<Layer File = "../images/itg1.png" Name = "bg1" OnCommand="hidden,1" />
	
	<Layer
    Type="Quad"
	Name = "WhiteQuad"
    InitCommand="x,SCREEN_CENTER_X;y,SCREEN_CENTER_Y;zoomto,SCREEN_WIDTH,SCREEN_HEIGHT;diffuse,1,1,1,1"
	OnCommand="hidden,1"
	/>


	<Layer Type = "ActorProxy" Name = "PC[1]" />
	<Layer Type = "ActorProxy" Name = "PC[2]" />
	<Layer Type = "ActorProxy" Name = "PJ[1]" />
	<Layer Type = "ActorProxy" Name = "PJ[2]" />
	<Layer Type = "ActorProxy" Name = "PP[1]" />
	<Layer Type = "ActorProxy" Name = "PP[2]" />

	<Layer Type = "ActorProxy" Name = "PP1[1]" />
	<Layer Type = "ActorProxy" Name = "PP1[2]" />
	<Layer Type = "ActorProxy" Name = "PP2[1]" />
	<Layer Type = "ActorProxy" Name = "PP2[2]" />
	<Layer Type = "ActorProxy" Name = "PP3[1]" />
	<Layer Type = "ActorProxy" Name = "PP3[2]" />
	<Layer Type = "ActorProxy" Name = "PP4[1]" />
	<Layer Type = "ActorProxy" Name = "PP4[2]" />
	<Layer Type = "ActorProxy" Name = "PP5[1]" />
	<Layer Type = "ActorProxy" Name = "PP5[2]" />
	<Layer Type = "ActorProxy" Name = "PP6[1]" />
	<Layer Type = "ActorProxy" Name = "PP6[2]" />
	<Layer Type = "ActorProxy" Name = "PP7[1]" />
	<Layer Type = "ActorProxy" Name = "PP7[2]" />
</children></Mods>
