<Mods LoadCommand = "%xero(function(self)
	if not P1 or not P2 then
		backToSongWheel('Two Player Mode Required')
		return
	end
	-- hide {beat, duration, [column] [plr]}
	-- judgment / combo proxies
	for pn = 1, 2 do
		setupJudgeProxy(PJ[pn], P[pn]:GetChild('Judgment'), pn)
		setupJudgeProxy(PC[pn], P[pn]:GetChild('Combo'), pn)
	end
	-- player proxies
	for pn = 1, #PP do
		PP[pn]:SetTarget(P[pn])
		P[pn]:hidden(1)
	end
	-- your code goes here here:
	wave_itgbg:zoomtowidth(SCREEN_WIDTH)
    wave_itgbg:zoomtoheight(SCREEN_HEIGHT)
	wave_itgbg:xy(scx,scy)
	P1:x(scx)
	P2:x(scx)
	SpaceBGSprite:hidden(1)
	SpaceBGSprite:SetTexture(SpaceBGAft:GetTexture())

	definemod{'offset','amt','eccentricityx','eccentricityz',function(offset,amt,ex,ez,plr)
    local pi=math.pi/4
    local movex0, movex1, movex2, movex3 =
        math.cos(pi*(offset+0+(plr+1)*4))*(amt*ex/100),
        math.cos(pi*(offset+1+(plr+1)*4))*(amt*ex/100),
        math.cos(pi*(offset+2+(plr+1)*4))*(amt*ex/100),
        math.cos(pi*(offset+3+(plr+1)*4))*(amt*ex/100)

    local movez0, movez1, movez2, movez3 =
        math.sin(pi*(offset+0+(plr+1)*4))*(amt*ez/100),
        math.sin(pi*(offset+1+(plr+1)*4))*(amt*ez/100),
        math.sin(pi*(offset+2+(plr+1)*4))*(amt*ez/100),
        math.sin(pi*(offset+3+(plr+1)*4))*(amt*ez/100)

    return movex0, movex1, movex2, movex3, movez0, movez1, movez2, movez3
end,
'movex0','movex1','movex2','movex3',
'movez0','movez1','movez2','movez3',
}

	setdefault{100,'eccentricityx',275,'eccentricityz'}
	definemod{'itgycontrol',function(ypos)
		wave_itgbg:y(ypos)
	end}
	set{0,scy,'itgycontrol'}

	--intro call and responce base mods
	set{0,1,'stealthtype',1,'stealthpastreceptors',1,'dizzyholds',100,'arrowpathdrawsize',150,'arrowpathdrawsizeback',10000,'arrowpathgirth'}

	set{0,1.7,'xmod',-1020,'centered2',200,'drawsize',plr = 2}
	set{0,3,'xmod',100,'dark',100,'hidenoteflash',plr = 1}
	set{8+2,-680,'centered2',plr = 2}
	set{16+2,1.5,'xmod',-600,'centered2',plr = 2}
	set{24+2,-600,'centered2', plr = 2}

	hide {0+2,32,plr = 1}
	hide {32+2,4,plr = 2}
	
	ease{0,10,linear,680,'centered2',plr = 2}
	ease{8+2,8,linear,680,'centered2',plr = 2}
	ease{16+2,8,linear,600,'centered2',plr = 2}
	ease{24+2,9,linear,750,'centered2',plr = 2}
	ease{28+2,4,inOutCubic,0,'dark'}
	set{32+2,0,'hidenoteflash'}

	--intro call and responce accents
	for i,v in ipairs(wavekick) do
		if v[1]+2 >= 246 then
		ease{v[1]+2,0.25,outCubic,-50,'tinyx',60,'tinyy'}
		ease{v[1]+2+0.25,0.25,inCubic,0,'tinyx',0,'tinyy'}
		else
		ease{v[1]+2,0.25,outCubic,-30,'tinyx',20,'tinyy'}
		ease{v[1]+2+0.25,0.25,inCubic,0,'tinyx',0,'tinyy'}
		end
		add{v[1]+2,0.25,outCubic,104.6666667,'confusionoffset'}
	end
	local wave_intro_help = { 
	{0.000,0,1},
	{1.000,0,1},
	{1.750,0,1},
	{2.250,0,1},
	{2.750,0,1},
	{3.000,0,1},
	{8.000,0,1},
	{9.000,0,1},
	{9.750,0,1},
	{10.250,0,1},
	{10.750,0,1},
	{11.000,0,1},
	{16.000,0,1},
	{17.000,0,1},
	{17.750,0,1},
	{18.250,0,1},
	{18.750,0,1},
	{19.000,0,1},
	{24.000,0,1},
	{25.000,0,1},
	{25.750,0,1},
	{26.250,0,1},
	{26.750,0,1},
	{27.000,0,1},
	}
	for i,v in ipairs(wave_intro_help) do
		ease{v[1]+2,0.25,outCubic,70,'dark',plr = 1}
		ease{v[1]+2+0.25,0.25,inCubic,100,'dark',plr = 1}
	end
	set{3.5+2,50,'stealth',plr = 2}
	set{7.25+2,50,'flip',25,'dark',plr = 2}
	set{7.5+2,0,'stealth',0,'flip',0,'dark',plr = 2}
	set{11.5+2,75,'stealth',plr = 2}
	set{15.25+2,50,'flip',25,'dark',plr = 2}
	set{15.5+2,0,'stealth',0,'flip',0,'dark',plr = 2}
	set{19.5+2,100,'stealth',plr = 2}
	set{23.25+2,50,'flip',25,'dark',plr = 2}
	set{23.5+2,0,'stealth',0,'flip',0,'dark',plr = 2}
	set{27.5+2,100,'stealth',plr = 2}
	set{34+2,0,'drunk',0,'dark',0,'stealth',0,'centered2',3,'xmod',50,'drawsize',plr = 2}


	--linear movements
	local first_mult = 1
	for i,v in ipairs(synthholds) do
		ease{v[1]+2,0.5,linear,-100 * first_mult,'movex',120,'zoomx'}
		ease{v[1]+2+0.75,0.5,linear,0,'movex',100,'zoomx'}
		first_mult = first_mult * -1
	end

	--vocal chops
	for i,v in ipairs(small_vowel_chops) do
		set{v[1]+2,rand.float(-100,100),'confusionyoffset'..v[2],rand.float(-100,100),'confusionxoffset'..v[2],rand.float(-1000,-100),'tinyz'..v[2]}
		ease{v[1]+2,1,inCirc,0,'confusionyoffset'..v[2],0,'confusionxoffset'..v[2],0,'tinyz'..v[2]}
	end


	--vocal chops 2
	local second_mult = 1
	for i,v in ipairs(tipsyaccenting) do
		if v[1]+2 >= 244+2 then
		mirror{v[1]+2,0.25,outCubic,200*second_mult,'tipsy'}
		ease{v[1]+2+0.25,0.25,inCubic,0,'tipsy'}
		else
		mirror{v[1]+2,0.25,outCubic,100*second_mult,'tipsy'}
		ease{v[1]+2+0.25,0.25,inCubic,0,'tipsy'}
		end
		second_mult = second_mult * -1
	end
	ease{48+2,0.5,outCubic,10,'alternate'}
	ease{51.75+2,0.5,outCubic,0,'alternate'}
	ease{52+2,0.5,outCubic,10,'cross'}
	ease{55.75+2,0.5,outCubic,0,'cross'}
	ease{56+2,0.5,outCubic,10,'reverse',-10,'alternate'}
	ease{59.75+2,0.5,outCubic,0,'reverse',0,'alternate'}
	ease{60+2,0.5,outCubic,15,'split'}
	ease{63.75+2,0.5,outCubic,0,'split'}
	ease{64+2,0.5,outCubic,-10,'cross',10,'reverse'}
	ease{79.75+2,0.5,outCubic,0,'reverse',0,'cross'}
	ease{80+2,1,outElastic,10,'split'}
	ease{83.75+2,0.5,outCubic,0,'split'}
	ease{84+2,1,outElastic,15,'alternate'}
	ease{87.75+2,0.5,outCubic,0,'alternate'}
	ease{88+2,1,outElastic,10,'cross'}
	ease{91.75+2,0.5,outCubic,0,'cross'}
	ease{92+2,1,outElastic,10,'reverse',-10,'alternate'}
	ease{95.75+2,0.5,outCubic,0,'reverse',0,'alternate'}
	ease{96+2,1,outElastic,10,'split'}
	ease{99.75+2,0.5,outCubic,0,'split'}
	ease{100+2,1,outElastic,15,'alternate'}
	ease{103.75+2,0.5,outCubic,0,'alternate'}
	ease{104+2,1,outElastic,10,'cross'}
	ease{107.75+2,0.5,outCubic,0,'cross'}
	ease{108+2,1,outElastic,10,'reverse',-10,'alternate'}
	ease{111.75+2,0.5,outCubic,0,'reverse',0,'alternate'}
	ease{112+2,1,outElastic,10,'split'}
	ease{115.75+2,0.5,outCubic,0,'split'}
	ease{116+2,1,outElastic,15,'alternate'}
	ease{119.75+2,0.5,outCubic,0,'alternate'}
	ease{120+2,1,outElastic,10,'cross'}
	ease{123.75+2,0.5,outCubic,0,'cross'}
	ease{124+2,1,outElastic,10,'reverse',-10,'alternate'}
	ease{127.75+2,0.5,outCubic,0,'reverse',0,'alternate'}
	ease{128+2,1,outElastic,10,'split'}
	ease{131.75+2,0.5,outCubic,0,'split'}
	ease{132+2,1,outElastic,15,'alternate'}
	ease{135.75+2,0.5,outCubic,0,'alternate'}
	ease{136+2,1,outElastic,10,'cross'}
	ease{139.75+2,0.5,outCubic,0,'cross'}
	ease{140+2,1,outElastic,10,'reverse',-10,'alternate'}
	ease{144+2,1,outElastic,0,'reverse',0,'alternate'}


	--driven stutter
	set{64+2,100,'stealth',plr = 1}
	set{64+2,100,'dark',100,'hidenoteflash',plr = 2}
	for i=64+2,79.75+2,0.25 do
		set{i,0,'centered2',plr = 2}
		ease{i,0.25,linear,75,'centered2', plr = 2}
	end
	for i=64+2,78+2 do
		swap{i,0.25,instant,'rldu'}
		swap{i+0.25,0.25,instant,'urld'}
		swap{i+0.5,0.25,instant,'durl'}
		swap{i+0.75,0.25,instant,'ldur'}
	end
	set{80+2,0,'centered2',0,'stealth',0,'dark',0,'hidenoteflash'}


	--even more vocal chops oh boy
	for i,v in ipairs(repetitve_noises) do
		if v[1]+2 >= 212+2 then
		ease{v[1]+2,0.25,outCubic,rand.float(-40,40),'rotationx',rand.float(-40,40),'rotationy'}
		else
		ease{v[1]+2,0.25,outCubic,rand.float(-30,30),'rotationx',rand.float(-30,30),'rotationy'}
		end
	end
	local wave_arrowpath_decay = 100
	for i,v in ipairs(notepath_accent_moment) do
		ease{v[1]+2,0.125,outCirc,wave_arrowpath_decay,'arrowpath'..v[2]}
		ease{v[1]+2+0.125,0.875,outCirc,0,'arrowpath'..v[2]}
		wave_arrowpath_decay = wave_arrowpath_decay - 8.33333334
		if wave_arrowpath_decay < 0 then
			wave_arrowpath_decay = 100
		end
	end


	--telephone 1

	for i,v in ipairs(telephone_tapper) do
		set{v[1]+2,50,'stealth'..v[2],5000,'tinyz'..v[2],100,'wireframe'..v[2]}
		ease{v[1]+2,0.5,outCubic,0,'stealth'..v[2],0,'tinyz'..v[2],0,'wireframe'..v[2]}
	end
	
	func{144,function()
		SpaceBGSprite:hidden(0)
	end}

	--spacy section
	--func{142,function() SpaceBGSprite:hidden(0) end}
	ease{144+2,4,outCubic,scy+(scy*2),'itgycontrol',0,'rotationx',0,'rotationy'}
	ease{142+2,2,inSine,50,'flip'}
	set{144+2,100,'drawsize'}
	for i,v in ipairs(do_not_hang_up) do
		ease{v[1]+2,0.125,outCirc,-150,'tiny'..v[2]}
		ease{v[1]+2+0.125,0.875,outCirc,0,'tiny'..v[2]}
	end
	ease{144+2,4.5,outCirc,500,'amt',10,'offset'}
	add{148+2,16,linear,6,'offset'}
	add{164+2,16,linear,-6,'offset'}
	ease{172+2,8,inCubic,0,'amt',0,'flip'}


	ease{180+2,1,outElastic,10,'split'}
	ease{183.75+2,0.5,outCubic,0,'split'}
	ease{184+2,1,outElastic,15,'alternate'}
	ease{187.75+2,0.5,outCubic,0,'alternate'}
	ease{188+2,1,outElastic,10,'cross'}
	ease{191.75+2,0.5,outCubic,0,'cross'}
	ease{192+2,1,outElastic,10,'reverse',-10,'alternate'}
	ease{195.75+2,0.5,outCubic,0,'reverse',0,'alternate'}
	ease{196+2,1,outElastic,10,'split'}
	ease{199.75+2,0.5,outCubic,0,'split'}
	ease{200+2,1,outElastic,15,'alternate'}
	ease{203.75+2,0.5,outCubic,0,'alternate'}
	ease{204+2,1,outElastic,10,'cross'}
	ease{207.75+2,0.5,outCubic,0,'cross'}
	ease{208+2,1,outElastic,10,'reverse',-10,'alternate'}

	ease{211.75+2,0.5,outCubic,0,'reverse',0,'alternate'}
	ease{212+2,1,outElastic,10,'split'}
	ease{215.75+2,0.5,outCubic,0,'split'}
	ease{216+2,1,outElastic,15,'alternate'}
	ease{219.75+2,0.5,outCubic,0,'alternate'}
	ease{220+2,1,outElastic,10,'cross'}
	ease{223.75+2,0.5,outCubic,0,'cross'}
	ease{224+2,1,outElastic,10,'reverse',-10,'alternate'}
	ease{227.75+2,0.5,outCubic,0,'reverse',0,'alternate'}
	ease{228+2,1,outElastic,10,'split'}
	ease{231.75+2,0.5,outCubic,0,'split'}
	ease{232+2,1,outElastic,15,'alternate'}
	ease{235.75+2,0.5,outCubic,0,'alternate'}
	ease{236+2,1,outElastic,10,'cross'}
	ease{239.75+2,0.5,outCubic,0,'cross'}
	ease{240+2,1,outElastic,10,'reverse',-10,'alternate'}
	ease{243.75+2,0.5,outCubic,0,'reverse',0,'alternate'}
	ease{244+2,1,outElastic,10,'split'}
	ease{247.75+2,0.5,outCubic,0,'split'}
	ease{248+2,1,outElastic,15,'alternate'}
	ease{251.75+2,0.5,outCubic,0,'alternate'}
	ease{252+2,1,outElastic,10,'cross'}
	ease{255.75+2,0.5,outCubic,0,'cross'}
	ease{256+2,1,outElastic,10,'reverse',-10,'alternate'}


	--telephone but again
	for i,v in ipairs(telephone_2) do
		set{v[1]+2,75,'stealth'..v[2],7500,'tinyz'..v[2],100,'wireframe'..v[2]}
		ease{v[1]+2,0.5,outCubic,0,'stealth'..v[2],0,'tinyz'..v[2],0,'wireframe'..v[2]}
	end

	set{260+2,-100,'drawsizeback',100,'disablemines'}
	ease{259+2,1,inSine,50,'flip',210,'movey',100,'dark',600,'zoom',0,'xmod'}
	ease{260+2,0.5,outCirc,0,'rotationx',0,'rotationy'}
	local wave_alarm = {
	{260.000,0,1},
	{260.333,0,1},
	{260.667,0,1},
	{261.000,0,1},
	{261.333,0,1},
	{261.667,0,1},
	{262.000,0,1},
	{262.333,0,1},
	}
	local stealth_ending_mult = -1
	for i,v in ipairs(wave_alarm) do
		set{v[1]+2,50+(50 * stealth_ending_mult),'stealth'}
		stealth_ending_mult = stealth_ending_mult * -1
	end
	ease{262.5+2,1,outElastic,scy,'itgycontrol'}
	










	--UH OH ROUNDING
	set{35.5+2,0,'confusionoffset'}
	set{64+2,0,'confusionoffset'}
	set{111.5+2,0,'confusionoffset'}
	set{144+2,0,'confusionoffset'}
	set{243.5+2,0,'confusionoffset'}

	
	
end)"
Type = "ActorFrame"
><children>
	<Layer File="controlbox.xml" />

	<Layer Type="ActorFrameTexture" InitCommand="%xero.aft" Name="SpaceBGAft" />
	<Layer Type="Sprite" Frag="Galaxy_Trip.frag" OnCommand="hidden,1" InitCommand="%xero.sprite" Name="SpaceBGSprite"/>

	
	<Layer File="background.png" Name="wave_itgbg"  />

	<Layer Type = "ActorProxy" Name = "PC[1]" />
	<Layer Type = "ActorProxy" Name = "PC[2]" />
	<Layer Type = "ActorProxy" Name = "PJ[1]" />
	<Layer Type = "ActorProxy" Name = "PJ[2]" />
	<Layer Type = "ActorProxy" Name = "PP[1]" />
	<Layer Type = "ActorProxy" Name = "PP[2]" />
</children></Mods>
