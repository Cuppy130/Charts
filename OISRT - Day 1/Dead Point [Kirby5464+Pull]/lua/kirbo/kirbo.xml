<Mods LoadCommand="%xero(function(self)
	-- hello yes, i'm dumping all the stuff i used, mom, dont look ~Kirby
	local sqrt = math.sqrt
	local sin = math.sin
	local cos = math.cos
	local pow = math.pow
	local exp = math.exp
	local pi = math.pi
	local abs = math.abs
	local kick_cache = {}
	
	local function kick(amt)
		kick_cache[amt] = kick_cache[amt] or function(t)
			return (sqrt(t) * pow(1 - t, amt)) * (2.5 + amt * .6)
		end
		return kick_cache[amt]
	end
	
	local function square(t) return t == 1 and 0 or 1 end
	
	local m_ea, mm = ease, func
	
	--[[
	lists of eases that can be used:
	(Persistent)
		instant							linear
		inQuad							outQuad					inOutQuad					inCubic						outCubic
		inOutCubic						inQuart					outQuart					inOutQuart					inQuint
		outQuint						inOutQuint				inExpo						outExpo						inOutExpo
		inBack.params(a, b)				outBack.params(a, b)	inOutBack.params(a, b)		inElastic.params(a, b)		outElastic.params(a, b)	
		inOutElastic.params(a, b)		inBounce				outBounce					inOutBounce					inSine
		outSine				inOutSine
	
	(Transient)
		bounce			bell			pop				pulse
		tap				tri				spike			inverse		impulse.params(a)
		popElastic.params(a, b)			tapElastic.params(a, b)
		pulseElastic.params(a, b)		kick(a)			square
	]]
	
	set{96, 1000, 'arrowpathgirth', 1.5, 'xmod'}
	{96, -310, 'centered', plr = 1}
	
	{188, 0, 'centered', plr = 1}
	
	{190, 0, 'light', 0, 'confusionyoffset', 0, 'rotationy', 1.75, 'xmod'}
	
	{192, 80, 'squareperiod', -100, 'drawsizeback', 500, 'arrowpathgirth'}
	
	{352, 200, 'tiny', 0, 'grid', 0, 'charaCast'}
	
	-- m_ea {beat, len [, mode = 'end'], fn, percent1, mod1 [, percent2, mod2 ...] [, plr = pn]}
	
	m_ea{16, 1, outExpo, .75, 'charaIdle'}
	{16, 1.5, flip(linear), 55, 'stealth'}
	
	{24, 1, outExpo, 0, 'charaIdle'}
	
	{32, 1.5, flip(linear), 55, 'stealth'}
	
	{94, 2, outQuad, 90, 'zoom'}
	
	{96, 4, outQuad, 1, 'snow'}
	{96, 188, outQuad, .15, 'audience', mode = 'end'}
	
	{128, 1.5, flip(linear), 55, 'stealth'}
	
	{159.5, 1.5, outExpo, scx, 'playerx', 0, 'invert'}
	
	{160, 188, inQuad, 180*(188-160), 'rotationy', -314*(188-160), 'confusionyoffset', 5, 'starfield_speed', mode = 'end'}
	{160, 1, outQuad, 1, 'starfield', 0, 'audience'}
	
	{176, 1, outExpo, .75, 'charaIdle'}
	
	{184, 1, outQuad, 0, 'charaIdle', .75, 'charaCast'}
	-- {184, 4, tri, 3000, 'pulseinner', -50, 'flip'}
	{184, 4, linear, 1, 'light'}
	
	{188, 1, outExpo, 0, 'charaCast', 0, 'snow', 1, 'grid', 0, 'starfield'}
	{188, 1.5, inOutQuad, 300, 'zoomx', 50, 'zoomy', 100, 'zoom'}
	
	{189, 1.5, inOutQuad, 150, 'zoomy', 50, 'zoomx'}
	
	{190, 1.5, inOutQuad, 100, 'zoomy', 100, 'zoomx'}
	
	{192, 1.5, flip(linear), 55, 'stealth'}
	
	{223, 1, outExpo, 100, 'reverse', plr = 1}
	
	{224, 1.5, flip(linear), 55, 'stealth'}
	
	{223.5, 1, outExpo, 100, 'reverse', plr = 2}
	
	{255, 2, outExpo, 0, 'reverse'}
	
	{256, 1.5, flip(linear), 55, 'stealth'}
	
	{319, 1, outExpo, .75, 'charaIdle', 50, 'flip'}
	{319, 1, outExpo, 95, 'stealth', plr = 2}
	
	{320, 1, outExpo, .75, 'charaCast', 0, 'charaIdle'}
	
	{344, 12, linear, .1, 'glitch'}
	
	{351.5, 1, inOutQuad, -3000, 'tiny'}
	
	wiggle(128, 156-128, 1, kick(4), 100, 'drunk')
	wiggle(128, 156-128, 1, kick(4), 100, 'tipsy')
	
	wiggle(160, 188-160, .25, bounce, -50, 'tipsy')
	
	wiggle(192, 255-192, 2, outExpo, 400, 'square', 1)
	wiggle(192, 255-192, 2, outExpo, -400, 'square', 2)
	
	wiggle(192, 255-192, 10, tri, 20, 'rotationx')
	wiggle(192, 255-192, 12, bounce, 20, 'rotationy')
	
	wiggle(248, 254-248, .25, bounce, 70, 'drunk')
	
	wiggle(320, 358-320, 4, bounce, .65, 'ring')
	
	wiggle(344, 350-344, .25, bounce, -70, 'drunk')
	
	wiggle(350, 2, 1, bounce, 150, 'skewx')
	
	-- wiggle0(193, 256-192, 2, outExpo, 100, 'invert', 1)
	-- wiggle0(192, 256-192, 2, outExpo, 100, 'invert', 2)
	
	wiggle2lua0(dpoint_swap, outExpo, 100, 'invert')
	
	-- switcheroo(159.5, .5, outExpo, 'reset')
	
	-- switcheroo(350, .5, outExpo, 'flip')
	
	-- switcheroo(350.5, .5, outExpo, 'urld')
	
	-- switcheroo(351, .5, outExpo, 'reset')
	
	-- switcheroo(351.5, .5, outExpo, 'invert')
	
	-- switcheroo(352, .5, outExpo, 'reset')
	
	drivendrop(96, 188-96, 4.4, 1.5)
	
	for beat=96,188,.5 do
		local column = (beat * 2) % 4
		m_ea{beat, 1, flip(linear), 65, 'arrowpath'..column..''}
	end
	
	for beat=128,155,1 do
		m_ea{beat, 1, kick(4), -200, 'tiny'}
	end
	
	for beat=192,255,.5 do
		local column = (beat * 2) % 4
		m_ea{beat, 1, kick(6), 25, 'arrowpath'..column..'', 150, 'sawtooth'..column..''}
		-- print(column)
	end
	
	for beat=192,255,4 do
		m_ea{beat, 2, bounce, .1, 'color_split'}
	end
	
	local colors2 = {'blue_t', 'grey_t'}
	for beat=320,349,1 do
		m_ea{beat, 1, kick(1), .5, colors2[math.mod(beat, 2) + 1], .07, 'color_split'}
	end
	
	local dpoint_push = {{192, 255}, {320, 351}}
	
	for i,v in pairs(dpoint_push) do
		for beat=v[1],v[2] do
			m_ea{beat, 1, flip(linear), 70, 'brake'}
			{beat, 1, kick(4), -100, 'tiny'}
		end
	end
	
	local dpoint_blue = {{192, 221}, {224, 254}}
	local colors = {'blue_t', 'blue_t2'}
	
	for i,v in pairs(dpoint_blue) do
		for beat=v[1],v[2] do
			m_ea{beat, 1, kick(1), .5, colors[math.mod(beat, 2) + 1]}
		end
	end
	
	local dpoint_buildup = (P[1] or P[2]):GetNoteData(160, 187)
	
	for i = 1,table.getn(dpoint_buildup) do
		local beat = dpoint_buildup[i]
		m_ea{beat[1], 1, kick(6), -200, 'tiny'}
	end
	
	local pos = {scx, sw/4, sw*3/4}
	
	for i = 1,table.getn(dpoint_swap) do
		local beat = dpoint_swap[i]
		m_ea{beat[1], 1.5, outExpo, pos[math.mod(i, 3) + 1], 'playerx'}
		{beat[1], 1, bounce, 125, 'zoomx'}
	end
	
	func {10,function()
		if P[1] then
			P[1]:SetHiddenRegions( {{192, 194}, {198, 202}, {205, 210}, {214, 218}, {227, 235}, {240, 247}} )
		end
		
		if P[2] then
			P[2]:SetHiddenRegions( {{194, 198}, {202, 205}, {210, 214}, {218, 227}, {235, 239}, {248, 254}} )
		end
	end}
	
	-- mm {{beat [, len [, mode = 'end']], function(beat, poptions) ... end [, defer = true]}
	-- can be used as perframe or mod_action
	mm{0, 1, function(beat)
		MESSAGEMAN:Broadcast('LongWhiteFlash')
	end}
	{0, function()
		MESSAGEMAN:Broadcast('Middle')
	end}
	{96, 1, function(beat)
		MESSAGEMAN:Broadcast('WhiteFlash')
	end}
	{96, function()
		MESSAGEMAN:Broadcast('Side')
	end}
	{188, 1, function(beat)
		MESSAGEMAN:Broadcast('WhiteFlash')
	end}
	{320, 352, function(beat, mods)
		-- please please please dont kill me for this i am very sorry
		for pn = 1, 2 do
			local fuck0 = ((pn-1)*4+0)
			local fuck1 = ((pn-1)*4+1)
			local fuck2 = ((pn-1)*4+2)
			local fuck3 = ((pn-1)*4+3)
				
			mods[pn].movex0 = 200*math.sin(beat+fuck0/1.25) * mods[pn].ring
			mods[pn].movex1 = 200*math.sin(beat+fuck1/1.25) * mods[pn].ring
			mods[pn].movex2 = 200*math.sin(beat+fuck2/1.25) * mods[pn].ring
			mods[pn].movex3 = 200*math.sin(beat+fuck3/1.25) * mods[pn].ring
			
			mods[pn].movez0 = -200*math.cos(beat+fuck0/1.25) * mods[pn].ring
			mods[pn].movez1 = -200*math.cos(beat+fuck1/1.25) * mods[pn].ring
			mods[pn].movez2 = -200*math.cos(beat+fuck2/1.25) * mods[pn].ring
			mods[pn].movez3 = -200*math.cos(beat+fuck3/1.25) * mods[pn].ring
		end
	end, mode = 'end'}
	{352, 1, function(beat)
		MESSAGEMAN:Broadcast('WhiteFlash')
	end}
	
	
	
	-- aux {modname}
	-- The aux function creates an auxiliary mod. The template will keep track of the value of the mod, but will not apply it to the players.
	-- Example, aux {'blacksphere'}, aux {'mod1', 'mod2', 'mod3'}
	
	-- node {modname, function(p) [code] end}
	-- node creates a function that transforms the values of mods before they are applied every frame. node creates a function that takes in mod values and outputs mod values.
	
	aux{'ring'}
	
	-- definemod {modname, function(percent) -- implementation end}
	-- It's like node, but auxes your auxes.
	
	definemod{'charaIdle', function(percent)
		cathon_idle:zoomy(percent)
	end}
	
	definemod{'charaCast', function(percent)
		cathon_cast:zoomy(percent)
	end}
	
	definemod{'grid', function(percent)
		cathon_grid:diffusealpha(percent)
	end}
	
	definemod{'snow', function(percent)
		dpoint_snow:diffusealpha(percent)
	end}
	
	definemod{'starfield', function(percent)
		dpoint_starfield:diffusealpha(percent)
	end}
	
	definemod{'starfield_speed', function(percent)
		dpoint_starfield:GetShader():uniform1f('speed', percent)
	end}
	
	definemod{'light', function(percent)
		dpoint_quad:diffuse(percent, percent, percent, percent)
	end}
	
	definemod{'color_split', function(percent)
		dpoint_3d:GetShader():uniform1f('intensity', percent)
		dpoint_3d:GetShader():uniform1f('xaxis', percent)
	end}
	
	definemod{'audience', function(percent)
		dpoint_ligma:GetShader():uniform1f('pSize', percent)
	end}
	
	definemod{'blue_t', function(percent)
		cathon_gridcolor[1]:diffusealpha(percent)
	end}
	
	definemod{'blue_t2', function(percent)
		cathon_gridcolor[2]:diffusealpha(percent)
	end}
	
	definemod{'grey_t', function(percent)
		cathon_gridcolor[3]:diffusealpha(percent)
	end}
	
	definemod{'grey_t2', function(percent)
		cathon_gridcolor[4]:diffusealpha(percent)
	end}
	
	-- card {start, end, name, difficulty, color}
	-- let's you add spellcards to a chart.
	-- color = {r, g, b, a}
	
	-- card{0, 4, 'hit the jump (not clickbait)', 0, {1, 0, 0, 1}}
	
	card{96, 188, 'virtual ligma concert', 7, {0, 0, 1, 1}}
	card{192, 255, 'simulator simulator 21XX simulator edition', 8, {0, 0, 1, 1}}
	
	
	
end)"
	Type = "ActorFrame"
><children>
	<Layer File="chart2lua" />
</children></Mods>
