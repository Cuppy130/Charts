<Layer LoadCommand = "%xero(function(self)
local oldpercent = {}
local final = {}
for col = 0, 3 do
  oldpercent[col] = 0
  final[col] = 0
end
local which = 0
local function splinereset(b, mods)
  which = 0
  return nil
end
xero.func({0, 8999999488, splinereset})
local function activate(p)
  for col = 0, 3 do
    for pn = 1, 2 do
      do end (P[pn]):SetXSpline(which, col, final[col], 600, -1)
      do end (P[pn]):SetXSpline((which + 1), col, -1, -1, -1)
    end
  end
  return nil
end
xero.func({0, 8999999488, activate, defer = true})
local function point(b, pos)
  local len = 1
  local function activate0(p)
    if (p == 1) then
      for col = 0, 3 do
        final[col] = pos[col]
      end
      return nil
    else
      for col = 0, 3 do
        for pn = 1, 2 do
          do end (P[pn]):SetXSpline(which, col, pos[col], ((p * 800) - 200), -1)
        end
      end
      which = (which + 1)
      return nil
    end
  end
  return xero.func({(b - 0.25), len, linear, activate0, defer = true})
end
local function mix(p, old, new)
  return ((p * new) + ((1 - p) * old))
end
local splinetimings = {}
local times = {}
local maxbeat = 0
local function except_there_are_splines(self)
  table.insert(splinetimings, self)
  for i = 0, 1, (1 / 13) do
    times[(self[1] + (i * self[2]))] = true
  end
  local _end = (self[1] + self[2])
  if (_end > maxbeat) then
    maxbeat = _end
    return nil
  end
end
local function finalizesplines()
  local function comparator(a, b)
    return (a[1] < b[1])
  end
  stable_sort(splinetimings, comparator)
  local splineindex = 1
  local activesplines = {}
  local modstate = {}
  local modtargets = {}
  for col = 0, 3 do
    modstate[col] = 0
    modtargets[col] = 0
  end
  local beats = {}
  for v in pairs(times) do
    table.insert(beats, v)
  end
  table.sort(beats)
  for _, beat in ipairs(beats) do
    for col = 0, 3 do
      modstate[col] = modtargets[col]
    end
    while ((splineindex <= #splinetimings) and (splinetimings[splineindex][1] < beat)) do
      local e = splinetimings[splineindex]
      for col = 0, 3 do
        e[(col + 4)] = (e[(col + 4)] - modtargets[col])
        do end (modtargets)[col] = (modtargets[col] + e[(col + 4)])
        do end (modstate)[col] = (modstate[col] + e[(col + 4)])
      end
      table.insert(activesplines, e)
      splineindex = (splineindex + 1)
    end
    local touched = (#activesplines ~= 0)
    local i = 1
    while (i <= #activesplines) do
      local e = activesplines[i]
      if (beat < (e[1] + e[2])) then
        local e3 = (e[3](((beat - e[1]) / e[2])) - 1)
        for col = 0, 3 do
          modstate[col] = (modstate[col] + (e3 * e[(col + 4)]))
        end
        i = (i + 1)
      else
        activesplines[i] = table.remove(activesplines)
      end
    end
    if touched then
      local cols = copy(modstate)
      point(beat, cols)
    end
  end
  return nil
end
local swaps = {}
local cols = {d = 1, l = 0, r = 3, u = 2}
local has = string.find
local function lambda0(path)
  local e = true
  if not has(path, 'l') then
    lambda0((path .. 'l'))
    e = false
  end
  if not has(path, 'd') then
    lambda0((path .. 'd'))
    e = false
  end
  if not has(path, 'u') then
    lambda0((path .. 'u'))
    e = false
  end
  if not has(path, 'r') then
    lambda0((path .. 'r'))
    e = false
  end
  if e then
    local list = {}
    local list_flipped = {}
    for col = 0, 3 do
      local t = cols[string.sub(path, (col + 1), (col + 1))]
      list[t] = ((col - t) * 100)
      do end (list_flipped)[t] = ((t - col) * 100)
    end
    swaps[path] = list
    swaps[(path .. '-flipped')] = list_flipped
    return nil
  end
end
lambda0('')
local function swap(t)
  assert((type(t[1]) == 'number'), 'arg 1')
  assert((type(t[2]) == 'number'), 'arg 2')
  assert((type(t[3]) ~= 'nil'), 'arg 3')
  assert((type(t[4]) == 'string'), 'arg 4')
  assert(swaps[t[4]], t[4])
  local which0 = t[4]
  for col = 0, 3 do
    t[(col + 4)] = swaps[which0][col]
  end
  except_there_are_splines(t)
  return swap
end
xero['swap'] = swap
xero['finalizesplines'] = finalizesplines
return nil
end)" />
