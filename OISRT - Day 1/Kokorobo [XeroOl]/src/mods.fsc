# vi: ft=scopes
require-macros :build.macros


# color name reference

#2E3440 night1
#3B4252 night2
#434C5E night3
#4C566A night4

#D8DEE9 storm1
#E5E9F0 storm2
#ECEFF4 storm3

#8FBCBB frost1
#88C0D0 frost2
#81A1C1 frost3
#5E81AC frost4

#BF616A aurora1
#D08770 aurora2
#EBCB8B aurora3
#A3BE8C aurora4
#B48EAD aurora5

let grid beat count =

    if count
        for i = (1 count)
            grid beat
        return;

    let len = 2
    local grid = nil

    func [beat]
        let init; =
            let index = rand.int (length gridpool)
            grid = table.remove gridpool index
            'hidden grid 0

    func [beat len pop]
        let attr p =
            'zoom grid (1 + 0.2 * p)
            'diffusealpha grid (p * 1)
            'glow grid (color night1 (0.5 - 0.5 * p ^ 0.2))

    func [(beat + len)]
        let deinit; =
            table.insert gridpool grid
            'hidden grid 1


let cross beat count =

    if count
        for i = (1 count)
            cross beat
        return;

    let len = math.min (56 - beat) 32

    local cross = nil
    let startAngle = rand.int 360
    let dir = (rand.bool) and 1 or -1

    func [beat]
        let init; =
            let index = rand.int (length crosspool)
            cross = table.remove crosspool index
            'hidden cross 0

    func [beat len linear]
        let attr a =
            let p = linear a
            'rotationy cross (startAngle + dir * p * 3 * len)
            let p = bounce a
            'zoomx (cross 1) (p * 40)

    func [(beat + len)]
        let deinit; =
            table.insert crosspool cross
            'hidden cross 1

rand.seed 1
cross 1 2

cross 8
cross 12
cross 13.5
cross 26.5
cross 26.625
cross 26.75
cross 26.875
cross 27
cross 36
cross 40
cross 41.5

definemod [:px]
    let definition px pn =
        let amount = px * 0.005
        'x (P @ 1) (scx * (1 - amount))
        'x (P @ 2) (scx * (1 + amount))

node {[1] = :movey [2] = :reverse0 defer = true}
    let f a b =
        a * (50 - b) * 0.02
    [:movey]

# rot and dir
definemod [:rot 100 :rot0 100 :rot1 100 :rot2 100 :rot3]
definemod [:dir 100 :dir0 100 :dir1 100 :dir2 100 :dir3]
for col = (0 3)
    let rot = :rot .. col
    let dir = :dir .. col
    let reverse = :reverse .. col
    let zigzagperiod = :zigzagperiod .. col
    let zigzagoffset = :zigzagoffset .. col
    let zigzag = :zigzag .. col
    let zigzagzperiod = :zigzagzperiod .. col
    let zigzagzoffset = :zigzagzoffset .. col
    let zigzagz = :zigzagz .. col
    definemod
        [rot dir]
        let rotate rot dir =
            if (rot % 360 == 0)
                values 0 0 0 0 0 0 0
            elseif (rot % 180 == 0)
                values 100 0 0 0 0 0 0
            else
                let rot-theta = rot * math.pi * 0.01
                let dir-theta = dir * math.pi * 0.005
                let cos = math.cos rot-theta
                let sin = math.sin rot-theta
                let dir-cos = math.cos dir-theta
                let dir-sin = math.sin dir-theta
                values
                    50 - 50 * cos
                    \ 900 900 -212.5 -212.5
                    1000 * sin * dir-cos
                    1000 * sin * dir-sin
        [reverse zigzagperiod zigzagzperiod zigzagoffset zigzagzoffset zigzagz zigzag]

setdefault [
    1.5 :xmod
    100 :dizzyholds
    100 :reversetype
    100 :stealthtype
    100 :stealthpastreceptors
    100 :spiralholds
    -100 :drawsizeback
]

let m = xero.set

ease [16 12 inOutQuad 200 :rot]
ease [12 32 bell -50 :rot]
ease [20 34 inOutQuad 600 :rot]
ease [28 28 inOutQuad 400 :rot0 200 :rot2 -400 :rot3]
m [56 0 :rot 0 :rot0 0 :rot1 0 :rot2 0 :rot3]


for col = (0 3)
    let dark = "dark" .. col
    m [0 100 dark]

for _ b in (ipairs [67 75 83 131 251 331 339 347 355])
    ease [b 2 linear 150 :dark]
    if (b == 83)
        m[(b + 4) 0 :dark]
    else
        m [(b + 5) 0 :dark]

ease [16 10 bounce 50 :dark]
ease [59 3 bounce 100 :dark]

let digital beat len =
    for i = ((beat - 1) beat (1 / 8))
        grid i
    for i = (beat (beat + len) (1 / 4))
        grid i
    for col = (0 3)
        let dark = "dark" .. col
        ease [(beat - 4) 3 outQuad 100 dark]
        m [(beat - 1 + col * 0.1) 50 dark]


digital 28 4
digital 88 6
digital 152 6
digital 168 6
digital 212 5
digital 272 5.5
digital 304 5
digital 336 6


let three-sparkle i =
    grid i 10
    grid (i + 1.5) 10
    grid (i + 3) 10

let flout = flip outExpo

let driven-drop i =
    ease [i 4 flout -100 :tiny]
    ease [(i + 1.5) 4 flout -100 :tiny]
    ease [(i + 3) 4 flout -100 :tiny]
    xero.plr = 1
    ease [i 3 linear 450 :movey]
    acc [i 100 :hidenoteflash 100 :dark]
    acc [(i + 3) -450 :movey -100 :hidenoteflash -100 :dark]
    xero.plr = 2
    m [i 100 :stealth]
    m [(i + 3) 0 :stealth]
    xero.plr = nil

let driven-drop-fix i =
    xero.plr = 2
    m [(i + 1) 0 :stealth 100 :hidden 100 :hiddenoffset]
    ease [(i + 1) 2 linear 0 :hiddenoffset]
    m [(i + 3) 0 :hidden 0 :hiddenoffset]
    xero.plr = nil

for i = (56 112 8)
    three-sparkle i
    driven-drop i

driven-drop-fix 56

for i = (152 160 8)
    driven-drop i
for i = (336 360 8)
    driven-drop i


let cycle b mod len =
    let len = len or 5
    xero.plr = 1
    m [b 0 :zoom]
    ease [b len linear 100 :zoom]
    xero.plr = 2
    ease [b len inExpo -1000 mod]
    xero.plr = nil
    m [(b + len) 0 mod]

cycle 48 :flip 8
m [0 100 :sudden 150 :suddenoffset]
m [0 50 :drawsize]
m [56 0 :drawsize]

ease [49 7 inQuad 100 :holdstealth]
m [64 0 :holdstealth]

ease [0 1000 linear (1000 * 100) :bumpyxoffset]


cycle 115 :invert


ease [115 5 (flip linear) 100 :brake]

ease [0 0 instant 100 :orient -50 :straightholds]

let swap2 self len =
    table.insert self 2 (len or 3)
    table.insert self 3 inOutExpo 
    self @ 1 -= self @ 2 / 2 + 0.1
    swap self

swap2 [120 :ldru]
swap2 [121 :ldur]
swap2 [121.5 :ldru]
swap2 [122.5 :dlru]
swap2 [123 :dlur]
swap2 [123.5 :ldur]

#ease [122 4 inOutExpo 100 :rot0]
#ease [123 4 inOutExpo 100 :rot1]
#ease [124 4 inOutExpo 100 :rot2]
#ease [125 4 inOutExpo 100 :rot3]

swap2 [124 :lurd]
swap2 [125 :lrdu]
swap2 [126 :drlu]
swap2 [127 :ldru]
swap2 [128 :ldur]
swap2 [129.5 :dlru]
swap2 [131 :ldur] 4

swap2 [136 :ldru]
swap2 [137 :ludr]
swap2 [137.5 :lurd]
swap2 [138.5 :lrud]
swap2 [139 :lrdu]

swap2 [141.5 :ldru]
swap2 [142 :ldur]
swap2 [142.5 :dlur]
swap2 [143 :dulr]
swap2 [144 :dlur]
swap2 [145 :ldru]
swap2 [146 :dlur]
swap2 [147 :ldur]





acc [155.7 100 :flip 314 :co0 314 :co1 314 :co2 314 :co3]
add [155 4 outExpo 314 :co1 -314 :co2 -314 :co0 314 :co3]
add [163 4 outExpo -314 :co1 314 :co2 314 :co0 -314 :co3]
acc [163.7 -100 :flip -314 :co0 -314 :co1 -314 :co2 -314 :co3]

aux [:co0 :co1 :co2 :co3]
let strangebehavior a b =
    b == 100 and (- a) or a
node [:co0 :flip strangebehavior :confusionoffset0]
node [:co1 :flip strangebehavior :confusionoffset1]
node [:co2 :flip strangebehavior :confusionoffset2]
node [:co3 :flip strangebehavior :confusionoffset3]

let timings = [
152.0 :dulr
153.5 :uldr
155.0 :ldur

160.0 :dulr-flipped
161.5 :udlr-flipped
163.0 :ldur-flipped

168.0 :dlur
169.0 :dlru
169.5 :dlur
170.5 :dulr
171.0 [:dlur 4]
173.5 :dlru
174.0 :ldru
174.5 :ldur
175.0 :dlru
176.0 :ldur
177.0 :ldru
178.0 :dlur
179.0 :ldur

]
for i = (1 (length timings) 2)
    if ((type (timings @ (i + 1))) == "string")
        swap2 [(timings @ i) (timings @ (i + 1))]
    else
        swap2 [(timings @ i) (timings @ (i + 1) @ 1)] (timings @ (i + 1) @ 2)

func [175 :ppshow :front]
func [184 :ppshow :back]

xero.plr = 1
m [175
    99.5 :stealth
    100 :zbuffer
    10000 :movex0
    10000 :movex2
    10000 :movex3
    100 :hidenoteflash
    100 :dark
]

let inv x =
    1 / (1 - x)
ease [179 5 inv 200 :longholds]
ease [179 5 outQuad (sw / 64 * -200 - 200) :tiny]
ease [179 5 linear -200 :movey 0 :drawsize 200 :zoomy]

func [184 :void 1]
m [184.05
    0 :tiny
    0 :movey
    0 :stealth
    0 :drawsize
    0 :holdstealth
    0 :zbuffer
    0 :movex0
    0 :movex2
    0 :movex3
    0 :hidenoteflash
    0 :longholds
    0 :dark
    100 :zoomy
]
xero.plr = 2
m [175 100 :stealth1]
m [184 0 :stealth1]
xero.plr = nil

add [181 10 inOutCubic 300 :rot0]
add [188 15 inOutCubic 300 :rot0]
add [184 12 inOutCubic 300 :rot1]
add [190 16 inOutCubic 300 :rot1]
add [179 10 inOutQuad 300 :rot2]
add [186 19 inOutQuad 300 :rot2]
add [179 10 inOutCubic 300 :rot3]
add [185 16 inOutCubic 300 :rot3]

add [212 10 inOutCubic 300 :rot0]
add [224 16 inOutCubic 300 :rot0]
add [206 22 inOutQuad 300 :rot1]
add [220 19 inOutQuad 300 :rot1]
add [210 13 inOutCubic 300 :rot2]
add [220 15 inOutCubic 300 :rot2]
add [201 20 inOutCubic 300 :rot3]
add [228 12 inOutCubic 300 :rot3]

add [184 (240 - 184) inOutQuad 500 :rot]

func [232 8 linear 1 0 :void]



let timings = [
240.0 :ldru
241.0 :ldur
241.5 :dlru
242.5 :ludr
243.0 :ldur
243.5 :ldru
244.0 :uldr
245.0 :lurd
246.0 :rldu
247.0 :drul
248.0 :dlur
249.5 :ldru
251.0 [:ldur 5]

256.0 :dlur
257.0 :dlru
257.5 :ldru
258.5 :ldur
# 259.0 :ldur
# ^ this is intentionally left blank

261.5 :lrdu
262.0 :dlru
262.5 :lrdu
263.0 :ldur
264.0 :ludr
265.0 :dlur
266.0 :ludr
267.0 :ldur

272.0 :dlur
273.0 :ldur
273.5 :dlur
274.5 :dlru
275.0 :ldru
275.5 :lrdu
276.0 :ldur
277.0 :dlur
278.0 :ldru
279.0 :lrdu
280.0 :ldur
281.5 :dulr
283.0 :ldur

288.0 :ldru
289.0 :dlru
289.5 :dlur
290.5 :ldur
291.0 :ldru
293.5 :dlru
294.0 :dlur
294.5 :ludr
295.0 :urld
296.0 :rdlu
297.0 :rudl
298.0 :udrl
299.0 :ludr
304.0 :ldur
305.0 :ludr
305.5 :lurd
306.5 :ulrd
307.0 :udlr
307.5 :udlr
308.0 :lurd
309.0 :ldur
310.0 :dulr
311.0 :dlru
312.0 :ldur
313.5 :ldru
315.0 :ldur

320.0 :udlr
321.0 :ldur
321.5 :udlr
322.5 :uldr
323.0 :ldur
325.5 :dlur
326.0 :dlru
326.5 :ldru
327.0 :ldur

328.0 :ludr
329.0 :lurd
330.0 :ludr
331.0 :ldur

336.0 :durl
337.0 :dlur
337.5 :dulr
338.5 :drlu
339.0 :ldur

344.0 :dulr
345.0 :drul
345.5 :rudl
346.5 :rlud
347.0 :ldur

352.0 :dulr
353.0 :dlur
353.5 :durl
354.5 :drlu
355.0 :ldur

360.0 :lrdu
361.0 :ldru
361.5 :lrdu
362.5 :ldru
363.0 :drul
]
for i = (1 (length timings) 2)
    if ((type (timings @ (i + 1))) == "string")
        swap2 [(timings @ i) (timings @ (i + 1))]
    else
        swap2 [(timings @ i) (timings @ (i + 1) @ 1)] (timings @ (i + 1) @ 2)


# beat 312 to 319

let weirdbass = [312.833 313.5 315 315.333 315.667 316 316.5 317.5 318.25]
let weirdsnare = [314.167 316.833 319]
let weirdtick = [316.5 318.333]

for i v in (ipairs weirdbass)
    if (v != 318.25)
        acc [v 314 :confusionoffset]
    add [(v - 1) 1 tap 50 :movey]
    add [v 1 pop -50 :tiny]

for i v in (ipairs weirdsnare)
    add [v 1 pop -3000 :tinyz]

for i v in (ipairs weirdtick)
    add [v 1 pop 50 :skewx]

m [318.50 100 :invert]
m [318.75 000 :invert]
m [319.00 100 :invert]
m [319.25 000 :invert]
m [319.50 100 :invert]
m [319.75 000 :invert]


# notedata
for _ i in (ipairs c2l.tick)
    if (i >= 164 and i < 168)
        ease [i 1 pop 1000 :zoomz]
    else
        add [i 1 outExpo (628 / 5) :confusionoffset]
        if (i % 4 == 0)
            m [(i + 4) 0 :confusionoffset]

for i v in (ipairs c2l.pulse)
    nil
for i v in (ipairs c2l.snare)
    add [v 1 pop -2000 :tinyz 50 :zoomz]
for i v in (ipairs c2l.bass)
    add [v .5 flout 100 :tiny]
for i v in (ipairs c2l.noise)
    add [v 0.25 pop -10 :zoomx]
for i v in (ipairs c2l.decay)
    add [v 1 pop (100 * ((i % 2) - 0.5)) :noteskew]
for i v in (ipairs c2l.sizzle)
    add [v 1 pop 100 :drunk]
    add [v 1 flout 628 :confusionoffset]
for i v in (ipairs c2l.scratch)
    if (v == 272)
        m [v 0 :confusionoffset]
    else
        m [v (40 * ((i % 2) - 0.5)) :confusionoffset]




ease [363 2 linear 150 :dark]
func [364]
    let ending; =
        for pn = (1 2)
            'hidden (PJ @ pn) 1
            'hidden (PC @ pn) 1

finalizesplines;
