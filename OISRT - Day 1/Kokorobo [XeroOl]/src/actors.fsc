# vi: ft=scopes
require-macros :build.macros
'fov self 45

# j/c proxies
for pn = (1 2)
    setupJudgeProxy (PJ @ pn) ('GetChild (P @ pn) :Judgment) pn
    setupJudgeProxy (PC @ pn) ('GetChild (P @ pn) :Combo) pn
    'zoom (PJ @ pn) 0.8
    'zoom (PC @ pn) 0.8
    'y (PJ @ pn) (scy - 20)
    'y (PC @ pn) (scy + 50)

# player proxies
for pn = (1 2)
    for k v in (pairs PP)
        if (v @ pn)
            'SetTarget (v @ pn) (P @ pn)
            'hidden (v @ pn) 1
    'hidden (P @ pn) 1

local active = :back
let ppshow name =
    'hidden (PP @ active @ 1) 1
    active = name
    'hidden (PP @ active @ 1) 0
'hidden (PP @ :back @ 1) 0
'hidden (PP @ :back @ 2) 0

# bgquad
'diffuse bgquad (color night1)
'xywh bgquad scx scy sw sh


# cover
'diffuse cover (color night1)
'xywh cover scx scy sw sh
func [0]
    let k; =
        'hidden cover 1

# orb
let orbpool = 'GetChildren orbcontainer
for i = (1 (length orbpool))
    let orb = orbpool @ i
    'hidden orb 1
    'blend orb :add
    'SetWidth orb 256
    'SetHeight orb 256

let orb beat size r g b =
    let len = 60
    local orb = nil
    let x = rand.int 0 sw
    let y = rand.int 0 sh
    func {[1] = beat :defer = true}
        let init; =
            let index = rand.int 1 (length orbpool)
            orb = table.remove orbpool
            'xy orb x y
            'hidden orb 0
    func [beat len bell 0 0.4]
        let run p =
            'zoom orb p
            'diffuse orb r g b p
    func [(beat + len)]
        let deinit; =
            table.insert orbpool orb
            'hidden orb 1
let colors = [
    [(color frost1)] [(color frost2)] [(color frost3)]
    [(color frost1)] [(color frost2)] [(color frost3)]
    [(color aurora1)] [(color aurora2)] [(color aurora3)] [(color aurora4)] [(color aurora5)]
]
for b = (1 320)
    let i = rand.int 1 (length colors)
    orb b (rand.float 0.3 0.5) (unpack (colors @ i))
    rand.int 5

# grid
let height = 9
let width = 12
let gridpool = []
for r = (1 height)
    for c = (1 width)
        let tile = 'GetChildAt gridcontainer ((r - 1) * width + (c - 1))
        table.insert gridpool tile
        'hidden tile 1
        'xy tile
            (c - 0.5) / width * 640 - 320 + scx
            (r - 0.5) / height * 480 - 240 + scy
        'SetWidth tile
            sw / width
        'SetHeight tile
            sh / height
        'zbuffer tile 1


# cross
'SetVanishPoint crosscontainer scx scy
let crosspool = 'GetChildren crosscontainer
'fov crosscontainer 90
'xy crosscontainer scx scy
for i = (1 (length crosspool))
    let cross = crosspool @ i
    'diffuse cross (unpack (colors @ rand.int (length colors)))
    'diffusealpha cross 0.5
    let pos = i - (length crosspool * 0.5 + 0.5)
    let inner = 'GetChildAt cross 0
    'z inner (- scx * 0.2)
    'xywh inner 0 0 10 1000
    'rotationx cross 90
    'hidden cross 1

# aft1
do
    aft aft1
    sprite sprite1
    aftsprite aft1 sprite1
    let shader = 'GetShader sprite1
    let flatten xs =
        let result = []
        for _ x in (ipairs xs)
            for _ e in (ipairs x)
                result @ (length result + 1) = e
        result

    'uniform4fv shader :scheme
        flatten [
            [(color night1)] [(color night2)] [(color night3)] [(color night4)]
            [(color storm1)] [(color storm2)] [(color storm3)]
            [(color frost1)] [(color frost2)] [(color frost3)] [(color frost4)]
            [(color aurora1)] [(color aurora2)] [(color aurora3)] [(color aurora4)] [(color aurora5)]
            [0 0 0 0]
        ]


do
    aft aft2
    sprite sprite2
    aftsprite aft2 sprite2
    'zbias sprite2 -1
    'zbuffer sprite2 1

let void t =
    if (t == 1)
        'hidden aft2 1
        'hidden sprite2 1
    else
        'hidden aft2 0
        'hidden sprite2 0
        'cropleft   sprite2 (t * 0.5)
        'cropright  sprite2 (t * 0.5)
        'croptop    sprite2 (t * 0.5)
        'cropbottom sprite2 (t * 0.5)

export gridpool
export crosspool
export ppshow
export void
