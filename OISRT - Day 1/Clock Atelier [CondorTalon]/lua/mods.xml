<Mods LoadCommand = "%xero(function(self)
	if not P1 or not P2 then
		backToSongWheel('Two Player Mode Required')
		return
	end

	-- judgment / combo proxies
	for pn = 1, 2 do
		setupJudgeProxy(PJ[pn], P[pn]:GetChild('Judgment'), pn)
		setupJudgeProxy(PC[pn], P[pn]:GetChild('Combo'), pn)
	end
	-- player proxies
	for pn = 1, #PP do
		PP[pn]:SetTarget(P[pn])
		P[pn]:hidden(1)
	end
	-- your code goes here here:
	
	function modulo(a, b)
		return a - math.floor(a/b)*b;
	end
	
	P3:GetChild('Judgment'):hidden(1)
	P4:GetChild('Judgment'):hidden(1)
	P3:GetChild('Combo'):hidden(1)
	P4:GetChild('Combo'):hidden(1)
	PP[3]:hidden(1)
	PP[4]:hidden(1)
	
	cockbg:xy(scx,scy)
	cock:xy(scx,scy)
	cock_arrow:xy(scx,scy)
	cock_sarrow:xy(scx,scy)
	
	aux {'arrowtation3'}
	node {'arrowtation3', function(p)
		cock_arrow:rotationz(p+180)
		cock_sarrow:rotationz(-p+180)
	end}
	
	aux {'arrowtation2'}
	node {'arrowtation2', function(p)
		cock_arrow:rotationz(p+180)
		cock_sarrow:rotationz(p/12+180)
	end}
	
	aux {'arrowtation'}
	node {'arrowtation', function(p)
		cock_arrow:rotationz(p)
		cock_sarrow:rotationz(p/12)
	end}
	
	definemod {
		'boundedconfy',
		function(boundedconfy)
			local confusionyoffset = modulo(boundedconfy - 157,314) - 157
			return confusionyoffset
		end,
		'confusionyoffset',
	}
	
	definemod {
		'boundedconfx',
		function(boundedconfx)
			local confusionxoffset = modulo(boundedconfx - 157,314) - 157
			return confusionxoffset
		end,
		'confusionxoffset',
	}
	
	definemod {
		'doorspringsquare',
		function(doorspringsquare)
			local square = 0
			if modulo(math.floor(doorspringsquare),2) == 0 then
				square = doorspringsquare
			else
				square = -doorspringsquare
			end
			return square
		end,
		'square',
	}
	
	definemod {
		'doorspringdrunk',
		function(doorspringdrunk)
			local drunk = 0
			if modulo(math.floor(doorspringdrunk),2) == 0 then
				drunk = doorspringdrunk
			else
				drunk = -doorspringdrunk
			end
			return drunk
		end,
		'drunk',
	}
	
	definemod {
		'doorspringtipsy',
		function(doorspringtipsy)
			local tipsy = 0
			if modulo(math.floor(doorspringtipsy),2) == 0 then
				tipsy = doorspringtipsy
			else
				tipsy = -doorspringtipsy
			end
			return tipsy
		end,
		'tipsy',
	}
	
	P1:x(scx)
	P2:x(scx)
	
	setdefault {4, 'xmod', 100, 'overhead', 100, 'dizzyholds', 100, 'modtimer', 67, 'dark', -100, 'drawsizeback'}
	
	for i=0,6 do
		ease {0+i*6, 0.75, inCubic, 50, 'drunk', 50, 'tipsy', plr = 1}
		ease {0+i*6, 0.75, inCubic, -50, 'drunk', -50, 'tipsy', plr = 2}
		ease {0.75+i*6, 0.75, inCubic, -50, 'drunk', -50, 'tipsy', plr = 1}
		ease {0.75+i*6, 0.75, inCubic, 50, 'drunk', 50, 'tipsy', plr = 2}
		ease {1.5+i*6, 0.5, inCubic, 50, 'drunk', 50, 'tipsy', plr = 1}
		ease {1.5+i*6, 0.5, inCubic, -50, 'drunk', -50, 'tipsy', plr = 2}
		ease {2+i*6, 0.5, inCubic, -50, 'drunk', -50, 'tipsy', plr = 1}
		ease {2+i*6, 0.5, inCubic, 50, 'drunk', 50, 'tipsy', plr = 2}
		ease {2.5+i*6, 0.5, inCubic, 50, 'drunk', 50, 'tipsy', plr = 1}
		ease {2.5+i*6, 0.5, inCubic, -50, 'drunk', -50, 'tipsy', plr = 2}
		ease {3+i*6, 0.75, inCubic, -50, 'drunk', -50, 'tipsy', plr = 1}
		ease {3+i*6, 0.75, inCubic, 50, 'drunk', 50, 'tipsy', plr = 2}
		ease {3.75+i*6, 0.75, inCubic, 50, 'drunk', 50, 'tipsy', plr = 1}
		ease {3.75+i*6, 0.75, inCubic, -50, 'drunk', -50, 'tipsy', plr = 2}
		ease {4.5+i*6, 0.5, inCubic, -50, 'drunk', -50, 'tipsy', plr = 1}
		ease {4.5+i*6, 0.5, inCubic, 50, 'drunk', 50, 'tipsy', plr = 2}
		ease {5+i*6, 0.5, inCubic, 50, 'drunk', 50, 'tipsy', plr = 1}
		ease {5+i*6, 0.5, inCubic, -50, 'drunk', -50, 'tipsy', plr = 2}
		if i==6 then
			ease {5.5+i*6, 0.5, inCubic, 0, 'drunk', 0, 'tipsy', plr = 1}
			ease {5.5+i*6, 0.5, inCubic, 0, 'drunk', 0, 'tipsy', plr = 2}
		else
			ease {5.5+i*6, 0.5, inCubic, -50, 'drunk', -50, 'tipsy', plr = 1}
			ease {5.5+i*6, 0.5, inCubic, 50, 'drunk', 50, 'tipsy', plr = 2}
		end
	end
	
	ease {11.5, 0.5, inSine, 52, 'confusionoffset'}
	ease {12, 1, outElastic, 0, 'confusionoffset'}
	ease {23.5, 0.5, inSine, -52, 'confusionoffset'}
	ease {24, 1, outElastic, 0, 'confusionoffset'}
	ease {35.5, 0.5, inSine, 52, 'confusionoffset'}
	ease {36, 1, outElastic, 0, 'confusionoffset'}
	
	for i=0,5 do
		ease {24+i*3, 1.5, bounce, 15, 'skewx', 15, 'skewy'}
		ease {24+1.5+i*3, 1.5, bounce, -15, 'skewx', -15, 'skewy'}
	end
	
	for i=0,4 do
		ease {13+i*6, 0.25, outCirc, -10, 'rotationx', plr = 1}
		ease {13+i*6, 0.25, outCirc, 10, 'rotationx', plr = 2}
		ease {13+0.25+i*6, 0.25, outCirc, -20, 'rotationx', plr = 1}
		ease {13+0.25+i*6, 0.25, outCirc, 20, 'rotationx', plr = 2}
		ease {13+0.5+i*6, 0.25, outCirc, -30, 'rotationx', plr = 1}
		ease {13+0.5+i*6, 0.25, outCirc, 30, 'rotationx', plr = 2}
		ease {13+1+i*6, 0.5, pop, 125, 'zoomx'}
		ease {13+1.5+i*6, 0.5, outCubic, 0, 'rotationx'}
		ease {13+1.5+i*6, 1, spike, 50, 'movey'}
		ease {13+3+i*6, 0.5, bounce, 25, 'invert'}
		if modulo(i,2)==0 then
			ease {13+3.5+i*6, 0.5, outQuad, 314, 'boundedconfy'}
			ease {13+4+i*6, 0.5, instant, 0, 'boundedconfy'}
			ease {13+4+i*6, 0.5, outQuad, -314, 'boundedconfx'}
			ease {13+4.5+i*6, 0.5, instant, 0, 'boundedconfx'}
		else
			ease {13+3.5+i*6, 0.5, outQuad, -314, 'boundedconfy'}
			ease {13+4+i*6, 0.5, instant, 0, 'boundedconfy'}
			ease {13+4+i*6, 0.5, outQuad, 314, 'boundedconfx'}
			ease {13+4.5+i*6, 0.5, instant, 0, 'boundedconfx'}
		end
		if not (i == 4) then
			ease {13+4.5+i*6, 1, flip(outQuad), 100, 'doorspringsquare'}
		end
	end
	
	ease {41.5, 0.5, outSine, 50, 'dark'}
	
	ease {42, 4.5, linear, 100, 'dark', -200, 'tiny', 100, 'centered', 2, 'xmod'}
	ease {42, 0.75, outCubic, 100, 'invert'}
	ease {42.75, 0.75, outCubic, 0, 'invert'}
	ease {43.5, 0.5, bounce, 100, 'movey0'}
	ease {43.75, 0.5, bounce, 100, 'movey1'}
	ease {44.25, 0.5, bounce, 100, 'movey2'}
	ease {44.5, 0.5, bounce, 100, 'movey3'}
	ease {45, 0.25, outCubic, 100, 'invert'}
	ease {45.25, 0.5, outCubic, 0, 'invert'}
	ease {45.75, 0.5, outCubic, 100, 'invert'}
	ease {46.25, 0.5, outCubic, 0, 'invert'}
	
	ease {45, 0.25, flip(outCubic), -50, 'mini'}
	ease {45.25, 0.5, flip(outCubic), -50, 'mini'}
	ease {45.75, 0.5, flip(outCubic), -50, 'mini'}
	ease {46.25, 0.5, flip(outCubic), -50, 'mini'}
	
	ease {42, 0.75, outCubic, -10, 'rotationz'}
	ease {42.75, 0.75, outCubic, 10, 'rotationz'}
	ease {43.5, 0.75, outCubic, -10, 'rotationz'}
	ease {44.25, 0.75, outCubic, 10, 'rotationz'}
	ease {45, 0.75, outCubic, 0, 'rotationz'}
	
	ease {45, 1.5, linear, 100, 'stealth'}
	
	set {46.5, 67, 'dark', 0, 'tiny', 0, 'centered', 0, 'stealth', 4, 'xmod'}
	
	ease {46.5, 1.5, flip(outQuad), 200, 'mini'}
	
	ease {48, 6, bounce, 5, 'rotationz'}
	ease {48, 6, inOutSine, 200, 'movex'}
	ease {48+6, 6, bounce, -5, 'rotationz'}
	ease {48+6, 6, inOutSine, -200, 'movex'}
	ease {48+12, 6, bounce, 5, 'rotationz'}
	ease {48+12, 6, inOutSine, 200, 'movex'}
	ease {48+18, 6, bounce, -5, 'rotationz'}
	ease {48+18, 6, inOutSine, 0, 'movex'}
	
	ease {48, 1.5, inOutSine, 50, 'tipsy'}
	ease {70.5, 1.5, inOutSine, 0, 'tipsy'}
	
	for i=0,1 do
		ease {49+i*6, 0.5, flip(outQuad), -150, 'drunk', plr = 1}
		ease {49+i*6, 0.5, flip(outQuad), 150, 'drunk', plr = 2}
		ease {49.5+i*6, 0.5, flip(outQuad), 150, 'drunk', plr = 1}
		ease {49.5+i*6, 0.5, flip(outQuad), -150, 'drunk', plr = 2}
		
		add {50.25+i*6, 0.5, flip(outQuad), 150, 'doorspringtipsy'}
		
		ease {50.75+i*6, 0.5, flip(outQuad), -150, 'drunk', plr = 1}
		ease {50.75+i*6, 0.5, flip(outQuad), 150, 'drunk', plr = 2}
		ease {51.5+i*6, 0.5, flip(outQuad), 150, 'drunk', plr = 1}
		ease {51.5+i*6, 0.5, flip(outQuad), -150, 'drunk', plr = 2}
		
		ease {51.875+i*6, 0.125, outQuad, 100, 'invert'}
		ease {52+i*6, 0.125, outQuad, 0, 'invert'}
		
		ease {52.5+i*6, 0.5, flip(outQuad), -150, 'drunk', plr = 1}
		ease {52.5+i*6, 0.5, flip(outQuad), 150, 'drunk', plr = 2}
		
		add {53.25+i*6, 0.5, flip(outQuad), -150, 'doorspringtipsy'}
		
		ease {53.75+i*6, 0.5, flip(outQuad), 150, 'drunk', plr = 1}
		ease {53.75+i*6, 0.5, flip(outQuad), -150, 'drunk', plr = 2}
	end
	
	for i=0,1 do
		ease {60.5+i*6, 0.5, flip(outQuad), 100, 'hallway', -25, 'movey'}
		ease {61.25+i*6, 0.5, flip(outQuad), 100, 'hallway', -25, 'movey'}
		ease {62.25+i*6, 0.5, flip(outQuad), 100, 'hallway', -25, 'movey'}
		ease {63.25+i*6, 0.5, flip(outQuad), 100, 'hallway', -25, 'movey'}
		ease {64.25+i*6, 0.5, flip(outQuad), 100, 'hallway', -25, 'movey'}
		ease {65.25+i*6, 0.5, flip(outQuad), 100, 'hallway', -25, 'movey'}
	end
	
	set {62.5, -79, 'confusionoffset'}
	ease {62.75, 0.5, flip(outCubic), -300, 'tiny'}
	ease {62.75, 0.5, outCubic, 0, 'confusionoffset'}
	
	set {68.5, 79, 'confusionoffset'}
	ease {68.75, 0.5, flip(outCubic), -300, 'tiny'}
	ease {68.75, 0.5, outCubic, 0, 'confusionoffset'}
	
	ease {65, 0.25, outQuad, 100, 'invert'}
	ease {65.25, 0.25, outQuad, 0, 'invert'}
	ease {65.5, 0.25, outQuad, 100, 'invert'}
	ease {65.75, 0.25, outQuad, 0, 'invert'}
	
	ease {69.5, 0.25, outQuad, 100, 'invert'}
	ease {69.75, 0.25, outQuad, 0, 'invert'}
	
	ease {70.5, 0.25, outQuad, 100, 'invert'}
	ease {70.75, 0.25, outQuad, 0, 'invert'}
	ease {71, 0.25, outQuad, 100, 'invert'}
	ease {71.25, 0.25, outQuad, 0, 'invert'}
	
	
	for i=0,5 do
		if not (i == 3) then
			ease {60.5+i*1.5, 1, flip(outQuad), 100, 'doorspringdrunk'}
		end
	end
	
	set {72, 157, 'confusion'}
	ease {72, 1, flip(outQuad), 50, 'doorspringtipsy', plr = 1}
	ease {72, 1, flip(outQuad), 150, 'doorspringtipsy', plr = 2}
	ease {72, 1, flip(outQuad), 150, 'doorspringdrunk', plr = 1}
	ease {72, 1, flip(outQuad), 50, 'doorspringdrunk', plr = 2}
	ease {72, 3, linear, -50, 'flip', 50, 'mini'}
	ease {72, 3, linear, 50, 'drunk', 50, 'tipsy', plr = 1}
	ease {72, 3, linear, -50, 'drunk', -50, 'tipsy', plr = 2}
	ease {72, 3, linear, 25, 'wave', 75, 'stealth', plr = 1}
	ease {72, 3, linear, -25, 'wave', plr = 2}
	
	set {84, 0, 'confusion'}
	ease {84, 0.5, outCubic, 0, 'flip', 0, 'mini'}
	add {84, 0.5, flip(outCubic), 200, 'tipsy', plr = 1}
	add {84, 0.5, flip(outCubic), -200, 'tipsy', plr = 2}
	
	for i=0,1 do
		ease {84+i*3, 1.5, bounce, 15, 'skewx', 15, 'skewy'}
		ease {84+1.5+i*3, 1.5, bounce, -15, 'skewx', -15, 'skewy'}
	end
	
	ease {90, 3, outCubic, 0, 'drunk', 0, 'tipsy', 0, 'stealth', 0, 'wave'}
	ease {90, 3, outCubic, 1, 'xmod'}
	
	local moverand0 = math.random(-300, -100)
	local moverand1 = math.random(-100, -5)
	local moverand2 = math.random(5, 100)
	local moverand3 = math.random(100, 300)
	
	local confrand0 = math.random(-628, 628)
	local confrand1 = math.random(-628, 628)
	local confrand2 = math.random(-628, 628)
	local confrand3 = math.random(-628, 628)
	
	local fallrand1 = math.random(650, 1200)
	local fallrand2 = math.random(650, 1200)
	local fallrand3 = math.random(650, 1200)
	
	ease {93, 1, inCubic, 650, 'movey0', fallrand1, 'movey1', fallrand2, 'movey2', fallrand3, 'movey3'}
	ease {93, 1, flip(outCubic), -50, 'tiny'}
	ease {93, 1.5, linear, moverand0, 'movex0', confrand0, 'confusionoffset0', moverand1, 'movex1', confrand1, 'confusionoffset1', moverand2, 'movex2', confrand2, 'confusionoffset2', moverand3, 'movex3', confrand3, 'confusionoffset3'}
	
	set {94.5, 0, 'movey0', 0, 'movey1', 0, 'movey2', 0, 'movey3', 0, 'confusionoffset0', 0, 'confusionoffset1', 0, 'confusionoffset2', 0, 'confusionoffset3', 0, 'movex0', 0, 'movex1', 0, 'movex2', 0, 'movex3', 150, 'mini', 2, 'xmod', 50, 'flip', 100, 'stealth', 100, 'dark'}
	ease {94.5, 0.5, flip(outCubic), 0, 'stealth', 50, 'dark'}
	set {95, 75, 'mini', 3, 'xmod', 25, 'flip'}
	ease {95, 0.5, flip(outCubic), 0, 'stealth', 50, 'dark'}
	set {95.5, 0, 'mini', 4, 'xmod', 0, 'flip'}
	ease {95.5, 0.5, flip(outCubic), 0, 'stealth', 50, 'dark'}
	
	ease {96, 0.5, outSine, 0, 'stealth', 67, 'dark'}
	ease {96, 1.5, inOutSine, 50, 'tipsy'}
	ease {118.5, 1.5, inOutSine, 0, 'tipsy'}
	
	for i=0,3 do
		ease {96+i*6, 1.5, outExpo, 30, 'rotationy', 200, 'movex'}
		ease {96+1.5+i*6, 1.5, outExpo, 0, 'rotationy', 0, 'movex'}
		ease {96+3+i*6, 1.5, outExpo, -30, 'rotationy', -200, 'movex'}
		ease {96+4.5+i*6, 1.5, outExpo, 0, 'rotationy', 0, 'movex'}
	end
	
	for i=0,14 do
		if not (i == 7) then
			ease {96.5+i*1.5, 0.5, bounce, 150, 'doorspringdrunk'}
		end
	end
	
	ease {106.5, 1.5, bounce, 100, 'tornado'}
	ease {118.5, 1.5, bounce, 100, 'tornado'}
	
	for i=0,3 do
		ease {96+i*6, 0.5, flip(outCubic), 50, 'movey', -100, 'tinyy'}
		ease {97+i*6, 0.5, flip(outCubic), -50, 'movey', -100, 'tinyy'}
		ease {99+i*6, 0.5, flip(outCubic), -50, 'movey', -100, 'tinyy'}
		ease {100+i*6, 0.5, flip(outCubic), 50, 'movey', -100, 'tinyy'}
		ease {101.25+i*6, 0.5, flip(outCubic), -50, 'movey', -100, 'tinyy'}
	end
	
	ease {120, 1.5, inOutSine, 50, 'drunk'}
	set {120, 100, 'hidenoteflash1', 100, 'hidenoteflash3', plr = 1}
	set {120, 100, 'hidenoteflash0', 100, 'hidenoteflash2', plr = 2}
	ease {120, 1.5, inOutSine, -100, 'tiny1', 100, 'stealth1', 100, 'dark1', -100, 'tiny3', 100, 'stealth3', 100, 'dark3', plr = 1}
	ease {120, 1.5, inOutSine, -100, 'tiny0', 100, 'stealth0', 100, 'dark0', -100, 'tiny2', 100, 'stealth2', 100, 'dark2', plr = 2}
	
	for i=0,7 do
		local mod2 = modulo(i+1,2)
		local themodulo = (mod2 - 0.5)*2
		
		ease {120+3*i, 0.75, outCubic, -7.5*themodulo, 'rotationz', 13*themodulo, 'confusionoffset', plr = 1}
		ease {120+3*i, 0.75, outCubic, 7.5*themodulo, 'rotationz', -13*themodulo, 'confusionoffset', plr = 2}
		add {120+3*i, 0.75, outSine, 15, 'drunk'}
		
		ease {120.75+3*i, 0.75, outCubic, -15*themodulo, 'rotationz', 26*themodulo, 'confusionoffset', plr = 1}
		ease {120.75+3*i, 0.75, outCubic, 15*themodulo, 'rotationz', -26*themodulo, 'confusionoffset', plr = 2}
		add {120.75+3*i, 0.75, outSine, 15, 'drunk'}
		
		ease {121.5+3*i, 0.5, outCubic, -10*themodulo, 'rotationz', 17*themodulo, 'confusionoffset', plr = 1}
		ease {121.5+3*i, 0.5, outCubic, 10*themodulo, 'rotationz', -17*themodulo, 'confusionoffset', plr = 2}
		add {121.5+3*i, 0.75, outSine, -10, 'drunk'}
		
		if modulo(i,4) == 3 then
			add {120.5+3*i, 0.25, outCubic, -100, 'invert'}
			add {120.75+3*i, 0.5, outCubic, 100, 'invert'}
			add {121.25+3*i, 0.25, outCubic, -100, 'invert'}
			add {121.5+3*i, 0.5, outCubic, 100, 'invert'}
			
			add {122+3*i, 0.5, outCubic, -100, 'invert'}
			add {122.25+3*i, 0.5, outCubic, 100, 'invert'}
		end
		
		if modulo(i,2) == 1 then
			ease {122+3*i, 0.75, outCubic, -5*themodulo, 'rotationz', 9*themodulo, 'confusionoffset', plr = 1}
			ease {122+3*i, 0.75, outCubic, 5*themodulo, 'rotationz', -9*themodulo, 'confusionoffset', plr = 2}
			add {122+3*i, 0.75, outSine, -10, 'drunk'}
			
			ease {122.75+3*i, 0.25, outCubic, 0, 'rotationz', 0, 'confusionoffset'}
			add {122.75+3*i, 0.75, outSine, -10, 'drunk'}
			ease {122.75+3*i, 0.25, outCubic, 100*mod2, 'invert'}
		else
			ease {122+3*i, 0.5, outCubic, -5*themodulo, 'rotationz', 9*themodulo, 'confusionoffset', plr = 1}
			ease {122+3*i, 0.5, outCubic, 5*themodulo, 'rotationz', -9*themodulo, 'confusionoffset', plr = 2}
			add {122+3*i, 0.5, outSine, -10, 'drunk'}
			
			ease {122.5+3*i, 0.5, outCubic, 0, 'rotationz', 0, 'confusionoffset'}
			add {122.5+3*i, 0.5, outSine, -10, 'drunk'}
			ease {122.5+3*i, 0.5, outCubic, 100*mod2, 'invert'}
		end
	end
	
	set {144, 0, 'stealth0', 0, 'stealth1', 0, 'stealth2', 0, 'stealth3', 0, 'tiny0', 0, 'tiny1', 0, 'tiny2', 0, 'tiny3', 0, 'dark0', 0, 'dark1', 0, 'dark2', 0, 'dark3', 0, 'hidenoteflash0', 0, 'hidenoteflash1', 0, 'hidenoteflash2', 0, 'hidenoteflash3'}
	ease {144, 6, linear, 300, 'drunk', 50, 'tipsy', -100, 'flip', 100, 'mini'}
	ease {144, 3, outQuad, 75, 'stealth', -75, 'drunkperiod'}
	
	ease {155.5, 0.5, inQuad, 50, 'stealth'}
	ease {156, 0.5, outQuad, 0, 'stealth'}
	
	ease {167, 0.5, outCubic, -50, 'flip', 50, 'mini', -37.5, 'drunkperiod'}
	ease {167, 0.5, outCubic, 175, 'drunk', plr = 1}
	ease {167, 0.5, outCubic, 125, 'drunk', 0, 'tipsy', plr = 2}
	ease {167.5, 0.5, outCubic, 0, 'flip', 0, 'mini', 0, 'drunkperiod'}
	ease {167.5, 0.5, outCubic, 50, 'drunk', plr = 1}
	ease {167.5, 0.5, outCubic, -50, 'drunk', -50, 'tipsy', plr = 2}
	
	for i=0,1 do
		ease {156.5+i*6, 0.5, flip(outQuad), 100, 'hallway', -25, 'movey'}
		ease {157.25+i*6, 0.5, flip(outQuad), 100, 'hallway', -25, 'movey'}
		ease {158.25+i*6, 0.5, flip(outQuad), 100, 'hallway', -25, 'movey'}
		ease {159.25+i*6, 0.5, flip(outQuad), 100, 'hallway', -25, 'movey'}
		ease {160.25+i*6, 0.5, flip(outQuad), 100, 'hallway', -25, 'movey'}
		ease {161.25+i*6, 0.5, flip(outQuad), 100, 'hallway', -25, 'movey'}
	end
	
	set {158.5, -79, 'confusionoffset'}
	ease {158.75, 0.5, flip(outCubic), -300, 'tiny'}
	ease {158.75, 0.5, outCubic, 0, 'confusionoffset'}
	
	set {164.5, 79, 'confusionoffset'}
	ease {164.75, 0.5, flip(outCubic), -300, 'tiny'}
	ease {164.75, 0.5, outCubic, 0, 'confusionoffset'}
	
	for i=0,5 do
		ease {168+i*6, 0.5, flip(outCubic), 50, 'movey', -100, 'tinyy'}
		if not (i == 5) then
			ease {169+i*6, 0.5, flip(outCubic), -50, 'movey', -100, 'tinyy'}
			ease {171+i*6, 0.5, flip(outCubic), -50, 'movey', -100, 'tinyy'}
			ease {172+i*6, 0.5, flip(outCubic), 50, 'movey', -100, 'tinyy'}
			ease {173.25+i*6, 0.5, flip(outCubic), -50, 'movey', -100, 'tinyy'}
		end
	end
	
	ease {168, 6, bounce, 5, 'rotationz'}
	ease {168, 6, inOutSine, 200, 'movex'}
	ease {168+6, 6, bounce, -5, 'rotationz'}
	ease {168+6, 6, inOutSine, -200, 'movex'}
	ease {168+12, 6, bounce, 5, 'rotationz'}
	ease {168+12, 6, inOutSine, 200, 'movex'}
	ease {168+18, 6, bounce, -5, 'rotationz'}
	ease {168+18, 6, inOutSine, -200, 'movex'}
	ease {168+24, 6, bounce, 5, 'rotationz'}
	ease {168+24, 6, inOutSine, 200, 'movex'}
	ease {168+30, 3, bounce, -5, 'rotationz'}
	ease {168+30, 3, inOutSine, 0, 'movex'}
	
	for i=0,10 do
		ease {168+i*3, 1.5, bounce, 15, 'skewx', 15, 'skewy'}
		ease {168+1.5+i*3, 1.5, bounce, -15, 'skewx', -15, 'skewy'}
	end
	
	ease {180.5, 0.125, outSine, 100, 'movex0', -100, 'movex1'}
	ease {180.625, 0.125, outSine, 0, 'movex0', 0, 'movex1'}
	ease {180.75, 0.125, outSine, 100, 'movex0', -100, 'movex1'}
	ease {180.875, 0.125, outSine, 0, 'movex0', 0, 'movex1'}
	
	ease {182, 0.125, outSine, 200, 'movex1', -200, 'movex3'}
	ease {182.125, 0.125, outSine, 0, 'movex1', 0, 'movex3'}
	ease {182.25, 0.125, outSine, 200, 'movex1', -200, 'movex3'}
	ease {182.375, 0.125, outSine, 0, 'movex1', 0, 'movex3'}
	
	for i=0,20 do
		if modulo(i,4) == 0 and not (i == 20) then
			ease {168-0.5+1.5*i, 0.25, flip(outCubic), -100, 'tiny'}
			ease {168-0.25+1.5*i, 0.25, flip(outCubic), -200, 'tiny'}
		elseif modulo(i,2) == 0 then
			ease {168-0.25+1.5*i, 0.25, flip(outCubic), -150, 'tiny'}
		end
		ease {168+1.5*i, 0.25, flip(outCubic), -300, 'tiny'}
	end
	
	ease {183.75, 0.25, flip(outCubic), -300, 'tiny'}
	
	ease {198.5, 0.25, flip(outCubic), -150, 'tiny'}
	ease {198.75, 0.25, flip(outCubic), -300, 'tiny'}
	
	ease {199.25, 0.25, flip(outCubic), -37.5, 'tiny'}
	ease {199.5, 0.25, flip(outCubic), -75, 'tiny'}
	ease {199.75, 0.25, flip(outCubic), -112.5, 'tiny'}
	ease {200, 0.25, flip(outCubic), -150, 'tiny'}
	ease {200.25, 0.25, flip(outCubic), -187.5, 'tiny'}
	ease {200.5, 0.25, flip(outCubic), -225, 'tiny'}
	ease {200.75, 0.25, flip(outCubic), -262.5, 'tiny'}
	ease {201, 0.25, flip(outCubic), -300, 'tiny'}
	
	ease {199.25, 1.75, linear, 100, 'dark'}
	ease {200, 1, inQuad, 200, 'mini'}
	
	hide {202, 3.5, plr = {1, 2}}
	hide {207, 4, plr = {1, 2}}
	hide {213, 4, plr = {1, 2}}
	hide {219, 8, plr = {1, 2}}
	hide {198, 3.5, plr = {3, 4}}
	hide {205.5, 1.5, plr = {3, 4}}
	hide {211.5, 1.5, plr = {3, 4}}
	hide {217.5, 1.5, plr = {3, 4}}
	
	func {198, function()
		P3:SetAwake(true)
		P4:SetAwake(true)
	end}
	
	func {199.25, function()
		PP[3]:hidden(0)
		PP[4]:hidden(0)
	end}
	
	set {198, 100, 'centered', 50, 'flip', 100, 'dark', 100, 'stealth', 100, 'hidenoteflash', 100, 'halgun', 50, 'bumpyx0', 50, 'bumpyx1', -50, 'bumpyx2', -50, 'bumpyx3', 500, 'bumpyxperiod0', 500, 'bumpyxperiod1', 500, 'bumpyxperiod2', 500, 'bumpyxperiod3', 3, 'xmod', plr = {3,4}}
	set {198, 100, 'reverse2', 100, 'dark0', 100, 'dark3', 100, 'stealth0', 100, 'stealth3', plr = 3}
	set {198, 100, 'reverse3', 100, 'dark1', 100, 'dark2', 90, 'rotationz', -157, 'confusionoffset', 100, 'stealth1', 100, 'stealth2', plr = 4}
	
	ease {201, 1.5, outQuad, 67, 'dark', plr = {3,4}}
	
	set {201, 100, 'halgun', plr = {1,2}}
	
	set {202, 0, 'hidenoteflash', plr = {3,4}}
	set {202.5, 100, 'dark', plr = {3,4}}
	ease {199.25, 1.75, outSine, 0, 'stealth', plr = {3,4}}
	
	set {202.5, 0, 'mini', 0, 'drunk', 0, 'tipsy', 100, 'centered', 100, 'reverse', 67, 'dark', 50, 'flip', 3, 'xmod', plr = 1}
	set {208.5, 0, 'reverse', plr = 1}
	set {214.5, 100, 'reverse', plr = 1}
	
	func {202.5, function()
		P1:SetXSpline(
			0,
			-1,
			0,
			0,
			-1
		)
		for i=0,3 do
			P1:SetXSpline(
				1,
				i,
				i*100-150,
				500,
				-1
			)
		end
	end}
	
	for i=0,13 do
		add {201+i*1.5, 1.5, outBack, 30, 'rotationz', -52.3599, 'confusionoffset', plr = {3,4}}
	end
	
	add {222.755, 1.5, outBack, 30, 'rotationz', -52.3599, 'confusionoffset', plr = {3,4}}
	add {222.755, 3.75, inQuad, 200, 'tiny', plr = {1,2,3,4}}
	
	--clock stuff
	
	for i=0,13 do
		add {0+i*3, 0.75, inCubic, 20, 'arrowtation'}
		add {0.75+i*3, 0.75, inCubic, -10, 'arrowtation'}
		add {1.5+i*3, 0.5, inCubic, 20, 'arrowtation'}
		add {2+i*3, 0.5, inCubic, 30, 'arrowtation'}
		add {2.5+i*3, 0.5, inCubic, 30, 'arrowtation'}
	end
	
	ease {42, 6, inExpo, 0, 'arrowtation'}
	
	for i=0,28 do
		add {48+i*1.5, 0.25, outElastic, 6, 'arrowtation'}
	end
	
	func {93, 2.5, outElastic, 174, 180, function(p)
		cock_arrow:rotationz(p)
	end}
	
	func {93, 2.5, outElastic, 14.5, 180, function(p)
		cock_sarrow:rotationz(p)
	end}
	
	func {94.5, 0.5, outExpo, 0, 60, function(p)
		cock:rotationz(p)
	end}
	
	func {95, 0.5, outExpo, 0, 120, function(p)
		cock:rotationz(p)
	end}
	
	func {95.5, 0.5, outExpo, 0, 180, function(p)
		cock:rotationz(p)
	end}
	
	for i=0,47 do
		add {96+i*0.5, 0.25, outElastic, 6, 'arrowtation2'}
	end
	
	for i=0,7 do
		add {120+i*3, 0.25, outElastic, 6, 'arrowtation2'}
		add {120+0.75+i*3, 0.25, outElastic, 6, 'arrowtation2'}
		add {120+1.5+i*3, 0.5, outCubic, -12, 'arrowtation2'}
		add {120+2+i*3, 0.5, outCubic, -12, 'arrowtation2'}
		add {120+2.5+i*3, 0.5, outCubic, -12, 'arrowtation2'}
	end
	
	for i=0,3 do
		add {144+i*6, 2, outSine, math.random(30, 180), 'arrowtation2'}
		add {144+3+i*6, 2, outSine, math.random(-180, -30), 'arrowtation2'}
	end
	
	ease {167, 1, inQuad, 0, 'arrowtation2'}
	
	for i=0,59 do
		add {168+i*0.5, 0.25, outElastic, -6, 'arrowtation3'}
	end
	
	func {198, 3, inSine, 540, 0, function(p)
		cock:rotationz(p/3)
		cock_arrow:rotationz(p)
		cock_sarrow:rotationz(-p)
	end}
	
	set {201, 0, 'arrowtation'}
	
	for i=0,13 do
		add {201+i*1.5, 0.25, outElastic, 6, 'arrowtation'}
	end
	
	add {222.75, 0.25, outElastic, 6, 'arrowtation'}
	
end)"
Type = "ActorFrame"
><children>
	<Layer File = "cockbg.png" Name = "cockbg" />
	<Layer File = "cock.png" Name = "cock" />
	<Layer File = "cock_arrow.png" Name = "cock_arrow" />
	<Layer File = "cock_sarrow.png" Name = "cock_sarrow" />

	<Layer Type = "ActorProxy" Name = "PC[1]" />
	<Layer Type = "ActorProxy" Name = "PC[2]" />
	<Layer Type = "ActorProxy" Name = "PJ[1]" />
	<Layer Type = "ActorProxy" Name = "PJ[2]" />
	<Layer Type = "ActorProxy" Name = "PP[1]" />
	<Layer Type = "ActorProxy" Name = "PP[2]" />
	<Layer Type = "ActorProxy" Name = "PP[3]" />
	<Layer Type = "ActorProxy" Name = "PP[4]" />
</children></Mods>
