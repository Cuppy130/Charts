<Mods LoadCommand = "%xero(function(self)
	-- judgment / combo proxies
	for pn = 1, 2 do
		setupJudgeProxy(PJ[pn], P[pn]:GetChild('Judgment'), pn)
		setupJudgeProxy(PC[pn], P[pn]:GetChild('Combo'), pn)
	end
	-- player proxies
	for pn = 1, #PP do
		PP[pn]:SetTarget(P[pn])
		P[pn]:hidden(1)
		P[pn]:x(scx)
		if pn > 2 then
			P[pn]:SetAwake(true)
			P[pn]:SetInputPlayer((pn+1)%2)
			P[pn]:GetChild('Judgment'):hidden(1)
			P[pn]:GetChild('Combo'):hidden(1)
			table.insert(plr, pn)
		end
	end
	
	local function confOff(deg)
		return math.rad(deg)*100
	end
	
	function range(var,tablex)
		for _,v in ipairs(tablex) do
			if var >= v[1] and var <= v[2] then
				return true
			end
		end
		return false
	end
	
	for pn = 1,2 do
		a = P[pn]
		for col = 0,3 do -- iterate through all the columns
			a:SetNumArrowGradientPoints(col,2)
			a:SetArrowGradientPoint(0,col,5) -- set their points
			a:SetArrowGradientPoint(1,col,6)
			a:SetArrowGradientColor(0,col,1,1,1,1)
			a:SetArrowGradientColor(1,col,1,1,1,0)
		end
	end
	
	--auto counter rotation via funny math, thanks mang
	
	definemod{'rotx','roty','rotz',function(xDegrees, yDegrees, zDegrees, plr)
		local function mindf_reverseRotation(angleX, angleY, angleZ)
			local sinX = math.sin(angleX);
			local cosX = math.cos(angleX);
			local sinY = math.sin(angleY);
			local cosY = math.cos(angleY);
			local sinZ = math.sin(angleZ);
			local cosZ = math.cos(angleZ);
			return { math.atan2(-cosX*sinY*sinZ-sinX*cosZ,cosX*cosY),
					math.asin(-cosX*sinY*cosZ+sinX*sinZ),
					math.atan2(-sinX*sinY*cosZ-cosX*sinZ,cosY*cosZ) }
		end
		local DEG_TO_RAD = math.pi / 180
		local angles = mindf_reverseRotation(xDegrees * DEG_TO_RAD, yDegrees * DEG_TO_RAD, zDegrees * DEG_TO_RAD)
		local rotationx,rotationy,rotationz=
			xDegrees,
			yDegrees,
			zDegrees
		local confusionxoffset,confusionyoffset,confusionzoffset=
			(angles[1]*100),
			(angles[2]*100),
			(angles[3]*100)

		return rotationx,rotationy,rotationz,confusionxoffset,confusionyoffset,confusionzoffset
	end,
	'rotationx','rotationy','rotationz','confusionxoffset','confusionyoffset','confusionzoffset'
	}
	
	function mix(a, b, x) return a * (1 - x) + b * x end
	
	local proxPos = {}
	local proxZoom = 1
	local proxDist = 64 * 4 * proxZoom -- 4 - column number
	local newprox = 1
	for i,prox in ipairs(rya_proxyMarch) do
		local pn = ((i - 1) % 2) + 1
		local start = scx - proxDist * #rya_proxyMarch/2
		local x = start + proxDist * (i - 1)
		prox:SetTarget(P[pn]:GetChild('NoteField'))
		proxPos[i] = x
		prox:xy(scx, scy)
		prox:hidden(1)
		prox:diffusealpha(1/#rya_proxyMarch)
	end
	
	definemod {'proxyZoom', function(a) proxZoom = a end}
	set {0, 1, 'proxyZoom'}
	
	definemod {'proxywall', 'proxywallx', function(a, x)
		for i,prox in ipairs(rya_proxyMarch) do
			local pn = ((i - 1) % 2) + 1

			prox:xy(mix(scx, proxPos[i], a / 100) + ((x/100) * proxDist * 2) % (proxDist * 2), scy)

			prox:zoom(mix(1, proxZoom, a / 100))
			prox:hidden(a == 0 and 1 or 0)
			prox:diffusealpha(mix(1/#rya_proxyMarch, 1, a / 100))
		end
	end}
	
	for pn = 1,#rya_proxyMarch do
		rya_proxyMarch[pn]:SetTarget(P[(pn % 2) + 1]:GetChild('NoteField'))
	end
	
	definemod {'fov', function(a,pn) P[pn]:fov(a) end}
	setdefault {45, 'fov'}
	
	--flip = 1
	val = 0
	--definemod {'val', function(a) val = a end}
	
	local function fliperoo()
		-- thanks XeroOl
		-- basically creates a near psuedo-flicker effect at 60hz
		if (GAMESTATE:GetSongTime() * 60) % 2 < 1 then
			return -1
		else
			return 1
		end
	end
	
	-- card {420, 69, 'ass', -15, '#ffdfe8'}
	--f_sprite:SetTexture(f_aft:GetTexture())
	
	for pn = 1,#PP do
		a = P[pn]
		for col = 0,3 do -- iterate through all the columns
			a:SetNumPathGradientPoints(col,3)
			a:SetPathGradientPoint(0,col,-1)
			a:SetPathGradientPoint(1,col,5)
			a:SetPathGradientPoint(2,col,6)
			a:SetPathGradientColor(0,col,1,1,1,0)
			a:SetPathGradientColor(1,col,1,1,1,4) -- sike I'll keep this at 4 instead of 5
			a:SetPathGradientColor(2,col,1,1,1,0)
		end
	end
	
	GAMESTATE:ForceSmoothLines(1)
	
	-- //////////////////////////
	-- wee
	-- //////////////////////////
	
	set {0, 400, 'cmod', 100, 'dizzyholds', 100, 'halgun', 100, 'stealthpastreceptors', 0, 'drawsize'}
	excluding = {'cmod', 'dizzyholds', 'halgun', 'stealthpastreceptors', 'fov', 'zbuffer', 'drawsize'}
	
	func {4, 4, linear, 0, .4, 'cover:diffusealpha'}
	
	definemod {'bgzoom', function(a) bg:zoom(1 + a) end}
	definemod {'bgrz', function(a) bg:rotationz(a) end}
	definemod {'bgry', function(a) bg:rotationy(a) end}
	definemod {'bgrx', function(a) bg:rotationx(a) end}
	
	--definemod {'proty', function(a,pn) PP[pn]:rotationy(a) end} -- attempt to index field `?' (a nil value)
	
	--[[local valFlip = 1
	for b = 8, 30, 2 do
		set {b+1, 2*valFlip, 'bgrz', .2, 'bgzoom'}
		ease {b+1, 2, outQuad, 0, 'bgrz', 0, 'bgzoom'}
		valFlip = -valFlip
	end]]
	
	for b = 8, 30, 2 do
		set {b+1, 100, 'arrowpath', 1000, 'arrowpathwidth'}
		ease {b+1, 2, outExpo, 0, 'arrowpath', -100, 'arrowpathwidth'}
	end
	
	func {8, 24, function(beat,poptions)
		poptions[1].bgrz = math.sin( (beat-256)*math.pi )*2
		poptions[1].bgzoom = math.abs( math.sin((beat-256)*math.pi)*.02 )
	end}
	
	func {40, 24, function(beat,poptions)
		poptions[1].bgrz = math.sin( (beat-40)*math.pi )*2
		poptions[1].bgzoom = math.abs( math.sin((beat-40)*math.pi)*.02 )
	end}
	
	func {240, 16, function(beat,poptions)
		poptions[1].bgrz = math.sin( (beat-256)*math.pi )*2
		poptions[1].bgzoom = math.abs( math.sin((beat-256)*math.pi)*.02 )
	end}
	
	func {72, 4, outQuad, 0, 20, function(a) val = a end}
	func {96, 4, outQuad, 20, 0, function(a) val = a end}
	
	func {72, 28, function(beat,poptions)
		poptions[1].bgrx = math.sin( (beat-72)*math.pi / 4 )*val
		poptions[1].bgry = math.cos( (beat-72)*math.pi / 4 )*val
		poptions[1].bgzoom = math.abs( math.sin((beat-72)*math.pi)*.15 )
	end}
	
	for _,b in ipairs({43, 46.5, 47, 59, 62.5, 63, 63.5, 64, 65.5, 66, 75, 78.5, 79, 91, 94.5, 95, 100, 101.5, 102}) do
		if b % 1 ~= 0 then
			add {b, 1.5, pop, .25, 'bgzoom', -500, 'tinyz'}
		else
			add {b, 1, bounce, .25, 'bgzoom', -500, 'tinyz'}
		end
	end
	
	setdefault {0, 'zoom'}
	ease {0, 3, outQuint, 100, 'zoom'}
	
	if GAMESTATE:GetCurrentSteps(0):GetDifficulty() == 4 then
		func {0, 360, function(beat,mods)
			for pn = 1,2 do
				mods[pn].rotx = 60
				mods[pn].z = mods[pn].z + 300
				mods[pn].fov = mods[pn].fov + 30
				mods[pn].spiralz = 100
				mods[pn].spiralzperiod = -99
				mods[pn].reverse = (mods[pn].reverse*1.3) + -20
				mods[pn].flip = (mods[pn].flip*.8) + 20
				
				if beat >= 142 and beat < 144 then
					mods[pn].rotz = 0
					mods[pn].flip = 0
				end
			end
		end}
		--[[for pn = 1,2 do
			P[pn]:SetZSpline(0, -1, 200, 0, -1)
			P[pn]:SetZSpline(1, -1, -400, 500, -1)
			P[pn]:SetZSpline(2, -1, -200, 600, -1)
			P[pn]:NoClearSplines(true)
		end]]
	end
	
	mirror {2, .5, outBack, 10, 'rotationz'}
	mirror {2.5, .5, outBack, -20, 'rotationz'}
	mirror {3, .5, outBack, 0, 'rotationz'}
	
	mirror {4, .5, outBack, 25, 'tipsy'}
	mirror {4.5, .5, outBack, -50, 'tipsy'}
	mirror {5, .5, outBack, 75, 'tipsy'}
	mirror {5.5, .5, outBack, 0, 'tipsy'}
	
	ease {6.4, .5, pop, 100, 'pulseinner'}
	ease {6.9, .5, pop, 100, 'pulseinner'}
	
	for _,b in ipairs({2,2.5,3,6.5,7,138,142}) do
		add {b, .5, bounce, 10, 'zoomx', .1, 'bgzoom'}
	end
	
	-- //////////////////////////
	-- ok enough neko
	-- //////////////////////////
	card {8, 36, 'An Intro that\'s playable', 2, '#afefaa'}
	card {36, 71, 'No accurate rhythm??? DISQUALIFIED', 1, '#bfefaa'}
	card {71, 103, 'nvm I don\'t want em anymore', 3, '#bfffbb'}
	card {103, 156, 'idk what this is themed after, do I even want to know???', 2, '#cdf0bf'}
	card {156, 232, 'I couldn\'t fit in all the drops into 2m30s', 2, '#d0e0c9'}
	card {232, 270, 'the outro that should\'ve appeared 3 times already', 2, '#dafada'}
	card {270, 272, 'ta~', -37, '#ffdfe8'}
	
	local bbep={{32.500,3},{32.750,0},{33.000,3},{33.500,1},{33.750,0},{34.000,3},{34.750,1},{35.000,2},{35.500,0},{36.500,1}}
	local bepp={{36.500,1},{36.750,2},{37.000,1},{37.500,2},{38.000,1},{39.000,2},{40,2}}
	wiggle2lua(bbep, bounce, 40, 'tipsy')
	wiggle2lua(bepp, bounce, 25, 'skewx')
	
	local bwob = {}
	for b = 8, 32 do
		table.insert(bwob, b)
	end
	wiggle2lua(bwob, bounce, 30, 'tipsy')
	wiggle2lua(bwob, bounce, 20, 'drunk')
	
	local bweb = {}
	for b = 40, 64 do
		table.insert(bweb, b)
	end
	wiggle2lua(bweb, popElastic.params(1.2,1), 50, 'tipsy')
	wiggle2lua(bweb, bounce, 50, 'drunk')
	
	local bwub = {}
	for b = 72, 96 do
		table.insert(bwub, b)
	end
	--wiggle2lua(bwub, bounce, 100, 'bumpyz')
	ease {72, 4, inOutQuint, 50, 'bumpyz'}
	ease {96, 8, inOutQuint, 0, 'bumpyz'}
	local valFlip = 1
	for c = 0,3 do
		wiggle2lua(bwub, bounce, 25*valFlip, 'movez'..c)
		valFlip = -valFlip
	end
	wiggle2lua(bwub, bounce, 50, 'drunk')
	
	local bwab = {}
	for b = 100, 132, 4 do
		table.insert(bwab, b)
	end
	wiggle2lua(bwab, bounce, 50, 'tipsy')
	wiggle2lua(bwab, bounce, 50, 'drunk')
	
	func {8, 24, function(beat,poptions)
		for pn = 1,2 do
			poptions[pn].bumpyz = math.sin(beat*math.pi)*100
			poptions[pn].y = math.abs( math.sin(beat*math.pi) )*-20
			poptions[pn].rotz = math.sin(beat*math.pi)*20
			poptions[pn].roty = math.sin(beat*math.pi/4)*45
			poptions[pn].boost = math.sin(beat*math.pi/4)*50
		end
	end}
	
	func {40, 24, function(beat,poptions)
		for pn = 1,2 do
			poptions[pn].skewy = math.sin(beat*math.pi)*10
			poptions[pn].y = math.abs( math.sin(beat*math.pi) )*-20
		end
	end}
	
	func {72, 24, function(beat,poptions)
		for pn = 1,2 do
			poptions[pn].skewy = math.sin(beat*math.pi)*10
			poptions[pn].y = math.abs( math.sin(beat*math.pi) )*-20
			--poptions[pn].roty = poptions[pn].roty + math.sin(beat*math.pi/2)*15
		end
	end}
	
	for b = 24, 31.5, .5 do
		acc {b, 250, 'pulseinner'}
		add {b, 1, outQuint, -250, 'pulseinner'}
	end
	
	local valFlip = 1
	for b = 72, 94, 2 do
		add {b, 1, outQuint, 40*valFlip, 'roty'}
		valFlip = -valFlip
	end
	add {72, 1, outQuint, -20, 'roty'}
	add {96, 1, outQuint, 20, 'roty'}
	
	ease {20, 1, bounce,  50, 'skewy'}
	ease {21, 1, bounce, -50, 'skewy'}
	ease {22, 1, bounce,  50, 'skewx'}
	ease {23, 1, bounce, -50, 'skewx'}
	
	ease {49, 2, outCirc, 20, 'rotz'}
	ease {51, 2, outCirc, -20, 'rotz'}
	ease {54, 2, outCirc, 0, 'rotz'}
	
	ease {81, 2, outCirc, 10, 'rotz', -40, 'rotx'}
	ease {83, 2, outCirc, -10, 'rotz', 40, 'rotx'}
	ease {86, 2, outCirc, 0, 'rotz', 0, 'rotx'}
	
	ease {67.5, 4, bell, 150, 'zoomx', 10, 'spiralx', 50, 'skewy'}
	
	ease {63, 1, inQuint, 45, 'rotz', 80, 'zoom'}
	ease {64, 2, inQuint, -45, 'rotz', 100, 'zoom'}
	ease {66, 4, inOutQuint, 0, 'rotz'}
	local val = 0
	func {67.5, 4, bounce, 10, function(a) val = a end}
	func {67.5, 4, function(beat,poptions)
		for pn = 1,2 do
			poptions[pn].movex = poptions[pn].movex + val*fliperoo()
		end
	end}
	
	for _,b in ipairs( {43,46.5,59,75,78.5,91} ) do
		ease {b, 2, bell, 30, 'stealth'}
	end
	
	local valFlip = 1
	for _,b in ipairs( {43,46.5,47,59,62.5,63,75,78.5,79,91,94.5,95} ) do
		add {b, 1, pop, 200, 'pulseinner'}
		add {b, 2, outExpo, 360*valFlip, 'roty'}
		valFlip = -valFlip
	end
	
	mirror {70, 3, inOutCubic, 200, 'movex'}
	
	for _,v in ipairs({{96.000,3},{96.500,1},{96.750,2},{97.000,1},{97.500,3},{98.000,0},{98.500,2},{98.750,1},{99.000,2},{99.500,0}}) do
		local b = v[1]
		local c = v[2]
		set {b, -150, 'tiny'..c, confOff(math.random(-45,45)), 'confusionoffset'..c}
		ease {b, 2, outQuint, 0, 'tiny'..c, 0, 'confusionoffset'..c}
	end
	
	ease {96, 4, inOutCubic, 0, 'movex'}
	
	ease {100, .5, outBounce, 45, 'rotationx', 150, 'fov', 200, 'wave', 50, 'waveperiod'}
	ease {101.5, .5, outBounce, -45, 'rotationx', -250, 'tiny', 0, 'wave', 0, 'waveperiod'}
	ease {102, .5, outBounce, 0, 'rotationx', 45, 'fov', 0, 'tiny'}
	
	ease {104, 8, outQuad, -25, 'mini'} -- this is for you pat
	ease {136, 2, inQuad, 0, 'mini'}
	ease {104, 8, pop, 100, 'invert'}
	ease {112, 8, pop, 100, 'invert'}
	mirror {116, 8, spike, 300, 'movex'}
	ease {116, 8, inOutQuint, 360*2, 'roty'}
	
	for b = 104, 128 do
		acc {b, 50, 'pulseinner', 50, 'stealth'}
		add {b, 2, outQuint, -50, 'pulseinner', -50, 'Stealth'}
	end
	
	ease {132, 1, outBack, 20, 'rotationz', plr = 1}
	ease {133, 1, outBack, -20, 'rotationz', plr = 2}
	ease {133.5, 1, outBack, 40, 'rotationz', plr = 1}
	ease {134, 1, outBack, 30, 'rotz', 10, 'rotationz', plr = 2}
	ease {135, 1, outBack, -30, 'rotz', -30, 'rotationz', plr = 1}
	
	ease {136, 2, inCubic, 1600*20 - 100, 'x', plr = 1}
	ease {136, 2, inCubic, 1600*21 + 50, 'x', plr = 2}
	ease {136, 2, inQuad, 500, 'pulseinner'}
	ease {138, 2, outExpo, 100, 'invert', 0, 'pulseinner'}
	
	ease {139.75, 2.25, inCubic, 0, 'x', plr = 1}
	ease {139.75, 2.25, inCubic, 0, 'x', plr = 2}
	ease {140, 2, inQuad, 0, 'invert', 500, 'pulseinner'}
	ease {142, 2, outExpo, 0, 'pulseinner'}
	
	-- this is the laziest setup ever as I don't wanna add proxies just for this
	func {136, 8, function(beat,poptions)
		for pn = 1,2 do
			poptions[pn].x = -512 + ((512 + (poptions[pn].x)) % 1024)
		end
	end}
	
	ease {136, 2, linear, 0, 'rotationz', 0, 'rotz'}
	mirror {140, 2, linear, 180, 'rotz'}
	ease {142, 2, outExpo, 180, 'rotx', 100, 'flip'}
	
	set {144, 0, 'rotz', 0, 'rotx', 0, 'flip'}
	ease {144, 8, inCirc, 360*12, 'roty', 200, 'zoom'}
	ease {144, 8, inExpo, .5, 'bgzoom'}
	
	-- //////////////////////////
	-- fuck it, more neko
	-- //////////////////////////
	
	set {152, 500, 'zoom'}
	ease {152, 4, outCirc, 360*-2, 'rotx', 100, 'zoom', 0, 'bgzoom'}
	
	local valFlip = 1
	for b = 156, 157.5, .5 do
		add {b, .5, outQuint, confOff(180/4), 'confusionoffset'}
		for c = 0,3 do
			ease {b, .5, outQuint, 25*valFlip, 'movey'..c}
			valFlip = -valFlip
		end
		valFlip = -valFlip
	end
	
	local wao = {}
	for b = 158, 232 do
		if not range(b, {{188,189}}) then
			if b >= 160 then
				acc {b, 100, 'pulseinner'}
				add {b, 1, outQuint, -100, 'pulseinner'}
			end
			table.insert(wao, b)
		end
	end
	wiggle2lua(wao, bounce, 25, 'tipsy')
	wiggle2lua(wao, bounce, 50, 'drunk')
	
	for b = 160, 230, 2 do
		if not range(b, {{188,189}}) then
			if b < 224 then
				ease {b+1, 1, outBack, 20*valFlip, 'rotationx'}
				add {b+1, 1, bounce, 150, 'zoomz'}
			end
			acc {b+1, 100, 'arrowpath', 10000, 'arrowpathwidth'}
			add {b+1, 2, outExpo, -100, 'arrowpath', -10000, 'arrowpathwidth'}
			valFlip = -valFlip
		end
	end
	
	ease {224, 1, outBack, 0, 'rotationx'}
	
	for c = 0,3 do
		ease {158, 1, outExpo, 0, 'movey'..c}
		acc {160, confOff(-180), 'confusionoffset'..c}
		if c > 1 then
			add {158, 1, outExpo, confOff(180), 'confusionoffset'..c}
		else
			add {159, 1, outExpo, confOff(-180), 'confusionoffset'..c}
		end
	end
	
	local val = 1
	func {160, 64, function(beat,poptions)
		for pn = 1,2 do
			--poptions[pn].pulseinner = poptions[pn].pulseinner
			poptions[pn].bumpyz     = math.sin(beat*math.pi)*50                    *val
			poptions[pn].y          = math.abs( math.sin(beat*math.pi) )*-20       *val
			poptions[pn].rotz       = math.sin(beat*math.pi)*10                    *val
			poptions[pn].roty       = math.sin(beat*math.pi/4)*25                  *val
			poptions[pn].boost      = math.sin(beat*math.pi/4)*25                  *val
			poptions[pn].skewy      = math.sin(beat*math.pi)*10                    *val
		end
		poptions[1].bgrz    = ( math.sin( (beat-40)*math.pi )*2              *val ) + poptions[1].bgrz   
		poptions[1].bgzoom  = ( math.abs( math.sin((beat-40)*math.pi)*.02 )  *val ) + poptions[1].bgzoom 
	end}
	
	func {187, 2, inOutCubic, 1, 0, function(a) val = a end}
	func {190, 2, inOutCubic, 0, 1, function(a) val = a end}
	
	ease {179.5, .5, bounce, confOff(45), 'confusionzoffset'}
	ease {180, 1, bounce, confOff(-45), 'confusionzoffset'}
	func {182, 2, bounce, 0, 100, function(a) val2 = a end}
	func {182, 2, function(beat,poptions)
		for pn = 1,2 do
			poptions[pn].movex = poptions[pn].movex + poptions[pn].movex + val2*fliperoo()
		end
	end}
	
	ease {188, 4, bell, 0, 'rotationx'}
	
	local valFlip = 1
	for b = 188.5, 190, .5 do
		acc {b, 250, 'pulseinner', .25, 'bgzoom', 5*valFlip, 'bgrz'}
		add {b, 1, outQuint, -250, 'pulseinner', -.25, 'bgzoom', -5*valFlip, 'bgrz'}
		valFlip = -valFlip
	end
	
	ease {204, 12, inOutQuad, 8000, 'modtimeroffset'}
	ease {205, 2, bell, -500, 'tinyy2'}
	func {205, 2, linear, -20, sh+20, 'kirbo:y'}
	
	ease {216, 1, pop, 50, 'stealth'}
	
	acc {221, confOff(360), 'confusionzoffset'}
	add {221, 1, outBack, confOff(-360/3), 'confusionzoffset'}
	add {222, 1, outBack, confOff(-360/3), 'confusionzoffset'}
	add {223, 1, outBack, confOff(-360/3), 'confusionzoffset'}
	
	local valFlip = 1
	for _,b in ipairs({234,234.5,235,236,236.5,237,237.5,238.5,239}) do
		acc {b, 250, 'pulseinner', .25, 'bgzoom', 5*valFlip, 'bgrz'}
		add {b, 1, outQuint, -250, 'pulseinner', -.25, 'bgzoom', -5*valFlip, 'bgrz'}
		valFlip = -valFlip
	end
	
	func {160, function() PP[1]:hidden(1) PP[2]:hidden(1) end}
	add {160, 2, outQuint, 100, 'proxywall'}
	if slump then
		add {160, 1, inQuad, 2000/64 / 2, 'proxywallx'}
		ease {160, 64+8, linear, 2000, 'proxywallx'}
	else
		add {160, 1, inQuad, 1000/64 / 2, 'proxywallx'}
		ease {160, 64+8, linear, 1000, 'proxywallx'}
	end
	
	local valFlip = 1
	for b = 234, 235, .5 do
		acc {b, -100/3, 'proxywall'}
		acc {b, 250, 'pulseinner', .5, 'bgzoom', 10*valFlip, 'bgrz'}
		add {b, 1, outQuint, -250, 'pulseinner', -.5, 'bgzoom', -10*valFlip, 'bgrz'}
		valFlip = -valFlip
	end
	
	set {232, 0, 'roty'}
	ease {232, 2, outCubic, 360, 'roty'}
	ease {232, 2, bounce, 125, 'zoom'}
	set {235, 0, 'proxywall'}
	func {235, function() PP[1]:hidden(0) PP[2]:hidden(0) end}
	
	bend={264.50,264.75,265.00,265.50,266.00,266.75,267.00,267.50,268.50}
	dend={268.50,268.75,269.00,269.50,270.00,271.00}
	
	wiggle2lua(bend, bounce, 40, 'tipsy')
	wiggle2lua(dend, bounce, 25, 'skewx')
	
	ease {269, 2, inExpo, 360*2, 'rotz', -100, 'mini', confOff(90), 'confusionzoffset', 100, 'invert', 360*-2.5, 'bgrz', 50000, 'tinyz'}
	ease {271, 1.25, inExpo, sh*4, 'y'}
	set {271, 0, 'tinyz'}
	
	local valFlip = 1
	for b = 256, 263.5, .5 do
		acc {b, 250, 'pulseinner', .1, 'bgzoom', 2*valFlip, 'bgrz'}
		add {b, 1, outQuint, -250, 'pulseinner', -.1, 'bgzoom', -2*valFlip, 'bgrz'}
		valFlip = -valFlip
	end
	
	set {239.75, 100, 'stealth', 100, 'dark', 250, 'tornado', 250, 'tipsy', 1, 'hidenoteflashes', plr = 2}
	local valFlip = 1
	for b = 240, 262, 2 do
		acc {b+1, -50, 'stealth', -250*valFlip, 'tornado', -250*valFlip, 'tipsy', plr = 2}
		valFlip = -valFlip
		add {b+1, 1, linear, 50, 'stealth', 250*valFlip, 'tornado', 250*valFlip, 'tipsy', plr = 2}
	end
	
	ease {252, 1, bounce,  50, 'skewx'}
	ease {253, 1, bounce, -50, 'skewx'}
	ease {254, 1, bounce,  50, 'skewy'}
	ease {255, 1, bounce, -50, 'skewy'}
	
	func {240, 24, function(beat,poptions)
		for pn = 1,2 do
			poptions[pn].drunk = math.sin(beat*math.pi)*50
			poptions[pn].dizzy = math.sin(beat*math.pi)*30
			poptions[pn].bumpyx = math.sin(beat*math.pi)*100
			poptions[pn].rotationz = math.sin(beat*math.pi/4)*10
			if beat >= 256 then
				poptions[pn].y = math.abs( math.sin(beat*math.pi*2) )*-10
			else
				poptions[pn].y = math.abs( math.sin(beat*math.pi) )*-20
			end
		end
	end}
	
end)"
Type = "ActorFrame"
><children>
	<Layer Type="Quad" Name = "black" InitCommand = "diffuse,0,0,0,1;scaletocover,0,0,SCREEN_WIDTH,SCREEN_HEIGHT;" />
	<Layer Type="ActorFrame" InitCommand="fov,45"><children>
		<Layer File = "../bg.png" Name = "bg" InitCommand = "xy,SCREEN_CENTER_X,SCREEN_CENTER_Y" />
	</children></Layer>
	<Layer Type="Quad" Name = "cover" InitCommand = "diffuse,0,0,0,0;scaletocover,0,0,SCREEN_WIDTH,SCREEN_HEIGHT;" />
	<Layer Type="Quad" Name = "gradient" InitCommand = "diffuse,1,.9,1,0;scaletocover,0,0,SCREEN_WIDTH,SCREEN_HEIGHT;fadetop,1" />
	<Layer File="_puyo.sprite" Name = "kirbo" InitCommand="zoom,1;setstate,0;xy,SCREEN_CENTER_X-200,-20" />
	<Layer Type = "ActorProxy" Name = "PC[1]" />
	<Layer Type = "ActorProxy" Name = "PC[2]" />
	<Layer Type = "ActorProxy" Name = "PJ[1]" />
	<Layer Type = "ActorProxy" Name = "PJ[2]" />
	<Layer Type = "ActorProxy" Name = "PP[1]" />
	<Layer Type = "ActorProxy" Name = "PP[2]" />
	<Layer Type = "ActorFrame" InitCommand="fov,60" Name="marchies" ><children>
		<Layer Type = "ActorProxy" Name = "rya_proxyMarch[1]" />
		<Layer Type = "ActorProxy" Name = "rya_proxyMarch[2]" />
		<Layer Type = "ActorProxy" Name = "rya_proxyMarch[3]" />
		<Layer Type = "ActorProxy" Name = "rya_proxyMarch[4]" />
		<Layer Type = "ActorProxy" Name = "rya_proxyMarch[5]" />
		<Layer Type = "ActorProxy" Name = "rya_proxyMarch[6]" />
		<!--<Layer Type = "ActorProxy" Name = "rya_proxyMarch[7]" />
		<Layer Type = "ActorProxy" Name = "rya_proxyMarch[8]" />
		-->
	</children></Layer>
	<!--
	<Layer Type="ActorFrameTexture" InitCommand = "%xero.aft" Name = "f_aft" />
	<Layer Type="Sprite" InitCommand = "%xero.sprite" Name = "f_sprite" />
	-->
</children></Mods>
