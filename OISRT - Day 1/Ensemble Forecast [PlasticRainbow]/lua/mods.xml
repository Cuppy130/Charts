<Mods LoadCommand = "%xero(function(self)

	m_bl = 60 / 212
	function RealFov(fov)
          return 360 / math.pi * math.atan(math.tan(math.pi * fov / 360) * DISPLAY:GetDisplayWidth() / DISPLAY:GetDisplayHeight() * 0.75)
    end

	-- players
	for pn = 1, #P do
		P[pn]:fov(RealFov(85))
		P[pn]:xy(scx,scy)
		P[pn]:hidden(1)
		
		if pn > 2 then
			P[pn]:SetInputPlayer(1-pn%2)
		end
	end

	-- judgment / combo proxies
	for pn = 1, #P do
		if pn < 3 then
			setupJudgeProxy(PJ[pn], P[pn]:GetChild('Judgment'), pn)
			setupJudgeProxy(PC[pn], P[pn]:GetChild('Combo'), pn)
			
			PJ[pn]:x( scx + 200*(pn*2-3) )
			PJ[pn]:basezoomx(0.75)
			PJ[pn]:basezoomy(0.75)

			PC[pn]:x( scx + 200*(pn*2-3) )
			PC[pn]:basezoomx(0.75)
			PC[pn]:basezoomy(0.75)
		else
			P[pn]:GetChild('Judgment'):hidden(1)
			P[pn]:GetChild('Combo'):hidden(1)
			P[pn]:GetChild('Judgment'):sleep(9e9)
			P[pn]:GetChild('Combo'):sleep(9e9)
		end
	end
	
	-- player proxies
	for pn = 1, #PP do
		PP[pn]:SetTarget(P[pn])
		P[pn]:hidden(1)
		PP[pn]:xy(0,0)
	end
	
	-- your code goes here here:
	plr = {1,2}
	setdefault{1.9, 'xmod', 100, 'overhead', 100, 'approachtype', 100, 'dizzyholds', 100, 'stealthpastreceptors', 100, 'modtimer', 100, 'halgun'}
	plr = nil
	
	--I want my code to be shorter (from kaypooma's file)
	local function mod_outin(beat, len, oute, ine, per1, per2, mod, pn)
		ease
		{beat, len/2, oute or outCirc, per2, mod, plr = pn}
		{beat+len/2, len/2, ine or inCirc, per1, mod, plr = pn}
	end
		
	local function mod_hit(beat, len, e, per, mod, pn)
		ease
		{beat, 0, instant, per, mod, plr = pn}
		{beat, len, e or outCirc, 0, mod, plr = pn}
	end
	
	--1. Intro
	
		--bg layout
		bgframe:xy(scx,sh)
		bgframe:fov(RealFov(45))
		
		fbgframe:xy(scx,sh) --background but actually foreground
		fbgframe:fov(RealFov(45))
		
		definemod{'bgrotz', function(rz)
			bgframe:rotationz(rz)
			fbgframe:rotationz(rz)
		end}
		
		local function bg_topdown(beat, actor, mode, xpos, ypos)
			if mode == 'u' then
				func{beat, function()
					actor:xy(xpos-scx,ypos-sh)
					actor:rotationz(0)
				end, persist=true}
			elseif mode == 'd' then
				func{beat, function()
					actor:xy(scx-xpos,-ypos+sh)
					actor:rotationz(180)
				end, persist=true}
			end
		end
		
		--BGBGBGBGBGBGBGBGBGBGBGBGBGBGBGBGBGBGBGBGBGBGBGBGBGBGBGBGBGBGBGBGBGBGBGBGBGBGBGBGBGBGBGBGBGBGBGBGBGBGBGBGBGBGBGBGBGBGBGBGBGBGBGBGBGBGBGBGBGBGB
		local sky_zm = 0.5*math.sqrt(13.)
		for i = 1, #sky do
			sky[i]:zoom(sky_zm)
		end
		
		--night
		bg_topdown(0, night, 'u', scx, scy)
		
		sky[1]:xy(0, -(sky_zm-1.4)*sh)
		
		stargrid:zoom(1.25)
		stargrid:customtexturerect(0,0,4,4)
		stargrid:diffuse(1,1,0.5,0.5)
		
		moon[1]:xy(-98, -0.3*sh)
		moon[1]:zoom(0.15)
		moon[1]:shadowlength(2)
		
		for i = 1, #star_n  do
			local xpos = 64*i-192 + rand.float(-16, 16)
			local ypos = rand.float(-0.4*sh, -0.2*sh)
			
			star_n[i]:xy(xpos, ypos)
			star_n[i]:zoom(rand.float(0.025,0.05))
			star_n[i]:shadowlength(2)
		end
		
		--day
		bg_topdown(0, day, 'd', scx, scy)
		sky[2]:xy(0, -(sky_zm-1.4)*sh)
		
		sun[1]:xy(-88, -0.3*sh)
		sun[1]:zoom(0.15)
		sun[1]:shadowlength(2)
		
		for i = 1, #cloud_d do
			local xpos = 160*(2*i-3) + rand.float(-6.4, 6.4)
			local ypos = rand.float(-0.3*sh, -0.1*sh)
			
			cloud_d[i]:xy(xpos,ypos)
			cloud_d[i]:zoom(rand.float(0.2, 0.3))
			cloud_d[i]:shadowlength(2)
		end
		
		--evening
		evening:hidden(1)
		bg_topdown(0, evening, 'u', scx, scy)
		sky[3]:xy(0, -(sky_zm-1.4)*sh)
		
		moon[2]:xy(98, -0.3*sh)
		moon[2]:zoom(0.15)
		moon[2]:shadowlength(2)
		
		for i = 1, #star_e  do
			local xpos = -64*i + 192 + rand.float(-16, 16)
			local ypos = rand.float(-0.3*sh, -0.1*sh)
			
			star_e[i]:xy(xpos, ypos)
			star_e[i]:zoom(rand.float(0.025,0.05))
			star_e[i]:shadowlength(2)
		end
		
		cloud_e:xy(-130, -0.2*sh)
		cloud_e:zoom(rand.float(0.2, 0.3))
		cloud_e:shadowlength(2)
		
		--morning
		morning:hidden(1)
		bg_topdown(0, morning, 'd', scx, scy)
		sky[4]:xy(0, -(sky_zm-1.4)*sh)
		
		sun[2]:xy(88, -0.3*sh)
		sun[2]:zoom(0.15)
		sun[2]:shadowlength(2)
		
		for i = 1, #cloud_m do
			local xpos = 160*(2*i-3) + rand.float(-6.4, 6.4)
			local ypos = rand.float(-0.3*sh, -0.1*sh)
			
			cloud_m[i]:xy(xpos,ypos)
			cloud_m[i]:zoom(rand.float(0.2, 0.3))
			cloud_m[i]:shadowlength(2)
		end
		
		--cloudy/windy
		cloudy:hidden(1)
		fcloudy:hidden(1)
		sky[5]:xy(0, -(sky_zm-1.4)*sh)
		
		for i = 1, #cloud_c do
			local xpos = 160*(i-2) + rand.float(-6.4, 6.4)
			local ypos = rand.float(-0.35*sh, -0.25*sh)
			
			cloud_c[i]:xy(xpos,ypos)
			cloud_c[i]:zoom(rand.float(0.2, 0.3))
			cloud_c[i]:shadowlength(2)
		end
		
		for i = 1, #wind do
			wind[i]:zoom(0.5)
			wind[i]:xy(0.4*sh/#wind*(i-2),0.3*sh/#wind*(i-2))
			wind[i]:rotationz(-30)
			--wind[i]:diffusealpha(1)
			wind[i]:hidden(1)
		end
		
		for i = 1, #leaf do
			leaf[i]:xy((i-2.5)*128 + rand.float(-0.1*scy,0.1*scy),rand.float(-0.2*sh, 0.2*sh))
			leaf[i]:zoom(0.15)
			leaf[i]:shadowlength(2)
			leaf[i]:hidden(1)
		end
		
		for i = 1, #fcloud_c do
			local xpos = 160*(i-2.5)
			local ypos = rand.float(-0.25*sh, -0.15*sh)
			
			fcloud_c[i]:xy(xpos,ypos)
			fcloud_c[i]:zoom(rand.float(0.25, 0.3))
			fcloud_c[i]:shadowlength(2)
			if i < 2 or i > 3 then
				fcloud_c[i]:hidden(1)
			end
		end
		
		for i = 1, #fleaf do
			fleaf[i]:xy((i-2)*128 + rand.float(-0.1*scy,0.1*scy),rand.float(-0.2*sh, 0.2*sh))
			fleaf[i]:zoom(0.15)
			fleaf[i]:shadowlength(3)
			fleaf[i]:hidden(1)
		end
		
		--rainy
		rainy:hidden(1)
		frainy:hidden(1)
		
		sky[6]:xy(0, -(sky_zm-1.4)*sh)
		
		rain:xy(0,0)
		rain:zoomto(sh*1.33,sh*1.33)
		rain:customtexturerect(0,0,3,3)
		rain:texcoordvelocity(0,-1)
		rain:croptop(0.3)
		rain:cropbottom(0.15)
		rain:shadowlength(3)
		rain:hidden(1)
		
		for i = 1, #raindrop do
			raindrop[i]:zoom(0.25*sh*1.33/512/3)
			raindrop[i]:shadowlength(3)
			raindrop[i]:hidden(1)
		end
		
		for i = 1, #cloud_r do
			local xpos = 160*(i-2) + rand.float(-6.4, 6.4)
			local ypos = rand.float(-0.3*sh, -0.25*sh)
			
			cloud_r[i]:xy(xpos,ypos)
			cloud_r[i]:zoom(rand.float(0.3, 0.4))
			cloud_r[i]:shadowlength(2)
		end
		
		--snowy
		snowy:hidden(1)
		fsnowy:hidden(1)
		
		sky[7]:xy(0, -(sky_zm-1.4)*sh)
		
		snow:xy(0,0)
		snow:zoomto(sh*1.33,sh*1.33)
		snow:customtexturerect(0,0,2,2)
		snow:texcoordvelocity(0,-0.5)
		snow:croptop(0.3)
		snow:cropbottom(0.15)
		snow:shadowlength(2)
		
		for i = 1, #cloud_s do
			local xpos = 160*(i-2) + rand.float(-6.4, 6.4)
			local ypos = rand.float(-0.35*sh, -0.25*sh)
			
			cloud_s[i]:xy(xpos,ypos)
			cloud_s[i]:zoom(rand.float(0.2, 0.3))
			cloud_s[i]:shadowlength(2)
		end
		
		snow_g:xy(0,scy)
		snow_g:zoomto(1.33*sh,sh)
		
		definemod{'snowyy', function(sy)
			snow_g:y(scy - (scy/100)*sy)
			snow_g:cropbottom(0.5-0.5*sy/100)
		end}
		set{0, 0, 'snowyy'}
		
		--foreground but not really FG stuff
		for i = 1, 2 do
			holder[i]:xy(scx + 200*(i*2-3), scy )
			holder[i]:zoom(0.5)
			holder[i]:rotationz(180*(i-1))
			holder[i]:shadowlength(4)
			
			local n = i
			definemod{'holderx'..n, function(hx)
				holder[n]:x(scx + 200*(n*2-3) + hx)
			end}
		end
		set{0, -200, 'holderx1', 200, 'holderx2'}
		
		P[1]:xy(scx,scy)
		P[2]:xy(scx,sh+scy)
		P[2]:rotationz(180)
		definemod{'Protz', function(rz)
			local rzr= math.rad(rz)
			P[1]:xy(scx+scy*math.sin(rzr), sh-scy*math.cos(rzr))
			P[2]:xy(scx-scy*math.sin(rzr), sh+scy*math.cos(rzr))
		
			P[1]:rotationz(rz)
			P[2]:rotationz(rz+180)
		end}
		PP[2]:hidden(1)
		
		hillframe:xy(scx,1.6*sh)
		hillframe:fov(RealFov(45))
		
		definemod{'hillrotz', function(rz)
			hillframe:rotationz(rz)
		end}
		
		hillfill:xy(0,0)
		for i = 1, #hill do
			local xpos = (1.1*sh)*(1-(i%2))*(1-2*math.floor((i-1)/2))
			local ypos = (1.1*sh)*(i%2)*(2*math.floor((i-1)/2)-1)
			hill[i]:xy(xpos, ypos)
			hill[i]:rotationz(90*(i-1))
		end
		
		local function updown_change(beat, mode)
			if mode == 'ud' then
				func{beat-2, function() PP[2]:hidden(0) end, persist=true}
				ease{beat-2, 1, inCirc, -90, 'bgrotz', -90, 'hillrotz', -90, 'Protz'}
				ease{beat-1, 4, outElastic.params(1,0.5), -180, 'bgrotz', -180, 'Protz'}
				ease{beat-1, 4, outElastic.params(1,0.75), -180, 'hillrotz'}
				func{beat-1, function() PP[1]:hidden(1) end, persist=true}
			elseif mode == 'du' then
				func{beat-2, function() PP[1]:hidden(0) end, persist=true}
				ease{beat-2, 1, inCirc, -270, 'bgrotz', -270, 'hillrotz', -270, 'Protz'}
				ease{beat-1, 4, outElastic.params(1,0.5), -360, 'bgrotz', -360, 'Protz'}
				ease{beat-1, 4, outElastic.params(1,0.75), -360, 'hillrotz'}
				set{beat+3, 0, 'bgrotz', 0, 'hillrotz', 0, 'Protz'}
				func{beat-1, function() PP[2]:hidden(1) end, persist=true}
			end
		end
		
		um:hidden(1)
		um:zoom(0.35)
		um:shadowlength(3)
		definemod{'umx', 'umy', 'umrotz', function(ux,uy,urz)
			um:x(scx + ux)
			um:y(scy + uy)
			um:rotationz(urz)
		end}
		set{0, 0, 'umx', scy, 'umy', 0, 'umrotz'}
		
		fence:xy(scx,0.925*sh)
		fence:zoomx(0.3*12)
		fence:zoomy(0.3)
		fence:customtexturerect(0,0,12,1)
		fence:shadowlength(4)
		
		curtain[1]:zoom(1)
		curtain[1]:xy(0.9*scx,0.9*scy)
		
		curtain[2]:zoom(1)
		curtain[2]:xy(1.11*scx,0.9*scy)
		curtain[2]:rotationy(180)
		
		--lights!!!
		lightoff:xywh(scx,scy,sw,sh)
		lightoff:diffuse(0,0,0,0.9)
		
		definemod{'lightdark', function(alp)
			lightoff:diffusealpha(1-alp/100)
		end}
		
		maskback:xywh(scx,scy,sw,sh)
		maskback:clearzbuffer(1)
		maskback:blend('noeffect')
		maskback:hidden(1)
		
		lightframe:xy(scx,scy)
		
		for i = 1, #light do
			light[i]:zwrite(1)
			light[i]:blend('noeffect')
			
			local n = i
			definemod{'lightx'..n, 'lighty'..n, 'lightzoom'..n, function(xn,yn,zmn)
				light[n]:xy(xn,yn)
				light[n]:zoom(zmn/100)
			end}
		end
		set{0, 10, 'lightdark', -200, 'lightx2', 200, 'lightx3', 30, 'lightzoom1', 15, 'lightzoom2', 15, 'lightzoom3'}
		
		aftsprite:SetTexture(aft:GetTexture())
		aftsprite:ztestmode('writeonfail')
		
		--file finally begins here
		
		--mooooooods
		set{0, 1200, 'movey', 25, 'mini', 20, 'brake'}
		ease{8, 8, outQuad, 0, 'movey'}
		
		definemod{'alternate2', function(a)
			local r0, r1, r2, r3 = 0, a, 0, a
			if a < 0 then
				r0, r1, r2, r3 = -a, 0, -a, 0
			end
			return r0, r1, r2, r3
		end, 'reverse0', 'reverse1', 'reverse2', 'reverse3'}
		
		local fluct = 1
		for i = 8, 31 do
			ease{i-0.5, 1, inOutSine, 10*fluct, 'alternate2'}
			fluct = fluct * -1
		end
		ease{32-0.5, 1, outSine, 0, 'alternate2'}
		
		local fluct = 1
		for i = 8, 28, 4 do
			mod_outin(i, 4, outSine, inSine, 0, 10*fluct, 'rotationz')
			fluct = fluct * -1
		end
		
		local fluct = 1
		for i = 16, 24, 2 do
			mod_outin(i, 2, outCubic, inCubic, 0, 30*fluct, 'rotationy')
			fluct = fluct * -1
		end
		
		local fluct = 1
		for i = 24, 30, 2 do
			mod_outin(i, 2, outCubic, inCubic, 0, 75*fluct, 'drunk')
			mod_outin(i, 2, outCubic, inCubic, 0, 25*fluct, 'rotationx')
			fluct = fluct * -1
		end
		
		--bg stuff
		for i = 1, #light do
			set{0, -sh, 'lighty'..i}
		end
		ease{8, 8, outQuad, 0, 'lighty1'}
		ease{16, 8, outQuad, 0, 'lighty2', 0, 'lighty3', 0, 'holderx1', 0, 'holderx2'}
		
		ease{28, 2, outCubic, 0, 'lightzoom1', 0, 'lightzoom2', 0, 'lightzoom3'}
		ease{28, 4, outQuad, 100, 'lightdark'}
		
		updown_change(30, 'ud')
		
		func{32, function()
			aft:hidden(1)
			aftsprite:hidden(1)
			lightframe:hidden(1)
		end, persist=true}
		
		func{34, function()
			night:hidden(1)
			evening:hidden(0)
		end, persist=true}
		
	--2. Lights on
		local fluct = 1
		for i = 32, 59 do
			mod_hit(i, 1, outCirc, -100, 'boost')
			ease{i-0.5, 1, inOutSine, 10*fluct, 'alternate2'}
			fluct = fluct * -1
		end
		ease{60-0.5, 1, outSine, 0, 'alternate2'}
		
		local fluct = 1
		for i = 32, 56, 4 do
			mod_outin(i, 4, outSine, inSine, 0, 10*fluct, 'rotationz')
			fluct = fluct * -1
		end
		
		local fluct = 1
		for i = 32, 58, 2 do
			mod_outin(i, 2, outCubic, inCubic, 0, 30*fluct, 'rotationy')
			mod_outin(i, 2, outCubic, inCubic, 0, 75*fluct, 'drunkz')
			fluct = fluct * -1
		end
		
		for i = 33, 59, 2 do
			mod_hit(i, 1, outCubic, -140, 'tiny')
		end
		
		set{43, 200, 'bumpyxperiod'}
		ease{43, 4./3., inOutCubic, 30, 'rotationx', 100, 'bumpyx', -20, 'skewx', -25, 'skewy', -100, 'tinyx'}
		ease{43 + 4./3., 4./3., inOutCubic, 0, 'bumpyx', 0, 'skewx', 0, 'skewy', 0, 'tinyx'}
		
		ease{47, 4./3., inOutCubic, -30, 'rotationx', -100, 'bumpyx', 20, 'skewx', 25, 'skewy', -100, 'tinyx'}
		ease{47 + 4./3., 4./3., inOutCubic, 0, 'rotationx', 0, 'bumpyx', 0, 'skewx', 0, 'skewy', 0, 'tinyx'}
		
		ease{51, 4./3., inOutCubic, 30, 'rotationx'}
		ease{52.5, 1, inOutCubic, -20, 'rotationx'}
		ease{56.5, 1, inOutCubic, 20, 'rotationx'}
		ease{59.5, 1, inOutCubic, 0, 'rotationx'}
		
		updown_change(60, 'du') --day -> evening
		bg_topdown(63, night, 'd', scx, scy)
		func{63, function()
			night:hidden(0)
			day:hidden(1)
		end, persist=true}
		
		updown_change(68, 'ud') --evening -> night
		bg_topdown(71, morning, 'u', scx, scy)
		func{71, function()
			morning:hidden(0)
			evening:hidden(1)
		end, persist=true}
		
		updown_change(76, 'du') --night -> morning
		bg_topdown(79, day, 'd', scx, scy)
		func{79, function()
			day:hidden(0)
			night:hidden(1)
		end, persist=true}
		
		set{60, 50, 'drawsize'}
		local fluct = 1
		for i = 60, 74, 2 do
			if i < 74 then
				add{i, 2, outCubic, 100/7, 'reverse'}
				ease{i, 2, outCubic, 45*fluct*outQuad((i-58)/14), 'rotationy'}
			end
			mod_hit(i, 2, outCubic, -1500, 'tinyz')
			mod_hit(i, 2, outCubic, -200, 'tiny')
			mod_hit(i, 2, outCubic, 314*fluct, 'confusionzoffset')
			mod_hit(i, 2, outCubic, 100*fluct, 'noteskewx')
			fluct = fluct * -1
		end
		
		local fluct = 1
		for i = 68, 75 do
			ease{i-0.5, 1, inOutCirc, -25*fluct*outQuad((i-67)/8), 'flip'}
			mod_outin(i-0.5, 1, outCubic, inCubic, 0, -80*outQuad((i-67)/8), 'tinyx')
			fluct = fluct * -1
		end
		ease{75.5, 1, inOutCirc, 0, 'flip'}
		
		ease{74, 2, outCubic, 0, 'reverse', 0, 'rotationy'}
		set{76, 0, 'drawsize'}
		
	--3. Finally made it into the singing part
		--calm part
		func{72, function()
			aft:hidden(0)
			aftsprite:hidden(0)
			
			lightframe:hidden(0)
		end, persist=true}
		ease{72, 4, inCubic, 10, 'lightdark'}
		ease{74, 4, inOutCubic, 25, 'lightzoom1'}
		
		local arpdata =
		{
			{76.000,3,1},
			{77.000,1,1},
			{78.000,2,1},
			{79.000,0,1},
			{80.000,3,1},
			{81.000,2,1},
			{82.000,1,1},
			{83.000,0,1},
			{84.000,3,1},
			{85.000,0,1},
			{86.000,2,1},
			{87.000,1,1},
			{88.000,2,1},
			{89.000,0,1},
			{90.000,3,1},
			{91.000,2,1},
		}
		
		for i,v in ipairs(arpdata) do
			local beat = v[1]
			local col = v[2]
			local fluct = 1-2*(i%2)
			
			mod_hit(beat, 2, outQuad, -100, 'tiny'..col)
			mod_hit(beat, 2, outQuad, -25*fluct, 'noteskewx'..col)
		end
		
		set{72, -50, 'drunkperiod', 100, 'drunkspacing'}
		ease{74, 4, inOutQuad, 50, 'drunk', 50, 'drunkz'}
		ease{88, 4, inQuad, 0, 'drunk', 0, 'drunkz'}
		
		ease{76, 8, outQuad, 50, 'brake'}
		
		local fluct = 1
		for i = 76, 84, 8 do
			ease{i  , 4, outSine, -50*fluct, 'movex', -48*fluct, 'lightx1'}
			ease{i+4, 4, inSine,          0, 'movex',         0, 'lightx1'}
			
			mod_outin(i, 8, outSine, inSine, 0, 64*fluct, 'lighty1')
			fluct = fluct * -1
		end
		
		ease{92, 8, inOutQuad, 100, 'lightdark'}
		ease{92, 4, outQuad, 0, 'lightzoom1'}
		func{100, function()
			aft:hidden(1)
			aftsprite:hidden(1)
			lightframe:hidden(1)
		end, persist=true}
		
		local fluct = 1
		for i = 92, 104, 4 do
			ease{i-2, 4, inOutCubic, 10*fluct, 'rotationz'}
			ease{i-2, 4, inOutCubic, 150*fluct, 'drunk'}
			fluct = fluct * -1
		end
		
		ease{106, 2, inOutCirc, 0, 'rotationx', 0, 'rotationz', 0, 'drunk', 0, 'brake'}
		set{106, -16, 'drawsize'} --pain
		
		--useless umbrella
		func{92, function() um:hidden(0) end, persist=true}
		ease{92, 8, outCubic, 48, 'umy', 30, 'umrotz'}
		
		--mod_outin(100, 4, inQuad, outQuad, 0, -24, 'umx')
		ease{100, 4, inQuad, -20, 'umrotz', -48, 'umx'}
		
		ease{104, 4, linear, 1.5*scx, 'umx'}
		ease{104, 4, linear,  1.5*sh, 'umy'}
		ease{104, 4, outQuad, scy, 'umy'}
		ease{104, 4, outQuad, 180, 'umrotz'}
		
		updown_change(108, 'ud')
		bg_topdown(111, cloudy, 'u', scx, scy)
		bg_topdown(111, fcloudy, 'u', scx, scy)
		func{111, function()
			morning:hidden(1)
			cloudy:hidden(0)
			fcloudy:hidden(0)
		end, persist=true}
		bg_topdown()
		
		set{111, 0, 'drawsize'}
		
		--not calm part
		
		local fluct = 1
		for i = 108, 139 do
			mod_hit(i, 1, outCirc, -100, 'boost')
			ease{i-0.5, 1, inOutSine, 10*fluct, 'alternate2'}
			fluct = fluct * -1
		end
		ease{140-0.5, 1, outSine, 0, 'alternate2'}
		
		local fluct = 1
		for i = 108, 136, 4 do
			mod_outin(i, 4, outSine, inSine, 0, 10*fluct, 'rotationz')
			fluct = fluct * -1
		end
		
		local fluct = 1
		for i = 108, 138, 2 do
			if i ~= 120 then
				mod_outin(i, 2, outCubic, inCubic, 0, 30*fluct, 'rotationy')
			end
			mod_outin(i, 2, outCubic, inCubic, 0, 75*fluct, 'drunkz')
			fluct = fluct * -1
		end
		
		ease{118, 1, inOutQuad, -20, 'rotationx'}
		ease{119.5, 1, outQuad, 100, 'bumpyx', 20, 'rotationx', 50, 'noteskewx'}
		ease{120.5, 1, inQuad, 0, 'bumpyx', 0, 'rotationx', 0, 'noteskewx'}
		
		ease{131, 2, inOutCubic, 50, 'skewx', -50, 'noteskewx', 30, 'rotationx'}
		ease{133, 2, inOutCubic, 0, 'skewx', 0, 'noteskewx', 0, 'rotationx'}
		ease{135, 2, inOutCubic, -50, 'skewx', 50, 'noteskewx', 30, 'rotationx'}
		ease{137, 2, inOutCubic, 0, 'skewx', 0, 'noteskewx', 0, 'rotationx', 100, 'flip'}
		mod_outin(137, 2, outCubic, inCubic, 0, -100, 'tinyx')
		mod_outin(137, 2, outCubic, inCubic, 0, 100, 'tipsy')
		ease{139, 2, inOutCubic, 0, 'flip', 0, 'tipsy'}
		mod_outin(139, 2, outCubic, inCubic, 0, -100, 'tinyx')
		
		ease{139, 2, inOutCubic, 100, 'reverse', 80, 'lightdark'}
		updown_change(141, 'du') --day -> cloudy
		bg_topdown(144, rainy, 'd', scx, scy)
		bg_topdown(144, frainy, 'd', scx, scy)
		func{144, function()
			day:hidden(1)
			rainy:hidden(0)
			frainy:hidden(0)
			
			for i = 1, #raindrop do
				raindrop[i]:hidden(0)
			end
			
		end, persist=true}
		
		--random:)
		local function modulo(a, b)
			return a - math.floor(a/b)*b;
		end
		
		local function randomXD(t)
			if t == 0 then return 0.5 else
			return modulo(math.sin(t * 3229.3) * 43758.5453, 1) end
		end
		
		func{144, 20, function(beat)
			for i = 1, #raindrop do
				local xpos = 1.6*scx/(#raindrop-1)*(i-1) - 0.8*scx + (20*randomXD(i)-10)
				--local ypos = rand.float(-0.35*sh, 1.25*scy)
				local ypos = (0.95*scy + 0.35*sh)*randomXD(i*69)-0.35*sh + 0.5*scx*beat
				while ypos > 0.95*scy do
					ypos = ypos - (0.95*scy+0.35*sh)
				end
				raindrop[i]:x(xpos)
				raindrop[i]:y(ypos)
			end
		end}
		
		--another jumps
		
		local urlu =
		{
			{148.000,2,1},
			{149.000,2,1},
			{150.000,3,1},
			{151.000,3,1},
			{152.000,0,1},
			{153.000,0,1},
			{154.000,2,1},
			{155.000,2,1},
		}
		
		for i,v in ipairs(urlu) do
			local beat = v[1]
			local col = v[2]
			local fluct = 1-2*(i%2)
			
			mod_hit(beat, 2, outQuad, -100, 'tiny'..col)
			mod_hit(beat, 2, outQuad, -25*fluct, 'noteskewx'..col)
		end
		
		for i = 140, 155 do
			mod_hit(i, 1, outCubic, -50, 'tiny')
		end
		
		local fluct = 1
		for i = 148, 154, 2 do
			mod_outin(i, 2, outCubic, inCubic, 0, 25*fluct, 'invert')
			mod_outin(i, 2, outCubic, inCubic, 0, 10*fluct, 'alternate2')
			mod_outin(i-1, 2, inCubic, outCubic, 0, -50, 'tinyx')
			fluct = fluct * -1
		end
		
		ease{154, 2, inOutCubic, 60, 'lightdark'}
		set{156, 100, 'drawsize'}
		local fluct = 1
		for i = 156, 170, 2 do
			if i < 170 then
				add{i, 2, outCubic, -100/7, 'reverse'}
				ease{i, 2, outCubic, 45*fluct*outQuad((i-154)/16), 'rotationy'}
			end
			mod_hit(i, 2, outCubic, -1500, 'tinyz')
			mod_hit(i, 2, outCubic, -200, 'tiny')
			mod_hit(i, 2, outCubic, 314*fluct, 'confusionzoffset')
			mod_hit(i, 2, outCubic, 100*fluct, 'noteskewx')
			fluct = fluct * -1
		end
		ease{170, 2, outCubic, 0, 'rotationy'}
		set{168, -15, 'drawsize', plr = 2} --pain
		set{172, 0, 'drawsize'}
		
		
		--windy mod
		--ease{162, 8, outCubic, -20, 'skewx', 20, 'noteskewx', 100, 'drunkz', 200, 'drunkzspacing', plr = 1}
		set{162, -35, 'skewx', 35, 'noteskewx', 100, 'drunkz', 200, 'drunkzspacing', plr = 1}
		set{172, 0, 'skewx', 0, 'noteskewx', 0, 'drunkz', 0, 'drunkzspacing', plr = 1}
		ease{172, 2, outQuad, 20 ,'brake'}
		
		local fluct = 1
		for i = 164, 170 do
			ease{i-0.5, 1, inOutCirc, -25*fluct*outQuad((i-163)/8), 'flip'}
			mod_outin(i-0.5, 1, outCubic, inCubic, 0, -80*outQuad((i-163)/8), 'tinyx')
			fluct = fluct * -1
		end
		ease{170.5, 1, inOutCirc, 0, 'flip'}
		
		updown_change(156, 'ud') --cloudy -> rainy
		func{159, function()
			for i = 1, #fcloud_c do
				fcloud_c[i]:hidden(1)
			end
			
			for i = 1, #wind do
				wind[i]:hidden(0)
			end
			
			leaf[1]:hidden(0)
			leaf[2]:hidden(0)
			fleaf[1]:hidden(0)
			fleaf[2]:hidden(0)
		end, persist=true}
		func{159, 13, function(beat)
			for i = 1, #wind do
				local b = ((beat-159+i)/4 - math.floor((beat-159+i)/4))
				local lfade , rfade = 2*(1-b), 2*b
				wind[i]:fadeleft(lfade)
				wind[i]:faderight(rfade)
			end
			
			for i = 1, 4 do
				local xpos = 1.33*sh/8*(5-2*i) + 0.25*scy*(2.*randomXD(926*i)-1) - 1.33*sh*beat/8
				while xpos < -1.33*scx do
					xpos = xpos + 1.33*(1.33*sh)
				end
				
				local ypos = sh/8*(5-2*i)  + 0.15*scy*(2.*randomXD(96*i)-1) + sh*beat/8
				while ypos > scy do
					ypos = ypos - sh
				end
				
				if i % 2 == 1  then
					leaf[(i+1)/2]:xy(xpos,ypos)
				else
					fleaf[i/2]:xy(xpos,ypos)
				end
			end
		end}
		
		updown_change(164, 'du') --rainy -> windy (= cloudy)
		func{167, function()
			rainy:hidden(1)
			frainy:hidden(1)
			day:hidden(0)
		end, persist=true}
		
		ease{162, 2, inOutCubic, 80, 'lightdark'}
		ease{170, 2, inOutCubic, 100, 'lightdark'}
		updown_change(172, 'ud') --windy -> sunny
		func{175, function()
			for i = 1, #wind do
				wind[i]:hidden(1)
			end
			for i = 1, 2 do
				leaf[i]:hidden(1)
				fleaf[i]:hidden(1)
			end

			for i = 1, #cloud_c do
				cloud_c[i]:hidden(1)
			end
			
			for i = 1, #fcloud_c do
				fcloud_c[i]:hidden(0)
				fcloud_c[i]:zoom(rand.float(0.3,0.35))
			end
			fcloud_c[1]:xy(-140, -0.26*sh)
			fcloud_c[2]:xy(   0, -0.25*sh)
			fcloud_c[3]:xy( 150, -0.23*sh)
			fcloud_c[4]:xy( -80,  -0.42*sh)
			fcloud_c[5]:xy(  80,  -0.38*sh)
		end, persist=true}
		
	--4. Weather Time
	
		--right before the hook
		ease{170, 4, inOutQuad, -80, 'movex'}
		mod_outin(170, 4, inOutQuad, inOutQuad, 0, -20, 'rotationz')
		mod_outin(170, 4, inOutQuad, inOutQuad, 0, -30, 'rotationy')
		
		ease{174, 4, inOutQuad,  80, 'movex'}
		mod_outin(174, 4, inOutQuad, inOutQuad, 0,  20, 'rotationz')
		mod_outin(174, 4, inOutQuad, inOutQuad, 0,  30, 'rotationy')
		
		ease{178, 4, inOutQuad, 0, 'movex'}
		mod_outin(178, 4, inOutQuad, inOutQuad, 0, -10, 'rotationz')
		mod_outin(178, 4, inOutQuad, inOutQuad, 0,  -15, 'rotationy')
		
		ease{186, 4, inOutQuad, -80, 'movex'}
		mod_outin(186, 4, inOutQuad, inOutQuad, 0, -20, 'rotationz')
		mod_outin(186, 4, inOutQuad, inOutQuad, 0, -20, 'rotationy')
		
		ease{190, 4, inOutQuad,  80, 'movex'}
		mod_outin(190, 4, inOutQuad, inOutQuad, 0,  20, 'rotationz')
		mod_outin(190, 4, inOutQuad, inOutQuad, 0,  20, 'rotationy')
		
		ease{194, 4, inOutQuad, 0, 'movex'}
		mod_outin(194, 4, inOutQuad, inOutQuad, 0, -10, 'rotationz')
		mod_outin(194, 4, inOutQuad, inOutQuad, 0, -10, 'rotationy')
		
		local fluct = 1
		for i = 172, 203 do
			mod_hit(i, 1, outCirc, -50, 'boost')
			fluct = fluct * -1
		end
		ease{204-0.5, 1, outSine, 0, 'tipsy'}
		
		set{172, 300, 'bumpyzperiod'}
		local fluct = 1
		for i = 172, 200, 4 do
			mod_outin(i, 2, outSine, inSine, 0, 50*fluct, 'bumpyz')
			fluct = fluct * -1
		end
		
		local fluct = 1
		for i = 172, 202, 2 do
			mod_outin(i, 2, outCubic, inCubic, 0, 75*fluct, 'drunkz')
			mod_outin(i, 2, outCubic, inCubic, 0, -50*fluct, 'drunk')
			ease{i-1, 2, inOutSine, 50*fluct, 'tipsy'}
			fluct = fluct * -1
		end
		ease{203, 2, inOutSine, 0, 'tipsy'}
		
		for i = 173, 203, 2 do
			mod_hit(i, 1, outCubic, -140, 'tiny')
		end
		
		ease{181, 2, inOutCubic, 30, 'skewx', -30, 'noteskewx', 30, 'rotationx'}
		ease{183, 2, inOutCubic, -30, 'skewx', 30, 'noteskewx'}
		ease{185, 2, inOutCubic, 0, 'skewx', 0, 'noteskewx', 0, 'rotationx'}
		
		ease{184, 2, inOutCubic, 80, 'lightdark'}
		ease{184, 2, inOutCubic, 100, 'reverse0', 100, 'reverse1', 100, 'reverse2', 100, 'reverse3'}
		mod_outin(184, 2, inOutCubic, inOutCubic, 0, -100, 'tinyy')
		
		updown_change(186, 'du') -- sunny -> cloudy
		func{189, function()
			day:hidden(1)
			rainy:hidden(0)
			frainy:hidden(0)
			
			for i = 1, #raindrop do
				raindrop[i]:hidden(1)
			end
			rain:hidden(0)
		end, persist=true}
		
		local fluct = 1
		for i = 205, 206 do
			mod_hit(i, 1, outQuad, -200, 'tiny')
			mod_hit(i, 1, outQuad, -1500, 'tinyz')
			ease{i, 1, outQuad, 50*(1+fluct), 'invert'}
			mod_outin(i, 1, outCubic, inCubic, 0, 100*fluct, 'drunkz')
			fluct = fluct * -1
		end
		
		local fluct = 1
		for i = 208, 210, 2 do
			mod_hit(i, 1, outQuad, -200, 'tiny')
			mod_outin(i, 2, inOutCubic, inOutCubic, 0, 50*fluct, 'drunkz')
			fluct = fluct * -1
		end
		
		for c = 0, 3 do
			ease{200-0.5+c, 1, inOutCubic, 100, 'movez'..c, 80, 'reverse'..c}
			ease{204-0.5, 1, inOutCubic, 0, 'movez'..c, 100, 'reverse'..c}
		end
		
		ease{207, 2, inOutCubic, 0, 'reverse0', 0, 'reverse3'}
		mod_outin(207, 2, inOutCubic, inOutCubic, 0, -75, 'tinyy0')
		mod_outin(207, 2, inOutCubic, inOutCubic, 0, -75, 'tinyy3')
		
		ease{209, 2, inOutCubic, 0, 'reverse1', 0, 'reverse2'}
		mod_outin(209, 2, inOutCubic, inOutCubic, 0, -75, 'tinyy1')
		mod_outin(209, 2, inOutCubic, inOutCubic, 0, -75, 'tinyy2')
		
		ease{210, 2, outCubic, 0, 'brake', 60, 'lightdark'}
		updown_change(212, 'ud') -- cloudy -> rainy
		func{215, function()
			for i = 1, #cloud_c do
				local xpos = 160*(i-2) + rand.float(-10, 10)
				local ypos = rand.float(-0.35*sh, -0.25*sh)
				
				cloud_c[i]:xy(xpos,ypos)
				cloud_c[i]:zoom(rand.float(0.2, 0.3))
				cloud_c[i]:hidden(0)
			end
		
			for i = 1, #fcloud_c do
				fcloud_c[i]:hidden(1)
			end
			
			for i = 1, #wind do
				wind[i]:hidden(0)
			end

			for i = 1, #leaf do
				leaf[i]:hidden(0)
				fleaf[i]:hidden(0)
			end
		end, persist=true}
		
		func{215, 61, function(beat)
			for i = 1, #wind do
				local b = 2*((beat-215+i)/4 - math.floor((beat-215+i)/4))
				local lfade , rfade = (2 - b)/4, b/2
				wind[i]:fadeleft(lfade)
				wind[i]:faderight(rfade)
			end
			
			for i = 1, 8 do
				local xpos = 1.33*sh/8*(5-2*i) + 0.25*scy*(2.*randomXD(9226*i)-1) - 1.33*sh*beat/6
				while xpos < -1.33*scx do
					xpos = xpos + 1.33*(1.33*sh)
				end
				
				local ypos = sh/8*(5-2*i)  + 0.15*scy*(2.*randomXD(961*i)-1) + sh*beat/6
				while ypos > scy do
					ypos = ypos - sh
				end
				
				if i % 2 == 1  then
					leaf[(i+1)/2]:xy(xpos,ypos)
				else
					fleaf[i/2]:xy(xpos,ypos)
				end
			end
		end}
		
		--hook
		local fluct = 1
		for i = 212, 275 do
			mod_hit(i, 1, outCirc, -100, 'boost')
			ease{i-0.5, 1, inOutSine, 10*fluct, 'alternate2'}
			fluct = fluct * -1
		end
		ease{276-0.5, 1, outSine, 0, 'alternate2'}
		
		local fluct = 1
		for i = 212, 272, 4 do
			mod_outin(i, 4, outSine, inSine, 0, 10*fluct, 'rotationz')
			fluct = fluct * -1
		end
		
		local fluct = 1
		for i = 212, 274, 2 do
			mod_outin(i, 2, outCubic, inCubic, 0, 30*fluct, 'rotationy')
			mod_outin(i, 2, outCubic, inCubic, 0, 75*fluct, 'drunkz', 2)
			fluct = fluct * -1
		end
		
		for i = 213, 275, 2 do
			mod_hit(i, 1, outCubic, -140, 'tiny')
		end
		
		add{228.667, 2, inOutCubic, 628, 'confusionzoffset'}
		add{232.667, 2, inOutCubic, -628, 'confusionzoffset'}
		
		--windy mod 2
		set{243, -40, 'skewx', 20, 'noteskewx', 100, 'drunkz', 200, 'drunkzspacing', plr = 1}
		set{279, 0, 'skewx', 0, 'noteskewx', 0, 'drunkz', 0, 'drunkzspacing', plr = 1}
		
		ease{242, 2, inOutCubic, 80, 'lightdark'}
		updown_change(244, 'du') -- rainy -> windy
		
		bg_topdown(247, snowy, 'd', scx, scy)
		bg_topdown(247, fsnowy, 'd', scx, scy)
		func{247, function()
			rainy:hidden(1)
			frainy:hidden(1)
			snowy:hidden(0)
			fsnowy:hidden(0)
		end, persist=true}
		
		updown_change(276, 'ud') -- windy -> snowy
		ease{274, 2, inOutCubic, 90, 'lightdark'}
		
		bg_topdown(279, night, 'u', scx, scy)
		func{279, function()
			cloudy:hidden(1)
			fcloudy:hidden(1)
			night:hidden(0)	
		end, persist=true}
		
		ease{274, 30, outSine, 75, 'snowyy', 75, 'brake'}
		
		for i = 276, 280, 4 do
			mod_hit(i, 2, outCubic, -200, 'tiny')
		end
		mod_hit(275, 1, outCubic, -100, 'tiny')
		mod_hit(279, 1, outCubic, -100, 'tiny')
		
		ease{275.5, 1, inOutCubic, 100, 'invert'}
		ease{279.5, 1, inOutCubic, 0, 'invert', 100, 'flip'}
		ease{283, 2, inOutCubic, 0, 'flip'}
		
		
		mod_outin(275.5, 1, inOutCubic, inOutCubic, 0, -50, 'tinyx')
		mod_outin(279.5, 1, inOutCubic, inOutCubic, 0, -50, 'tinyx')
		mod_outin(283, 2, inOutCubic, inOutCubic, 0, -50, 'tinyx')
		
		local fluct = 1
		for i = 284, 290, 2 do
			ease{i-1, 2, inOutCubic, 150*fluct, 'drunk', 20*fluct, 'rotationy'}
			fluct = fluct * -1
		end
		
		local fluct = 1
		for i = 284, 288, 4 do
			ease{i-2, 4, inOutCubic, 20*fluct, 'rotationx'}
			fluct = fluct * -1
		end
		ease{291, 2, inOutCubic, 0, 'drunk', 0, 'rotationy'}
		
		mod_hit(292, 1.667, outCubic, -150, 'tiny')
		mod_hit(292, 1.667, outCubic, -1500, 'tinyz')
		ease{292-0.833, 1.667, inOutCirc, -10, 'rotationz', 30, 'rotationx', -75, 'drunkz'}
		mod_hit(292, 1.667, outQuad, -150, 'tipsy')
		mod_hit(292, 1.667, outQuad, -75, 'noteskewx')
		
		local fluct = 1
		for i = 293.667, 297.667, 2 do
			mod_hit(i, 2, outCubic, -150, 'tiny')
			mod_hit(i, 2, outCubic, -1000, 'tinyz')
			ease{i-1, 2, inOutCirc, 10*fluct, 'rotationz', 75*fluct, 'movex', 75*fluct, 'drunkz'}
			mod_hit(i, 2, outQuad, 150*fluct, 'tipsy')
			mod_hit(i, 2, outQuad, 75*fluct, 'noteskewx')
			fluct = fluct * -1
		end
		ease{295.667-1, 2, inOutCubic, -30, 'rotationx'}
		ease{298.667, 2, inOutCubic, 0, 'rotationz', 0, 'movex', 0, 'rotationx', 0, 'drunkz', 0, 'bumpyz'}
		
		for i = 300, 302 do
			mod_hit(i, 1, outCubic, -75, 'tiny')
		end
		
		add{304, 4, outCubic, -628, 'confusionzoffset'}
		set{305, 0, 'confusionzoffset'}
		
		mod_hit(304, 2, outCubic, -150, 'tiny')
		
		for i = 305, 319 do
			mod_hit(i, 1, outCubic, -50, 'tiny')
		end
		
		ease{302, 2, inOutCubic, 100, 'lightdark'}
		updown_change(304, 'du') -- snowy -> night
		bg_topdown(306, morning, 'd', scx, scy)
		func{307, function()
			snowy:hidden(1)
			fsnowy:hidden(1)
			morning:hidden(0)
		end, persist=true}
		ease{304, 1, outCubic, 0, 'snowyy', 0, 'brake', 100, 'bumpyz', 50, 'bumpyx'}
		set{303, -10, 'drawsize', plr = 2}
		
		ease{311, 2, inOutCubic, 10, 'rotationz', 100, 'drunk'}
		ease{315, 2, inOutCubic, -10, 'rotationz', -100, 'drunk'}
		ease{317, 2, inOutCubic, 0, 'rotationz', 100, 'drunk'}
		ease{319, 1, inOutCubic, 0, 'drunk', 0, 'bumpyz', 0, 'bumpyx'}
		set{320, 0, 'drawsize'}
		
		updown_change(317, 'ud') -- night -> morning
		
		local fluct = 1
		for i = 320, 383 do
			mod_hit(i, 1, outCirc, -100, 'boost')
			ease{i-0.5, 1, inOutSine, 10*fluct, 'alternate2'}
			fluct = fluct * -1
		end
		ease{384-0.5, 1, outSine, 0, 'alternate2'}
		
		local fluct = 1
		for i = 320, 382, 2 do
			mod_outin(i, 2, outCubic, inCubic, 0, 30*fluct, 'rotationy')
			mod_outin(i, 2, outCubic, inCubic, 0, 75*fluct, 'drunkz')
			fluct = fluct * -1
		end
		
		for i = 321, 383, 2 do
			mod_hit(i, 1, outCubic, -140, 'tiny')
		end
		
		--set{320, -10, 'drawsize'}
		func{321.1, function() PP[1]:hidden(0) end, persist=true}
		ease{320, 64, linear, -720, 'hillrotz'}
		
		local stage = {morning, day, evening, night}
		for i = 320, 376, 8 do
			add{i  , 4, inCirc, -90, 'bgrotz', -90, 'hillrotz'}
			add{i+4, 4, outElastic.params(1,1), -90, 'bgrotz', -90, 'hillrotz'}
			
			local mode = 'u'; if i % 16 == 8 then mode = 'd' end
			local st_prev = ((i/8+3) % 4) + 1
			local st_next = ((i/8+1) % 4) + 1
			bg_topdown(i, stage[st_next], mode, scx, scy)
			func{i, function()
				stage[st_prev]:hidden(1)
				stage[st_next]:hidden(0)
			end, persist=true}
		end
		
		func{320, 64, function(beat)
			for i = 1, #PP do
				local b = beat - 320
				local alen = 2*90
				local a = alen*(1-0.5*i) + (720/64)*b
				local a2 = alen * ( (0.5-a/alen) - math.floor(0.5-a/alen) ) - 0.5*alen
				local ar = math.rad(a2)
				
				P[i]:xy(scx+scy*math.sin(ar), sh-scy*math.cos(ar))
				P[i]:rotationz(a2)
			end
		end}
		
		func{382, function()
			aft:hidden(0)
			aftsprite:hidden(0)
			lightframe:hidden(0)
		end, persist=true}
		
		func{384, function() PP[1]:hidden(1) end, persist=true}
		ease{384, 0, instant, -200, 'tiny'}
		ease{384, 40, outQuad,  200, 'tiny'}
		
		set{382, 0, 'lighty1', 0, 'lightzoom1'}
		ease{382, 40, inOutCubic, 5, 'lightdark'}
		
		ease{384, 40, inOutSine, sh, 'lighty1', 100*sh/64, 'movey'}
		func{420, function() PP[2]:hidden(1) end, persist=true}
		
		if tonumber(GAMESTATE:GetVersionDate()) <= 20210711 then
			GAMESTATE:SetSongEndTime(120.007 * GAMESTATE:GetMusicRate())
		else
			GAMESTATE:SetSongEndTime(120.007)
		end
end)"
Type = "ActorFrame"
><children>
	<Layer Type = "ActorFrame" Name = "bgframe"><children>
		<Layer Type = "ActorFrame" Name = "night"><children>
			<Layer File = "sky1.png" Name = "sky[1]"/>
			<Layer File = "stargrid.png" Name = "stargrid"/>
			<Layer File = "moon.png" Name = "moon[1]"/>
			<Layer File = "star.png" Name = "star_n[1]"/>
			<Layer File = "star.png" Name = "star_n[2]"/>
			<Layer File = "star.png" Name = "star_n[3]"/>
			<Layer File = "star.png" Name = "star_n[4]"/>
			<Layer File = "star.png" Name = "star_n[5]"/>
			<Layer File = "star.png" Name = "star_n[6]"/>
		</children></Layer>
		
		<Layer Type = "ActorFrame" Name = "day"><children>
			<Layer File = "sky2.png" Name = "sky[2]"/>
			<Layer File = "sun.png" Name = "sun[1]"/>
			<Layer File = "cloud1.png" Name = "cloud_d[1]"/>
			<Layer File = "cloud2.png" Name = "cloud_d[2]"/>
		</children></Layer>
		
		<Layer Type = "ActorFrame" Name = "evening"><children>
			<Layer File = "sky3.png" Name = "sky[3]"/>
			<Layer File = "moon.png" Name = "moon[2]"/>
			<Layer File = "star.png" Name = "star_e[1]"/>
			<Layer File = "star.png" Name = "star_e[2]"/>
			<Layer File = "star.png" Name = "star_e[3]"/>
			<Layer File = "cloud3.png" Name = "cloud_e"/>
		</children></Layer>
		
		<Layer Type = "ActorFrame" Name = "morning"><children>
			<Layer File = "sky4.png" Name = "sky[4]"/>
			<Layer File = "sun.png" Name = "sun[2]"/>
			<Layer File = "cloud3.png" Name = "cloud_m[1]"/>
			<Layer File = "cloud1.png" Name = "cloud_m[2]"/>
		</children></Layer>
		
		<Layer Type = "ActorFrame" Name = "cloudy"><children>
			<Layer File = "sky5.png" Name = "sky[5]"/>
			<Layer File = "cloud1.png" Name = "cloud_c[1]"/>
			<Layer File = "cloud2.png" Name = "cloud_c[2]"/>
			<Layer File = "cloud3.png" Name = "cloud_c[3]"/>
			<Layer File = "wind.png" Name = "wind[1]"/>
			<Layer File = "wind.png" Name = "wind[2]"/>
			<Layer File = "wind.png" Name = "wind[3]"/>
			<Layer File = "leaf1.png" Name= "leaf[1]"/>
			<Layer File = "leaf2.png" Name= "leaf[2]"/>
			<Layer File = "leaf3.png" Name= "leaf[3]"/>
			<Layer File = "leaf4.png" Name= "leaf[4]"/>
		</children></Layer>
		
		<Layer Type = "ActorFrame" Name = "rainy"><children>
			<Layer File = "sky6.png" Name= "sky[6]"/>
		</children></Layer>
		
		<Layer Type = "ActorFrame" Name = "snowy"><children>
			<Layer File = "sky7.png" Name= "sky[7]"/>
			<Layer File = "snow.png" Name = "snow"/>
			<Layer File = "cloud1.png" Name = "cloud_s[1]"/>
			<Layer File = "cloud2.png" Name = "cloud_s[2]"/>
			<Layer File = "cloud3.png" Name = "cloud_s[3]"/>
		</children></Layer>
	</children></Layer>
	
	<Layer File = "holder.png" Name = "holder[1]"/>
	<Layer File = "holder.png" Name = "holder[2]"/>
	<Layer Type = "ActorProxy" Name = "PC[1]"/>
	<Layer Type = "ActorProxy" Name = "PC[2]"/>
	<Layer Type = "ActorProxy" Name = "PJ[1]"/>
	<Layer Type = "ActorProxy" Name = "PJ[2]"/>
	
	<Layer Type = "ActorProxy" Name = "PP[1]"/>
	<Layer Type = "ActorProxy" Name = "PP[2]"/>
	
	<Layer File = "um.png" Name = "um"/>
	
	<Layer Type = "ActorFrame" Name = "hillframe"><children>
		<Layer File = "hill_fill.png" Name = "hillfill"/>
		<Layer File = "hill.png" Name = "hill[1]"/>
		<Layer File = "hill.png" Name = "hill[2]"/>
		<Layer File = "hill.png" Name = "hill[3]"/>
		<Layer File = "hill.png" Name = "hill[4]"/>
	</children></Layer>
	
	
	<Layer Type = "ActorFrame" Name = "fbgframe"><children>
		<Layer Type = "ActorFrame" Name = "fcloudy"><children>
			<Layer File = "cloud1.png" Name = "fcloud_c[1]"/>
			<Layer File = "cloud2.png" Name = "fcloud_c[2]"/>
			<Layer File = "cloud3.png" Name = "fcloud_c[3]"/>
			<Layer File = "cloud1.png" Name = "fcloud_c[4]"/>
			<Layer File = "cloud2.png" Name = "fcloud_c[5]"/>
			<Layer File = "leaf3.png" Name= "fleaf[1]"/>
			<Layer File = "leaf4.png" Name= "fleaf[2]"/>
			<Layer File = "leaf1.png" Name= "fleaf[3]"/>
			<Layer File = "leaf2.png" Name= "fleaf[4]"/>
		</children></Layer>
	
		<Layer Type = "ActorFrame" Name = "frainy"><children>
			<Layer File = "rain.png" Name = "rain"/>
			<Layer File = "raindrop1.png" Name = "raindrop[1]"/>
			<Layer File = "raindrop2.png" Name = "raindrop[2]"/>
			<Layer File = "raindrop3.png" Name = "raindrop[3]"/>
			<Layer File = "raindrop4.png" Name = "raindrop[4]"/>
			<Layer File = "rcloud1.png" Name = "cloud_r[1]"/>
			<Layer File = "rcloud2.png" Name = "cloud_r[2]"/>
			<Layer File = "rcloud3.png" Name = "cloud_r[3]"/>
		</children></Layer>
		
		<Layer Type = "ActorFrame" Name = "fsnowy"><children>
			<Layer File = "snow_g.png" Name = "snow_g"/>
		</children></Layer>
	</children></Layer>
	
	<Layer File = "fence.png" Name = "fence"/>
	
	<Layer File = "curtain.png" Name = "curtain[1]"/>
	<Layer File = "curtain.png" Name = "curtain[2]"/>
	
	<Layer Type = "ActorFrameTexture" InitCommand = "%xero.aft" Name = "aft"/>
	
	<Layer Type = "Quad" Name = "lightoff"/>
	<Layer Type = "Quad" Name = "maskback"/>
	<Layer Type = "ActorFrame" Name = "lightframe"><children>
		<Layer File = "spotlight.png" Name = "light[1]"/>
		<Layer File = "spotlight.png" Name = "light[2]"/>
		<Layer File = "spotlight.png" Name = "light[3]"/>
	</children></Layer>
	<Layer Type = "Sprite" InitCommand = "%xero.sprite" Name = "aftsprite"/>
	
</children></Mods>
