<ActorFrame
InitCommand="%function(self)

	nitg_version = FUCK_EXE and tonumber(GAMESTATE:GetVersionDate()) >= 20180617 --NotITG version number to check for, v3 by default
	
	if not nitg_version then
		SCREENMAN:SystemMessage('Outdated version of NotITG detected, mods will not work');
	end
	
	songName = GAMESTATE:GetCurrentSong():GetSongDir();
	gat_cur_df = 1 --i have NO IDEA WHAT I'M DOING
	gat_delayframedur = 0.5 --i have NO IDEA WHAT I'M DOING
	
	function playSound(str)
		local met = GAMESTATE:GetCurrentSong():GetSongDir();
		SOUND:PlayOnce(met..'bg/AXIS/'..str..'.ogg');
	end
	
	sw = SCREEN_WIDTH
	sh = SCREEN_HEIGHT --shortcuts
	scx = SCREEN_CENTER_X
	scy = SCREEN_CENTER_Y
	
	ray_proxyMarch = {0,0,0,0,0,0,0,0}
	
	
	function TiB(b)
		return (1/GAMESTATE:GetCurBPS()) * b --No idea how this works but it works for kaypooma so it works for me!
	end
	
	function Plr(pn)
		return _G['P'..pn]
	end
	
	function GetJud(pn)
		return _G['jud'..pn]
	end
	function GetCom(pn)
		return _G['com'..pn]
	end
	
	function mod_do(str,pn)
		if pn then
			GAMESTATE:ApplyGameCommand('mod,'..str,pn)
		else
			GAMESTATE:ApplyGameCommand('mod,'..str)
		end
	end
end"
><children><ActorFrame Condition="nitg_version"
OnCommand="%function(self)
	nvidia = false
	alphamult = 1
	if string.find(string.lower(PREFSMAN:GetPreference('LastSeenVideoDriver')), 'nvidia') or string.find(string.lower(DISPLAY:GetVendor()),'nvidia') then
		Trace('NVidia graphics driver detected.')
		Trace('AFT multiplier set to 0.9')
		nvidia = true
		alphamult = 0.9
	end
	if not string.find(string.lower(PREFSMAN:GetPreference('VideoRenderers')), 'opengl')
	or string.find(string.lower(PREFSMAN:GetPreference('VideoRenderers')), 'd3d')
	and string.find(string.lower(PREFSMAN:GetPreference('VideoRenderers')), 'opengl') 
	and string.find(string.lower(PREFSMAN:GetPreference('VideoRenderers')), 'd3d') < 
	string.find(string.lower(PREFSMAN:GetPreference('VideoRenderers')), 'opengl') then
		SCREENMAN:SystemMessage('D3D Video Renderer detected. Expect textures to fail.');
	end
end"
><children>

	<Layer
		Type="Quad"
		InitCommand="hidden,1"
		OnCommand="sleep,1000"
	/>
	
	<Layer File="modhelpers" />
	<Layer File="easing" />
	<Layer File="spellcards" />
	
	<Layer
		Type="ActorFrame"
		InitCommand="%function(self)
		
			checked = false;
			P1,P2,P3,com1,com2,jud1,jud2 = nil,nil,nil,nil,nil,nil,nil
		
			---------------------------------------------------------
			---------DOCUMENTATION-----------------------------------
			---------------------------------------------------------
			
			--function perframod_ease( beat, endBeat )
				--return true if the current beat is between 'beat' and 'endBeat'
			
			--function mod_shader(beat,key,which)
				--turn on shader key at specified beat (up to 10 keys available, defined by 'which' = 0-9
				
			--function mod_insert(beat,len,mod,len_or_end,pn)
				--insert mod into beat mods table
			--function mod_insert2(time,len,mod,len_or_end,pn)
				--insert mod into time mods table
			--function mod_ease(beat, len, start_strength, end_strength, mod, len_or_end, ease_type, pn, sustain, opt1, opt2)
				--insert mod into ease mods table
			--function mod_perframe(start, end, function(beat, deltatime))
				--insert function into perframe reader
				
			--function mod_message(beat,msg,persistent)
				--insert something into the actions table.
				--msg can also be a function. If string, a message gets broadcast at that beat
				--if 'persistent' is true, message will run even if editor starts at a beat past it
				
			--function mod_blacklist(t,n)
				--check if number n occurs in table t
				--useful for doing 'every beat EXCEPT the contents of t'
				
			--function simple_m0d(beat,strength,mult,mod)
			--function simple_m0d2(beat,strength,mult,mod,pn)
			--function simple_m0d3(beat,strength,duration,bpm,mod,pn)
				--activate mods at specific beat but also deactivate them
				
			--function mod_wiggle(beat,num,div,amt,speed,mod,pn,first)
				--alternates a mod back and forth before resetting to 0
				
			--function mod_spring(beat,strength,num,mod,pn)
				--like mod_wiggle, but springier
			
			--function mod_springt(time,strength,dur,mod,pn)
				--time-based per-frame alternating mod that decreases based on how much time is left.
					--think doorstopper
			
			--function mod_springt2(time,strength,dur,mod,pn)
				--time-based per-frame alternating mod
			
			--function mod_spring_adjustable(beat,strength,num,period,mod,pn, first)
				--it's not very good
			
			--function mod_beat(beat,strength,pn)
				--turns on beat for the beat specified, at the desired strength	
			
			--function switcheroo_add(beat,which,speed,len,pn)
				--adds a column swap at the desired beat
			--[[	switcheroos = {normal = {0,0}, ldur = {0,0}, reset = {0,0},
					flip = {100,0}, rudl = {100,0}, invert = {0,100}, dlru = {0,100},
					ludr = {25,-75}, rdul = {75,75}, drlu = {25,125}, ulrd = {75,-125}, urld = {100,-100}}
			]]
			
			--function mod_sugarkiller(beat,duration,speed,minstealth,maxstealth,pn)
				--portable version of the effect from sugarkill X
			
			--function mod_bounce(beat,length,start,apex,mod,ease_type,pn)
			--function func_bounce(beat,length,start,apex,function,ease_type)
				--eases out from start to apex, then eases back in from apex to start
				--ease_type should be a string, i.e. 'Quad', 'Cubic', 'Circ'
			
			
			
			--function modulo(a, b)
				--returns the remainder when a is divided by b, works properly with negatives unlike math.mod
			
			--function randomXD(t)
				--returns a pseudo-random number between 0 and 1 seeded based on the given argument
				--returns 0.5 if t is 0 (useful sometimes!)
				
			---------------------------------------------------------
			--------END DOCUMENTATION--------------------------------
			---------------------------------------------------------
			
			local linear, inQuad, outQuad, inOutQuad, outInQuad, inCubic, outCubic, inOutCubic, outInCubic, inQuart, outQuart, inOutQuart, outInQuart, inQuint, outQuint, inOutQuint, outInQuint, inSine, outSine, inOutSine, outInSine, inExpo, outExpo, inOutExpo, outInExpo, inCirc, outCirc, inOutCirc, outInCirc, inElastic, outElastic, inOutElastic, outInElastic, inBack, outBack, inOutBack, outInBack, inBounce, outBounce, inOutBounce, outInBounce, inOutTangent = ease.linear, ease.inQuad, ease.outQuad, ease.inOutQuad, ease.outInQuad, ease.inCubic, ease.outCubic, ease.inOutCubic, ease.outInCubic, ease.inQuart, ease.outQuart, ease.inOutQuart, ease.outInQuart, ease.inQuint, ease.outQuint, ease.inOutQuint, ease.outInQuint, ease.inSine, ease.outSine, ease.inOutSine, ease.outInSine, ease.inExpo, ease.outExpo, ease.inOutExpo, ease.outInExpo, ease.inCirc, ease.outCirc, ease.inOutCirc, ease.outInCirc, ease.inElastic, ease.outElastic, ease.inOutElastic, ease.outInElastic, ease.inBack, ease.outBack, ease.inOutBack, ease.outInBack, ease.inBounce, ease.outBounce, ease.inOutBounce, ease.outInBounce, ease.inOutTangent
			local modFX = 1;
			local fluct = 1;
			local me = mod_ease
			local m = mod_insert
			local mm = mod_message
			local mpf = mod_perframe
			
			init_modsp1 = '';
			init_modsp2 = '';
			
			mod_plr = {};
			
			mod_firstSeenBeat = GAMESTATE:GetSongBeat(); --necessary to prevent long freezes
			
			mod_lasttime = 0
			local driven = 174 * 2 / 60
			local drivenOffset = 100
			
---------------------------------------------------------------------------------------
----------------------Begin tables 'n stuff--------------------------------------------
---------------------------------------------------------------------------------------

			--beat based mods
			--{beat_start, beat_end, mods, len_or_end, player_number}
			mods = {
				{0,9999,'clearall,*99 1.5x,*999 dizzyholds,*-1 -500 bumpyyperiod0,*-1 -500 bumpyyperiod1,*-1 -500 bumpyyperiod2,*-1 -500 bumpyyperiod3,*-1 1000 Cover','end'},
				{0,9999,'*-1 -500 bumpyxperiod0,*-1 -500 bumpyxperiod1,*-1 -500 bumpyxperiod2,*-1 -500 bumpyxperiod3,*-1 -500 bumpyxperiod,*-1 -500 bumpyperiod,*-1 -100 spiralholds','end'},
			}
			
			
			--m(44,48,'*1 -30 centered','len')
			
			--beat-based ease mods
			--{beat_start, beat_end, mod_start, mod_end, mod/function, len_or_end, ease_type, player_number, sustainbeats, optional_param1, optional_param2}
			--valid ease types are:
				--linear
				--inQuad    outQuad    inOutQuad    outInQuad
				--inCubic   outCubic   inOutCubic   outInCubic
				--inQuart   outQuart   inOutQuart   outInQuart
				--inQuint   outQuint   inOutQuint   outInQuint
				--inSine    outSine    inOutSine    outInSine
				--inExpo    outExpo    inOutExpo    outInExpo
				--inCirc    outCirc    inOutCirc    outInCirc
				--inElastic outElastic inOutElastic outInElastic    --can take 2 optional parameters - amplitude & period
				--inBack    outBack    inOutBack    outInBack       --can take 1 optional parameter  - spring amount
				--inBounce  outBounce  inOutBounce  outInBounce
				
			mods_ease = {
				--{0,8,100,0,'dark','len',linear,nil,32},
				
			}
			
			--time based mods
			mod_time = 0;
			--{time_start, time_end, mods, len_or_end, player_number}
			mods2 = {
			}
			
			-- you can now write perframe stuff without having to scroll down!
			-- {beat_start,beat_end,function(beat,deltatime)}
			mod_perframes = {
				--SINCE MPF WANTS TO BE A **BITCH** AND NOT EXIST I GUESS I'M FORCED TO USE THIS
				{4,66,function(beat,deltatime)
					GAMESTATE:ApplyModifiers('*-1 '..200*math.sin(beat/2*math.pi)..' bumpyx',3)
				end},
				{95.5,100,function(beat,deltatime)
					GAMESTATE:ApplyModifiers('*-1 '..500*math.sin(beat*4*math.pi)..' drunk')
					GAMESTATE:ApplyModifiers('*-1 '..500*math.sin(beat*4*math.pi)..' bumpyx')
				end},
				{172,204,function(beat,deltatime)
					GAMESTATE:ApplyModifiers('*-1 '..200*math.sin(beat/2*math.pi)..' bumpyx',3)
					GAMESTATE:ApplyModifiers('*-1 '..30*math.sin(beat/2*math.pi)..' drunk',3)
					GAMESTATE:ApplyModifiers('*-1 '..100*math.sin(beat/2*math.pi)..' movex',3)
				end},
			}
			
			--this is both a message broadcaster and a function runner
			--if you put {beat,'String'}, then 'String' is broadcast as a message on that beat
			--if you put {beat,function() somecode end}, then function() is run at that beat
			--see example on beat 0
			
			curaction = 1;
			--{beat,thing,persists}
			mod_actions = {
			
				{3.9,function()
				
					local P1 = SCREENMAN:GetTopScreen():GetChild('PlayerP1')
					local P2 = SCREENMAN:GetTopScreen():GetChild('PlayerP2')
					if P1 then
						P1:GetChild('Judgment'):hidden(1)
						P1:GetChild('Combo'):hidden(1)
						P1:SetFarDist(10000)
					end
					if P2 then
						P2:GetChild('Judgment'):hidden(1)
						P2:GetChild('Combo'):hidden(1)
						P2:SetFarDist(10000)
					end
					
				end,true},
				
				{3.9,function()
					P3 = SCREENMAN:GetTopScreen():GetChild('PlayerP3')
					if P3 then
						P3:SetAwake(true)
						prefix_proxy:SetTarget(P3:GetChild('NoteField'))
						P3:hidden(0)
						P3:SetInputPlayer(0)
						P3:GetChild('Judgment'):hidden(1)
						P3:GetChild('Combo'):hidden(1)
					end
					
					for pn=1,2 do
						local d = 0.2; if pn == 2 then d = 0.8 end
						local b = _G['jud'..pn..'p']
						if b then
							b:hidden(0);
							b:basezoomx(0.75);
							b:basezoomy(0.75);
							b:x(SCREEN_WIDTH*d)
							b:y(SCREEN_HEIGHT*0.5)
						end
						local c = _G['com'..pn..'p']
						if c then
							c:hidden(0);
							c:basezoomx(0.75);
							c:basezoomy(0.75);
							c:x(SCREEN_WIDTH*d)
							c:y(SCREEN_HEIGHT*0.5)
						end
					end
					
				end,true},
				
				{108,function()
					P3 = SCREENMAN:GetTopScreen():GetChild('PlayerP3')
					if P3 then
						P3:SetAwake(true)
						prefix_proxy:SetTarget(P3:GetChild('NoteField'))
						P3:hidden(1)
					end
				end,true},
				
				{138,function()
					--i realize that movex changes the center point. rotation made this a HUGE headache... reminded me of working with clones in SM5.
					--which is absolutely not a memory i want to be reminded of.
					P1:x(scx)
					P2:x(scx)
				end,true},
				
				{172,function()
					P3 = SCREENMAN:GetTopScreen():GetChild('PlayerP3')
					if P3 then
						P3:SetAwake(true)
						prefix_proxy:SetTarget(P3:GetChild('NoteField'))
						P3:hidden(0)
					end
				end,true},
				
				{206,function()
					P3 = SCREENMAN:GetTopScreen():GetChild('PlayerP3')
					if P3 then
						P3:SetAwake(true)
						prefix_proxy:SetTarget(P3:GetChild('NoteField'))
						P3:hidden(1)
					end
				end,true},
				
			}
			
			m(0,9999,'*-1 1000 Cover,*-1 1.5x','end')
			m(0,9999,'*-1 Blind','end',3)
			m(4,9999,'*-1 -1000 Cover','end')
			
			--Calamity Tempest was a disaster!! Hopefully my mental isn't fully destroyed and I can make something actually now.
			
			me(0,4,0,-500,'tiny','len',inCubic)
			me(0,4,0,50,'centered','len',inCubic)
			me(0,4,0,50,'flip','len',inCubic)
			me(0,4,0,-250,'movex','len',inCubic,1)
			me(0,4,0,250,'movex','len',inCubic,2)
			
			m(4,68,'*-1 0 tiny,*-1 0 flip','end')
			
			m(4,68,'*-1 dark,*-1 stealth,*-1 -100 drawsizeback,*-1 -100 drawsize,*-1 hidenoteflashes','end',1)
			m(4,68,'*-1 dark,*-1 stealth,*-1 -100 drawsizeback,*-1 -100 drawsize,*-1 hidenoteflashes','end',2)
			m(4,68,'*-1 -45 rotationx,*-1 78.54 confusionxoffset,*-1 400 bumpyxperiod,*-1 500 zoomz','end',3)
			
			m(4,68,'*-1 0 movex,*-1 -100 movey,*-1 -50 flip','end',1)
			m(4,68,'*-1 500 arrowpathgirth,*-1 500 arrowpathdrawsizeback','end')
			
			for i=0,3 do
				m(4,66,'*-1 90 rotationz,*-1 drunk,*-1 500 drunkspeed,*-1 '..30*i..' drunkoffset,*-1 '..30*i..' bumpyxoffset,*-1 50 bumpyx,*-1 50 bumpyxperiod','end',1)
			end
			
			for i=4,65,0.33 do
				local jj = math.floor(modulo(i*3,4))
				me(i,1,100,0,'arrowpath'..jj..'','len',outCirc,1)
			end
			
			m(66,68,'*4 0 dark,*-1 0 drawsizeback,*-1 50 drawsize,*-1 0 hidenoteflashes')
			m(66,68,'*-1 0 bumpyx,*-1 0 drunk,*-1 0 rotationz,*-1 0 flip,*-1 -400 movex,*-1 0 movey,*-1 55 centered,*-1 75 mini,*-1 0 drunkspeed','end',1)
			m(66,68,'*-1 0 bumpyx,*-1 0 drunk,*-1 0 rotationz,*-1 0 flip,*-1 0 movey','end',1)
			m(66,68,'*-1 0 bumpyx,*-1 0 drunk,*-1 0 rotationz,*-1 0 flip,*-1 400 movex,*-1 0 movey,*-1 55 centered,*-1 75 mini','end',2)
			
			me(66,4,-400,0,'movex','len',inOutCirc,1)
			me(66,4,400,0,'movex','len',inOutCirc,2)
			
			for pn=1,2 do
				me(66,4,55,0,'centered','len',inOutCirc,pn)
				me(66,4,75,0,'mini','len',inOutCirc,pn)
				me(66,4,360,0,'rotationy','len',inOutCirc,pn)
				me(66,4,-628,0,'confusionyoffset','len',inOutCirc,pn)
				me(66,4,100,0,'stealth','len',inOutCirc,pn)
			end
			
			--Gone. Never to be seen again
			me(68,2,0,200,'tinyx','len',outCirc,3,172-70)
			me(68,2,0,100,'stealth','len',outCirc,3,172-70)
			--I now realize I'm just repeating things from Ypsilon so let's try for some more originality
			m(68,9999,'*-1 0 drunkzperiod,*-1 -100 drunkzspeed,*-1 50 drunkzoffset,*-1 100 drunkperiod','end')
			
			tf_VAR = 1
			
			for i=68,83 do
				m(68,9999,'*-1 100 drunkperiod','end',1)
				me(i,0.5,1500,0,'drunkz','len',outCirc)
				me(i,0.5,-1400,0,'tinyz','len',outCirc)
				me(i+.5,0.5,0,1500,'drunkz','len',inCirc)
				me(i+.5,0.5,0,-1400,'tinyz','len',inCirc)
				me(i,0.5,250*tf_VAR,0,'tornado','len',outCirc)
				me(i+.5,0.5,0,250*tf_VAR*-1,'tornado','len',inCirc)
				me(i,0.5,150*tf_VAR,0,'confusionoffset','len',outCirc)
				me(i+.5,0.5,0,150*tf_VAR*-1,'confusionoffset','len',inCirc)
				me(i,0.5,350*tf_VAR,0,'drunk','len',outCirc)
				me(i+.5,0.5,0,350*tf_VAR*-1,'drunk','len',inCirc); tf_VAR = tf_VAR*-1
			end
			me(74,3,0,250,'invert','len',inOutCirc,nil,5)
			me(82,3,250,0,'invert','len',inOutCirc,nil,5)
			me(90,3,0,250,'invert','len',inOutCirc,nil,5)
			for i=84,95,0.5 do
				me(i,0.25,1500,0,'drunkz','len',outQuad)
				me(i,0.25,-1400,0,'tinyz','len',outQuad)
				me(i+.25,0.25,0,1500,'drunkz','len',inQuad)
				me(i+.25,0.25,0,-1400,'tinyz','len',inQuad)
				me(i,0.25,50*tf_VAR,0,'tornado','len',outQuad)
				me(i+.25,0.25,0,50*tf_VAR*-1,'tornado','len',inQuad)
				me(i,0.25,50*tf_VAR,0,'confusionoffset','len',outQuad)
				me(i+.25,0.25,0,50*tf_VAR*-1,'confusionoffset','len',inQuad)
				me(i,0.25,150*tf_VAR,0,'drunk','len',outQuad)
				me(i+.25,0.25,0,150*tf_VAR*-1,'drunk','len',inQuad); tf_VAR = tf_VAR*-1
			end
			
			me(95.5,0.25,1500,0,'drunkz','len',outQuad)
			me(95.5,0.25,-1400,0,'tinyz','len',outQuad)
			me(95.5,0.25,50*tf_VAR,0,'tornado','len',outQuad)
			me(95.5,0.25,50*tf_VAR,0,'confusionoffset','len',outQuad)
			me(96,4,720*2,0,'rotationy','len',linear)
			me(96,4,0,-90,'rotationx','len',linear)
			me(96,4,-628*4,0,'confusionyoffset','len',linear)
			me(96,4,0,157,'confusionxoffset','len',linear)
			me(96,4,0,200,'mini','len',linear,nil,6)
			
			m(106,999,'*-1 0 mini,*-1 dark,*-1 1000 arrowpathgirth','end')
			
			m(106,999,'*-1 -100 dark0','end',1)
			m(106.25,999,'*-1 -100 dark1','end',1)
			m(106.5,999,'*-1 -100 dark2','end',1)
			m(106.75,999,'*-1 -100 dark3','end',1)
			m(107,999,'*-1 -100 dark0','end',2)
			m(107.25,999,'*-1 -100 dark1','end',2)
			m(107.5,999,'*-1 -100 dark2','end',2)
			m(107.75,999,'*-1 -100 dark3','end',2)
			
			
			
			
			m(106,9999,'*-1 orient','end')
			me(106,2,0,249.1,'movex','len',inCubic,1,138-108)
			me(106,2,0,-249.1,'movex','len',inCubic,2,138-108)
			me(106,2,0,-200,'tiny','len',inCubic)
			me(106,2,100,-15000,'tinyz','len',inCubic)
			
			local tf_Booms = {{108,3},{109.5,2},{110.5,1},{111.5,0},{112,3},{114,2},{116,1},{117.5,0},{118.5,3},{119.5,0},{120,3},{124,1},{125.5,0},{126.5,3},{127.5,0},{128,2},{130,1},{132,3},{133.5,1},{134.5,3},{135.5,0},{136,3}};
			for i, v in ipairs(tf_Booms) do
				me(v[1],1.5,50,100,'zoomy','len',outCirc)
				me(v[1],1.5,-15000,100,'tinyz','len',outCirc)
				me(v[1],1.5,-500,0,'tiny','len',outCirc)
				me(v[1],1.5,math.random(-200,200),0,'confusionoffset','len',outCirc,1)
				me(v[1],1.5,math.random(-200,200),0,'confusionoffset','len',outCirc,2)
				me(v[1],1.5,100,0,'arrowpath','len',outCirc)
				me(v[1],1.5,math.random(-50,50),0,'tanbumpyx','len',outCirc)
				me(v[1],1.5,math.random(-50,50),0,'tanbumpyy','len',outCirc)
				me(v[1],1.5,1,0,function(a)	tf_Grid:diffusealpha(a) end,'len',outQuad)
			end
			
			local tf_Kicks = {{106,2},{106.25,2},{106.5,2},{106.75,2},{107,2},{107.25,2},{107.5,2},{107.75,2},{108,2},{109,3},{109.25,3},{109.5,3},{110,1},{110.25,1},{110.5,1},{111.25,1},{111.5,1},{112,1},{113,3},{113.25,3},{113.5,3},{114.5,3},{114.75,3},{115,2},{115.25,2},{115.5,2},{115.75,2},{117,3},{117.25,3},{117.5,3},{118.25,1},{118.5,1},{119.25,1},{119.5,1},{119.5,3},{121,3},{121.25,1},{121.25,3},{121.5,3},{125,3},{125.25,3},{125.5,3},{126,1},{126.25,1},{126.5,1},{127.25,1},{127.5,1},{129,3},{129.25,3},{129.5,3},{130.5,3},{130.75,3},{131,2},{131.25,2},{131.5,2},{131.75,2},{132,3},{133,3},{133.25,3},{133.5,3},{134.25,1},{134.5,1},{135,1},{135.25,1},{135.5,1},{135.5,3},{137,3},{137.25,3},{137.5,3}};
			for i, v in ipairs(tf_Kicks) do
				if v[2] == 1 then
					me(v[1],1,100,0,'tiny'..math.random(0,3)..'','len',outCirc)
					me(v[1],1,50*tf_VAR,0,'tornado','len',outCirc); tf_VAR = tf_VAR*-1
				elseif v[2] == 2 then
					me(v[1],0.5,150,0,'tiny','len',outCirc)
				else
					me(v[1],1,50*tf_VAR,0,'skewx','len',outCirc)
					me(v[1],1,250*tf_VAR,0,'tipsy','len',outCirc)
					me(v[1],1,250*tf_VAR,0,'drunk','len',outCirc); tf_VAR = tf_VAR*-1
				end
			end
			
			me(122,1,100,800,'zoomz','len',outCubic)
			me(123,1,800,100,'zoomz','len',inCubic)
			me(122,1,0,40,'rotationx','len',outCubic)
			me(123,1,40,0,'rotationx','len',inCubic)
			me(122,1,0,100,'flip','len',outCubic)
			me(123,1,100,0,'flip','len',inCubic)  
			
			me(137,1,0,9999,'drunk','len',inExpo)
			me(138,2,9999,0,'drunk','len',outExpo)
			m(138,9999,'*-1 0 orient,*-1 300 zoomz,*-1 0 movex','end')
			me(138,2,100,0,'stealth','len',linear)
			me(138,2,100,0,'dark','len',linear)
			me(138,2,-100,500,'wireframegirth','len',linear)
			me(138,2,100,0,'wireframe','len',linear)
			m(140,9999,'*-1 30 orient','end')
			
			me(140,0.5,0,30,'rotationy','len',outCirc)
			me(140.5,1,30,-30,'rotationy','len',inOutCubic)
			me(141.5,1,-30,30,'rotationy','len',inOutCubic)
			me(142.5,1,30,-30,'rotationy','len',inOutCubic)
			me(143.5,.5,-30,0,'rotationy','len',inCubic)
			me(140,0.5,0,100,'drunk','len',outCirc)
			me(140.5,1,100,-100,'drunk','len',inOutCubic)
			me(141.5,1,-100,100,'drunk','len',inOutCubic)
			me(142.5,1,100,-100,'drunk','len',inOutCubic)
			me(143.5,.5,-100,0,'drunk','len',inCubic)
			--i can just do this with eases but i'd rather not
			mpf(140,144,function(beat,deltatime)	
				GAMESTATE:ApplyModifiers('*-1 '..-50*math.abs(math.sin(beat*math.pi))..' movey',pn)	
				GAMESTATE:ApplyModifiers('*-1 '..50+50*math.abs(math.sin(beat*math.pi))..' zoomy',pn)
			end)
			me(148,0.5,0,30,'rotationy','len',outCirc)
			me(148.5,1,30,-30,'rotationy','len',inOutCubic)
			me(149.5,1,-30,30,'rotationy','len',inOutCubic)
			me(150.5,1,30,-30,'rotationy','len',inOutCubic)
			me(151.5,.5,-30,0,'rotationy','len',inCubic)
			me(148,0.5,0,200,'drunk','len',outCirc)
			me(148.5,1,100,-100,'drunk','len',inOutCubic)
			me(149.5,1,-100,100,'drunk','len',inOutCubic)
			me(150.5,1,100,-100,'drunk','len',inOutCubic)
			me(151.5,.5,-100,0,'drunk','len',inCubic)
			mpf(148,152,function(beat,deltatime)	
				GAMESTATE:ApplyModifiers('*-1 '..-50*math.abs(math.sin(beat*math.pi))..' movey',pn)	
				GAMESTATE:ApplyModifiers('*-1 '..50+50*math.abs(math.sin(beat*math.pi))..' zoomy',pn)
			end)
			
			tf_Circ = 0.5
			tf_Circ2 = 175
			--thank you BrotherMojo you taught me how to do this months ago but i still remember :)
			me(140,4,0.5,3,function(a) tf_Circ = a end,'len',linear)
			me(144,4,3,-1.5,function(a) tf_Circ = a end,'len',outCubic)
			me(148,4,0.5,3,function(a) tf_Circ = a end,'len',linear)
			me(152,4,3,-1.5,function(a) tf_Circ = a end,'len',outCubic)
			me(156,172,-1.5,18,function(a) tf_Circ = a end,'end',inQuad)
			me(156,172,175,0,function(a) tf_Circ2 = a end,'end',inExpo)
			me(156,172,0,-500,'tiny','end',inQuad)
			--me(156,172,0,1500,'tiny','end',inQuad) [saving THIS for the slumpage ;)
			
			--found mpf :)
			mpf(138,172,function(beat,deltatime)
				for pn=1,2 do
					local d=1; if pn==2 then d=-1 end;
					GAMESTATE:ApplyModifiers('*-1 '..(d)*(tf_Circ2)*math.sin(tf_Circ*math.pi)..' movex',pn)
					--movez is divided by 3 because i'm using 300 zoomz. except not anymore because apparently zoomz doesn't affect it that much?
					GAMESTATE:ApplyModifiers('*-1 '..(d)*(tf_Circ2)*math.cos(tf_Circ*math.pi)..' movez',pn)
				end
			end)
			
			m(172,204,'*-1 0 tiny,*-1 0 flip','end')
			
			for i=0,3 do
				m(172,204,'*-1 dark'..i..'','end',1)
				m(172,204,'*-1 dark'..i..'','end',2)
			end
			m(172,204,'*-1 dark,*-1 stealth,*-1 -100 drawsizeback,*-1 -100 drawsize,*-1 hidenoteflashes','end',1)
			m(172,204,'*-1 dark,*-1 stealth,*-1 -100 drawsizeback,*-1 -100 drawsize,*-1 hidenoteflashes','end',2)
			m(172,204,'*-1 -45 rotationx,*-1 78.54 confusionxoffset,*-1 400 bumpyxperiod,*-1 500 zoomz,*-1 0 tinyx,*-1 0 stealth,,*-1 0 dark','end',3)
			
			m(172,204,'*-1 0 movex,*-1 -100 movey,*-1 -50 flip','end',1)
			m(172,204,'*-1 500 arrowpathgirth,*-1 50 arrowpathdrawsizeback,*-1 50 arrowpathdrawsize','end')
			
			for i=0,3 do
				m(172,204,'*-1 90 rotationz,*-1 drunk'..i..',*-1 1500 drunkspeed,*-1 '..30*i..' drunkoffset,*-1 '..30*i..' bumpyxoffset,*-1 50 bumpyx'..i..',*-1 50 bumpyxperiod'..i..'','end',1)
			end
			
			for i=172,204,0.33 do
				local jj = math.floor(modulo(i*3,4))
				me(i,1,100,0,'arrowpath'..jj..'','len',outCirc,1)
			end
			
			m(202,204,'*4 0 dark,*-1 0 drawsizeback,*-1 20 drawsize,*-1 0 hidenoteflashes,*-1 100 zoomz')
			m(202,204,'*-1 0 bumpyx,*-1 0 drunk,*-1 0 rotationz,*-1 0 flip,*-1 -400 movex,*-1 0 movey,*-1 55 centered,*-1 75 mini,*-1 0 drunkspeed','end',1)
			m(202,204,'*-1 0 bumpyx,*-1 0 drunk,*-1 0 rotationz,*-1 0 flip,*-1 0 movey','end',1)
			m(202,204,'*-1 0 bumpyx,*-1 0 drunk,*-1 0 rotationz,*-1 0 flip,*-1 400 movex,*-1 0 movey,*-1 55 centered,*-1 75 mini','end',2)
			
			me(200,4,0,-250,'movex','len',inOutCirc,1)
			me(200,4,0,250,'movex','len',inOutCirc,2)
			m(202,9999,'*-1 -250 movex','end',1)
			m(202,9999,'*-1 250 movex','end',2)
			
			for pn=1,2 do
				me(202,4,55,0,'centered','len',inOutCirc,pn)
				me(202,4,75,0,'mini','len',inOutCirc,pn)
				me(202,4,360,0,'rotationy','len',inOutCirc,pn)
				me(202,4,-628,0,'confusionyoffset','len',inOutCirc,pn)
				me(202,4,100,0,'stealth','len',inOutCirc,pn)
			end
			
			--Gone. Never to be seen again. FOR REAL THIS TIME
			me(204,2,0,200,'tinyx','len',outCirc,3,172-70)
			me(204,2,0,100,'stealth','len',outCirc,3,172-70)
			--here we go again
			m(204,9999,'*-1 0 drunkzperiod,*-1 -100 drunkzspeed,*-1 50 drunkzoffset,*-1 100 drunkperiod','end')
			
			tf_VAR = 1
			
			m(203.7,9999,'*-1 500 beat','end')
			m(217.7,9999,'*-1 100 beatmult,*-1 250 beat','end')
			for i=204,220 do
				me(i,0.5,1500,0,'drunkz','len',outCirc)
				me(i,0.5,-1400,0,'tinyz','len',outCirc)
				me(i+.5,0.5,0,1500,'drunkz','len',inCirc)
				me(i+.5,0.5,0,-1400,'tinyz','len',inCirc)
				me(i,0.5,250*tf_VAR,0,'tornado','len',outCirc)
				me(i+.5,0.5,0,250*tf_VAR*-1,'tornado','len',inCirc)
				me(i,0.5,150*tf_VAR,0,'confusionoffset','len',outCirc)
				me(i+.5,0.5,0,150*tf_VAR*-1,'confusionoffset','len',inCirc)
				me(i,0.5,350*tf_VAR,0,'drunk','len',outCirc)
				me(i+.5,0.5,0,350*tf_VAR*-1,'drunk','len',inCirc); tf_VAR = tf_VAR*-1
			end
			me(210,4,0,250,'invert','len',inOutCirc,nil,5)
			me(218,4,250,0,'invert','len',inOutCirc,nil,5)
			me(226,4,0,250,'invert','len',inOutCirc,nil,3)
			me(232,4,250,0,'invert','len',inOutCirc,nil,5)
			for i=220,231,0.5 do
				me(i,0.25,1500,0,'drunkz','len',outQuad)
				me(i,0.25,-1400,0,'tinyz','len',outQuad)
				me(i+.25,0.25,0,1500,'drunkz','len',inQuad)
				me(i+.25,0.25,0,-1400,'tinyz','len',inQuad)
				me(i,0.25,50*tf_VAR,0,'tornado','len',outQuad)
				me(i+.25,0.25,0,50*tf_VAR*-1,'tornado','len',inQuad)
				me(i,0.25,50*tf_VAR,0,'confusionoffset','len',outQuad)
				me(i+.25,0.25,0,50*tf_VAR*-1,'confusionoffset','len',inQuad)
				me(i,0.25,150*tf_VAR,0,'drunk','len',outQuad)
				me(i+.25,0.25,0,150*tf_VAR*-1,'drunk','len',inQuad); tf_VAR = tf_VAR*-1
			end
			
			m(231.5,9999,'*-1 0 beat','end')
			me(231.5,0.25,1500,0,'drunkz','len',outQuad)
			me(231.5,0.25,-1400,0,'tinyz','len',outQuad)
			me(231.5,0.25,50*tf_VAR,0,'tornado','len',outQuad)
			me(231.5,0.25,50*tf_VAR,0,'confusionoffset','len',outQuad)
			me(232,4,360,0,'rotationy','len',inOutCubic)
			me(232,4,-628,0,'confusionyoffset','len',inOutCubic)
			
			me(232,4,0,100,'reverse','len',inOutCubic,nil,4)
			me(232,2,0,-100,'tinyy','len',inCubic)
			me(234,2,-100,0,'tinyy','len',outCubic) --tinyy
			
			me(240,4,360,0,'rotationx','len',inOutCubic)
			me(240,4,-628,0,'confusionxoffset','len',inOutCubic)
			me(240,4,100,0,'reverse','len',inOutCubic)
			me(240,2,0,-100,'tinyy','len',inCubic)
			me(242,2,-100,0,'tinyy','len',outCubic)
			
			me(249,4,360,0,'rotationy','len',inOutCubic)
			me(249,4,-628,0,'confusionyoffset','len',inOutCubic)
			me(249,4,0,100,'reverse','len',inOutCubic,nil,4)
			me(249,2,0,-100,'tinyy','len',inCubic)
			me(251,2,-100,0,'tinyy','len',outCubic)
			
			me(256,4,360,0,'rotationx','len',inOutCubic)
			me(256,4,-628,0,'confusionxoffset','len',inOutCubic)
			me(256,4,100,0,'reverse','len',inOutCubic)
			me(256,2,0,-100,'tinyy','len',inCubic)
			me(258,2,-100,0,'tinyy','len',outCubic)
			
			me(264,4,0,250,'invert','len',inOutCirc,nil,32)
			me(264,2,0,-200,'tinyx','len',inCirc)
			me(266,2,-200,0,'tinyx','len',outCirc)
			me(264,2,0,-40,'rotationx','len',inCirc)
			me(266,2,40,0,'rotationx','len',outCirc)
			me(264,2,100,40000,'zoomz','len',inExpo)
			me(266,1,40000,100,'zoomz','len',outExpo)
			
			me(236,2,300,0,'drunk','len',outCirc)
			me(236,2,300,0,'tipsy','len',outCirc)
			me(236,2,-20000,100,'tinyz','len',outCirc)
			me(237.5,2,-300,0,'drunk','len',outCirc)
			me(237.5,2,-300,0,'tipsy','len',outCirc)
			me(237.5,2,-20000,100,'tinyz','len',outCirc)
			me(238.5,2,300,0,'drunk','len',outCirc)
			me(238.5,2,300,0,'tipsy','len',outCirc)
			me(238.5,2,-20000,100,'tinyz','len',outCirc)
			me(239.5,2,-300,0,'drunk','len',outCirc)
			me(239.5,2,-300,0,'tipsy','len',outCirc)
			me(239.5,2,-20000,100,'tinyz','len',outCirc)
			
			me(244,2,300,0,'drunk','len',outCirc)
			me(244,2,300,0,'tipsy','len',outCirc)
			me(244,2,-20000,100,'tinyz','len',outCirc)
			me(245.5,2,-300,0,'drunk','len',outCirc)
			me(245.5,2,-300,0,'tipsy','len',outCirc)
			me(245.5,2,-20000,100,'tinyz','len',outCirc)
			me(246.5,2,300,0,'drunk','len',outCirc)
			me(246.5,2,300,0,'tipsy','len',outCirc)
			me(246.5,2,-20000,100,'tinyz','len',outCirc)
			me(247.5,2,-300,0,'drunk','len',outCirc)
			me(247.5,2,-300,0,'tipsy','len',outCirc)
			me(247.5,2,-20000,100,'tinyz','len',outCirc)
			me(248.5,2,300,0,'drunk','len',outCirc)
			me(248.5,2,300,0,'tipsy','len',outCirc)
			me(248.5,2,-20000,100,'tinyz','len',outCirc)
			
			me(16+236,2,300,0,'drunk','len',outCirc)
			me(16+236,2,300,0,'tipsy','len',outCirc)
			me(16+236,2,-20000,100,'tinyz','len',outCirc)
			me(16+237.5,2,-300,0,'drunk','len',outCirc)
			me(16+237.5,2,-300,0,'tipsy','len',outCirc)
			me(16+237.5,2,-20000,100,'tinyz','len',outCirc)
			me(16+238.5,2,300,0,'drunk','len',outCirc)
			me(16+238.5,2,300,0,'tipsy','len',outCirc)
			me(16+238.5,2,-20000,100,'tinyz','len',outCirc)
			me(16+239.5,2,-300,0,'drunk','len',outCirc)
			me(16+239.5,2,-300,0,'tipsy','len',outCirc)
			me(16+239.5,2,-20000,100,'tinyz','len',outCirc)
			
			me(16+244,2,300,0,'drunk','len',outCirc)
			me(16+244,2,300,0,'tipsy','len',outCirc)
			me(16+244,2,-20000,100,'tinyz','len',outCirc)
			me(16+245.5,2,-300,0,'drunk','len',outCirc)
			me(16+245.5,2,-300,0,'tipsy','len',outCirc)
			me(16+245.5,2,-20000,100,'tinyz','len',outCirc)
			me(16+246.5,2,300,0,'drunk','len',outCirc)
			me(16+246.5,2,300,0,'tipsy','len',outCirc)
			me(16+246.5,2,-20000,100,'tinyz','len',outCirc)
			me(16+247.5,2,-300,0,'drunk','len',outCirc)
			me(16+247.5,2,-300,0,'tipsy','len',outCirc)
			me(16+247.5,2,-20000,100,'tinyz','len',outCirc)
			me(16+248.5,2,300,0,'drunk','len',outCirc)
			me(16+248.5,2,300,0,'tipsy','len',outCirc)
			me(16+248.5,2,-20000,100,'tinyz','len',outCirc)
			
			tf_ROTY = 8
			me(268,0.5,0,(tf_ROTY-3),'rotationy','len',outCubic,1)
			me(268,0.5,0,-(tf_ROTY-3),'rotationy','len',outCubic,2)
			for i=268,291 do
				me(i,1,500,100,'zoomz','len',outCirc)
				me(i+.5,1,-(tf_ROTY-3)*tf_VAR*(314/180),(tf_ROTY)*tf_VAR*(314/180),'confusionyoffset','len',inOutCubic,1)
				me(i+.5,1,(tf_ROTY-3)*tf_VAR*(314/180),-(tf_ROTY)*tf_VAR*(314/180),'confusionyoffset','len',inOutCubic,2)
				me(i+.5,1,(tf_ROTY-3)*tf_VAR,-(tf_ROTY)*tf_VAR,'rotationy','len',inOutCubic,1)
				me(i+.5,1,-(tf_ROTY-3)*tf_VAR,(tf_ROTY)*tf_VAR,'rotationy','len',inOutCubic,2); tf_VAR = tf_VAR*-1; tf_ROTY = tf_ROTY + 2.5
			end
			
			for i=284,291 do
				me(i,1,50,100,'zoomy','len',outCirc,1)
				me(i+.5,1,50,100,'zoomy','len',outCirc,2)
			end
			
			me(292,8,(tf_ROTY-3)*tf_VAR,-360*8,'rotationy','len',inQuad,1)
			me(292,8,-(tf_ROTY-3)*tf_VAR,360*8,'rotationy','len',inQuad,2)
			me(292,8,-(tf_ROTY-3)*tf_VAR*(314/180),628*8,'confusionyoffset','len',inQuad,1)
			me(292,8,(tf_ROTY-3)*tf_VAR*(314/180),-628*8,'confusionyoffset','len',inQuad,2)
			me(292,8,0,16,function(a) tf_Circ = a end,'len',inQuad)
			
			mpf(292,300,function(beat,deltatime)
				GAMESTATE:ApplyModifiers('*-1 '..50+50*-math.cos((beat+tf_Circ)/2*math.pi)..' reverse')
			end)
			
			me(298,2,0,200,'mini','len',inQuad,nil,6)
			m(298,9999,'*-1 0 rotationy,*-1 0 confusionyoffset,*-1 0 invert,*-1 100 dark,*-1 50 stealth','end')
			for i=0,3 do
				m(298,9999,'*-1 0 dark'..i..'','end')
			end
			
			m(306,999,'*-1 -100 dark0','end',1)
			m(306.25,999,'*-1 -100 dark1','end',1)
			m(306.5,999,'*-1 -100 dark2','end',1)
			m(306.75,999,'*-1 -100 dark3','end',1)
			m(307,999,'*-1 -100 dark0','end',2)
			m(307.25,999,'*-1 -100 dark1','end',2)
			m(307.5,999,'*-1 -100 dark2','end',2)
			m(307.75,999,'*-1 -100 dark3','end',2)
			
			me(306,2,-249.1,0,'movex','len',inCubic,1,138-108)
			me(306,2,249.1,0,'movex','len',inCubic,2,138-108)
			
			m(306,999,'*-1 flip,*-1 314 confusionoffset','end',1)
			m(306,308,'*-1 stealthglowred','end',1)
			m(306,308,'*-1 stealthglowgreen','end',2)
			--BRENDAN FRASER
			--BRENDAN FRASER
			local tf_FinalClimb = {{308,0},{308,2},{308.5,0},{308.5,1},{308.5,3},{308.75,3},{309,0},{309,2},{309,3},{309.5,2},{309.5,3},{309.75,0},{309.75,3},{310,1},{310.25,0},{310.25,3},{310.5,2},{310.5,3},{311,0},{311,1},{311,3},{311.5,0},{311.5,1},{311.5,2},{311.5,3},{311.75,3},{312,3},{312.5,0},{312.5,1},{313,2},{313,3},{313.25,3},{313.5,3},{314,0},{314,1},{314,2},{314,3},{314.25,3},{314.5,2},{314.5,3},{315,0},{315,3},{315.5,0},{315.5,2},{315.5,3},{316,0},{316,2},{316,3},{316.5,0},{316.5,1},{316.5,3},{316.75,3},{317,0},{317,2},{317,3},{317.5,1},{317.5,2},{317.5,3},{317.75,0},{317.75,3},{318.25,0},{318.25,3},{318.5,2},{318.75,3},{319,0},{319,1},{319,3},{319.5,0},{319.5,1},{319.5,2},{319.5,3},{319.75,3},{320,0},{320,3},{320.5,0},{320.5,1},{320.5,2},{320.5,3},{321,3},{321.25,0},{321.25,1},{321.25,3},{321.75,3},{322,0},{322,1},{322,2},{322,3},{322.5,0},{322.5,3},{322.75,3},{323,2},{323,3},{323.25,3},{323.5,1},{323.5,3},{324,0},{324,2},{324,3},{324.5,1},{324.5,3},{325,0},{325,2},{325,3},{325.25,3},{325.5,0},{325.5,1},{325.5,2},{325.5,3},{326,3},{326.25,0},{326.25,3},{326.5,2},{326.75,3},{327,0},{327,1},{327,3},{327.5,0},{327.5,1},{327.5,2},{327.5,3},{327.75,3},{328,3},{328.5,0},{328.5,1},{328.5,2},{328.5,3},{329,3},{329.25,0},{329.25,3},{329.5,2},{329.75,3},{330,0},{330,1},{330,2},{330,3},{330.5,3},{330.75,3},{331,0},{331,2},{331,3},{331.5,0},{331.5,1},{331.5,2},{331.5,3},{332,0},{332,1},{332,2},{332,3},{332.5,0},{332.5,1},{332.5,3},{333,2},{333,3},{333.25,3},{333.5,0},{333.5,1},{333.5,2},{333.5,3},{334,3},{334.25,0},{334.25,3},{334.5,2},{334.75,3},{335,0},{335,1},{335,3},{335.5,0},{335.5,1},{335.5,2},{335.5,3},{335.75,3},{336,2},{336,3},{336.5,0},{336.5,1},{336.5,3},{337,2},{337,3},{337.25,0},{337.25,3},{337.5,2},{337.75,3},{338,0},{338,1},{338,2},{338,3},{338.5,3},{338.75,3},{339,0},{339,2},{339,3},{339.5,2},{339.5,3},{340,2},{340,3},{340.5,0},{340.5,1},{340.5,3},{341,2},{341,3},{341.25,3},{341.5,0},{341.5,1},{341.5,2},{341.5,3},{342,3},{342.25,0},{342.25,3},{342.5,2},{342.75,3},{343,0},{343,1},{343,3},{343.5,0},{343.5,1},{343.5,2},{343.5,3},{343.75,3},{344,3},{344.5,0},{344.5,1},{344.5,2},{344.5,3},{345,2},{345,3},{345.25,0},{345.25,3},{345.5,2},{345.75,3},{346,0},{346,1},{346,2},{346,3},{346.5,2},{346.5,3},{346.75,3},{347,1},{347,2},{347,3},{347.5,0},{347.5,1},{347.5,2},{347.5,3},{348,2},{348,3},{348.5,0},{348.5,1},{348.5,3},{349,0},{349,2},{349,3},{349.25,3},{349.5,0},{349.5,1},{349.5,2},{349.5,3},{350,3},{350.25,0},{350.25,3},{350.5,2},{350.75,3},{351,0},{351,1},{351,3},{351.5,0},{351.5,1},{351.5,2},{351.5,3},{351.75,3},{352,3},{352.5,0},{352.5,1},{352.5,2},{352.5,3},{353,2},{353,3},{353.25,0},{353.25,3},{353.75,3},{354,0},{354,1},{354,2},{354,3},{354.5,2},{354.5,3},{354.75,3},{355,0},{355,1},{355,2},{355,3},{355.25,3},{355.5,0},{355.5,1},{355.5,2},{355.5,3},{356,0},{356,1},{356,2},{356,3},{356.5,0},{356.5,1},{356.5,3},{356.75,3},{357,2},{357,3},{357.5,0},{357.5,1},{357.5,2},{357.5,3},{357.75,3},{358,3},{358.25,0},{358.25,3},{358.5,2},{358.75,3},{359,0},{359,1},{359,3},{359.5,0},{359.5,1},{359.5,2},{359.5,3},{359.75,3},{360,3},{360.5,0},{360.5,1},{360.5,2},{360.5,3},{360.75,3},{361,3},{361.25,0},{361.25,3},{361.5,2},{361.5,3},{362,0},{362,1},{362,2},{362,3},{362.5,3},{362.75,3},{363,0},{363,2},{363,3},{363.5,0},{363.5,3},{364,0},{364,1},{364,2},{364,3},{364.5,0},{364.5,1},{364.5,3},{364.75,3},{365,2},{365,3},{365.5,0},{365.5,1},{365.5,2},{365.5,3},{365.75,3},{366,3},{366.25,0},{366.25,3},{366.5,2},{366.75,3},{367,0},{367,1},{367,3},{367.5,0},{367.5,1},{367.5,2},{367.5,3},{367.75,3},{368,3},{368.25,3},{368.5,0},{368.5,1},{368.5,2},{368.5,3},{368.75,3},{369,2},{369,3},{369.25,0},{369.25,3},{369.5,1},{369.5,2},{369.5,3},{370,0},{370,1},{370,2},{370,3},{370.25,3},{370.5,0},{370.5,1},{370.5,2},{370.5,3},{371,0},{371,1},{371,2},{371,3},{371.5,0},{371.5,1},{371.5,2},{371.5,3}};
			for i, v in ipairs(tf_FinalClimb) do
				if v[2] == 1 then
					me(v[1],1,100,0,'stealthglowred','len',outQuad,1)
					me(v[1],1,100,0,'stealthglowgreen','len',outQuad,2)
					me(v[1],1,50,0,'stealth','len',outQuad)
				elseif v[2] == 2 then
					me(v[1],0.5,150,0,'tiny','len',outCirc)
				elseif v[2] == 3 then
					me(v[1],1,250*tf_VAR,0,'tipsy','len',outCirc)
					me(v[1],1,50*tf_VAR,0,'drunk','len',outCirc); tf_VAR = tf_VAR*-1
				else
					me(v[1],1.5,50,100,'zoomy','len',outCirc)
					me(v[1],1.5,-15000,100,'tinyz','len',outCirc)
					me(v[1],1.5,-500,0,'tiny','len',outCirc)
					me(v[1],1.5,math.random(-200,200)+314,314,'confusionoffset','len',outCirc,1)
					me(v[1],1.5,math.random(-200,200),0,'confusionoffset','len',outCirc,2)
					me(v[1],1.5,100,0,'arrowpath','len',outCirc)
				end
			end
			
			mpf(306,372,function(beat,deltatime)
				for pn=1,2 do
					local d=1; if pn==2 then d=-1 end;
					GAMESTATE:ApplyModifiers('*-1 '..(d)*-250*math.sin(beat/4*math.pi)..' movex',pn)
					--add square perframe for slumpage
				end
			end)
			me(372,1,0,100,'tiny','len',outQuad,1)
			me(372,1,0,50,'tiny','len',outQuad,2)
			me(372,1,0,-1000000,'tinyz','len',outQuad)
			me(372,1,0,75,'tinyy','len',outQuad)
			m(372,9999,'*-1 -0 movex,*-1 100 tiny,*-1 -1000000 tinyz,*-1 50 tinyy','end',1)
			m(372,9999,'*-1 0 movex,*-1 50 tiny,*-1 -1000000 tinyz,*-1 50 tinyy','end',2)
			
			local finale = {{372,0},{373,0},{373.5,0},{374.5,0},{375.5,0},{376,0},{376.5,0},{377,0},{377.5,0},{378,0},{378.5,0},{379,0},{379.5,0}};
			for i, v in ipairs(finale) do
				me(v[1],1.5,50,100,'zoomy','len',outCirc)
				me(v[1],1.5,math.random(-200,200)+314,314,'confusionoffset','len',outCirc,1)
				me(v[1],1.5,math.random(-200,200),0,'confusionoffset','len',outCirc,2)
				me(v[1],1.5,100,0,'arrowpath','len',outCirc)
			end
			
			me(0,4,0,1,function(a) WHITEEE:diffusealpha(a) end,'len',inCubic)
			me(4,2,1,0,function(a) WHITEEE:diffusealpha(a) end,'len',outCubic)
			me(168,4,0,1,function(a) WHITEEE:diffusealpha(a) end,'len',inCubic)
			me(172,2,1,0,function(a) WHITEEE:diffusealpha(a) end,'len',outCubic)
			
			mod_message(306,function()
				for col = 0,3 do
					P1:SetNumPathGradientPoints(col,1)
					P1:SetPathGradientPoint(0,col,1)
					P1:SetPathGradientColor(0,col,1,0,0,1)
					P2:SetNumPathGradientPoints(col,1)
					P2:SetPathGradientPoint(0,col,1)
					P2:SetPathGradientColor(0,col,0,1,0,1)
				end
			end,true)
			
			--BG STUFF STARTS HERE
			
			mpf(4,68,function(beat,deltatime)
				tf_Swirl_1:diffusealpha(0.25+0.25*math.sin(beat*math.pi))
				tf_Swirl_2:diffusealpha(0.25+0.25*math.sin(beat*math.pi))
			end)
			
			mod_message(68,function()
				tf_Swirl_1:diffusealpha(0)
				tf_Swirl_2:diffusealpha(0)
			end,true)
			
			mod_message(66,function()
				tf_BG:linear(TiB(2))
				tf_BG:diffuse(0.5,0,0,0.67)
				tf_Spikes_1:diffusealpha(1)
				tf_Spikes_2:diffusealpha(1)
			end,true)
			
			me(66,2,1,0,function(a) tf_Spikes_1:x(0-(sw/4*a))	tf_Spikes_2:x(sw+(sw/4*a)) end,'len',inQuad)
			
			for i=68,81 do
				me(i,1,1,.5,function(a) tf_Spikes_1:zoom(a) end,'len',outQuad)
				me(i,1,1,.5,function(a) tf_Spikes_2:zoom(a) end,'len',outQuad)
			end
			for i=82,97,0.5 do --that was simple
				me(i,.5,1,.5,function(a) tf_Spikes_1:zoom(a) end,'len',outQuad)
				me(i,.5,1,.5,function(a) tf_Spikes_2:zoom(a) end,'len',outQuad)
			end
			me(98,2,0,2,function(a) tf_Spikes_1:x(0-(sw/4*a))	tf_Spikes_2:x(sw+(sw/4*a)) end,'len',inBack,nil,4,4)
			
			me(104,4,0,90,function(a) tf_BG:rotationz(a) end,'len',inOutCubic,nil,150-108)
			mod_message(138,function()
				tf_Grid:decelerate(TiB(2))
				tf_Grid:diffusealpha(1)
			end,true)
			for i=140,155,8 do
				me(i,1,155,0,function(a) tf_Grid:z(a) end,'len',outCirc)
				me(i+1,1,400,0,function(a) tf_Grid:z(a) end,'len',outCirc)
				me(i+2,1,400,0,function(a) tf_Grid:z(a) end,'len',outCirc)
				me(i+3,1,400,0,function(a) tf_Grid:z(a) end,'len',outCirc)
				me(i+4,1,400,0,function(a) tf_Grid:z(a) end,'len',outCirc)
			end
			me(156,172,12,100,function(a) tf_Grid:customtexturerect(0,0,a,a*(9/12)) end,'end',inCirc)
			mod_message(172,function()
				tf_Grid:hidden(1)
				tf_BG:diffuse(0,0.6,0.6,0.3)
			end,true)
			mpf(172,204,function(beat,deltatime)
				tf_Swirl_1:diffusealpha(0.25+0.25*math.sin(beat*math.pi))
				tf_Swirl_2:diffusealpha(0.25+0.25*math.sin(beat*math.pi))
			end)
			mod_message(204,function()
				tf_Swirl_1:hidden(1)
				tf_Swirl_2:hidden(1)
			end,true)
			mod_message(228,function()
				tf_BG:accelerate(TiB(4))
				tf_BG:diffuse(0.5,0,0,0.67)
				tf_Spikes_1:diffusealpha(1)
				tf_Spikes_2:diffusealpha(1)
			end,true)
			me(228,2,1,0,function(a) tf_Spikes_1:x(0-(sw/4*a))	tf_Spikes_2:x(sw+(sw/4*a)) end,'len',inQuad)
			
			--this is what i get for not using notedata
			me(236,2,1,.5,function(a) tf_Spikes_1:zoom(a) end,'len',outQuad)
			me(237.5,2,1,.5,function(a) tf_Spikes_1:zoom(a) end,'len',outQuad)
			me(238.5,2,1,.5,function(a) tf_Spikes_1:zoom(a) end,'len',outQuad)
			me(239.5,2,1,.5,function(a) tf_Spikes_1:zoom(a) end,'len',outQuad)
			me(244,2,1,.5,function(a) tf_Spikes_1:zoom(a) end,'len',outQuad)
			me(245.5,2,1,.5,function(a) tf_Spikes_1:zoom(a) end,'len',outQuad)
			me(246.5,2,1,.5,function(a) tf_Spikes_1:zoom(a) end,'len',outQuad)
			me(247.5,2,1,.5,function(a) tf_Spikes_1:zoom(a) end,'len',outQuad)
			me(248.5,2,1,.5,function(a) tf_Spikes_1:zoom(a) end,'len',outQuad)
			me(16+236,2,1,.5,function(a) tf_Spikes_1:zoom(a) end,'len',outQuad)
			me(16+237.5,2,1,.5,function(a) tf_Spikes_1:zoom(a) end,'len',outQuad)
			me(16+238.5,2,1,.5,function(a) tf_Spikes_1:zoom(a) end,'len',outQuad)
			me(16+239.5,2,1,.5,function(a) tf_Spikes_1:zoom(a) end,'len',outQuad)
			me(16+244,2,1,.5,function(a) tf_Spikes_1:zoom(a) end,'len',outQuad)
			me(16+245.5,2,1,.5,function(a) tf_Spikes_1:zoom(a) end,'len',outQuad)
			me(16+246.5,2,1,.5,function(a) tf_Spikes_1:zoom(a) end,'len',outQuad)
			me(16+247.5,2,1,.5,function(a) tf_Spikes_1:zoom(a) end,'len',outQuad)
			me(16+248.5,2,1,.5,function(a) tf_Spikes_1:zoom(a) end,'len',outQuad)
			me(236,2,1,.5,function(a) tf_Spikes_2:zoom(a) end,'len',outQuad)
			me(237.5,2,1,.5,function(a) tf_Spikes_2:zoom(a) end,'len',outQuad)
			me(238.5,2,1,.5,function(a) tf_Spikes_2:zoom(a) end,'len',outQuad)
			me(239.5,2,1,.5,function(a) tf_Spikes_2:zoom(a) end,'len',outQuad)
			me(244,2,1,.5,function(a) tf_Spikes_2:zoom(a) end,'len',outQuad)
			me(245.5,2,1,.5,function(a) tf_Spikes_2:zoom(a) end,'len',outQuad)
			me(246.5,2,1,.5,function(a) tf_Spikes_2:zoom(a) end,'len',outQuad)
			me(247.5,2,1,.5,function(a) tf_Spikes_2:zoom(a) end,'len',outQuad)
			me(248.5,2,1,.5,function(a) tf_Spikes_2:zoom(a) end,'len',outQuad)
			me(16+236,2,1,.5,function(a) tf_Spikes_2:zoom(a) end,'len',outQuad)
			me(16+237.5,2,1,.5,function(a) tf_Spikes_2:zoom(a) end,'len',outQuad)
			me(16+238.5,2,1,.5,function(a) tf_Spikes_2:zoom(a) end,'len',outQuad)
			me(16+239.5,2,1,.5,function(a) tf_Spikes_2:zoom(a) end,'len',outQuad)
			me(16+244,2,1,.5,function(a) tf_Spikes_2:zoom(a) end,'len',outQuad)
			me(16+245.5,2,1,.5,function(a) tf_Spikes_2:zoom(a) end,'len',outQuad)
			me(16+246.5,2,1,.5,function(a) tf_Spikes_2:zoom(a) end,'len',outQuad)
			me(16+247.5,2,1,.5,function(a) tf_Spikes_2:zoom(a) end,'len',outQuad)
			me(16+248.5,2,1,.5,function(a) tf_Spikes_2:zoom(a) end,'len',outQuad)
			
			for i=268,283 do
				me(i,1,1,.5,function(a) tf_Spikes_1:zoom(a) end,'len',outQuad)
				me(i,1,1,.5,function(a) tf_Spikes_2:zoom(a) end,'len',outQuad)
				me(i,1,1,.67,function(a) tf_BG:diffusealpha(a) end,'len',outQuad)
			end
			for i=284,297,0.5 do
				me(i,.5,1,.5,function(a) tf_Spikes_1:zoom(a) end,'len',outQuad)
				me(i,.5,1,.5,function(a) tf_Spikes_2:zoom(a) end,'len',outQuad)
				me(i,.5,1,.67,function(a) tf_BG:diffusealpha(a) end,'len',outQuad)
			end
			
			me(298,2,0,2,function(a) tf_Spikes_1:x(0-(sw/4*a))	tf_Spikes_2:x(sw+(sw/4*a)) end,'len',inBack,nil,4,4)
			me(298,2,.67,0,function(a) tf_BG:diffusealpha(a) end,'len',inBack,nil,4,4)
			
			mod_message(306,function()
				tf_Grid2:hidden(0)
				tf_Grid3:hidden(0)
				tf_Grid2:linear(TiB(2))
				tf_Grid2:diffusealpha(1)
				tf_Grid3:linear(TiB(2))
				tf_Grid3:diffusealpha(1)
			end,true)
			
			mpf(306,999,function(beat,deltatime)
				tf_Grid2:diffuse(-math.sin(beat/4*math.pi),math.sin(beat/4*math.pi),0,1)
				tf_Grid3:diffuse(math.sin(beat/4*math.pi),-math.sin(beat/4*math.pi),0,1)
			end)
			
			m(372,9999,'*-1 50 stealth','end')
			m(372,9999,'*-1 stealthglowred','end',1)
			m(372,9999,'*-1 stealthglowgreen','end',2)
			
---------------------------------------------------------------------------------------
----------------------Sort the actions table-------------------------------------------
---------------------------------------------------------------------------------------
			
			function modtable_compare(a,b)
				return a[1] < b[1]
			end
			
			if table.getn(mod_actions) > 1 then
				table.sort(mod_actions, modtable_compare)
			end
			
			self:luaeffect('Update')
		end"
		
		UpdateCommand="%function(self)
			local beat = GAMESTATE:GetSongBeat()
			
			if beat>=0 and not checked then
					local ThingsToGrab = {'BPMDisplay','LifeFrame','ScoreFrame','Lyrics','SongBackground','SongForeground','Overlay','Underlay'}
					local ThingsToHide = {'BPMDisplay','LifeFrame','ScoreFrame','Overlay','Underlay'}
					for pn=1,2 do
						_G['P'..pn] = SCREENMAN:GetTopScreen():GetChild('PlayerP'..pn) or nil;
						if _G['P'..pn] then
							table.insert(mod_plr, _G['P'..pn])
							_G['jud'..pn]=_G['P'..pn]:GetChild('Judgment');
							_G['com'..pn]=_G['P'..pn]:GetChild('Combo');
							_G['com'..pn]:hidden(1)
						end
						table.insert(ThingsToGrab,'LifeP'..pn); table.insert(ThingsToGrab,'ScoreP'..pn);
						table.insert(ThingsToHide,'LifeP'..pn); table.insert(ThingsToHide,'ScoreP'..pn);
					end	
					for i,v in ipairs(ThingsToGrab) do _G[v] = SCREENMAN:GetTopScreen():GetChild(v) or nil end	
					for i,v in ipairs(ThingsToHide) do if _G[v] then _G[v]:hidden(1) end end
				checked = true;
				MESSAGEMAN:Broadcast('GetProxy')
			end
			mod_curtime = GAMESTATE:GetSongTime()
			local deltatime = mod_curtime - mod_lasttime
			mod_lasttime = mod_curtime
			
---------------------------------------------------------------------------------------
----------------------Begin table handlers---------------------------------------------
---------------------------------------------------------------------------------------
			
			disable = false;
			if disable ~= true and checked then
				if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --
					-----------------------
					-- Player mod resets --
					-----------------------
					for i=1,2 do
						GAMESTATE:ApplyModifiers('clearall',i)
						if _G['init_modsp'..i] then 
							GAMESTATE:ApplyModifiers(_G['init_modsp'..i],i)
						end
					end
				
					------------------------------------------------------------------------------
					-- custom mod reader by TaroNuke edited by WinDEU and re-stolen by TaroNuke --
					------------------------------------------------------------------------------
					for i,v in pairs(mods) do
						if v and table.getn(v) > 3 and v[1] and v[2] and v[3] and v[4] then
							if beat >=v[1] then
								if (v[4] == 'len' and beat <=v[1]+v[2]) or (v[4] == 'end' and beat <=v[2]) then
									if table.getn(v) == 5 then
										GAMESTATE:ApplyModifiers(v[3],v[5]);
									else
										GAMESTATE:ApplyModifiers(v[3]);
									end
								end
							end
						else
							v[1] = 0;
							v[2] = 0;
							v[3] = '';
							v[4] = 'error';
							SCREENMAN:SystemMessage('Bad mod in beat-based table (line '..i..')');
						end
					end
				
					-----------------------------------------------------------------------------------------------------
					-- WinDEU's time-based len/end version of the #swag custom mod reader #teamproofofconcept (c) 2015 --
					-----------------------------------------------------------------------------------------------------
					for i,v in pairs(mods2) do
						if v and table.getn(v) > 3 and v[1] and v[2] and v[3] and v[4] then
							if mod_time >=v[1] then
								if (v[4] == 'len' and mod_time <=v[1]+v[2]) or (v[4] == 'end' and mod_time <=v[2]) then
									if table.getn(v) == 5 then
										GAMESTATE:ApplyModifiers(v[3],v[5]);
									else
										GAMESTATE:ApplyModifiers(v[3]);
									end
								end
							end
						else
							v[1] = 0;
							v[2] = 0;
							v[3] = 'error';
							v[4] = 'error';
							SCREENMAN:SystemMessage('Bad mod in time-based table (line '..i..')');
						end
					end
				
					---------------------------------------
					-- Ease table (includes func_ease) --
					---------------------------------------
					for i,v in pairs(mods_ease) do
						if v and table.getn(v) > 6 and v[1] and v[2] and v[3] and v[4] and v[5] and v[6] and v[7] then
							if beat >=v[1] then
								if (v[6] == 'len' and beat <=v[1]+v[2]) or (v[6] == 'end' and beat <=v[2]) then
									local strength = v[7](beat - v[1], v[3], v[4] - v[3], v[6] == 'end' and v[2] - v[1] or v[2], v[10], v[11])
									if type(v[5]) == 'string' then
										local modstr = v[5] == 'xmod' and strength..'x' or (v[5] == 'cmod' and 'C'..strength or strength..' '..v[5])
										GAMESTATE:ApplyModifiers('*9999 '..modstr,v[8]);
									elseif type(v[5]) == 'function' then
										v[5](strength)
									end
								elseif (v[9] and ((v[6] == 'len' and beat <=v[1]+v[2]+v[9]) or (v[6] == 'end' and beat <=v[9]))) then
									if type(v[5]) == 'string' then
										local modstr = v[5] == 'xmod' and v[4]..'x' or (v[5] == 'cmod' and 'C'..v[4] or v[4]..' '..v[5])
										GAMESTATE:ApplyModifiers('*9999 '..modstr,v[8]);
									elseif type(v[5]) == 'function' then
										v[5](v[4])
									end
								end
							end
						else
							SCREENMAN:SystemMessage('Ease Error! (line '..i..' | beat: '.. v[1] .. ' | mod: '.. v[5] ..')');
						end
					end
				
					---------------------
					-- Perframe reader --
					---------------------
					if table.getn(mod_perframes)>0 then
						for i=1,table.getn(mod_perframes) do
							local a = mod_perframes[i]
							if beat > a[1] and beat < a[2] then
								a[3](beat,deltatime);
							end
						end
					end
				
					---------------------------------------
					-- Actions table --
					---------------------------------------
					while curaction<=table.getn(mod_actions) and GAMESTATE:GetSongBeat()>=mod_actions[curaction][1] do
						if mod_actions[curaction][3] or GAMESTATE:GetSongBeat() < mod_actions[curaction][1]+2 then
							if type(mod_actions[curaction][2]) == 'function' then
								mod_actions[curaction][2]()
							elseif type(mod_actions[curaction][2]) == 'string' then
								MESSAGEMAN:Broadcast(mod_actions[curaction][2]);
							end
						end
						curaction = curaction+1;
					end
				end
			end

---------------------------------------------------------------------------------------
----------------------END DON'T TOUCH IT KIDDO-----------------------------------------
---------------------------------------------------------------------------------------
			
		end"
		
	/>
	
    <Layer Type="ActorFrame" OnCommand="fov,20"><children>
    
        <ActorProxy
                GetProxyMessageCommand="%function(self)
                    P1c = self;
                    if P1 then self:SetTarget(P1:GetChild('NoteField')) end
                    self:hidden(1);
                    self:x(SCREEN_CENTER_X);
                    self:y(SCREEN_CENTER_Y);
                end"
                P1cShowMessageCommand="%function(self)
                    self:hidden(0);
                end"
                P1cHideMessageCommand="%function(self)
                    self:hidden(1);
                end"
        />
        <ActorProxy
                GetProxyMessageCommand="%function(self)
                    P2c = self;
                    if P2 then self:SetTarget(P2:GetChild('NoteField')) end
                    self:hidden(1);
                    self:x(SCREEN_CENTER_X);
                    self:y(SCREEN_CENTER_Y);
                end"
                P2cShowMessageCommand="%function(self)
                    self:hidden(0);
                end"
                P2cHideMessageCommand="%function(self)
                    self:hidden(1);
                end"
        />
    </children></Layer>
	
/>
	
	<Layer Type="ActorProxy" Var="prefix_proxy" 
	OnCommand="%function(self)
		self:hidden(1)
	end"/>
	
		<!-- Aux actor, VERY IMPORTANT -->
	<Layer
		Type="Quad"
		InitCommand="%function(self) auxvar = self; self:hidden(1) end"

        P1HideMessageCommand="%function(self)
            if P1 then
                P1:hidden(1);
            end
		end"

        P1ShowMessageCommand="%function(self)
            if P1 then
                P1:hidden(0);
            end
		end"        
        
        P2HideMessageCommand="%function(self)
            if P2 then
                P2:hidden(1);
            end
		end"

        P2ShowMessageCommand="%function(self)
            if P2 then
                P2:hidden(0);
            end
		end"        
		
        P1HideComboMessageCommand="%function(self)
            if P1 then
                P1:GetChild('Combo'):hidden(1);
            end
		end"

        P1ShowComboMessageCommand="%function(self)
            if P1 then
                P1:GetChild('Combo'):hidden(0);
            end
		end"   
		
        P2HideComboMessageCommand="%function(self)
            if P2 then
                P2:GetChild('Combo'):hidden(1);
            end
		end"

        P2ShowComboMessageCommand="%function(self)
            if P2 then
                P2:GetChild('Combo'):hidden(0);
            end
		end"   
		
		
        P1HideJudgmentMessageCommand="%function(self)
            if P1 then
                P1:GetChild('Judgment'):hidden(1);
            end
		end"

        P1ShowJudgmentMessageCommand="%function(self)
            if P1 then
                P1:GetChild('Judgment'):hidden(0);
            end
		end"   
		
        P2HideJudgmentMessageCommand="%function(self)
            if P2 then
                P2:GetChild('Judgment'):hidden(1);
            end
		end"

        P2ShowJudgmentMessageCommand="%function(self)
            if P2 then
                P2:GetChild('Judgment'):hidden(0);
            end
		end"
	/>
	
	<ZZLAER Type="ActorFrame" InitCommand="%function(self) judc = self end"><children>
	<LAER Type="ActorProxy" InitCommand="%function(self) jud1p = self end"
	GetProxyMessageCommand="%function(self) if P1 then self:SetTarget(P1:GetChild('Judgment')) end end"/>
	<LAER Type="ActorProxy" InitCommand="%function(self) jud2p = self end"
	GetProxyMessageCommand="%function(self) if P2 then self:SetTarget(P2:GetChild('Judgment')) end end"/>
	</children></ZZLAER>
	<ZZLAER Type="ActorFrame" InitCommand="%function(self) comc = self end"><children>
	<LAER Type="ActorProxy" InitCommand="%function(self) com1p = self end"
	GetProxyMessageCommand="%function(self) if P1 then self:SetTarget(P1:GetChild('Combo')) end end"/>
	<LAER Type="ActorProxy" InitCommand="%function(self) com2p = self end"
	GetProxyMessageCommand="%function(self) if P2 then self:SetTarget(P2:GetChild('Combo')) end end"/>
	</children></ZZLAER>
	
	<Layer Type="Quad" Var="WHITEEE" OnCommand="diffuse,1,1,1,0;xywh,scx,scy,sw,sh" />

    <Layer Type="Quad" Var="ray_sCover" InitCommand="hidden,1"
		A0IntroShowMessageCommand=""
		A0IntroHideMessageCommand="" />
</children></ActorFrame>