<Layer Type = "Quad" LoadCommand = "%xero(function(self)
	--[[
		hiddenregions.xml
		made by oatmealine

		lets you add hidden regions to a player as a function

		hide {beat, duration, [column] [plr]}
		```lua
		
		hgroup = 1
		hide
		{0, 2, plr = 1, column = {0, 1, 2}, activeBeat = 0}
		{2, 2, plr = 2, column = {0, 1, 2}}
		
		hgroup = 2
		hide
		{112, 2, plr = 1, column = {0, 1, 2}, activeBeat = 112}
		{114, 2, plr = 2, column = {0, 1, 2}}
	]]
	
	Trace('HELP')
	
	local clears = {}
	
	hgroup = 1
	local hiddenregions = {}
	
	local function contains(t, element)
		for _, value in pairs(t) do
			if value == element then
				return true
			end
		end
		return false
	end

	local function throw(msg)
		local _, err = pcall(error, msg, 4)
		SCREENMAN:SystemMessage(err)
	end
	
	function unhide(t)
		table.insert(clears,{t[1],plr = t.plr})
		return unhide
	end

	function hide(t)
		if type(t) == 'table' then
		
			while #hiddenregions < hgroup do
				table.insert(hiddenregions,{activeBeat = 0, rlist = {}})
				--Trace('ADDING A HIDDEN REGION GROUP '..#hiddenregions)
			end
		
			local activeBeat = t.activeBeat
			if type(activeBeat) == 'number' then
				hiddenregions[hgroup].activeBeat = activeBeat
				--Trace('H GROUP '..hgroup..' ACTIVATES AT BEAT '..activeBeat)
			end
			
			local start = t[1]
			local dur = t[2]

			local players = t.plr or rawget(xero, 'plr') or {1, 2}
			if type(players) == 'number' then players = {players} end

			local column = t.column or {0, 1, 2, 3}
			if type(column) == 'number' then
				if column == 0 then
					column = {0, 1, 2, 3}
				else
					column = {column}
				end
			end
			
			local plist = '{'..players[1]
			for pl=2,#players do
				plist = plist..','..players[pl]
			end
			plist = plist..'}'
			
			--Trace('HIDE: b'..start..' to b'..(start+dur)..' for P'..plist)
			
			if type(start) ~= 'number' then throw('invalid hide beat: expected number, got ' .. type(start)); return hide end
			if type(dur) ~= 'number' then throw('invalid hide duration: expected number, got ' .. type(dur)); return hide end
			if type(players) ~= 'table' then throw('invalid hide players: expected table, got ' .. type(players)); return hide end
			if type(column) ~= 'table' then throw('invalid hide column: expected table, got ' .. type(players)); return hide end

			table.insert(hiddenregions[hgroup].rlist,{start, start + dur, column, players})
			return hide
		else
			throw('invalid hide input: expected table, got ' .. type(t))
			return hide
		end
	end
	
	function APPLY_THE_REGIONS_LOL()
		for _,v in ipairs(hiddenregions) do
			local v = v
			func {v.activeBeat, function()
				local res = {}
				
				--Trace('APPLIED HIDDEN REGION AT BEAT '..v.activeBeat)
				s_debug:settext(debugString)
				
				-- one for each player
				for pn = 1, max_pn do
					res[pn] = {}
				end
				
				for c = 0, 3 do
					for _,r in ipairs(v.rlist) do
						if contains(r[3], c) then
							for _,pl in ipairs(r[4]) do
								table.insert(res[pl], {r[1], r[2], c})
							end
						end
					end
				end

				for i,pl in ipairs(res) do
					P[i]:SetHiddenRegions(res[i])
				end
			end}
		end
		
		for _,v in ipairs(clears) do
			local v = v
			func {v[1], function()
				local players = v.plr or rawget(xero, 'plr') or {1, 2}
				if type(players) == 'number' then players = {players} end
				
				--Trace('CLEARED HIDDEN REGION AT BEAT '..v[1])
				s_debug:settext(debugString)
				
				for pn=1,max_pn do
					if contains(players,pn) then
						P[pn]:ClearHiddenRegions()
					end
				end
			end}
		end
		
	end
	
	
end)" />
