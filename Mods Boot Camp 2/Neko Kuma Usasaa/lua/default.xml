<ActorFrame><children>

	<Layer
		Type="Quad"
		InitCommand="hidden,1"
		OnCommand="sleep,113.32"
	/>
	
	<Layer
		Type="Quad"
		InitCommand="hidden,1"
		OnCommand="%function(self)
				fgcurcommand = 1;
				checked = false;
				prefix_time = 0;
				
				prefix_curmessage = 1;
				
				
				prefix_messages = {
					{21.666,'KickVibrate'},
					{21.833,'KickVibrate'},
					{21.833+240/180/4,'KickVibrate'},
					{21.833+240/180/4*2,'KickVibrate'},
					{21.833+240/180/4*3,'KickVibrate'},
					{21.833+240/180/4*4,'KickVibrate'},
					{21.833+240/180/4*5,'KickVibrate'},
					{23.666,'KickVibrate'},

					{32.333,'KickVibrate'},
					{32.500,'KickVibrate'},
					{32.500+240/180/4,'KickVibrate'},
					{32.500+240/180/4*2,'KickVibrate'},
					{32.500+240/180/4*3,'KickVibrate'},
					{32.500+240/180/4*4,'KickVibrate'},
					{32.500+240/180/4*5,'KickVibrate'},
					{34.333,'KickVibrate'},

					{91.333,'XWarp'},
					{91.333+240/180/16,'XWarp'},
					{91.333+240/180/8,'XReset'},

					{92.166,'XWarp'},
					{92.166+240/180/16,'XWarp'},
					{92.166+240/180/8,'XReset'},

					{92.666,'XWarp'},
					{92.666+240/180/16,'XWarp'},
					{92.666+240/180/8,'XReset'},

					{93.666,'TapeStop'},

					{95.333,'VocalStutter'},

					{96,'TapeStop'},

					{96.666,'XWarp'},
					{96.666+240/180/16,'XWarp'},
					{96.666+240/180/8,'XReset'},

					{97.5,'XWarp'},
					{97.5+240/180/16,'XWarp'},
					{97.5+240/180/8,'XReset'},

					{98,'XWarp'},
					{98+240/180/16,'XWarp'},
					{98+240/180/8,'XReset'},

					{99,'TapeStop'},

					{100.666,'VocalStutter'},

					{101.333,'TapeStop'},

					{109.666,'KickVibrate'},
					{109.833,'KickVibrate'},
					{109.833+240/180/4,'KickVibrate'},
					{109.833+240/180/4*2,'KickVibrate'},
					{109.833+240/180/4*3,'KickVibrate'},
					{109.833+240/180/4*4,'KickVibrate'},
					{109.833+240/180/4*5,'KickVibrate'},
					{111.666,'KickVibrate'},
				};
				
				prefix_mods = {
				
				{0,200,'2.25x,-999999% Cover,*10000 No Beat','end'},

				{0.333,240/180/8,'*9 Split','len'},
				{0.333+240/180/8,240/180/8,'*9 No Split,*9 100.01% Reverse','len'},
				{0.333+240/180/8*2,240/180/8,'*9 100.01% Reverse,*9 -100% Alternate','len'},
				{0.333+240/180/8*3,240/180/8,'*9 No Reverse,*9 No Alternate','len'},
				{0.333+240/180/8*4,240/180/8,'*9 100.01% Reverse','len'},
				{0.333+240/180/8*5,240/180/8,'*9 No Reverse','len'},

				{1.500,240/180/8,'*9 Flip,*9 -100% Invert','len'},
				{1.500+240/180/8*1,240/180/8,'*9 No Flip,*18 100% Invert','len'},
				{1.500+240/180/8*2,240/180/8,'*9 Flip,*9 No Invert','len'},
				{1.500+240/180/8*3,240/180/8,'*9 Flip,*9 -100% Invert','len'},
				{1.500+240/180/8*4,240/180/8,'*9 No Flip,*9 No Invert','len'},

				{2.666,240/180*8+240/180/4,'*3 Dark','len'},

				{3.333,240/180*8-240/180/4,'*10000 Reverse','len',2},

				{2.833,240/180*8,'*10000 250% Beat','len'},

				{5.666,240/180/4,'*1.5 -50% Invert,*1.5 -50% Flip','len'},
				{5.666+240/180/4,240/180/4,'*4.5 100% Invert,*1.5 -100% Flip','len'},
				{5.666+240/180/4*2,240/180/4,'*4.5 -50% Invert,*1.5 -50% Flip','len'},
				{5.666+240/180/4*3,240/180/4,'*1.5 No Invert,*1.5 No Flip','len'},

				{8.333,240/180*4-240/180/4,'*1.5 50% Drunk','len',1},
				{8.333,240/180*4-240/180/4,'*1.5 -50% Drunk','len',2},

				{11.000,240/180/4,'*1.5 -50% Invert,*1.5 -50% Flip','len'},
				{11.000+240/180/4,240/180/4,'*4.5 100% Invert,*1.5 -100% Flip','len'},
				{11.000+240/180/4*2,240/180/4,'*4.5 -50% Invert,*1.5 -50% Flip','len'},
				{11.000+240/180/4*3,240/180/4,'*1.5 No Invert,*1.5 No Flip','len'},

				{13.333,240/180/4,'*1.5 No Drunk','len'},

				{13.666,240/180/4,'*3 No Dark','len'},

				{13.666,240/180/8,'*9 Invert','len'},
				{13.666+240/180/8,240/180/8,'*9 No Invert','len'},
				{13.666+240/180/8*2,240/180/8,'*9 Invert','len'},
				{13.666+240/180/8*3,240/180/8,'*9 No Invert','len'},
				{13.666+240/180/8*4,240/180/8,'*9 Invert','len'},
				{13.666+240/180/8*5,240/180/8,'*9 No Invert','len'},

				{14.833,240/180/8*5,'*9 300% Tipsy','len'},
				{14.833+240/180/8*5,240/180/4,'*9 No Tipsy','len'},

				{16.333,240/180/8*7,'*3 -300% Mini,*0.3 30% Flip,*1 Stealth,*1 Dark','len'},

				{17.500,240/180/8,'*10000 No Mini,*10000 No Flip,*10000 1000% Drunk','len'},

				{17.666,240/180/4*3,'*10 No Drunk','len'},

				{18.666,240/180/16,'*6 50% Reverse','len'},
				{18.666+240/180/16,240/180/16,'*6 No Reverse','len'},

				{19.000,240/180/8,'*9 Flip,*9 -100% Invert','len'},
				{19.000+240/180/8,240/180/8,'*9 No Flip,*9 No Invert','len'},
				{19.000+240/180/8*2,240/180/8,'*9 Flip,*9 -100% Invert','len'},
				{19.000+240/180/8*3,240/180/8,'*9 No Flip,*9 No Invert','len'},
				{19.000+240/180/8*4,240/180/8,'*9 Flip,*9 -100% Invert','len'},
				{19.000+240/180/8*5,240/180/8,'*9 No Flip,*9 No Invert','len'},

				{20.166,240/180/8*5,'*9 300% Tipsy','len'},
				{20.166+240/180/8*5,240/180/4,'*9 No Tipsy','len'},

				{21.666,240/180/4*7,'*0.9 0x','len'},
				{21.666+240/180/4*7,240/180/4,'*10 4x','len'},

				{24.000,240/180*6,'*1.5 50% Mini,*1.5 50% Drunk','len'},

				{29.333,240/180/16,'*6 50% Reverse','len'},
				{29.333+240/180/16,240/180/16,'*6 No Reverse','len'},

				{32.000,240/180/4,'*1.5 No Mini,*1.5 No Drunk','len'},

				{32.333,240/180/4*7,'*0.9 0x','len'},
				{32.333+240/180/4*7,240/180/4,'*6 2.25x','len'},

				{34.666,240/180/4,'*1.5 50% Stealth,*1.5 50% Dark','len'},

				{45.333,240/180*7,'*6 200% Bumpy,*0.75 25% Tornado,*3 Wave','len'},

				{45.333+240/180*7,240/180/4,'*6 No Bumpy,*0.75 No Tornado,*3 No Wave','len'},

				{55.000,240/180/4,'*9 Invert','len'},
				{55.000+240/180/4,240/180/4,'*9 Flip,*18 -100% Invert','len'},
				{55.000+240/180/4*2,240/180/4,'*9 Flip,*9 No Invert','len'},
				{55.000+240/180/4*3,240/180/4,'*9 No Flip','len'},

				{56.333,240/180/8,'*9 Alternate','len'},
				{56.333+240/180/8,240/180/8,'*9 No Alternate,*9 100.01% Reverse','len'},
				{56.333+240/180/8*2,240/180/8,'*9 100.01% Reverse,*9 -100% Split','len'},
				{56.333+240/180/8*3,240/180/8,'*9 No Reverse,*9 No Split','len'},
				{56.333+240/180/8*4,240/180/8,'*9 100.01% Reverse','len'},
				{56.333+240/180/8*5,240/180/8,'*9 No Reverse','len'},

				{57.500,240/180/8,'*9 Flip,*9 -100% Invert','len'},
				{57.500+240/180/8*1,240/180/8,'*9 No Flip,*18 100% Invert','len'},
				{57.500+240/180/8*2,240/180/8,'*9 Flip,*9 No Invert','len'},
				{57.500+240/180/8*3,240/180/8,'*9 Flip,*9 -100% Invert','len'},
				{57.500+240/180/8*4,240/180/8,'*9 No Flip,*9 No Invert','len'},

				{58.666+240/180/8,240/180*16,'*10000 50% Beat','len'},

				{58.666,240/180*16,'*4.5 150% Drunk,*0.75 25% Tipsy,*3 Wave','len'},

				{67.000,240/180/4,'*6 0x','len'},
				{67.000+240/180/8,240/180/4,'*10000 1600% Beat','len'},
				{67.000+240/180/4,240/180/4,'*24 2.25x','len'},

				{67.666,240/180/4,'*6 0x','len'},
				{67.666+240/180/8,240/180/4*5,'*10000 1600% Beat','len'},
				{67.666+240/180/4,240/180/4,'*24 2.25x','len'},

				{75.833,240/180/8,'*9 Flip','len'},
				{75.833+240/180/8,240/180/8,'*9 No Flip','len'},

				{77.166,240/180/8,'*9 Flip','len'},
				{77.166+240/180/8,240/180/8,'*9 No Flip','len'},

				{79.666,240/180/2,'*2.25 No Drunk,*0.375 No Tipsy,*1.5 No Wave','len'},

				{80.000,240/180*16+240/180/4,'*3 Dark','len'},

				{80.666,240/180*16-240/180/4,'*10000 Reverse','len',2},

				{80.000,240/180*16,'*10000 250% Beat','len'},

				{83.000,240/180/4,'*1.5 -50% Invert,*1.5 -50% Flip','len'},
				{83.000+240/180/4,240/180/4,'*4.5 100% Invert,*1.5 -100% Flip','len'},
				{83.000+240/180/4*2,240/180/4,'*4.5 -50% Invert,*1.5 -50% Flip','len'},
				{83.000+240/180/4*3,240/180/4,'*1.5 No Invert,*1.5 No Flip','len'},

				{85.666,240/180*8,'*1.5 50% Drunk','len',1},
				{85.666,240/180*8,'*1.5 -50% Drunk','len',2},

				{88.333,240/180/4,'*1.5 -50% Invert,*1.5 -50% Flip','len'},
				{88.333+240/180/4,240/180/4,'*4.5 100% Invert,*1.5 -100% Flip','len'},
				{88.333+240/180/4*2,240/180/4,'*4.5 -50% Invert,*1.5 -50% Flip','len'},
				{88.333+240/180/4*3,240/180/4,'*1.5 No Invert,*1.5 No Flip','len'},

				{93.666,240/180/4,'*1.5 -50% Invert,*1.5 -50% Flip','len'},
				{93.666+240/180/4,240/180/4,'*4.5 100% Invert,*1.5 -100% Flip','len'},
				{93.666+240/180/4*2,240/180/4,'*4.5 -50% Invert,*1.5 -50% Flip','len'},
				{93.666+240/180/4*3,240/180/4,'*1.5 No Invert,*1.5 No Flip','len'},

				{96.333,240/180*4-240/180/4,'*1.5 Drunk','len',1},
				{96.333,240/180*4-240/180/4,'*1.5 -100% Drunk','len',2},

				{99.000,240/180/4,'*1.5 -50% Invert,*1.5 -50% Flip','len'},
				{99.000+240/180/4,240/180/4,'*4.5 100% Invert,*1.5 -100% Flip','len'},
				{99.000+240/180/4*2,240/180/4,'*4.5 -50% Invert,*1.5 -50% Flip','len'},
				{99.000+240/180/4*3,240/180/4,'*1.5 No Invert,*1.5 No Flip','len'},

				{101.333,240/180/4,'*3 No Drunk','len'},

				{101.666,240/180/4,'*3 No Dark','len'},

				{101.666,240/180/8,'*9 Flip,*9 -100% Invert','len'},
				{101.666+240/180/8,240/180/8,'*9 No Flip,*9 No Invert','len'},
				{101.666+240/180/8*2,240/180/8,'*9 Flip,*9 -100% Invert','len'},
				{101.666+240/180/8*3,240/180/8,'*9 No Flip,*9 No Invert','len'},
				{101.666+240/180/8*4,240/180/8,'*9 Flip,*9 -100% Invert','len'},
				{101.666+240/180/8*5,240/180/8,'*9 No Flip,*9 No Invert','len'},

				{102.833,240/180/8*5,'*9 300% Tipsy','len'},
				{102.833+240/180/8*5,240/180/4,'*9 No Tipsy','len'},

				{104,240/180*2,'*2.25 75% Stealth,*3 Brake,*3 Dark','len'},
				{104+240/180*2,240/180*2,'*2.25 No Stealth,*3 No Brake,*3 No Dark','len'},

				{107.000,240/180/8,'*9 Invert','len'},
				{107.000+240/180/8,240/180/8,'*9 No Invert','len'},
				{107.000+240/180/8*2,240/180/8,'*9 Invert','len'},
				{107.000+240/180/8*3,240/180/8,'*9 No Invert','len'},
				{107.000+240/180/8*4,240/180/8,'*9 Invert','len'},
				{107.000+240/180/8*5,240/180/8,'*9 No Invert','len'},

				{108.166,240/180/8*5,'*9 300% Tipsy','len'},
				{108.166+240/180/8*5,240/180/4,'*9 No Tipsy','len'},

				{109.666,240/180/8,'*9 Split','len'},
				{109.666+240/180/8,240/180/8,'*9 No Split,*9 100.01% Reverse','len'},
				{109.666+240/180/8*2,240/180/8,'*9 100.01% Reverse,*9 -100% Alternate','len'},
				{109.666+240/180/8*3,240/180/8,'*9 No Reverse,*9 No Alternate','len'},
				{109.666+240/180/8*4,240/180/8,'*9 100.01% Reverse','len'},
				{109.666+240/180/8*5,240/180/8,'*9 No Reverse','len'},

				{110.833,240/180/8,'*9 Flip,*9 -100% Invert','len'},
				{110.833+240/180/8*1,240/180/8,'*9 No Flip,*18 100% Invert','len'},
				{110.833+240/180/8*2,240/180/8,'*9 Flip,*9 No Invert','len'},
				{110.833+240/180/8*3,240/180/8,'*9 Flip,*9 -100% Invert','len'},
				{110.833+240/180/8*4,240/180/8,'*9 No Flip,*9 No Invert','len'},

				{112.333,240/180*10,'*3.75 -1000% Tornado,*6 1000% Bumpy,*0.75 200% Mini','len'},
				
				}

				for i = 24.333,32,240/180 do
					table.insert(prefix_mods,{i+240/180/4*0,240/180/4,'*1.5 -50% Invert,*1.5 -50% Flip','len'});
					table.insert(prefix_mods,{i+240/180/4*1,240/180/4,'*4.5 100% Invert,*1.5 -100% Flip','len'});
					table.insert(prefix_mods,{i+240/180/4*2,240/180/4,'*4.5 -50% Invert,*1.5 -50% Flip','len'});
					table.insert(prefix_mods,{i+240/180/4*3,240/180/4,'*1.5 No Invert,*1.5 No Flip','len'});
				end
				
				
				prefix_plr = {};
				
				self:queuecommand('Update');
			end"
		
		UpdateCommand="%function(self)
		
			local beat = GAMESTATE:GetSongBeat();
			
			-----------------------
			-- Player mod resets --
			-----------------------
			GAMESTATE:ApplyGameCommand('mod,clearall')
			
			--------------------------------------------------------------------------------------------
			-- Mod reader code originally coded by Taronuke, remade to support end times and lengths. --
			--------------------------------------------------------------------------------------------
			for i,v in pairs(prefix_mods) do
				if prefix_time >=v[1] then
					if (v[4] == 'len' and prefix_time <=v[1]+v[2]) or (v[4] == 'end' and prefix_time <=v[2]) then
						if table.getn(v) == 5 then
							GAMESTATE:ApplyGameCommand('mod,'..v[3],v[5]);
						else
							GAMESTATE:ApplyGameCommand('mod,'..v[3]);
						end
					end
				end
			end
			
			
			
			if beat >= 0 and not checked then
				
				table.insert(prefix_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP1'));
				table.insert(prefix_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP2'));
				checked = true;
				
				SCREENMAN:GetTopScreen():GetChild('Overlay'):hidden(1);
				SCREENMAN:GetTopScreen():GetChild('Underlay'):hidden(1);
				for i,v in pairs(prefix_plr) do
					local multi = -1; if i == 2 then multi = 1; end
					if v then
						SCREENMAN:GetTopScreen():GetChild('ScoreP'..i):hidden(1);
						SCREENMAN:GetTopScreen():GetChild('LifeP'..i):hidden(1);
						v:x(SCREEN_CENTER_X);
						v:GetChild('Judgment'):x(160*multi);
						v:GetChild('Combo'):x(160*multi);
						
						
					end
				end
			end			
			
			-------------------------
			-- BEAT SPECIFIC STUFF --
			-------------------------

			if beat >= 9 and beat < 42 then
				for i,v in pairs(prefix_plr) do
					if v then
						local add = 0;
						if i == 1 then add = 180; end
						if beat < 40 then
							if beat >= 20 and beat < 24 then
								v:rotationx(math.cos(beat*math.pi)*90 + 90 + add);		
								v:GetChild('Judgment'):rotationx((math.cos(beat*math.pi)*90 + 90 + add)*-1);
								v:GetChild('Combo'):rotationx((math.cos(beat*math.pi)*90 + 90 + add)*-1);
							else
								if math.mod(beat,2) >= 1 then
									if math.mod(beat,4) >= 1 and math.mod(beat,4) < 3 then
										v:rotationx(-math.cos(beat*math.pi)*90 + 90 + add);		
										v:GetChild('Judgment'):rotationx((-math.cos(beat*math.pi)*90 + 90 + add)*-1);
										v:GetChild('Combo'):rotationx((-math.cos(beat*math.pi)*90 + 90 + add)*-1);
									else
										v:rotationx(math.cos(beat*math.pi)*90 + 90 + add);		
										v:GetChild('Judgment'):rotationx((math.cos(beat*math.pi)*90 + 90 + add)*-1);
										v:GetChild('Combo'):rotationx((math.cos(beat*math.pi)*90 + 90 + add)*-1);
									end
								end
							end
						else
							v:rotationx(0);
							v:GetChild('Judgment'):rotationx(0);
							v:GetChild('Combo'):rotationx(0);
							GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse');
						end
					end
				end
			end

			if beat >= 64 and beat < 71 then
				for i,v in pairs(prefix_plr) do
					if v then
						v:vibrate();
						v:effectmagnitude(0,0,auxvar:getaux());
					end
				end
			end

			if beat >= 72 and beat < 96 then
				for i,v in pairs(prefix_plr) do
					if v then
						if math.mod(beat,4) >= 2 then
							if beat < 94 then
								GAMESTATE:ApplyGameCommand('mod,*3.5 4x');
							else
								GAMESTATE:ApplyGameCommand('mod,*3.5 2.25x');
							end
						else
							GAMESTATE:ApplyGameCommand('mod,*3.5 0.75x');
						end
					end
				end
			end

			if beat >= 96 and beat < 103 then
				for i,v in pairs(prefix_plr) do
					if v then
						v:vibrate();
						v:effectmagnitude(0,0,auxvar:getaux());
					end
				end
			end

			if beat > 104 and beat < 136 then
				GAMESTATE:ApplyGameCommand('mod,*10000 '..math.sin(beat*math.pi)*10 ..'% Alternate,*10000 '..math.sin(beat*math.pi)*-5 ..'% Reverse');
				if math.mod(beat,2) >= 1 then
					GAMESTATE:ApplyGameCommand('mod,*10000 50% Stealth,*10000 50% Dark');
				else
					GAMESTATE:ApplyGameCommand('mod,*2 Stealth,*2 Dark');
				end
			end

			if beat > 136 and beat < 164 then
				GAMESTATE:ApplyGameCommand('mod,*10000 '..math.sin(beat*math.pi)*20 ..'% Alternate,*10000 '..math.sin(beat*math.pi)*-10 ..'% Reverse');
				if math.mod(beat,2) >= 1 then
					GAMESTATE:ApplyGameCommand('mod,*10000 50% Stealth,*10000 50% Dark');
				else
					GAMESTATE:ApplyGameCommand('mod,*2 Stealth,*2 Dark');
				end
			end

			if beat >= 241 and beat < 306 then
				for i,v in pairs(prefix_plr) do
					if v then
						local add = 0;
						if i == 1 then add = 180; end
						if beat < 304 then
							if beat >= 252 and beat < 256 or beat >= 284 and beat < 288 then
								v:rotationx(math.cos(beat*math.pi)*90 + 90 + add);		
								v:GetChild('Judgment'):rotationx((math.cos(beat*math.pi)*90 + 90 + add)*-1);
								v:GetChild('Combo'):rotationx((math.cos(beat*math.pi)*90 + 90 + add)*-1);
							else
								if math.mod(beat,2) >= 1 then
									if math.mod(beat,4) >= 1 and math.mod(beat,4) < 3 then
										v:rotationx(-math.cos(beat*math.pi)*90 + 90 + add);		
										v:GetChild('Judgment'):rotationx((-math.cos(beat*math.pi)*90 + 90 + add)*-1);
										v:GetChild('Combo'):rotationx((-math.cos(beat*math.pi)*90 + 90 + add)*-1);
									else
										v:rotationx(math.cos(beat*math.pi)*90 + 90 + add);		
										v:GetChild('Judgment'):rotationx((math.cos(beat*math.pi)*90 + 90 + add)*-1);
										v:GetChild('Combo'):rotationx((math.cos(beat*math.pi)*90 + 90 + add)*-1);
									end
								end
							end
						else
							v:rotationx(0);
							v:GetChild('Judgment'):rotationx(0);
							v:GetChild('Combo'):rotationx(0);
							GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse');
						end
					end
				end
			end

			if beat >= 272 and beat < 304 then
				for i,v in pairs(prefix_plr) do
					if v then
						v:vibrate();
						if math.mod(beat,2) >= 1 then
							v:effectmagnitude(auxvar:getaux(),0,0);
						else
							v:effectmagnitude(0,auxvar:getaux(),0);
						end
					end
				end
			end

			if beat >= 328 and beat < 335 then
				for i,v in pairs(prefix_plr) do
					if v then
						v:vibrate();
						v:effectmagnitude(0,0,auxvar:getaux());
					end
				end
			end

			--------------------------------------------------------------
			-- Message reader to make specific values of the actor aux. --
			--------------------------------------------------------------
			if prefix_curmessage <= table.getn(prefix_messages) then
				if prefix_time >= prefix_messages[prefix_curmessage][1] then
					MESSAGEMAN:Broadcast(prefix_messages[prefix_curmessage][2]);
					prefix_curmessage = prefix_curmessage + 1;
				end
			end
			
			self:queuecommand('Update2');
			
		end"


		Update2Command="%function(self)
		self:sleep(0.02);
		self:queuecommand('Update');
		end"

	/>
	
	<BitmapText
		Font="Common Normal"
		Text="test"
		OnCommand="x,SCREEN_CENTER_X;y,SCREEN_CENTER_Y;effectclock,music;playcommand,SetTime;hidden,1"
		SetTimeCommand="%function(self) self:settext(self:GetSecsIntoEffect()); prefix_time = PREFSMAN:GetPreference('GlobalOffsetSeconds') - (-0.321 - -0.094) + tonumber(self:GetText()); self:sleep(0.02); self:queuecommand('SetTime'); end"
	/>
	
	<!-- Aux actor, VERY IMPORTANT -->
	<Layer
		Type="Quad"
		OnCommand=""
		InitCommand="%function(self) auxvar = self; self:hidden(1) end"
		KickVibrateMessageCommand="finishtweening;aux,500;linear,240/180/16;aux,0"
		VocalStutterMessageCommand="finishtweening;aux,33;sleep,240/180/2;aux,0"
		TapeStopMessageCommand="%function()
			for i,v in pairs(prefix_plr) do
				if v then
					v:decelerate(240/180/16);
					v:zoomx(2);
					v:zoomy(0);
					v:sleep(240/180/16);
					v:bounceend(240/180/8);
					v:zoomx(1);
					v:zoomy(1);
				end
			end
		end"
		XWarpMessageCommand="%function()
			local rand = math.random(SCREEN_CENTER_X-170,SCREEN_CENTER_X+170);
			for i,v in pairs(prefix_plr) do
				if v then
					v:x(rand);				
				end
			end
		end"
		XResetMessageCommand="%function()
			for i,v in pairs(prefix_plr) do
				if v then
					v:x(SCREEN_CENTER_X);					
				end
			end
		end"
	/>
	
</children></ActorFrame>