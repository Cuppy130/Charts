<ActorFrame><children>

	<Layer
		Type="Quad"
		InitCommand="hidden,1"
		OnCommand="sleep,103.39"
	/>
	
	<Layer
		Type="Quad"
		InitCommand="hidden,1"
		OnCommand="%function(self)
				fgcurcommand = 1;
				checked = false;
				prefix_time = 0;
				
				prefix_curmessage = 1;
				
				
				prefix_messages = {
					--{25.612,'SkewTwitch'},
				};
				
				
				prefix_mods = {
				
				{0,200,'2.25x,-999999% Cover,*10000 No Beat','end'},
				
				{6.000,240/150/2,'*1.875 150% Mini','len'},
				
				{6.400+240/150/4,240/150/4*14,'*0.26786 No Mini','len'},
				
				{12.400,240/150/16,'*2.5 Centered','len'},
				{12.400+240/150/16,240/150/16,'*2.5 No Centered','len'},
				{12.400+240/150/16*2,240/150/16,'*2.5 Centered','len'},
				{12.400+240/150/16*3,240/150/16,'*2.5 No Centered','len'},
				{12.400+240/150/16*4,240/150/16,'*2.5 Centered','len'},
				{12.400+240/150/16*5,240/150/16,'*2.5 No Centered','len'},
				{12.400+240/150/16*6,240/150/16,'*2.5 Centered','len'},
				{12.400+240/150/16*7,240/150/16,'*2.5 No Centered','len'},
				
				{13.200,240/150/8,'*5 50% Drunk','len'},
				{24.200,240/150/4,'*5 No Drunk','len'},
				
				{24.400,240/150/4,'*2.5 Alternate','len'},
				{24.400+240/150/4,240/150/4,'*2.5 100.01% Reverse,*2.5 No Alternate','len'},
				{24.400+240/150/4*2,240/150/4,'*2.5 100.01% Reverse,*2.5 -100% Alternate','len'},
				{24.400+240/150/4*3,240/150/4,'*2.5 No Reverse,*2.5 No Alternate','len'},
				
				{28.800,240/150/8,'*5 Hallway','len'},
				{28.800+240/150/8,240/150/8,'*5 No Hallway','len'},
				{32.000,240/150/8,'*5 Hallway','len'},
				{32.000+240/150/8,240/150/8,'*5 No Hallway','len'},
				{35.200,240/150/8,'*5 Hallway','len'},
				{35.200+240/150/8,240/150/8,'*5 No Hallway','len'},
				{38.400,240/150/8,'*5 Hallway','len'},
				{38.400+240/150/8,240/150/8,'*5 No Hallway','len'},
				
				{12.800+28.800,240/150/8,'*5 Hallway','len'},
				{12.800+28.800+240/150/8,240/150/8,'*5 No Hallway','len'},
				{12.800+32.000,240/150/8,'*5 Hallway','len'},
				{12.800+32.000+240/150/8,240/150/8,'*5 No Hallway','len'},
				{12.800+35.200,240/150/8,'*5 Hallway','len'},
				{12.800+35.200+240/150/8,240/150/8,'*5 No Hallway','len'},
				{12.800+38.400,240/150/8,'*5 Hallway','len'},
				{12.800+38.400+240/150/8,240/150/8,'*5 No Hallway','len'},
				
				{26.000,240/150/8,'*5 50% Drunk','len'},
				{51.400,240/150/4,'*5 No Drunk','len'},
				
				{38.400,51.200,'*3.75 150% Wave','end'},
				{51.200,240/150/4,'*3.75 No Wave','len'},
				
				{51.600,63.600,'*0.3125 Centered,*0.3125 -100% Mini,*0.15625 50% Flip,*0.28125 90% Stealth,*0.625 -200% Tornado,*0.625 200% Wave','end'},
				{54.800,63.600,'*10000 Alternate,*10000 1x','end'},
				
				{63.400,240/150/2,'*10000 1600% Beat','len'},
				
				{63.600,240/150/4,'*5 No Centered,*5 No Mini,*2.5 No Flip,*4.5 No Stealth,*10 No Tornado,*10 No Wave,*5 No Alternate,*10 2.25x','len'},
				
				{64.400,240/150/8,'*5 50% Drunk','len'},
				{75.400,240/150/4,'*5 No Drunk','len'},
				
				{67.200,240/150/8,'*5 Hallway','len'},
				{67.200+240/150/8,240/150/8,'*5 No Hallway','len'},
				{70.400,240/150/8,'*5 Hallway','len'},
				{70.400+240/150/8,240/150/8,'*5 No Hallway','len'},
				{73.600,240/150/8,'*5 Hallway','len'},
				{73.600+240/150/8,240/150/8,'*5 No Hallway','len'},
				
				{75.200,0.2,'*10000 50% Dark','len'},
				{75.400,240/150/8*7,'*2.5 Dark','len'},
				
				{76.800,240/150/4,'*2.5 No Dark','len'},
				
				{75.800,240/150/8,'*10 Invert','len'},
				{75.800+240/150/8,240/150/8,'*10 Flip,*20 -100% Invert','len'},
				{75.800+240/150/8*2,240/150/8,'*10 Flip,*10 No Invert','len'},
				{75.800+240/150/8*3,240/150/8,'*10 Flip,*10 -100% Invert','len'},
				{75.800+240/150/8*4,240/150/8,'*10 No Flip,*20 Invert','len'},
				{75.800+240/150/8*5,240/150/8,'*10 No Invert','len'},
				
				{76.800,0.050,'*10000 0x','len'},
				{76.800+0.050,240/150/4-0.050,'*9 2.25x','len'},
				
				{77.200,240/150/8,'*5 50% Drunk','len'},
				{89.800,240/150/4,'*5 No Drunk','len'},
				
				{80.000,240/150/8,'*5 Hallway','len'},
				{80.000+240/150/8,240/150/8,'*5 No Hallway','len'},
				{83.200,240/150/8,'*5 Hallway','len'},
				{83.200+240/150/8,240/150/8,'*5 No Hallway','len'},
				{86.400,240/150/8,'*5 Hallway','len'},
				{86.400+240/150/8,240/150/8,'*5 No Hallway','len'},
				{89.600,240/150/8,'*5 Hallway','len'},
				{89.600+240/150/8,240/150/8,'*5 No Hallway','len'},
				
				{90.000,240/150/4*7,'*1.5 400% Tipsy','len'},
				{90.000+240/150/8*13,240/150/4,'*10000 800% Beat','len'},
				{90.000+240/150/4*7,240/150/4,'*40 No Tipsy','len'},
				
				{93.200,240/150/4*7,'*1.5 400% Tipsy','len'},
				{93.200+240/150/8*13,240/150/4,'*10000 800% Beat','len'},
				{93.200+240/150/4*7,240/150/4,'*40 No Tipsy','len'},
				
				{96.400,240/150/4*7,'*1.5 400% Tipsy','len'},
				{96.400+240/150/8*13,240/150/4,'*10000 800% Beat','len'},
				{96.400+240/150/4*7,240/150/4,'*40 No Tipsy','len'},
				
				{99.600,240/150/4*7,'*1.5 400% Tipsy','len'},
				{99.600+240/150/8*13,240/150/4,'*10000 800% Beat','len'},
				{99.600+240/150/4*7,240/150/4,'*40 No Tipsy','len'},
				
				}
				
				for i = 0.4,24.399,240/150 do
					table.insert(prefix_mods,{i,240/150/8,'*2.5 Brake','len'});
					table.insert(prefix_mods,{i+240/150/8,240/150/8,'*2.5 No Brake','len'});
				end
				
				for i = 26,51.599,240/150 do
					table.insert(prefix_mods,{i,240/150/8,'*2.5 Brake','len'});
					table.insert(prefix_mods,{i+240/150/8,240/150/8,'*2.5 No Brake','len'});
				end
				
				for i = 64.4,75.599,240/150 do
					table.insert(prefix_mods,{i,240/150/8,'*2.5 Brake','len'});
					table.insert(prefix_mods,{i+240/150/8,240/150/8,'*2.5 No Brake','len'});
				end
				
				for i = 77.2,89.999,240/150 do
					table.insert(prefix_mods,{i,240/150/8,'*2.5 Brake','len'});
					table.insert(prefix_mods,{i+240/150/8,240/150/8,'*2.5 No Brake','len'});
				end
				
				for i = 13.4,24.199,240/150/4 do
					table.insert(prefix_mods,{i,240/150/8,'*10 -50% Drunk','len'});
					table.insert(prefix_mods,{i+240/150/8,240/150/8,'*10 50% Drunk','len'});
				end
				
				for i = 26,51.399,240/150/4 do
					table.insert(prefix_mods,{i,240/150/8,'*10 -50% Drunk','len'});
					table.insert(prefix_mods,{i+240/150/8,240/150/8,'*10 50% Drunk','len'});
				end
				
				for i = 64.6,75.199,240/150/4 do
					table.insert(prefix_mods,{i,240/150/8,'*10 -50% Drunk','len'});
					table.insert(prefix_mods,{i+240/150/8,240/150/8,'*10 50% Drunk','len'});
				end
				
				for i = 77.4,89.599,240/150/4 do
					table.insert(prefix_mods,{i,240/150/8,'*10 -50% Drunk','len'});
					table.insert(prefix_mods,{i+240/150/8,240/150/8,'*10 50% Drunk','len'});
				end
				
				prefix_plr = {};
				
				self:queuecommand('Update');
			end"
		
		UpdateCommand="%function(self)
		
			local beat = GAMESTATE:GetSongBeat();
			
			-----------------------
			-- Player mod resets --
			-----------------------
			GAMESTATE:ApplyGameCommand('mod,clearall')
			
			--------------------------------------------------------------------------------------------
			-- Mod reader code originally coded by Taronuke, remade to support end times and lengths. --
			--------------------------------------------------------------------------------------------
			for i,v in pairs(prefix_mods) do
				if prefix_time >=v[1] then
					if (v[4] == 'len' and prefix_time <=v[1]+v[2]) or (v[4] == 'end' and prefix_time <=v[2]) then
						if table.getn(v) == 5 then
							GAMESTATE:ApplyGameCommand('mod,'..v[3],v[5]);
						else
							GAMESTATE:ApplyGameCommand('mod,'..v[3]);
						end
					end
				end
			end
			
			
			
			if beat >= 0 and not checked then
				
				table.insert(prefix_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP1'));
				table.insert(prefix_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP2'));
				checked = true;
				
				SCREENMAN:GetTopScreen():GetChild('Overlay'):hidden(1);
				SCREENMAN:GetTopScreen():GetChild('Underlay'):hidden(1);
				for i,v in pairs(prefix_plr) do
					if v then
						SCREENMAN:GetTopScreen():GetChild('ScoreP'..i):hidden(1);
						SCREENMAN:GetTopScreen():GetChild('LifeP'..i):hidden(1);
						local d = SCREEN_CENTER_X-160
						if i == 2 then d = SCREEN_CENTER_X+160 end
						v:x(d);
					end
				end
			end
			
			if beat >= 128 and fgcurcommand == 1 then
				for i,v in pairs(prefix_plr) do
					local multi = -1; if i == 2 then multi = 1; end
					if v then
						v:linear(240/150*2);
						v:x(SCREEN_CENTER_X);
						v:GetChild('Judgment'):linear(240/150*2);
						v:GetChild('Combo'):linear(240/150*2);
						v:GetChild('Judgment'):x(multi*160);
						v:GetChild('Combo'):x(multi*160);
					end
				end
				fgcurcommand = fgcurcommand + 1;
			end
			
			if beat >= 158 and fgcurcommand == 2 then
				for i,v in pairs(prefix_plr) do
					local multi = -1; if i == 2 then multi = 1; end
					if v then
						v:linear(240/150/8);
						v:x(SCREEN_CENTER_X+multi*160);
						v:GetChild('Judgment'):linear(240/150/8);
						v:GetChild('Combo'):linear(240/150/8);
						v:GetChild('Judgment'):x(0);
						v:GetChild('Combo'):x(0);
					end
				end
				fgcurcommand = fgcurcommand + 1;
			end
			
			-------------------------
			-- BEAT SPECIFIC STUFF --
			-------------------------
			if beat >= 192 and beat < 224 then
				GAMESTATE:ApplyGameCommand('mod,*10000 '..math.sin(4*beat*math.pi)*10 ..'% Alternate,*10000 '..math.sin(4*beat*math.pi)*-5 ..'% Reverse');
			end
			
			--------------------------------------------------------------
			-- Message reader to make specific values of the actor aux. --
			--------------------------------------------------------------
			if prefix_curmessage <= table.getn(prefix_messages) then
				if prefix_time >= prefix_messages[prefix_curmessage][1] then
					MESSAGEMAN:Broadcast(prefix_messages[prefix_curmessage][2]);
					prefix_curmessage = prefix_curmessage + 1;
				end
			end
			
			self:queuecommand('Update2');
			
		end"


		Update2Command="%function(self)
		self:sleep(0.02);
		self:queuecommand('Update');
		end"

	/>
	
	<BitmapText
		Font="Common Normal"
		Text="test"
		OnCommand="x,SCREEN_CENTER_X;y,SCREEN_CENTER_Y;effectclock,music;playcommand,SetTime;hidden,1"
		SetTimeCommand="%function(self) self:settext(self:GetSecsIntoEffect()); prefix_time = PREFSMAN:GetPreference('GlobalOffsetSeconds') - (-0.388 - 0.006) + tonumber(self:GetText()); self:sleep(0.02); self:queuecommand('SetTime'); end"
	/>
	
	<!-- Aux actor, VERY IMPORTANT -->
	<Layer
		Type="Quad"
		OnCommand=""
		InitCommand="%function(self) auxvar = self; self:hidden(1) end"
		SkewTwitchMessageCommand="finishtweening;aux,0;linear,9.6;aux,1.5;linear,1.6;aux,0"
	/>
	
</children></ActorFrame>