<ActorFrame><children>

	<Layer
		Type="Quad"
		InitCommand="hidden,1"
		OnCommand="sleep,112.077"
	/>
	
	<Layer
		Type="Quad"
		InitCommand="hidden,1"
		OnCommand="%function(self)
				fgcurcommand = 1;
				checked = false;
				prefix_time = 0;
				
				prefix_curmessage = 1;
				
				
				prefix_messages = {
					--{1.371,'Tilt1'},
				};
				
				
				prefix_mods = {
				
				{0,200,'2x,-999999% Cover,*10000 No Beat','end'},
				
				{1.371,240/175/8*3,'*2.9167 150% Distant','len'},
				{1.371+240/175/8*3,240/175/8*3,'*5.8334 -150% Distant','len'},
				{1.371+240/175/8*6,240/175/4,'*4.375 No Distant','len'},
				
				{4.114,240/175/8*3,'*2.9167 -150% Distant','len'},
				{4.114+240/175/8*3,240/175/8*3,'*5.8334 150% Distant','len'},
				{4.114+240/175/8*6,240/175/8*3,'*5.8334 -150% Distant','len'},
				{4.114+240/175/8*9,240/175/8*3,'*4.375 No Distant','len'},
				
				{6.857,240/175/8*3,'*2.9167 -150% Distant','len'},
				{6.857+240/175/8*3,240/175/8*3,'*5.8334 150% Distant','len'},
				{6.857+240/175/8*6,240/175/4,'*4.375 No Distant','len'},
				
				{9.600,240/175/8*3,'*2.9167 150% Distant','len'},
				{9.600+240/175/8*3,240/175/8*3,'*5.8334 -150% Distant','len'},
				{9.600+240/175/8*6,240/175/8*3,'*5.8334 150% Distant','len'},
				{9.600+240/175/8*9,240/175/8*3,'*4.375 No Distant','len'},
				
				{12.343,240/175/8*3,'*2.9167 150% Distant','len'},
				{12.343+240/175/8*3,240/175/8*3,'*5.8334 -150% Distant','len'},
				{12.343+240/175/8*6,240/175/4,'*8.75 150% Distant','len'},
				{12.343+240/175/8*8,240/175/8*3,'*5.8334 -150% Distant','len'},
				{12.343+240/175/8*11,240/175/8*3,'*5.8334 150% Distant','len'},
				{12.343+240/175/8*14,240/175/4,'*8.75 -150% Distant','len'},
				{12.343+240/175/8*16,240/175/8*3,'*5.8334 150% Distant','len'},
				{12.343+240/175/8*19,240/175/8*3,'*5.8334 -150% Distant','len'},
				{12.343+240/175/8*22,240/175/4,'*8.75 150% Distant','len'},
				{12.343+240/175/8*24,240/175/8*3,'*5.8334 -150% Distant','len'},
				{12.343+240/175/8*27,240/175/8*3,'*5.8334 150% Distant','len'},
				{12.343+240/175/8*30,240/175/4,'*8.75 -150% Distant','len'},
				{12.343+240/175/8*32,240/175*2,'*0.546875 No Distant','len'},
				
				{17.657,240/175*2,'*10000 -250% Beat','len'},
				
				{21.943,0.050,'*10000 0x','len'},
				{21.943+0.050,240/175,'*2 2x','len'},
				
				{22.629,240/175*20,'*10000 -20% SuddenOffset,*10000 -90% HiddenOffset','len'},
				{22.629,240/175*20,'*1.4584 Sudden,*1.4584 Hidden,-10% Stealth','len'},
				
				{22.971,240/175/16,'*5 Brake','len'},
				{22.971+240/175/16,240/175/16,'*5 No Brake','len'},
				{22.971+240/175/16*2,240/175/16,'*5 Brake','len'},
				{22.971+240/175/16*3,240/175/16,'*5 No Brake','len'},
				
				{34.286,240/175*12,'*1.4584 50% Drunk','len'},
				{45.257,240/175*4,'*2.9167 Wave','len'},
				
				{50.571,240/175*2,'*10000 -250% Beat','len'},
				
				{55.543,240/175/4*14,'1.75x','len'},
				{55.543,240/175/4*14,'*0.729167 50% Stealth','len'},
				{55.543,240/175/2,'*10000 50% Dark','len'},
				
				{56.229,240/175*8,'*0.046 Dark','len'},
				{56.229,240/175*8,'*10000 1.75x','len'},
				{56.229,240/175*8,'*10000 50% Stealth','len'},
				
				{56.229,240/175,'*0.4862 Stealth','len'},
				
				{57.650,240/175/4-0.050,'*1.4584 Stealth','len'},
				{57.650+240/175/4,240/175/4-0.050,'*1.4584 Stealth','len'},
				{57.650+240/175/4*2,240/175/4-0.050,'*1.4584 Stealth','len'},
				{57.650+240/175/4*3,240/175/4*5-0.050,'*0.4862 Stealth','len'},
				
				{60.393,240/175/4-0.050,'*1.4584 Stealth','len'},
				{60.393+240/175/4,240/175/4-0.050,'*1.4584 Stealth','len'},
				{60.393+240/175/4*2,240/175/4-0.050,'*1.4584 Stealth','len'},
				{60.393+240/175/4*3,240/175/4*5-0.050,'*0.4862 Stealth','len'},
				
				{63.136,240/175/4-0.050,'*1.4584 Stealth','len'},
				{63.136+240/175/4,240/175/4-0.050,'*1.4584 Stealth','len'},
				{63.136+240/175/4*2,240/175/4-0.050,'*1.4584 Stealth','len'},
				{63.136+240/175/4*3,240/175/4*5-0.050,'*0.4862 Stealth','len'},
				
				{65.879,240/175/4-0.050,'*1.4584 Stealth','len'},
				{65.879+240/175/4,240/175/4-0.050,'*1.4584 Stealth','len'},
				{65.879+240/175/4*2,240/175/4-0.050,'*1.4584 Stealth','len'},
				{65.879+240/175/4*3,240/175/4*5-0.050,'*0.4862 Stealth','len'},
				
				{60.171,240/175*2,'*10000 1x','len'},
				{65.657,240/175/8*9,'*10000 1x','len'},
				
				{67.200,0.050,'*10000 200% Mini,*10000 2x','len'},
				{67.200+0.050,240/175*4-0.050,'*0.368 No Mini','len'},
				
				{72.514,240/175*2,'*10000 -250% Beat','len'},
				
				{76.800,240/175,'*10000 -160% SuddenOffset,*10000 -130% HiddenOffset','len',1},
				{76.800,240/175,'*10000 240% SuddenOffset,*10000 -130% HiddenOffset','len',2},
				
				{76.800,240/175*17-240/175/2,'*10000 Sudden,*10000 Hidden','len'},
				
				{76.800,240/175*17,'*2.9167 50% Dark','len'},
				
				{76.800,240/175,'*10000 Dark','len',1},
				{76.800+240/175,240/175*2,'*2.9167 Dark','len',2},
				{76.800+240/175*3,240/175*2,'*2.9167 Dark','len',1},
				{76.800+240/175*5,240/175*2,'*2.9167 Dark','len',2},
				{76.800+240/175*7,240/175*2,'*2.9167 Dark','len',1},
				{76.800+240/175*9,240/175*2,'*2.9167 Dark','len',2},
				{76.800+240/175*11,240/175*2,'*2.9167 Dark','len',1},
				{76.800+240/175*13,240/175*2,'*2.9167 Dark','len',2},
				{76.800+240/175*15,240/175*2,'*2.9167 Dark','len',1},
				
				{89.142,240/175*6,'*2.9167 Drunk','len',1},
				{89.142,240/175*6,'*2.9167 -100% Drunk','len',2},
				
				{76.800,240/175*2,'*0.729167 -100% Hallway','len',1},
				{76.800,240/175*2,'*0.729167 Hallway','len',2},
				
				{76.800+240/175*2,240/175/16*3,'*3.8889 -66.667% Hallway','len',1},
				{76.800+240/175*2+240/175/16*3,240/175/16*3,'*3.8889 -33.333% Hallway','len',1},
				{76.800+240/175*2+240/175/16*6,240/175/8,'*3.8889 No Hallway','len',1},
				{76.800+240/175*2+240/175/16*8,240/175/16*3,'*3.8889 33.333% Hallway','len',1},
				{76.800+240/175*2+240/175/16*11,240/175/16*3,'*3.8889 66.667% Hallway','len',1},
				{76.800+240/175*2+240/175/16*14,240/175/8*9,'*3.8889 Hallway','len',1},
				{76.800+240/175*2,240/175/16*3,'*3.8889 66.667% Hallway','len',2},
				{76.800+240/175*2+240/175/16*3,240/175/16*3,'*3.8889 33.333% Hallway','len',2},
				{76.800+240/175*2+240/175/16*6,240/175/16*3,'*3.8889 No Hallway','len',2},
				{76.800+240/175*2+240/175/16*8,240/175/16*3,'*3.8889 -33.333% Hallway','len',2},
				{76.800+240/175*2+240/175/16*11,240/175/16*3,'*3.8889 -66.667% Hallway','len',2},
				{76.800+240/175*2+240/175/16*14,240/175/8*9,'*3.8889 -100% Hallway','len',2},
				
				{76.800+240/175*4,240/175/16*3,'*3.8889 -66.667% Hallway','len',2},
				{76.800+240/175*4+240/175/16*3,240/175/16*3,'*3.8889 -33.333% Hallway','len',2},
				{76.800+240/175*4+240/175/16*6,240/175/8,'*3.8889 No Hallway','len',2},
				{76.800+240/175*4+240/175/16*8,240/175/16*3,'*3.8889 33.333% Hallway','len',2},
				{76.800+240/175*4+240/175/16*11,240/175/16*3,'*3.8889 66.667% Hallway','len',2},
				{76.800+240/175*4+240/175/16*14,240/175/8*9,'*3.8889 Hallway','len',2},
				{76.800+240/175*4,240/175/16*3,'*3.8889 66.667% Hallway','len',1},
				{76.800+240/175*4+240/175/16*3,240/175/16*3,'*3.8889 33.333% Hallway','len',1},
				{76.800+240/175*4+240/175/16*6,240/175/16*3,'*3.8889 No Hallway','len',1},
				{76.800+240/175*4+240/175/16*8,240/175/16*3,'*3.8889 -33.333% Hallway','len',1},
				{76.800+240/175*4+240/175/16*11,240/175/16*3,'*3.8889 -66.667% Hallway','len',1},
				{76.800+240/175*4+240/175/16*14,240/175/8*9,'*3.8889 -100% Hallway','len',1},
				
				{76.800+240/175*6,240/175/16*3,'*3.8889 -66.667% Hallway','len',1},
				{76.800+240/175*6+240/175/16*3,240/175/16*3,'*3.8889 -33.333% Hallway','len',1},
				{76.800+240/175*6+240/175/16*6,240/175/8,'*3.8889 No Hallway','len',1},
				{76.800+240/175*6+240/175/16*8,240/175/16*3,'*3.8889 33.333% Hallway','len',1},
				{76.800+240/175*6+240/175/16*11,240/175/16*3,'*3.8889 66.667% Hallway','len',1},
				{76.800+240/175*6+240/175/16*14,240/175/8*9,'*3.8889 Hallway','len',1},
				{76.800+240/175*6,240/175/16*3,'*3.8889 66.667% Hallway','len',2},
				{76.800+240/175*6+240/175/16*3,240/175/16*3,'*3.8889 33.333% Hallway','len',2},
				{76.800+240/175*6+240/175/16*6,240/175/16*3,'*3.8889 No Hallway','len',2},
				{76.800+240/175*6+240/175/16*8,240/175/16*3,'*3.8889 -33.333% Hallway','len',2},
				{76.800+240/175*6+240/175/16*11,240/175/16*3,'*3.8889 -66.667% Hallway','len',2},
				{76.800+240/175*6+240/175/16*14,240/175/8*9,'*3.8889 -100% Hallway','len',2},
				
				{76.800+240/175*8,240/175/16*3,'*3.8889 -66.667% Hallway','len',2},
				{76.800+240/175*8+240/175/16*3,240/175/16*3,'*3.8889 -33.333% Hallway','len',2},
				{76.800+240/175*8+240/175/16*6,240/175/8,'*3.8889 No Hallway','len',2},
				{76.800+240/175*8+240/175/16*8,240/175/16*3,'*3.8889 33.333% Hallway','len',2},
				{76.800+240/175*8+240/175/16*11,240/175/16*3,'*3.8889 66.667% Hallway','len',2},
				{76.800+240/175*8+240/175/16*14,240/175/8*9,'*3.8889 Hallway','len',2},
				{76.800+240/175*8,240/175/16*3,'*3.8889 66.667% Hallway','len',1},
				{76.800+240/175*8+240/175/16*3,240/175/16*3,'*3.8889 33.333% Hallway','len',1},
				{76.800+240/175*8+240/175/16*6,240/175/16*3,'*3.8889 No Hallway','len',1},
				{76.800+240/175*8+240/175/16*8,240/175/16*3,'*3.8889 -33.333% Hallway','len',1},
				{76.800+240/175*8+240/175/16*11,240/175/16*3,'*3.8889 -66.667% Hallway','len',1},
				{76.800+240/175*8+240/175/16*14,240/175/8*9,'*3.8889 -100% Hallway','len',1},
				
				{76.800+240/175*10,240/175/16*3,'*3.8889 -66.667% Hallway','len',1},
				{76.800+240/175*10+240/175/16*3,240/175/16*3,'*3.8889 -33.333% Hallway','len',1},
				{76.800+240/175*10+240/175/16*6,240/175/8,'*3.8889 No Hallway','len',1},
				{76.800+240/175*10+240/175/16*8,240/175/16*3,'*3.8889 33.333% Hallway','len',1},
				{76.800+240/175*10+240/175/16*11,240/175/16*3,'*3.8889 66.667% Hallway','len',1},
				{76.800+240/175*10+240/175/16*14,240/175/8*9,'*3.8889 Hallway','len',1},
				{76.800+240/175*10,240/175/16*3,'*3.8889 66.667% Hallway','len',2},
				{76.800+240/175*10+240/175/16*3,240/175/16*3,'*3.8889 33.333% Hallway','len',2},
				{76.800+240/175*10+240/175/16*6,240/175/16*3,'*3.8889 No Hallway','len',2},
				{76.800+240/175*10+240/175/16*8,240/175/16*3,'*3.8889 -33.333% Hallway','len',2},
				{76.800+240/175*10+240/175/16*11,240/175/16*3,'*3.8889 -66.667% Hallway','len',2},
				{76.800+240/175*10+240/175/16*14,240/175/8*9,'*3.8889 -100% Hallway','len',2},
				
				{76.800+240/175*12,240/175/16*3,'*3.8889 -66.667% Hallway','len',2},
				{76.800+240/175*12+240/175/16*3,240/175/16*3,'*3.8889 -33.333% Hallway','len',2},
				{76.800+240/175*12+240/175/16*6,240/175/8,'*3.8889 No Hallway','len',2},
				{76.800+240/175*12+240/175/16*8,240/175/16*3,'*3.8889 33.333% Hallway','len',2},
				{76.800+240/175*12+240/175/16*11,240/175/16*3,'*3.8889 66.667% Hallway','len',2},
				{76.800+240/175*12+240/175/16*14,240/175/8*9,'*3.8889 Hallway','len',2},
				{76.800+240/175*12,240/175/16*3,'*3.8889 66.667% Hallway','len',1},
				{76.800+240/175*12+240/175/16*3,240/175/16*3,'*3.8889 33.333% Hallway','len',1},
				{76.800+240/175*12+240/175/16*6,240/175/16*3,'*3.8889 No Hallway','len',1},
				{76.800+240/175*12+240/175/16*8,240/175/16*3,'*3.8889 -33.333% Hallway','len',1},
				{76.800+240/175*12+240/175/16*11,240/175/16*3,'*3.8889 -66.667% Hallway','len',1},
				{76.800+240/175*12+240/175/16*14,240/175/8*9,'*3.8889 -100% Hallway','len',1},
				
				{76.800+240/175*14,240/175/16*3,'*3.8889 -66.667% Hallway','len',1},
				{76.800+240/175*14+240/175/16*3,240/175/16*3,'*3.8889 -33.333% Hallway','len',1},
				{76.800+240/175*14+240/175/16*6,240/175/8,'*3.8889 No Hallway','len',1},
				{76.800+240/175*14+240/175/16*8,240/175/16*3,'*3.8889 33.333% Hallway','len',1},
				{76.800+240/175*14+240/175/16*11,240/175/16*3,'*3.8889 66.667% Hallway','len',1},
				{76.800+240/175*14+240/175/16*14,240/175/8*9,'*3.8889 Hallway','len',1},
				{76.800+240/175*14,240/175/16*3,'*3.8889 66.667% Hallway','len',2},
				{76.800+240/175*14+240/175/16*3,240/175/16*3,'*3.8889 33.333% Hallway','len',2},
				{76.800+240/175*14+240/175/16*6,240/175/16*3,'*3.8889 No Hallway','len',2},
				{76.800+240/175*14+240/175/16*8,240/175/16*3,'*3.8889 -33.333% Hallway','len',2},
				{76.800+240/175*14+240/175/16*11,240/175/16*3,'*3.8889 -66.667% Hallway','len',2},
				{76.800+240/175*14+240/175/16*14,240/175/8*9,'*3.8889 -100% Hallway','len',2},
				
				{94.456,240/175*2,'*10000 -250% Beat','len'},
				{97.371,240/175*2,'*2.9167 No Drunk','len'},
				
				{99.428,240/175/4*14,'1.75x','len'},
				{99.428,240/175/4*14,'*0.729167 50% Stealth','len'},
				{99.428,240/175/2,'*10000 50% Dark','len'},
				
				{100.114,240/175*16,'*0.046 Dark','len'},
				{100.114,240/175*16,'*10000 1.75x','len'},
				{100.114,240/175*16,'*10000 50% Stealth','len'},
				
				{100.114,240/175,'*0.4862 Stealth','len'},
				
				{101.535,240/175/4-0.050,'*1.4584 Stealth','len'},
				{101.535+240/175/4,240/175/4-0.050,'*1.4584 Stealth','len'},
				{101.535+240/175/4*2,240/175/4-0.050,'*1.4584 Stealth','len'},
				{101.535+240/175/4*3,240/175/4*5-0.050,'*0.4862 Stealth','len'},
				
				{104.278,240/175/4-0.050,'*1.4584 Stealth','len'},
				{104.278+240/175/4,240/175/4-0.050,'*1.4584 Stealth','len'},
				{104.278+240/175/4*2,240/175/4-0.050,'*1.4584 Stealth','len'},
				{104.278+240/175/4*3,240/175/4*5-0.050,'*0.4862 Stealth','len'},
				
				{107.021,240/175/4-0.050,'*1.4584 Stealth','len'},
				{107.021+240/175/4,240/175/4-0.050,'*1.4584 Stealth','len'},
				{107.021+240/175/4*2,240/175/4-0.050,'*1.4584 Stealth','len'},
				{107.021+240/175/4*3,240/175/4*5-0.050,'*0.4862 Stealth','len'},
				
				{109.764,240/175/4-0.050,'*1.4584 Stealth','len'},
				{109.764+240/175/4,240/175/4-0.050,'*1.4584 Stealth','len'},
				{109.764+240/175/4*2,240/175/4-0.050,'*1.4584 Stealth','len'},
				{109.764+240/175/4*3,240/175*4-0.050,'*1.4584 Stealth','len'},
				
				{104.056,240/175*2,'*10000 1x','len'},
				{109.542,240/175*2,'*10000 1x','len'},
				
				}
				
				for i = 1.200,17.656,240/175 do
					table.insert(prefix_mods,{i+240/175/4*0,240/175/4,'*10000 No Beat','len'});
					table.insert(prefix_mods,{i+240/175/4*1,240/175/4,'*10000 250% Beat','len'});
					table.insert(prefix_mods,{i+240/175/4*2,240/175/4,'*10000 No Beat','len'});
					table.insert(prefix_mods,{i+240/175/4*3,240/175/4,'*10000 -250% Beat','len'});
				end
				
				for i = 20.571,21.942,240/175/4 do
					table.insert(prefix_mods,{i+240/175/16*0,240/175/16,'*11.6667 Tipsy','len'});
					table.insert(prefix_mods,{i+240/175/16*1,240/175/16,'*11.6667 No Tipsy','len'});
					table.insert(prefix_mods,{i+240/175/16*2,240/175/16,'*11.6667 -100% Tipsy','len'});
					table.insert(prefix_mods,{i+240/175/16*3,240/175/16,'*11.6667 No Tipsy','len'});
				end
				
				for i = 23.314,50.743,240/175 do
					table.insert(prefix_mods,{i+240/175/4*0,240/175/4,'*4.0834 -20% SuddenOffset,*4.0834 -90% HiddenOffset','len'});
					table.insert(prefix_mods,{i+240/175/4*1,240/175/4,'*4.0834 50% SuddenOffset,*4.0834 -20% HiddenOffset','len'});
					table.insert(prefix_mods,{i+240/175/4*2,240/175/4,'*4.0834 120% SuddenOffset,*4.0834 50% HiddenOffset','len'});
					table.insert(prefix_mods,{i+240/175/4*3,240/175/4,'*4.0834 50% SuddenOffset,*4.0834 -20% HiddenOffset','len'});
				end
				
				for i = 23.829,33.428,240/175 do
					table.insert(prefix_mods,{i+240/175/4*0,240/175/4,'*10000 No Beat','len'});
					table.insert(prefix_mods,{i+240/175/4*1,240/175/4,'*10000 -250% Beat','len'});
					table.insert(prefix_mods,{i+240/175/4*2,240/175/4,'*10000 No Beat','len'});
					table.insert(prefix_mods,{i+240/175/4*3,240/175/4,'*10000 250% Beat','len'});
				end
				
				for i = 34.114,50.570,240/175 do
					table.insert(prefix_mods,{i+240/175/4*0,240/175/4,'*10000 No Beat','len'});
					table.insert(prefix_mods,{i+240/175/4*1,240/175/4,'*10000 250% Beat','len'});
					table.insert(prefix_mods,{i+240/175/4*2,240/175/4,'*10000 No Beat','len'});
					table.insert(prefix_mods,{i+240/175/4*3,240/175/4,'*10000 -250% Beat','len'});
				end
				
				for i = 53.486,55.542,240/175/4 do
					table.insert(prefix_mods,{i+240/175/16*0,240/175/16,'*11.6667 Tipsy','len'});
					table.insert(prefix_mods,{i+240/175/16*1,240/175/16,'*11.6667 No Tipsy','len'});
					table.insert(prefix_mods,{i+240/175/16*2,240/175/16,'*11.6667 -100% Tipsy','len'});
					table.insert(prefix_mods,{i+240/175/16*3,240/175/16,'*11.6667 No Tipsy','len'});
				end
				
				for i = 75.429,76.799,240/175/4 do
					table.insert(prefix_mods,{i+240/175/16*0,240/175/16,'*11.6667 Tipsy','len'});
					table.insert(prefix_mods,{i+240/175/16*1,240/175/16,'*11.6667 No Tipsy','len'});
					table.insert(prefix_mods,{i+240/175/16*2,240/175/16,'*11.6667 -100% Tipsy','len'});
					table.insert(prefix_mods,{i+240/175/16*3,240/175/16,'*11.6667 No Tipsy','len'});
				end
				
				for i = 76.800,78.170,240/175/8 do
					table.insert(prefix_mods,{i+240/175/16*0,240/175/16,'*23.3334 Tipsy,*23.3334 -100% Drunk','len'});
					table.insert(prefix_mods,{i+240/175/16*1,240/175/16,'*23.3334 No Tipsy,*23.3334 No Drunk','len'});
					table.insert(prefix_mods,{i+240/175/16*2,240/175/16,'*23.3334 -100% Tipsy,*23.3334 Drunk','len'});
					table.insert(prefix_mods,{i+240/175/16*3,240/175/16,'*23.3334 No Tipsy,*23.3334 No Drunk','len'});
				end
				
				for i = 78.000,94.455,240/175 do
					table.insert(prefix_mods,{i+240/175/4*0,240/175/4,'*10000 No Beat','len'});
					table.insert(prefix_mods,{i+240/175/4*1,240/175/4,'*10000 250% Beat','len'});
					table.insert(prefix_mods,{i+240/175/4*2,240/175/4,'*10000 No Beat','len'});
					table.insert(prefix_mods,{i+240/175/4*3,240/175/4,'*10000 -250% Beat','len'});
				end
				
				for i = 78.171,100.113,240/175*4 do
					table.insert(prefix_mods,{i+240/175/4*0,240/175*2,'*2.9167 240% SuddenOffset,*2.9167 -130% HiddenOffset','len',1});
					table.insert(prefix_mods,{i+240/175/4*0,240/175/4*6,'*2.9167 270% HiddenOffset,*2.9167 240% SuddenOffset','len',2});
					table.insert(prefix_mods,{i+240/175/4*6,240/175/2,'*10000 -160% SuddenOffset,*10000 -130% HiddenOffset','len',2});
					table.insert(prefix_mods,{i+240/175/4*8,240/175/4*6,'*2.9167 270% HiddenOffset,*2.9167 240% SuddenOffset','len',1});
					table.insert(prefix_mods,{i+240/175/4*8,240/175*2,'*2.9167 240% SuddenOffset,*2.9167 -130% HiddenOffset','len',2});
					table.insert(prefix_mods,{i+240/175/4*14,240/175/2,'*10000 -160% SuddenOffset,*10000 -130% HiddenOffset','len',1});
				end
				
				for i = 97.371,98.741,240/175/4 do
					table.insert(prefix_mods,{i+240/175/16*0,240/175/16,'*11.6667 Tipsy','len'});
					table.insert(prefix_mods,{i+240/175/16*1,240/175/16,'*11.6667 No Tipsy','len'});
					table.insert(prefix_mods,{i+240/175/16*2,240/175/16,'*11.6667 -100% Tipsy','len'});
					table.insert(prefix_mods,{i+240/175/16*3,240/175/16,'*11.6667 No Tipsy','len'});
				end
				
				for i = 98.742,100.113,240/175/8 do
					table.insert(prefix_mods,{i+240/175/16*0,240/175/16,'*23.3334 Tipsy,*23.3334 -100% Drunk','len'});
					table.insert(prefix_mods,{i+240/175/16*1,240/175/16,'*23.3334 No Tipsy,*23.3334 No Drunk','len'});
					table.insert(prefix_mods,{i+240/175/16*2,240/175/16,'*23.3334 -100% Tipsy,*23.3334 Drunk','len'});
					table.insert(prefix_mods,{i+240/175/16*3,240/175/16,'*23.3334 No Tipsy,*23.3334 No Drunk','len'});
				end
				
				prefix_plr = {};
				
				self:queuecommand('Update');
			end"
		
		UpdateCommand="%function(self)
		
			local beat = GAMESTATE:GetSongBeat();
			
			-----------------------
			-- Player mod resets --
			-----------------------
			GAMESTATE:ApplyGameCommand('mod,clearall')
			
			--------------------------------------------------------------------------------------------
			-- Mod reader code originally coded by Taronuke, remade to support end times and lengths. --
			--------------------------------------------------------------------------------------------
			for i,v in pairs(prefix_mods) do
				if prefix_time >=v[1] then
					if (v[4] == 'len' and prefix_time <=v[1]+v[2]) or (v[4] == 'end' and prefix_time <=v[2]) then
						if table.getn(v) == 5 then
							GAMESTATE:ApplyGameCommand('mod,'..v[3],v[5]);
						else
							GAMESTATE:ApplyGameCommand('mod,'..v[3]);
						end
					end
				end
			end
			
			
			
			if beat >= 0 and not checked then
				
				table.insert(prefix_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP1'));
				table.insert(prefix_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP2'));
				checked = true;
				
				SCREENMAN:GetTopScreen():GetChild('Overlay'):hidden(1);
				SCREENMAN:GetTopScreen():GetChild('Underlay'):hidden(1);
				for i,v in pairs(prefix_plr) do
					if v then
						SCREENMAN:GetTopScreen():GetChild('ScoreP'..i):hidden(1);
						SCREENMAN:GetTopScreen():GetChild('LifeP'..i):hidden(1);
						v:zoomy(5);
					end
				end
			end

			if beat >= 2 and fgcurcommand == 1 then
				for i,v in pairs(prefix_plr) do
					local multi = -1; if i == 2 then multi = 1; end
					if v then
						v:accelerate(240/175/2);
						v:zoomy(1);
					end
				end
				fgcurcommand = fgcurcommand + 1;
			end
			
			if beat >= 180 and fgcurcommand == 2 then
				for i,v in pairs(prefix_plr) do
					local multi = -1; if i == 2 then multi = 1; end
					if v then
						v:x(SCREEN_CENTER_X);
						v:GetChild('Judgment'):x(160*multi);
						v:GetChild('Combo'):x(160*multi);
					end
				end
				fgcurcommand = fgcurcommand + 1;
			end
			
			if beat >= 274 and fgcurcommand == 3 then
				for i,v in pairs(prefix_plr) do
					local multi = -1; if i == 2 then multi = 1; end
					if v then
						v:decelerate(240/175/2);
						v:x(SCREEN_CENTER_X+160*multi);
						v:GetChild('Judgment'):x(0);
						v:GetChild('Combo'):x(0);
					end
				end
				fgcurcommand = fgcurcommand + 1;
			end
			
			
			-------------------------
			-- BEAT SPECIFIC STUFF --
			-------------------------
			if beat > 64 and beat < 96 then
				for i,v in pairs(prefix_plr) do
					if v then
						--v:x(SCREEN_CENTER_X+(math.sin(beat*math.pi/2)*auxvar:getaux()))
					end
				end
			end
			
			--------------------------------------------------------------
			-- Message reader to make specific values of the actor aux. --
			--------------------------------------------------------------
			if prefix_curmessage <= table.getn(prefix_messages) then
				if prefix_time >= prefix_messages[prefix_curmessage][1] then
					MESSAGEMAN:Broadcast(prefix_messages[prefix_curmessage][2]);
					prefix_curmessage = prefix_curmessage + 1;
				end
			end
			
			self:queuecommand('Update2');
			
		end"


		Update2Command="%function(self)
		self:sleep(0.02);
		self:queuecommand('Update');
		end"

	/>
	
	<BitmapText
		Font="Common Normal"
		Text="test"
		OnCommand="x,SCREEN_CENTER_X;y,SCREEN_CENTER_Y;effectclock,music;playcommand,SetTime;hidden,1"
		SetTimeCommand="%function(self) self:settext(self:GetSecsIntoEffect()); prefix_time = PREFSMAN:GetPreference('GlobalOffsetSeconds') - (0.009 - 0.691) + tonumber(self:GetText()); self:sleep(0.02); self:queuecommand('SetTime'); end"
	/>
	
	<!-- Aux actor, VERY IMPORTANT -->
	<Layer
		Type="Quad"
		OnCommand=""
		InitCommand="%function(self) auxvar = self; self:hidden(1) end"
	/>
	
</children></ActorFrame>