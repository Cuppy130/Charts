<ActorFrame><children>

	<Layer
		Type="Quad"
		InitCommand="hidden,1"
		OnCommand="sleep,116.57"
	/>
	
	<Layer
		Type="Quad"
		InitCommand="hidden,1"
		OnCommand="%function(self)
				fgcurcommand = 1;
				checked = false;
				prefix_time = 0;
				prefix_spincrement = 0;
				prefix_nextbeat = 0;
				
				prefix_curmessage = 1;
				
				
				prefix_messages = {
					{4.105,'Guitar1'},
					{5.842,'Guitar2'},
					{8.211,'Guitar3'},
					{12.947,'Guitar4'},

					{41.211,'PewPew1'},
					{42.474,'PewPew2'},
					{43.737,'PewPew1'},

					{44.842,'Guitar5'},
					{46.579,'Guitar6'},
					{48.316,'Guitar7'},
					{49.737,'Guitar8'},

					{50.368,'Harmonica1'},
					{53.053,'Harmonica2'},

					{103.895,'Guitar9'},
					{106.737,'Harmonica3'},
					{109.263,'Guitar3'},
					{114,'Guitar4'},
				};
				
				
				prefix_mods = {
				
				{0,200,'2.25x,-999999% Cover,*10000 No Beat','end'},
				{0.316,0.050,'*10000 200% Mini','len'},
				{0.316+0.050,240/190/4*3,'*2.5 No Mini,*10000 50% Flip','len'},

				{1.263,12.632,'*3.167 50% Flip,*6.334 No Invert,*10000 90% Stealth','end'},

				{1.263,240/190/4,'*3.167 No Flip','len'},
				{1.263+240/190/4*3,240/190/4,'*3.167 No Flip,*6.334 Invert','len'},
				{1.263+240/190/4*6,240/190/4,'*3.167 Flip,*6.334 -100% Invert','len'},
				{1.263+240/190/4*9,240/190/4,'*3.167 No Flip','len'},
				{1.263+240/190/4*12,240/190/4,'*3.167 No Flip,*6.334 Invert','len'},
				{1.263+240/190/4*15,240/190/4,'*3.167 Flip,*6.334 -100% Invert','len'},
				{1.263+240/190/4*18,240/190/4,'*3.167 No Flip','len'},
				{1.263+240/190/4*21,240/190/4,'*3.167 No Flip,*6.334 Invert','len'},
				{1.263+240/190/4*24,240/190/4,'*3.167 Flip,*6.334 -100% Invert','len'},
				{1.263+240/190/4*27,240/190/4,'*3.167 No Flip','len'},
				{1.263+240/190/4*30,240/190/4,'*3.167 No Flip,*6.334 Invert','len'},
				{1.263+240/190/4*33,240/190/4,'*3.167 Flip,*6.334 -100% Invert','len'},
				{1.263+240/190/4*36,240/190/4,'*3.167 No Flip','len'},

				{12.947,240/190/4*5,'3.25x','len'},

				{14.526,0.050,'*10000 0x,*10000 628% Dizzy,*10000 No Stealth','len'},
				{14.526+0.050,240/190/2,'*4 2.25x,*9.9434 No Dizzy','len'},
				{14.526,34.737,'*1.7917 50% Wave,*3.1667 200% Bumpy','end'},

				{15.000,240/190*16+240/190/4,'*10000 Beat','len'},

				{24.000,240/190/4,'*6.3334 200% Hallway','len'},
				{24.000+240/190/4,240/190/2,'*6.3334 -200% Hallway','len'},
				{24.000+240/190/4*3,240/190/4,'*6.3334 No Hallway','len'},

				{32.842,240/190/4*3,'*2.1112 200% Incoming','len'},
				{32.842+240/190/4*3,240/190/4*3,'*2.1112 No Incoming','len'},

				{34.737,240/190/2,'*1.7917 No Wave,*3.1667 No Bumpy','len'},

				{35.368,240/190/4*10,'*0.5278 Dark','len'},
				{35.368+240/190/4*10,240/190/4*6,'*0.5278 No Dark','len'},

				{37.895,57.789,'*10000 500% Invert','end'},

				{40.263,240/190/4,'*10000 -250% Beat','len',1},
				{40.263+240/190/4,240/190/4,'*10000 -250% Beat','len',2},

				{40.421,240/190/8,'*12.6667 Stealth','len',2},
				{40.421+240/190/8,240/190/8,'*12.6667 No Stealth','len',2},

				{40.421+240/190/4,240/190/8,'*12.6667 Stealth','len',1},
				{40.421+240/190/4+240/190/8,240/190/8,'*12.6667 No Stealth','len',1},

				{41.053,240/190/4,'*6.3334 50% Stealth','len'},
				{41.053+240/190/4,240/190/4,'*6.3334 No Stealth','len'},

				{41.526,240/190/4,'*10000 250% Beat','len',2},
				{41.526+240/190/4,240/190/4,'*10000 250% Beat','len',1},

				{41.684,240/190/8,'*12.6667 Stealth','len',1},
				{41.684+240/190/8,240/190/8,'*12.6667 No Stealth','len',1},

				{41.684+240/190/4,240/190/8,'*12.6667 Stealth','len',2},
				{41.684+240/190/4+240/190/8,240/190/8,'*12.6667 No Stealth','len',2},

				{42.316,240/190/4,'*6.3334 50% Stealth','len'},
				{42.316+240/190/4,240/190/4,'*6.3334 No Stealth','len'},

				{42.789,240/190/4,'*10000 -250% Beat','len',1},
				{42.789+240/190/4,240/190/4,'*10000 -250% Beat','len',2},

				{42.947,240/190/8,'*12.6667 Stealth','len',2},
				{42.947+240/190/8,240/190/8,'*12.6667 No Stealth','len',2},

				{42.947+240/190/4,240/190/8,'*12.6667 Stealth','len',1},
				{42.947+240/190/4+240/190/8,240/190/8,'*12.6667 No Stealth','len',1},

				{43.579,240/190/4,'*6.3334 50% Stealth','len'},
				{43.579+240/190/4,240/190/4,'*6.3334 No Stealth','len'},

				{44.053,240/190/4,'*10000 250% Beat','len',2},
				{44.053+240/190/4,240/190/4,'*10000 250% Beat','len',1},

				{44.211,240/190/8,'*12.6667 Stealth','len',1},
				{44.211+240/190/8,240/190/8,'*12.6667 No Stealth','len',1},

				{44.211+240/190/4,240/190/8,'*12.6667 Stealth','len',2},
				{44.211+240/190/4+240/190/8,240/190/8,'*12.6667 No Stealth','len',2},

				{44.842,240/190*8,'*1.5834 Bumpy,*1.5834 Drunk','len',1},
				{44.842,240/190*8,'*1.5834 -100% Bumpy,*1.5834 -100% Drunk','len',2},

				{54.947,240/190/2,'*1.5834 No Bumpy,*1.5834 No Drunk','len'},

				{45.947,240/190/4,'*10000 -300% Beat','len'},
				{45.947+240/190,240/190/4,'*10000 300% Beat','len'},
				{45.947+240/190*2,240/190/4,'*10000 -300% Beat','len'},
				{45.947+240/190*3,240/190/4,'*10000 300% Beat','len'},
				{45.947+240/190*4,240/190/4,'*10000 -300% Beat','len'},
				{45.947+240/190*5,240/190/4,'*10000 300% Beat','len'},
				{45.947+240/190*6,240/190/4,'*10000 -300% Beat','len'},
				{45.947+240/190*7,240/190/4,'*10000 300% Beat','len'},

				{55.579,240/190/8*3,'*2.5334 10% Reverse,*2.5334 -10% split','len',1},
				{55.579+240/190/8*3,240/190/8,'*2.5334 10% Reverse,*2.5334 No split','len',1},
				{55.579+240/190/2,240/190/8*3,'*2.5334 20% Reverse,*2.5334 -10% split','len',1},
				{55.579+240/190/2+240/190/8*3,240/190/8,'*2.5334 20% Reverse,*2.5334 No split','len',1},
				{55.579+240/190,240/190/8*3,'*2.5334 30% Reverse,*2.5334 -10% split','len',1},
				{55.579+240/190+240/190/8*3,240/190/8,'*2.5334 30% Reverse,*2.5334 No split','len',1},

				{55.816,240/190/4,'*2.5334 10% Reverse,*2.5334 -10% split','len',2},
				{55.816+240/190/4,240/190/4,'*2.5334 10% Reverse,*2.5334 No split','len',2},
				{55.816+240/190/4*2,240/190/4,'*2.5334 20% Reverse,*2.5334 -10% split','len',2},
				{55.816+240/190/4*3,240/190/4,'*2.5334 20% Reverse,*2.5334 No split','len',2},
				{55.816+240/190/4*4,240/190/4,'*2.5334 30% Reverse,*2.5334 -10% split','len',2},
				{55.816+240/190/4*5,240/190/4,'*2.5334 30% Reverse,*2.5334 No split','len',2},

				{57.474,240/190/4,'*5.0667 50% Reverse','len'},

				{57.789,240/190/4,'*1,5834 No Reverse','len'},
				{57.789,240/190/4*5,'*3.1667 No Invert','len'},

				{59.368,240/190/8,'*15 100.01% Reverse','len'},
				{59.368+240/190/8,240/190/16,'*15 No Reverse,*15 Alternate','len'},
				{59.368+240/190/16*3,240/190/16,'*15 No Alternate','len'},
				{59.368+240/190/4,240/190/8,'*15 100.01% Reverse,*15 -100% Split','len'},
				{59.368+240/190/8*3,240/190/4,'*15 100.01% Reverse,*15 No Split','len'},
				{59.368+240/190/8*5,240/190/4,'*15 No Reverse,*15 Cross','len'},
				{59.368+240/190/8*7,240/190/4,'*15 No Cross','len'},

				{60.000,80.211,'*1.7917 50% Wave,*3.1667 200% Bumpy','end'},

				{60.474,240/190*16+240/190/4,'*10000 Beat','len'},

				{69.474,240/190/4,'*6.3334 200% Hallway','len'},
				{69.474+240/190/4,240/190/2,'*6.3334 -200% Hallway','len'},
				{69.474+240/190/4*3,240/190/4,'*6.3334 No Hallway','len'},

				{78.316,240/190/4*3,'*2.1112 200% Incoming','len'},
				{78.316+240/190/4*3,240/190/4*3,'*2.1112 No Incoming','len'},

				{80.211,240/190/2,'*1.7917 No Wave,*3.1667 No Bumpy','len'},

				{78.632,240/190/4*5,'3.25x','len'},

				{80.211,0.050,'*10000 0x,*10000 628% Dizzy,*10000 No Stealth','len'},
				{80.211+0.050,240/190/2,'*4 2.25x,*9.9434 No Dizzy','len'},

				{80.842,240/190/16*3,'*15 100.01% Reverse,*7.5 -50% Split,*7.5 -50% Cross,*7.5 -50% Alternate','len'},
				{80.842+240/190/16*3,240/190/8,'*15 100.01% Reverse,*7.5 -100% Split,*7.5 No Cross,*7.5 No Alternate','len'},
				{80.842+240/190/16*5,240/190/8,'*15 100.01% Reverse,*7.5 -50% Split,*7.5 50% Cross,*7.5 -50% Alternate','len'},
				{80.842+240/190/16*7,240/190/16,'*15 100.01% Reverse,*7.5 No Split,*7.5 No Cross,*7.5 No Alternate','len'},

				{80.842+240/190/16*8,240/190/8,'*15 100.01% Reverse,*15 -100% Split','len'},
				{80.842+240/190/16*10,240/190/8,'*15 No Reverse,*15 No Split','len'},
				{80.842+240/190/16*12,240/190/8,'*15 No Reverse,*15 Alternate','len'},
				{80.842+240/190/16*14,240/190/8,'*15 100.01% Reverse,*15 No Alternate','len'},

				{80.842+240/190/16*16,240/190/16*3,'*15 No Reverse,*7.5 50% Split,*7.5 50% Cross,*7.5 50% Alternate','len'},
				{80.842+240/190/16*19,240/190/8,'*15 No Reverse,*7.5 100% Split,*7.5 No Cross,*7.5 No Alternate','len'},
				{80.842+240/190/16*21,240/190/8,'*15 No Reverse,*7.5 50% Split,*7.5 -50% Cross,*7.5 50% Alternate','len'},
				{80.842+240/190/16*23,240/190/16,'*15 No Reverse,*7.5 No Split,*7.5 No Cross,*7.5 No Alternate','len'},

				{80.842+240/190/16*24,240/190/16*3,'*15 100.01% Reverse,*7.5 -50% Split,*7.5 -50% Cross,*7.5 -50% Alternate','len'},
				{80.842+240/190/16*27,240/190/8,'*15 100.01% Reverse,*7.5 -100% Split,*7.5 No Cross,*7.5 No Alternate','len'},
				{80.842+240/190/16*29,240/190/8,'*15 100.01% Reverse,*7.5 -50% Split,*7.5 50% Cross,*7.5 -50% Alternate','len'},
				{80.842+240/190/16*31,240/190/16,'*15 100.01% Reverse,*7.5 No Split,*7.5 No Cross,*7.5 No Alternate','len'},

				{80.842+240/190/16*32,240/190/16*3,'*15 No Reverse,*7.5 50% Split,*7.5 50% Cross,*7.5 50% Alternate','len'},
				{80.842+240/190/16*35,240/190/8,'*15 No Reverse,*7.5 100% Split,*7.5 No Cross,*7.5 No Alternate','len'},
				{80.842+240/190/16*37,240/190/8,'*15 No Reverse,*7.5 50% Split,*7.5 -50% Cross,*7.5 50% Alternate','len'},
				{80.842+240/190/16*39,240/190/16,'*15 No Reverse,*7.5 No Split,*7.5 No Cross,*7.5 No Alternate','len'},

				{80.842+240/190/16*40,240/190/8,'*15 No Reverse,*15 Split','len'},
				{80.842+240/190/16*42,240/190/8,'*15 100.01% Reverse,*15 No Split','len'},
				{80.842+240/190/16*44,240/190/8,'*15 100.01% Reverse,*15 -100% Alternate','len'},
				{80.842+240/190/16*46,240/190/8,'*15 No Reverse,*15 No Alternate','len'},

				{80.842+240/190/16*48,240/190/16*3,'*15 100.01% Reverse,*7.5 -50% Split,*7.5 -50% Cross,*7.5 -50% Alternate','len'},
				{80.842+240/190/16*51,240/190/8,'*15 100.01% Reverse,*7.5 -100% Split,*7.5 No Cross,*7.5 No Alternate','len'},
				{80.842+240/190/16*53,240/190/8,'*15 100.01% Reverse,*7.5 -50% Split,*7.5 50% Cross,*7.5 -50% Alternate','len'},
				{80.842+240/190/16*55,240/190/16,'*15 100.01% Reverse,*7.5 No Split,*7.5 No Cross,*7.5 No Alternate','len'},

				{80.842+240/190/16*56,240/190/4,'*15 No Reverse','len'},

				{80.842+240/190/16*60,240/190/16,'*15 No Reverse,*15 Cross','len'},
				{80.842+240/190/16*61,240/190/16,'*15 100.01% Reverse,*15 No Cross','len'},
				{80.842+240/190/16*62,240/190/16,'*15 100.01% Reverse,*15 -100% Cross','len'},
				{80.842+240/190/16*63,240/190/16,'*15 No Reverse,*15 No Cross','len'},

				{85.895,240/190/16*3,'*15 100.01% Reverse,*7.5 -50% Split,*7.5 -50% Cross,*7.5 -50% Alternate','len'},
				{85.895+240/190/16*3,240/190/8,'*15 100.01% Reverse,*7.5 -100% Split,*7.5 No Cross,*7.5 No Alternate','len'},
				{85.895+240/190/16*5,240/190/8,'*15 100.01% Reverse,*7.5 -50% Split,*7.5 50% Cross,*7.5 -50% Alternate','len'},
				{85.895+240/190/16*7,240/190/16,'*15 100.01% Reverse,*7.5 No Split,*7.5 No Cross,*7.5 No Alternate','len'},

				{85.895+240/190/16*8,240/190/8,'*15 100.01% Reverse,*15 -100% Split','len'},
				{85.895+240/190/16*10,240/190/8,'*15 No Reverse,*15 No Split','len'},
				{85.895+240/190/16*12,240/190/8,'*15 No Reverse,*15 Alternate','len'},
				{85.895+240/190/16*14,240/190/8,'*15 100.01% Reverse,*15 No Alternate','len'},

				{85.895+240/190/16*16,240/190/16*3,'*15 No Reverse,*7.5 50% Split,*7.5 50% Cross,*7.5 50% Alternate','len'},
				{85.895+240/190/16*19,240/190/8,'*15 No Reverse,*7.5 100% Split,*7.5 No Cross,*7.5 No Alternate','len'},
				{85.895+240/190/16*21,240/190/8,'*15 No Reverse,*7.5 50% Split,*7.5 -50% Cross,*7.5 50% Alternate','len'},
				{85.895+240/190/16*23,240/190/16,'*15 No Reverse,*7.5 No Split,*7.5 No Cross,*7.5 No Alternate','len'},

				{85.895+240/190/16*24,240/190/16*3,'*15 100.01% Reverse,*7.5 -50% Split,*7.5 -50% Cross,*7.5 -50% Alternate','len'},
				{85.895+240/190/16*27,240/190/8,'*15 100.01% Reverse,*7.5 -100% Split,*7.5 No Cross,*7.5 No Alternate','len'},
				{85.895+240/190/16*29,240/190/8,'*15 100.01% Reverse,*7.5 -50% Split,*7.5 50% Cross,*7.5 -50% Alternate','len'},
				{85.895+240/190/16*31,240/190/16,'*15 100.01% Reverse,*7.5 No Split,*7.5 No Cross,*7.5 No Alternate','len'},

				{85.895+240/190/16*32,240/190/16*3,'*15 No Reverse,*7.5 50% Split,*7.5 50% Cross,*7.5 50% Alternate','len'},
				{85.895+240/190/16*35,240/190/8,'*15 No Reverse,*7.5 100% Split,*7.5 No Cross,*7.5 No Alternate','len'},
				{85.895+240/190/16*37,240/190/8,'*15 No Reverse,*7.5 50% Split,*7.5 -50% Cross,*7.5 50% Alternate','len'},
				{85.895+240/190/16*39,240/190/16,'*15 No Reverse,*7.5 No Split,*7.5 No Cross,*7.5 No Alternate','len'},

				{85.895+240/190/16*40,240/190/8,'*15 No Reverse,*15 Split','len'},
				{85.895+240/190/16*42,240/190/8,'*15 100.01% Reverse,*15 No Split','len'},
				{85.895+240/190/16*44,240/190/8,'*15 100.01% Reverse,*15 -100% Alternate','len'},
				{85.895+240/190/16*46,240/190/8,'*15 No Reverse,*15 No Alternate','len'},

				{85.895+240/190/16*48,240/190/16*3,'*15 100.01% Reverse,*7.5 -50% Split,*7.5 -50% Cross,*7.5 -50% Alternate','len'},
				{85.895+240/190/16*51,240/190/8,'*15 100.01% Reverse,*7.5 -100% Split,*7.5 No Cross,*7.5 No Alternate','len'},
				{85.895+240/190/16*53,240/190/8,'*15 100.01% Reverse,*7.5 -50% Split,*7.5 50% Cross,*7.5 -50% Alternate','len'},
				{85.895+240/190/16*55,240/190/16,'*15 100.01% Reverse,*7.5 No Split,*7.5 No Cross,*7.5 No Alternate','len'},

				{85.895+240/190/16*56,240/190/4,'*15 No Reverse','len'},

				{85.895+240/190/16*60,240/190/16,'*15 No Reverse,*15 Cross','len'},
				{85.895+240/190/16*61,240/190/16,'*15 100.01% Reverse,*15 No Cross','len'},
				{85.895+240/190/16*62,240/190/16,'*15 100.01% Reverse,*15 -100% Cross','len'},
				{85.895+240/190/16*63,240/190/16,'*15 No Reverse,*15 No Cross','len'},

				{90.947,240/190/16*3,'*15 100.01% Reverse,*15 -100% Split','len'},
				{90.947+240/190/16*3,240/190/8,'*15 100.01% Reverse,*15 No Split','len'},
				{90.947+240/190/16*5,240/190/8,'*15 No Reverse,*7.5 50% Split,*7.5 50% Cross,*7.5 50% Alternate','len'},
				{90.947+240/190/16*7,240/190/16,'*15 No Reverse,*7.5 No Split,*7.5 No Cross,*7.5 Alternate','len'},

				{90.947+240/190/16*8,240/190/8,'*15 No Reverse,*15 Alternate,*15 Invert','len'},
				{90.947+240/190/16*10,240/190/8,'*15 100.01% Reverse,*30 -100% Alternate,*15 Invert','len'},
				{90.947+240/190/16*12,240/190/8,'*15 100.01% Reverse,*15 -100% Alternate,*15 No Invert','len'},
				{90.947+240/190/16*14,240/190/8,'*15 No Reverse,*30 Alternate','len'},

				{90.947+240/190/16*16,240/190/16*3,'*15 100.01% Reverse,*15 No Alternate','len'},
				{90.947+240/190/16*19,240/190/8,'*15 No Reverse,*15 100% Split','len'},
				{90.947+240/190/16*21,240/190/8,'*15 No Reverse,*15 No Split','len'},
				{90.947+240/190/16*23,240/190/16,'*15 No Reverse,*15 Cross','len'},

				{90.947+240/190/16*24,240/190/16*3,'*15 No Reverse,*15 Cross,*15 Invert','len'},
				{90.947+240/190/16*27,240/190/8,'*15 100.01% Reverse,*30 -100% Cross,*15 Invert','len'},
				{90.947+240/190/16*29,240/190/8,'*15 100.01% Reverse,*15 -100% Cross,*15 No Invert','len'},
				{90.947+240/190/16*31,240/190/16,'*15 No Reverse,*15 No Cross','len'},

				{90.947+240/190/16*32,240/190/16*3,'*15 No Reverse,*15 Split','len'},
				{90.947+240/190/16*35,240/190/8,'*15 100.01% Reverse,*15 No Split','len'},
				{90.947+240/190/16*37,240/190/8,'*15 100.01% Reverse,*7.5 -50% Split,*7.5 50% Cross,*7.5 -50% Alternate','len'},
				{90.947+240/190/16*39,240/190/16,'*15 100.01% Reverse,*7.5 No Split,*7.5 No Cross,*7.5 -100% Alternate','len'},

				{90.947+240/190/16*40,240/190/8,'*15 100.01% Reverse,*15 -100% Alternate,*15 Invert','len'},
				{90.947+240/190/16*42,240/190/8,'*15 No Reverse,*30 Alternate,*15 Invert','len'},
				{90.947+240/190/16*44,240/190/8,'*15 No Reverse,*15 Alternate,*15 No Invert','len'},
				{90.947+240/190/16*46,240/190/8,'*15 100.01% Reverse,*30 -100% Alternate','len'},

				{90.947+240/190/16*48,240/190/16*3,'*15 100.01% Reverse,*15 No Alternate','len'},
				{90.947+240/190/16*51,240/190/8,'*15 100.01% Reverse,*15 -100% Split','len'},
				{90.947+240/190/16*53,240/190/8,'*15 No Reverse,*15 No Split','len'},
				{90.947+240/190/16*55,240/190/16,'*15 100.01% Reverse,*15 -100% Cross','len'},

				{90.947+240/190/16*56,240/190/16*3,'*15 100.01% Reverse,*15 -100% Cross,*15 Invert','len'},
				{90.947+240/190/16*59,240/190/8,'*15 No Reverse,*30 100% Cross,*15 Invert','len'},
				{90.947+240/190/16*61,240/190/8,'*15 No Reverse,*15 100% Cross,*15 No Invert','len'},
				{90.947+240/190/16*63,240/190/16,'*15 No Reverse,*15 No Cross','len'},

				{96.000,240/190/16*3,'*15 100.01% Reverse,*15 -100% Split','len'},
				{96.000+240/190/16*3,240/190/8,'*15 100.01% Reverse,*15 No Split','len'},
				{96.000+240/190/16*5,240/190/8,'*15 No Reverse,*7.5 50% Split,*7.5 50% Cross,*7.5 50% Alternate','len'},
				{96.000+240/190/16*7,240/190/16,'*15 No Reverse,*7.5 No Split,*7.5 No Cross,*7.5 Alternate','len'},

				{96.000+240/190/16*8,240/190/8,'*15 No Reverse,*15 Alternate,*15 Invert','len'},
				{96.000+240/190/16*10,240/190/8,'*15 100.01% Reverse,*30 -100% Alternate,*15 Invert','len'},
				{96.000+240/190/16*12,240/190/8,'*15 100.01% Reverse,*15 -100% Alternate,*15 No Invert','len'},
				{96.000+240/190/16*14,240/190/8,'*15 No Reverse,*30 Alternate','len'},

				{96.000+240/190/16*16,240/190/16*3,'*15 100.01% Reverse,*15 No Alternate','len'},
				{96.000+240/190/16*19,240/190/8,'*15 No Reverse,*15 100% Split','len'},
				{96.000+240/190/16*21,240/190/8,'*15 No Reverse,*15 No Split','len'},
				{96.000+240/190/16*23,240/190/16,'*15 No Reverse,*15 Cross','len'},

				{96.000+240/190/16*24,240/190/16*3,'*15 No Reverse,*15 Cross,*15 Invert','len'},
				{96.000+240/190/16*27,240/190/8,'*15 100.01% Reverse,*30 -100% Cross,*15 Invert','len'},
				{96.000+240/190/16*29,240/190/8,'*15 100.01% Reverse,*15 -100% Cross,*15 No Invert','len'},
				{96.000+240/190/16*31,240/190/16,'*15 No Reverse,*15 No Cross','len'},

				{96.000+240/190/16*32,240/190/16*3,'*15 No Reverse,*15 Split','len'},
				{96.000+240/190/16*35,240/190/8,'*15 100.01% Reverse,*15 No Split','len'},
				{96.000+240/190/16*37,240/190/8,'*15 100.01% Reverse,*7.5 -50% Split,*7.5 50% Cross,*7.5 -50% Alternate','len'},
				{96.000+240/190/16*39,240/190/16,'*15 100.01% Reverse,*7.5 No Split,*7.5 No Cross,*7.5 -100% Alternate','len'},

				{96.000+240/190/16*40,240/190/8,'*15 100.01% Reverse,*15 -100% Alternate,*15 Invert','len'},
				{96.000+240/190/16*42,240/190/8,'*15 No Reverse,*30 Alternate,*15 Invert','len'},
				{96.000+240/190/16*44,240/190/8,'*15 No Reverse,*15 Alternate,*15 No Invert','len'},
				{96.000+240/190/16*46,240/190/8,'*15 100.01% Reverse,*30 -100% Alternate','len'},

				{96.000+240/190/16*48,240/190/16*3,'*15 100.01% Reverse,*15 No Alternate','len'},
				{96.000+240/190/16*51,240/190/8,'*15 100.01% Reverse,*15 -100% Split','len'},
				{96.000+240/190/16*53,240/190/8,'*15 No Reverse,*15 No Split','len'},
				{96.000+240/190/16*55,240/190/16,'*15 100.01% Reverse,*15 -100% Cross','len'},

				{96.000+240/190/16*56,240/190/16*3,'*15 100.01% Reverse,*15 No Cross','len'},
				{96.000+240/190/16*59,240/190/8,'*15 No Reverse,*15 Split','len'},
				{96.000+240/190/16*61,240/190/8,'*15 No Reverse,*15 No Split','len'},
				{96.000+240/190/16*63,240/190/16,'*15 No Reverse,*15 Cross','len'},

				{101.053,240/190/16,'*15 100.01% Reverse,*15 No Cross','len'},
				{101.053+240/190/16,240/190/16,'*15 100.01% Reverse,*15 -100% Split','len'},
				{101.053+240/190/16*2,240/190/16,'*15 No Reverse,*15 No Split','len'},
				{101.053+240/190/16*3,240/190/8,'*15 100.01% Reverse','len'},

				{101.053+240/190/16*5,240/190/16,'*15 100.01% Reverse,*15 -100% Alternate','len'},
				{101.053+240/190/16*6,240/190/16,'*15 No Reverse,*15 No Alternate','len'},
				{101.053+240/190/16*7,240/190/16,'*15 No Reverse,*15 Split','len'},
				{101.053+240/190/16*8,240/190/16,'*15 100.01% Reverse,*15 No Split','len'},
				{101.053+240/190/16*9,240/190/16,'*15 No Reverse','len'},

				{101.053+240/190/16*11,240/190/16,'*15 No Reverse,*15 Alternate','len'},
				{101.053+240/190/16*12,240/190/16,'*15 100.01% Reverse,*15 No Alternate','len'},
				{101.053+240/190/16*13,240/190/16,'*15 100.01% Reverse,*15 -100% Split','len'},
				{101.053+240/190/16*14,240/190/16,'*15 No Reverse,*15 No Split','len'},
				{101.053+240/190/16*15,240/190/16,'*15 100.01% Reverse','len'},
				{101.053+240/190/16*16,240/190/16,'*15 No Reverse','len'},

				{101.053,113.684,'*0.7125 90% Stealth','end'},

				{102.632,113.684,'*3.167 50% Flip,*6.334 No Invert','end'},

				{102.316+240/190/4*3,240/190/4,'*3.167 No Flip,*6.334 Invert','len'},
				{102.316+240/190/4*6,240/190/4,'*3.167 Flip,*6.334 -100% Invert','len'},
				{102.316+240/190/4*9,240/190/4,'*3.167 No Flip','len'},
				{102.316+240/190/4*12,240/190/4,'*3.167 No Flip,*6.334 Invert','len'},
				{102.316+240/190/4*15,240/190/4,'*3.167 Flip,*6.334 -100% Invert','len'},
				{102.316+240/190/4*18,240/190/4,'*3.167 No Flip','len'},
				{102.316+240/190/4*21,240/190/4,'*3.167 No Flip,*6.334 Invert','len'},
				{102.316+240/190/4*24,240/190/4,'*3.167 Flip,*6.334 -100% Invert','len'},
				{102.316+240/190/4*27,240/190/4,'*3.167 No Flip','len'},
				{102.316+240/190/4*30,240/190/4,'*3.167 No Flip,*6.334 Invert','len'},
				{102.316+240/190/4*33,240/190/4,'*3.167 Flip,*6.334 -100% Invert','len'},
				{102.316+240/190/4*36,240/190/4,'*3.167 No Flip','len'},

				{114.000,240/190/4*5,'3.25x','len'},

				{115.579,0.050,'*10000 0x,*10000 628% Dizzy,*10000 No Stealth','len'},
				{115.579+0.050,240/190/2,'*4 2.25x,*9.9434 No Dizzy','len'},

				}
				
				
				prefix_plr = {};
				
				self:queuecommand('Update');
			end"
		
		UpdateCommand="%function(self)
		
			local beat = GAMESTATE:GetSongBeat();
			if beat > prefix_nextbeat then
				prefix_nextbeat = prefix_nextbeat + 4;
				if beat >= 47 and beat < 75 or beat >= 79 and beat < 107 or beat >= 191 and beat < 219 or beat >= 223 and beat < 251 then
					prefix_spincrement = prefix_spincrement + 1;
				end
			end
			
			-----------------------
			-- Player mod resets --
			-----------------------
			GAMESTATE:ApplyGameCommand('mod,clearall')
			
			--------------------------------------------------------------------------------------------
			-- Mod reader code originally coded by Taronuke, remade to support end times and lengths. --
			--------------------------------------------------------------------------------------------
			for i,v in pairs(prefix_mods) do
				if prefix_time >=v[1] then
					if (v[4] == 'len' and prefix_time <=v[1]+v[2]) or (v[4] == 'end' and prefix_time <=v[2]) then
						if table.getn(v) == 5 then
							GAMESTATE:ApplyGameCommand('mod,'..v[3],v[5]);
						else
							GAMESTATE:ApplyGameCommand('mod,'..v[3]);
						end
					end
				end
			end
			
			
			
			if beat >= 0 and not checked then
				
				table.insert(prefix_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP1'));
				table.insert(prefix_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP2'));
				checked = true;
				
				SCREENMAN:GetTopScreen():GetChild('Overlay'):hidden(1);
				SCREENMAN:GetTopScreen():GetChild('Underlay'):hidden(1);
				for i,v in pairs(prefix_plr) do
					if v then
						SCREENMAN:GetTopScreen():GetChild('ScoreP'..i):hidden(1);
						SCREENMAN:GetTopScreen():GetChild('LifeP'..i):hidden(1);
						
						
					end
				end
			end
			
			if beat >= 120 and fgcurcommand == 1 then
				for i,v in pairs(prefix_plr) do
					local multi = -1; if i == 2 then multi = 1; end
					if v then
						v:finishtweening();
						v:x(SCREEN_CENTER_X+multi*320);
						v:GetChild('Judgment'):x(multi*-160);
						v:GetChild('Combo'):x(multi*-160);
					end
				end
				fgcurcommand = fgcurcommand + 1;
			end

			if beat >= 183 and fgcurcommand == 2 then
				for i,v in pairs(prefix_plr) do
					local multi = -1; if i == 2 then multi = 1; end
					if v then
						v:decelerate(240/190/4*5);
						v:rotationz(360);
						v:x(SCREEN_CENTER_X+multi*160);
						v:GetChild('Judgment'):x(0);
						v:GetChild('Combo'):x(0);
					end
				end
				fgcurcommand = fgcurcommand + 1;
			end
			
			-------------------------
			-- BEAT SPECIFIC STUFF --
			-------------------------
			if beat >= 48 and beat < 76 then
				if math.mod(prefix_spincrement,7) == 1 then
					if math.mod(beat,4) >= 1 and math.mod(beat,4) < 2 then
						GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.sin(beat*math.pi)*30 ..'% Alternate,*10000 '..-math.sin(beat*math.pi)*30 ..'% Split,*10000 '..-math.sin(beat*math.pi)*-30 ..'% Reverse');
						GAMESTATE:ApplyGameCommand('mod,*10000 '..math.cos(beat*math.pi)*37.5+37.5 ..'% Invert,*10000 '..math.cos(beat*math.pi)*37.5+37.5 ..'% Flip');
					elseif math.mod(beat,4) >= 2 and math.mod(beat,4) < 3 then
						GAMESTATE:ApplyGameCommand('mod,*10000 75% Invert,*10000 75% Flip');
					elseif math.mod(beat,4) >= 3 then
						GAMESTATE:ApplyGameCommand('mod,*10000 '..math.sin(beat*math.pi)*30 ..'% Alternate,*10000 '..math.sin(beat*math.pi)*30 ..'% Split,*10000 '..math.sin(beat*math.pi)*-30 ..'% Reverse');
						GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.cos(beat*math.pi)*37.5+37.5 ..'% Invert,*10000 '..-math.cos(beat*math.pi)*37.5+37.5 ..'% Flip');	
					end
				elseif math.mod(prefix_spincrement,7) == 2 then
					if math.mod(beat,4) >= 1 and math.mod(beat,4) < 2 then
						GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.sin(beat*math.pi)*-10 ..'% Alternate,*10000 '..-math.sin(beat*math.pi)*10 ..'% Split');
						GAMESTATE:ApplyGameCommand('mod,*10000 '..math.cos(beat*math.pi)*-37.5-37.5 ..'% Invert,*10000 '..math.cos(beat*math.pi)*12.5+12.5 ..'% Flip');
					elseif math.mod(beat,4) >= 2 and math.mod(beat,4) < 3 then
						GAMESTATE:ApplyGameCommand('mod,*10000 -75% Invert,*10000 25% Flip');
					elseif math.mod(beat,4) >= 3 then
						GAMESTATE:ApplyGameCommand('mod,*10000 '..math.sin(beat*math.pi)*-10 ..'% Alternate,*10000 '..math.sin(beat*math.pi)*10 ..'% Split');
						GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.cos(beat*math.pi)*-37.5-37.5 ..'% Invert,*10000 '..-math.cos(beat*math.pi)*12.5+12.5 ..'% Flip');	
					end
				elseif math.mod(prefix_spincrement,7) == 3 then
					if math.mod(beat,4) >= 1 and math.mod(beat,4) < 2 then
						GAMESTATE:ApplyGameCommand('mod,*10000 '..math.sin(beat*math.pi)*30 ..'% Alternate,*10000 '..math.sin(beat*math.pi)*30 ..'% Split,*10000 '..math.sin(beat*math.pi)*-30 ..'% Reverse');
						GAMESTATE:ApplyGameCommand('mod,*10000 '..math.cos(beat*math.pi)*37.5+37.5 ..'% Invert,*10000 '..math.cos(beat*math.pi)*37.5+37.5 ..'% Flip');
					elseif math.mod(beat,4) >= 2 and math.mod(beat,4) < 3 then
						GAMESTATE:ApplyGameCommand('mod,*10000 75% Invert,*10000 75% Flip');
					elseif math.mod(beat,4) >= 3 then
						GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.sin(beat*math.pi)*30 ..'% Alternate,*10000 '..-math.sin(beat*math.pi)*30 ..'% Split,*10000 '..-math.sin(beat*math.pi)*-30 ..'% Reverse');
						GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.cos(beat*math.pi)*37.5+37.5 ..'% Invert,*10000 '..-math.cos(beat*math.pi)*37.5+37.5 ..'% Flip');	
					end
				elseif math.mod(prefix_spincrement,7) == 4 then
					if math.mod(beat,4) >= 1 and math.mod(beat,4) < 2 then
						GAMESTATE:ApplyGameCommand('mod,*10000 '..math.sin(beat*math.pi)*-10 ..'% Alternate,*10000 '..math.sin(beat*math.pi)*10 ..'% Split');
						GAMESTATE:ApplyGameCommand('mod,*10000 '..math.cos(beat*math.pi)*-37.5-37.5 ..'% Invert,*10000 '..math.cos(beat*math.pi)*12.5+12.5 ..'% Flip');
					elseif math.mod(beat,4) >= 2 and math.mod(beat,4) < 3 then
						GAMESTATE:ApplyGameCommand('mod,*10000 -75% Invert,*10000 25% Flip');
					elseif math.mod(beat,4) >= 3 then
						GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.sin(beat*math.pi)*-10 ..'% Alternate,*10000 '..-math.sin(beat*math.pi)*10 ..'% Split');
						GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.cos(beat*math.pi)*-37.5-37.5 ..'% Invert,*10000 '..-math.cos(beat*math.pi)*12.5+12.5 ..'% Flip');	
					end
				elseif math.mod(prefix_spincrement,7) == 5 then
					if math.mod(beat,4) >= 1 and math.mod(beat,4) < 2 then
						GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.sin(beat*math.pi)*30 ..'% Alternate,*10000 '..-math.sin(beat*math.pi)*30 ..'% Split,*10000 '..-math.sin(beat*math.pi)*-30 ..'% Reverse');
						GAMESTATE:ApplyGameCommand('mod,*10000 '..math.cos(beat*math.pi)*37.5+37.5 ..'% Invert,*10000 '..math.cos(beat*math.pi)*37.5+37.5 ..'% Flip');
					elseif math.mod(beat,4) >= 2 and math.mod(beat,4) < 3 then
						GAMESTATE:ApplyGameCommand('mod,*10000 75% Invert,*10000 75% Flip');
					elseif math.mod(beat,4) >= 3 then
						GAMESTATE:ApplyGameCommand('mod,*10000 '..math.sin(beat*math.pi)*30 ..'% Alternate,*10000 '..math.sin(beat*math.pi)*30 ..'% Split,*10000 '..math.sin(beat*math.pi)*-30 ..'% Reverse');
						GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.cos(beat*math.pi)*37.5+37.5 ..'% Invert,*10000 '..-math.cos(beat*math.pi)*37.5+37.5 ..'% Flip');	
					end
				elseif math.mod(prefix_spincrement,7) == 6 then
					if math.mod(beat,4) >= 1 and math.mod(beat,4) < 2 then
						GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.sin(beat*math.pi)*-10 ..'% Alternate,*10000 '..-math.sin(beat*math.pi)*10 ..'% Split');
						GAMESTATE:ApplyGameCommand('mod,*10000 '..math.cos(beat*math.pi)*-37.5-37.5 ..'% Invert,*10000 '..math.cos(beat*math.pi)*12.5+12.5 ..'% Flip');
					elseif math.mod(beat,4) >= 2 and math.mod(beat,4) < 3 then
						GAMESTATE:ApplyGameCommand('mod,*10000 -75% Invert,*10000 25% Flip');
					elseif math.mod(beat,4) >= 3 then
						GAMESTATE:ApplyGameCommand('mod,*10000 '..math.sin(beat*math.pi)*-10 ..'% Alternate,*10000 '..math.sin(beat*math.pi)*10 ..'% Split');
						GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.cos(beat*math.pi)*-37.5-37.5 ..'% Invert,*10000 '..-math.cos(beat*math.pi)*12.5+12.5 ..'% Flip');	
					end
				elseif math.mod(prefix_spincrement,7) == 0 then
					if math.mod(beat,4) >= 1 and math.mod(beat,4) < 2 then
						GAMESTATE:ApplyGameCommand('mod,*10000 '..math.sin(beat*math.pi)*30 ..'% Alternate,*10000 '..math.sin(beat*math.pi)*30 ..'% Split,*10000 '..math.sin(beat*math.pi)*-30 ..'% Reverse');
						GAMESTATE:ApplyGameCommand('mod,*10000 '..math.cos(beat*math.pi)*37.5+37.5 ..'% Invert,*10000 '..math.cos(beat*math.pi)*37.5+37.5 ..'% Flip');
					elseif math.mod(beat,4) >= 2 and math.mod(beat,4) < 3 then
						GAMESTATE:ApplyGameCommand('mod,*10000 75% Invert,*10000 75% Flip');
					elseif math.mod(beat,4) >= 3 then
						GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.sin(beat*math.pi)*30 ..'% Alternate,*10000 '..-math.sin(beat*math.pi)*30 ..'% Split,*10000 '..-math.sin(beat*math.pi)*-30 ..'% Reverse');
						GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.cos(beat*math.pi)*37.5+37.5 ..'% Invert,*10000 '..-math.cos(beat*math.pi)*37.5+37.5 ..'% Flip');	
					end
				end
			end

			if beat >= 80 and beat < 104 then
				if math.mod(prefix_spincrement,7) == 1 then
					if math.mod(beat,4) >= 1 and math.mod(beat,4) < 2 then
						GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.sin(beat*math.pi)*20 ..'% Alternate,*10000 '..-math.sin(beat*math.pi)*-10 ..'% Reverse');
						GAMESTATE:ApplyGameCommand('mod,*10000 '..math.cos(beat*math.pi)*50+50 ..'% Invert');
					elseif math.mod(beat,4) >= 2 and math.mod(beat,4) < 3 then
						GAMESTATE:ApplyGameCommand('mod,*10000 100% Invert');
					elseif math.mod(beat,4) >= 3 then
						GAMESTATE:ApplyGameCommand('mod,*10000 '..math.sin(beat*math.pi)*20 ..'% Alternate,*10000 '..math.sin(beat*math.pi)*-10 ..'% Reverse');
						GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.cos(beat*math.pi)*50+50 ..'% Invert');	
					end
				elseif math.mod(prefix_spincrement,7) == 2 then
					if math.mod(beat,4) >= 1 and math.mod(beat,4) < 2 then
						GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.sin(beat*math.pi)*20 ..'% Cross,*10000 '..-math.sin(beat*math.pi)*-10 ..'% Reverse');
						GAMESTATE:ApplyGameCommand('mod,*10000 '..math.cos(beat*math.pi)*50+50 ..'% Invert');
					elseif math.mod(beat,4) >= 2 and math.mod(beat,4) < 3 then
						GAMESTATE:ApplyGameCommand('mod,*10000 100% Invert');
					elseif math.mod(beat,4) >= 3 then
						GAMESTATE:ApplyGameCommand('mod,*10000 '..math.sin(beat*math.pi)*20 ..'% Cross,*10000 '..math.sin(beat*math.pi)*-10 ..'% Reverse');
						GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.cos(beat*math.pi)*50+50 ..'% Invert');	
					end
				elseif math.mod(prefix_spincrement,7) == 3 then
					if math.mod(beat,4) >= 1 and math.mod(beat,4) < 2 then
						GAMESTATE:ApplyGameCommand('mod,*10000 '..math.sin(beat*math.pi)*20 ..'% Alternate,*10000 '..math.sin(beat*math.pi)*-10 ..'% Reverse');
						GAMESTATE:ApplyGameCommand('mod,*10000 '..math.cos(beat*math.pi)*50+50 ..'% Invert');
					elseif math.mod(beat,4) >= 2 and math.mod(beat,4) < 3 then
						GAMESTATE:ApplyGameCommand('mod,*10000 100% Invert');
					elseif math.mod(beat,4) >= 3 then
						GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.sin(beat*math.pi)*20 ..'% Alternate,*10000 '..-math.sin(beat*math.pi)*-10 ..'% Reverse');
						GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.cos(beat*math.pi)*50+50 ..'% Invert');	
					end
				elseif math.mod(prefix_spincrement,7) == 4 then
					if math.mod(beat,4) >= 1 and math.mod(beat,4) < 2 then
						GAMESTATE:ApplyGameCommand('mod,*10000 '..math.sin(beat*math.pi)*20 ..'% Cross,*10000 '..math.sin(beat*math.pi)*-10 ..'% Reverse');
						GAMESTATE:ApplyGameCommand('mod,*10000 '..math.cos(beat*math.pi)*50+50 ..'% Invert');
					elseif math.mod(beat,4) >= 2 and math.mod(beat,4) < 3 then
						GAMESTATE:ApplyGameCommand('mod,*10000 100% Invert');
					elseif math.mod(beat,4) >= 3 then
						GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.sin(beat*math.pi)*20 ..'% Cross,*10000 '..-math.sin(beat*math.pi)*-10 ..'% Reverse');
						GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.cos(beat*math.pi)*50+50 ..'% Invert');	
					end
				elseif math.mod(prefix_spincrement,7) == 5 then
					if math.mod(beat,4) >= 1 and math.mod(beat,4) < 2 then
						GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.sin(beat*math.pi)*20 ..'% Alternate,*10000 '..-math.sin(beat*math.pi)*-10 ..'% Reverse');
						GAMESTATE:ApplyGameCommand('mod,*10000 '..math.cos(beat*math.pi)*50+50 ..'% Invert');
					elseif math.mod(beat,4) >= 2 and math.mod(beat,4) < 3 then
						GAMESTATE:ApplyGameCommand('mod,*10000 100% Invert');
					elseif math.mod(beat,4) >= 3 then
						GAMESTATE:ApplyGameCommand('mod,*10000 '..math.sin(beat*math.pi)*20 ..'% Alternate,*10000 '..math.sin(beat*math.pi)*-10 ..'% Reverse');
						GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.cos(beat*math.pi)*50+50 ..'% Invert');		
					end
				elseif math.mod(prefix_spincrement,7) == 6 then
					if math.mod(beat,4) >= 1 and math.mod(beat,4) < 2 then
						GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.sin(beat*math.pi)*20 ..'% Cross,*10000 '..-math.sin(beat*math.pi)*-10 ..'% Reverse');
						GAMESTATE:ApplyGameCommand('mod,*10000 '..math.cos(beat*math.pi)*50+50 ..'% Invert');
					elseif math.mod(beat,4) >= 2 and math.mod(beat,4) < 3 then
						GAMESTATE:ApplyGameCommand('mod,*10000 100% Invert');
					elseif math.mod(beat,4) >= 3 then
						GAMESTATE:ApplyGameCommand('mod,*10000 '..math.sin(beat*math.pi)*20 ..'% Cross,*10000 '..math.sin(beat*math.pi)*-10 ..'% Reverse');
						GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.cos(beat*math.pi)*50+50 ..'% Invert');	
					end
				elseif math.mod(prefix_spincrement,7) == 0 then
					if math.mod(beat,4) >= 1 and math.mod(beat,4) < 2 then
						GAMESTATE:ApplyGameCommand('mod,*10000 '..math.sin(beat*math.pi)*20 ..'% Alternate,*10000 '..math.sin(beat*math.pi)*-10 ..'% Reverse');
						GAMESTATE:ApplyGameCommand('mod,*10000 '..math.cos(beat*math.pi)*50+50 ..'% Invert');
					elseif math.mod(beat,4) >= 2 and math.mod(beat,4) < 3 then
						GAMESTATE:ApplyGameCommand('mod,*10000 100% Invert');
					elseif math.mod(beat,4) >= 3 then
						GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.sin(beat*math.pi)*20 ..'% Alternate,*10000 '..-math.sin(beat*math.pi)*-10 ..'% Reverse');
						GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.cos(beat*math.pi)*50+50 ..'% Invert');		
					end
				end
			end

			if beat >= 192 and beat < 220 then
				if math.mod(prefix_spincrement,7) == 1 then
					if math.mod(beat,4) >= 1 and math.mod(beat,4) < 2 then
						GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.sin(beat*math.pi)*20 ..'% Alternate,*10000 '..-math.sin(beat*math.pi)*-10 ..'% Reverse');
						GAMESTATE:ApplyGameCommand('mod,*10000 '..math.cos(beat*math.pi)*50+50 ..'% Invert');
					elseif math.mod(beat,4) >= 2 and math.mod(beat,4) < 3 then
						GAMESTATE:ApplyGameCommand('mod,*10000 100% Invert');
					elseif math.mod(beat,4) >= 3 then
						GAMESTATE:ApplyGameCommand('mod,*10000 '..math.sin(beat*math.pi)*20 ..'% Alternate,*10000 '..math.sin(beat*math.pi)*-10 ..'% Reverse');
						GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.cos(beat*math.pi)*50+50 ..'% Invert');	
					end
				elseif math.mod(prefix_spincrement,7) == 2 then
					if math.mod(beat,4) >= 1 and math.mod(beat,4) < 2 then
						GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.sin(beat*math.pi)*20 ..'% Cross,*10000 '..-math.sin(beat*math.pi)*-10 ..'% Reverse');
						GAMESTATE:ApplyGameCommand('mod,*10000 '..math.cos(beat*math.pi)*50+50 ..'% Invert');
					elseif math.mod(beat,4) >= 2 and math.mod(beat,4) < 3 then
						GAMESTATE:ApplyGameCommand('mod,*10000 100% Invert');
					elseif math.mod(beat,4) >= 3 then
						GAMESTATE:ApplyGameCommand('mod,*10000 '..math.sin(beat*math.pi)*20 ..'% Cross,*10000 '..math.sin(beat*math.pi)*-10 ..'% Reverse');
						GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.cos(beat*math.pi)*50+50 ..'% Invert');	
					end
				elseif math.mod(prefix_spincrement,7) == 3 then
					if math.mod(beat,4) >= 1 and math.mod(beat,4) < 2 then
						GAMESTATE:ApplyGameCommand('mod,*10000 '..math.sin(beat*math.pi)*20 ..'% Alternate,*10000 '..math.sin(beat*math.pi)*-10 ..'% Reverse');
						GAMESTATE:ApplyGameCommand('mod,*10000 '..math.cos(beat*math.pi)*50+50 ..'% Invert');
					elseif math.mod(beat,4) >= 2 and math.mod(beat,4) < 3 then
						GAMESTATE:ApplyGameCommand('mod,*10000 100% Invert');
					elseif math.mod(beat,4) >= 3 then
						GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.sin(beat*math.pi)*20 ..'% Alternate,*10000 '..-math.sin(beat*math.pi)*-10 ..'% Reverse');
						GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.cos(beat*math.pi)*50+50 ..'% Invert');	
					end
				elseif math.mod(prefix_spincrement,7) == 4 then
					if math.mod(beat,4) >= 1 and math.mod(beat,4) < 2 then
						GAMESTATE:ApplyGameCommand('mod,*10000 '..math.sin(beat*math.pi)*20 ..'% Cross,*10000 '..math.sin(beat*math.pi)*-10 ..'% Reverse');
						GAMESTATE:ApplyGameCommand('mod,*10000 '..math.cos(beat*math.pi)*50+50 ..'% Invert');
					elseif math.mod(beat,4) >= 2 and math.mod(beat,4) < 3 then
						GAMESTATE:ApplyGameCommand('mod,*10000 100% Invert');
					elseif math.mod(beat,4) >= 3 then
						GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.sin(beat*math.pi)*20 ..'% Cross,*10000 '..-math.sin(beat*math.pi)*-10 ..'% Reverse');
						GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.cos(beat*math.pi)*50+50 ..'% Invert');	
					end
				elseif math.mod(prefix_spincrement,7) == 5 then
					if math.mod(beat,4) >= 1 and math.mod(beat,4) < 2 then
						GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.sin(beat*math.pi)*20 ..'% Alternate,*10000 '..-math.sin(beat*math.pi)*-10 ..'% Reverse');
						GAMESTATE:ApplyGameCommand('mod,*10000 '..math.cos(beat*math.pi)*50+50 ..'% Invert');
					elseif math.mod(beat,4) >= 2 and math.mod(beat,4) < 3 then
						GAMESTATE:ApplyGameCommand('mod,*10000 100% Invert');
					elseif math.mod(beat,4) >= 3 then
						GAMESTATE:ApplyGameCommand('mod,*10000 '..math.sin(beat*math.pi)*20 ..'% Alternate,*10000 '..math.sin(beat*math.pi)*-10 ..'% Reverse');
						GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.cos(beat*math.pi)*50+50 ..'% Invert');		
					end
				elseif math.mod(prefix_spincrement,7) == 6 then
					if math.mod(beat,4) >= 1 and math.mod(beat,4) < 2 then
						GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.sin(beat*math.pi)*20 ..'% Cross,*10000 '..-math.sin(beat*math.pi)*-10 ..'% Reverse');
						GAMESTATE:ApplyGameCommand('mod,*10000 '..math.cos(beat*math.pi)*50+50 ..'% Invert');
					elseif math.mod(beat,4) >= 2 and math.mod(beat,4) < 3 then
						GAMESTATE:ApplyGameCommand('mod,*10000 100% Invert');
					elseif math.mod(beat,4) >= 3 then
						GAMESTATE:ApplyGameCommand('mod,*10000 '..math.sin(beat*math.pi)*20 ..'% Cross,*10000 '..math.sin(beat*math.pi)*-10 ..'% Reverse');
						GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.cos(beat*math.pi)*50+50 ..'% Invert');	
					end
				elseif math.mod(prefix_spincrement,7) == 0 then
					if math.mod(beat,4) >= 1 and math.mod(beat,4) < 2 then
						GAMESTATE:ApplyGameCommand('mod,*10000 '..math.sin(beat*math.pi)*20 ..'% Alternate,*10000 '..math.sin(beat*math.pi)*-10 ..'% Reverse');
						GAMESTATE:ApplyGameCommand('mod,*10000 '..math.cos(beat*math.pi)*50+50 ..'% Invert');
					elseif math.mod(beat,4) >= 2 and math.mod(beat,4) < 3 then
						GAMESTATE:ApplyGameCommand('mod,*10000 100% Invert');
					elseif math.mod(beat,4) >= 3 then
						GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.sin(beat*math.pi)*20 ..'% Alternate,*10000 '..-math.sin(beat*math.pi)*-10 ..'% Reverse');
						GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.cos(beat*math.pi)*50+50 ..'% Invert');		
					end
				end
			end

			if beat >= 224 and beat < 248 then
				if math.mod(prefix_spincrement,7) == 1 then
					if math.mod(beat,4) >= 1 and math.mod(beat,4) < 2 then
						GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.sin(beat*math.pi)*20 ..'% Alternate,*10000 '..-math.sin(beat*math.pi)*40 ..'% Split,*10000 '..-math.sin(beat*math.pi)*-30 ..'% Reverse');
						GAMESTATE:ApplyGameCommand('mod,*10000 '..math.cos(beat*math.pi)*50+50 ..'% Flip');
					elseif math.mod(beat,4) >= 2 and math.mod(beat,4) < 3 then
						GAMESTATE:ApplyGameCommand('mod,*10000 100% Flip');
					elseif math.mod(beat,4) >= 3 then
						GAMESTATE:ApplyGameCommand('mod,*10000 '..math.sin(beat*math.pi)*20 ..'% Alternate,*10000 '..math.sin(beat*math.pi)*40 ..'% Split,*10000 '..math.sin(beat*math.pi)*-30 ..'% Reverse');
						GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.cos(beat*math.pi)*50+50 ..'% Flip');	
					end
				elseif math.mod(prefix_spincrement,7) == 2 then
					if math.mod(beat,4) >= 1 and math.mod(beat,4) < 2 then
						GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.sin(beat*math.pi)*40 ..'% Alternate,*10000 '..-math.sin(beat*math.pi)*20 ..'% Split,*10000 '..-math.sin(beat*math.pi)*-30 ..'% Reverse');
						GAMESTATE:ApplyGameCommand('mod,*10000 '..math.cos(beat*math.pi)*50+50 ..'% Flip');
					elseif math.mod(beat,4) >= 2 and math.mod(beat,4) < 3 then
						GAMESTATE:ApplyGameCommand('mod,*10000 100% Flip');
					elseif math.mod(beat,4) >= 3 then
						GAMESTATE:ApplyGameCommand('mod,*10000 '..math.sin(beat*math.pi)*40 ..'% Alternate,*10000 '..math.sin(beat*math.pi)*20 ..'% Split,*10000 '..math.sin(beat*math.pi)*-30 ..'% Reverse');
						GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.cos(beat*math.pi)*50+50 ..'% Flip');	
					end
				elseif math.mod(prefix_spincrement,7) == 3 then
					if math.mod(beat,4) >= 1 and math.mod(beat,4) < 2 then
						GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.sin(beat*math.pi)*-20 ..'% Alternate,*10000 '..-math.sin(beat*math.pi)*-40 ..'% Split,*10000 '..-math.sin(beat*math.pi)*30 ..'% Reverse');
						GAMESTATE:ApplyGameCommand('mod,*10000 '..math.cos(beat*math.pi)*50+50 ..'% Flip');
					elseif math.mod(beat,4) >= 2 and math.mod(beat,4) < 3 then
						GAMESTATE:ApplyGameCommand('mod,*10000 100% Flip');
					elseif math.mod(beat,4) >= 3 then
						GAMESTATE:ApplyGameCommand('mod,*10000 '..math.sin(beat*math.pi)*-20 ..'% Alternate,*10000 '..math.sin(beat*math.pi)*-40 ..'% Split,*10000 '..math.sin(beat*math.pi)*30 ..'% Reverse');
						GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.cos(beat*math.pi)*50+50 ..'% Flip');	
					end
				elseif math.mod(prefix_spincrement,7) == 4 then
					if math.mod(beat,4) >= 1 and math.mod(beat,4) < 2 then
						GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.sin(beat*math.pi)*-40 ..'% Alternate,*10000 '..-math.sin(beat*math.pi)*-20 ..'% Split,*10000 '..-math.sin(beat*math.pi)*30 ..'% Reverse');
						GAMESTATE:ApplyGameCommand('mod,*10000 '..math.cos(beat*math.pi)*50+50 ..'% Flip');
					elseif math.mod(beat,4) >= 2 and math.mod(beat,4) < 3 then
						GAMESTATE:ApplyGameCommand('mod,*10000 100% Flip');
					elseif math.mod(beat,4) >= 3 then
						GAMESTATE:ApplyGameCommand('mod,*10000 '..math.sin(beat*math.pi)*-40 ..'% Alternate,*10000 '..math.sin(beat*math.pi)*-20 ..'% Split,*10000 '..math.sin(beat*math.pi)*30 ..'% Reverse');
						GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.cos(beat*math.pi)*50+50 ..'% Flip');	
					end
				elseif math.mod(prefix_spincrement,7) == 5 then
					if math.mod(beat,4) >= 1 and math.mod(beat,4) < 2 then
						GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.sin(beat*math.pi)*20 ..'% Alternate,*10000 '..-math.sin(beat*math.pi)*40 ..'% Split,*10000 '..-math.sin(beat*math.pi)*-30 ..'% Reverse');
						GAMESTATE:ApplyGameCommand('mod,*10000 '..math.cos(beat*math.pi)*50+50 ..'% Flip');
					elseif math.mod(beat,4) >= 2 and math.mod(beat,4) < 3 then
						GAMESTATE:ApplyGameCommand('mod,*10000 100% Flip');
					elseif math.mod(beat,4) >= 3 then
						GAMESTATE:ApplyGameCommand('mod,*10000 '..math.sin(beat*math.pi)*20 ..'% Alternate,*10000 '..math.sin(beat*math.pi)*40 ..'% Split,*10000 '..math.sin(beat*math.pi)*-30 ..'% Reverse');
						GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.cos(beat*math.pi)*50+50 ..'% Flip');	
					end
				elseif math.mod(prefix_spincrement,7) == 6 then
					if math.mod(beat,4) >= 1 and math.mod(beat,4) < 2 then
						GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.sin(beat*math.pi)*40 ..'% Alternate,*10000 '..-math.sin(beat*math.pi)*20 ..'% Split,*10000 '..-math.sin(beat*math.pi)*-30 ..'% Reverse');
						GAMESTATE:ApplyGameCommand('mod,*10000 '..math.cos(beat*math.pi)*50+50 ..'% Flip');
					elseif math.mod(beat,4) >= 2 and math.mod(beat,4) < 3 then
						GAMESTATE:ApplyGameCommand('mod,*10000 100% Flip');
					elseif math.mod(beat,4) >= 3 then
						GAMESTATE:ApplyGameCommand('mod,*10000 '..math.sin(beat*math.pi)*40 ..'% Alternate,*10000 '..math.sin(beat*math.pi)*20 ..'% Split,*10000 '..math.sin(beat*math.pi)*-30 ..'% Reverse');
						GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.cos(beat*math.pi)*50+50 ..'% Flip');	
					end
				elseif math.mod(prefix_spincrement,7) == 0 then
					if math.mod(beat,4) >= 1 and math.mod(beat,4) < 2 then
						GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.sin(beat*math.pi)*-20 ..'% Alternate,*10000 '..-math.sin(beat*math.pi)*-40 ..'% Split,*10000 '..-math.sin(beat*math.pi)*30 ..'% Reverse');
						GAMESTATE:ApplyGameCommand('mod,*10000 '..math.cos(beat*math.pi)*50+50 ..'% Flip');
					elseif math.mod(beat,4) >= 2 and math.mod(beat,4) < 3 then
						GAMESTATE:ApplyGameCommand('mod,*10000 100% Flip');
					elseif math.mod(beat,4) >= 3 then
						GAMESTATE:ApplyGameCommand('mod,*10000 '..math.sin(beat*math.pi)*-20 ..'% Alternate,*10000 '..math.sin(beat*math.pi)*-40 ..'% Split,*10000 '..math.sin(beat*math.pi)*30 ..'% Reverse');
						GAMESTATE:ApplyGameCommand('mod,*10000 '..-math.cos(beat*math.pi)*50+50 ..'% Flip');	
					end
				end
			end
			
			--------------------------------------------------------------
			-- Message reader to make specific values of the actor aux. --
			--------------------------------------------------------------
			if prefix_curmessage <= table.getn(prefix_messages) then
				if prefix_time >= prefix_messages[prefix_curmessage][1] then
					MESSAGEMAN:Broadcast(prefix_messages[prefix_curmessage][2]);
					prefix_curmessage = prefix_curmessage + 1;
				end
			end
			
			self:queuecommand('Update2');
			
		end"


		Update2Command="%function(self)
		self:sleep(0.02);
		self:queuecommand('Update');
		end"

	/>
	
	<BitmapText
		Font="Common Normal"
		Text="test"
		OnCommand="x,SCREEN_CENTER_X;y,SCREEN_CENTER_Y;effectclock,music;playcommand,SetTime;hidden,1"
		SetTimeCommand="%function(self) self:settext(self:GetSecsIntoEffect()); prefix_time = PREFSMAN:GetPreference('GlobalOffsetSeconds') - (0.012 - 0.319) + tonumber(self:GetText()); self:sleep(0.02); self:queuecommand('SetTime'); end"
	/>
	
	<!-- Aux actor, VERY IMPORTANT -->
	<Layer
		Type="Quad"
		OnCommand=""
		InitCommand="%function(self) auxvar = self; self:hidden(1) end"
		PewPew1MessageCommand="%function()
			for i,v in pairs(prefix_plr) do
				local multi = -1; if i == 2 then multi = 1; end
				if v then
					v:decelerate(240/190/8);
					v:rotationz(5);
					v:spring(240/190/8);
					v:rotationz(0);
				end
			end
		end"
		PewPew2MessageCommand="%function()
			for i,v in pairs(prefix_plr) do
				local multi = -1; if i == 2 then multi = 1; end
				if v then
					v:decelerate(240/190/8);
					v:rotationz(-5);
					v:spring(240/190/8);
					v:rotationz(0);
				end
			end
		end"
		Guitar1MessageCommand="%function()
			for i,v in pairs(prefix_plr) do
				local multi = -1; if i == 2 then multi = 1; end
				if v then
					v:linear(240/190/16);
					v:skewx(0.1);
					v:linear(240/190/16);
					v:skewx(-0.1);
					v:linear(240/190/16);
					v:skewx(0.1);
					v:linear(240/190/16);
					v:skewx(-0.1);
					v:linear(240/190/16);
					v:skewx(0);
				end
			end
		end"
		Guitar2MessageCommand="%function()
			for i,v in pairs(prefix_plr) do
				local multi = -1; if i == 2 then multi = 1; end
				if v then
					v:linear(240/190/8);
					v:skewx(0.1);
					v:linear(240/190/12);
					v:skewx(-0.1);
					v:linear(240/190/12);
					v:skewx(0.1);
					v:linear(240/190/12);
					v:skewx(-0.1);
					v:linear(240/190/12);
					v:skewx(0.1);
					v:linear(240/190/12);
					v:skewx(-0.1);
					v:linear(240/190/12);
					v:skewx(0.1);
					v:linear(240/190/12);
					v:skewx(-0.1);
					v:linear(240/190/12);
					v:skewx(0.1);
					v:linear(240/190/12);
					v:skewx(-0.1);
					v:linear(240/190/16);
					v:skewx(0.1);
					v:linear(240/190/16);
					v:skewx(-0.1);
					v:linear(240/190/16);
					v:skewx(0.1);
					v:linear(240/190/16);
					v:skewx(-0.1);
					v:linear(240/190/16);
					v:skewx(0);
				end
			end
		end"
		Guitar3MessageCommand="%function()
			for i,v in pairs(prefix_plr) do
				local multi = -1; if i == 2 then multi = 1; end
				if v then
					v:linear(240/190/8);
					v:skewx(0.1);
					v:linear(240/190/8);
					v:skewx(-0.1);
					v:linear(240/190/8);
					v:skewx(0.1);
					v:linear(240/190/8);
					v:skewx(-0.1);
					v:linear(240/190/16);
					v:skewx(0.1);
					v:linear(240/190/16);
					v:skewx(-0.1);
					v:linear(240/190/16);
					v:skewx(0.1);
					v:linear(240/190/16);
					v:skewx(-0.1);
					v:linear(240/190/8);
					v:skewx(0.1);
					v:linear(240/190/8);
					v:skewx(-0.1);
					v:linear(240/190/8);
					v:skewx(0.1);
					v:linear(240/190/8);
					v:skewx(-0.1);
					v:linear(240/190/8);
					v:skewx(0);
				end
			end
		end"
		Guitar4MessageCommand="%function()
			for i,v in pairs(prefix_plr) do
				local multi = -1; if i == 2 then multi = 1; end
				if v then
					v:linear(240/190/12);
					v:skewx(0.1);
					v:linear(240/190/12);
					v:skewx(-0.1);
					v:linear(240/190/12);
					v:skewx(0.1);
					v:linear(240/190/12);
					v:skewx(-0.1);
					v:linear(240/190/12);
					v:skewx(0.1);
					v:linear(240/190/12);
					v:skewx(-0.1);
					v:linear(240/190/12);
					v:skewx(0.1);
					v:linear(240/190/12);
					v:skewx(-0.1);
					v:linear(240/190/12);
					v:skewx(0.1);
					v:linear(240/190/12);
					v:skewx(-0.1);
					v:linear(240/190/12);
					v:skewx(0.1);
					v:linear(240/190/12);
					v:skewx(-0.1);
					v:linear(240/190/12);
					v:skewx(0.1);
					v:linear(240/190/12);
					v:skewx(-0.1);
					v:linear(240/190/12);
					v:skewx(0.1);
					v:linear(240/190/12);
					v:skewx(0);
				end
			end
		end"
		Guitar5MessageCommand="%function()
			for i,v in pairs(prefix_plr) do
				local multi = -1; if i == 2 then multi = 1; end
				if v then
					v:linear(240/190/12);
					v:skewx(0.1);
					v:linear(240/190/12);
					v:skewx(-0.1);
					v:linear(240/190/12);
					v:skewx(0.1);
					v:linear(240/190/12);
					v:skewx(-0.1);
					v:linear(240/190/12);
					v:skewx(0.1);
					v:linear(240/190/12);
					v:skewx(-0.1);
					v:linear(240/190/16);
					v:skewx(0.1);
					v:linear(240/190/16);
					v:skewx(-0.1);
					v:linear(240/190/16);
					v:skewx(0);
				end
			end
		end"
		Guitar6MessageCommand="%function()
			for i,v in pairs(prefix_plr) do
				local multi = -1; if i == 2 then multi = 1; end
				if v then
					v:linear(240/190/16);
					v:skewx(0.1);
					v:linear(240/190/16);
					v:skewx(-0.1);
					v:linear(240/190/12);
					v:skewx(0.1);
					v:linear(240/190/12);
					v:skewx(-0.1);
					v:linear(240/190/12);
					v:skewx(0.1);
					v:linear(240/190/12);
					v:skewx(-0.1);
					v:linear(240/190/12);
					v:skewx(0.1);
					v:linear(240/190/12);
					v:skewx(-0.1);
					v:linear(240/190/12);
					v:skewx(0.1);
					v:linear(240/190/12);
					v:skewx(-0.1);
					v:linear(240/190/12);
					v:skewx(0.1);
					v:linear(240/190/12);
					v:skewx(-0.1);
					v:linear(240/190/12);
					v:skewx(0.1);
					v:linear(240/190/12);
					v:skewx(-0.1);
					v:linear(240/190/12);
					v:skewx(0);
				end
			end
		end"
		Guitar7MessageCommand="%function()
			for i,v in pairs(prefix_plr) do
				local multi = -1; if i == 2 then multi = 1; end
				if v then
					v:linear(240/190/12);
					v:skewx(0.1);
					v:linear(240/190/12);
					v:skewx(-0.1);
					v:linear(240/190/12);
					v:skewx(0.1);
					v:linear(240/190/12);
					v:skewx(-0.1);
					v:linear(240/190/12);
					v:skewx(0.1);
					v:linear(240/190/12);
					v:skewx(-0.1);
					v:linear(240/190/12);
					v:skewx(0.1);
					v:linear(240/190/12);
					v:skewx(-0.1);
					v:linear(240/190/12);
					v:skewx(0.1);
					v:linear(240/190/16);
					v:skewx(-0.1);
					v:linear(240/190/16);
					v:skewx(0.1);
					v:linear(240/190/16);
					v:skewx(0);
				end
			end
		end"
		Guitar8MessageCommand="%function()
			for i,v in pairs(prefix_plr) do
				local multi = -1; if i == 2 then multi = 1; end
				if v then
					v:linear(240/190/4);
					v:skewx(0.1);
					v:linear(240/190/4);
					v:skewx(0);
				end
			end
		end"
		Guitar9MessageCommand="%function()
			for i,v in pairs(prefix_plr) do
				local multi = -1; if i == 2 then multi = 1; end
				if v then
					v:linear(240/190/16);
					v:skewx(0.1);
					v:linear(240/190/16);
					v:skewx(-0.1);
					v:linear(240/190/16);
					v:skewx(0.1);
					v:linear(240/190/16);
					v:skewx(-0.1);
					v:linear(240/190/4);
					v:skewx(0.1);
					v:linear(240/190/8);
					v:skewx(-0.1);
					v:linear(240/190/4);
					v:skewx(0.1);
					v:linear(240/190/8);
					v:skewx(-0.1);
					v:linear(240/190/4);
					v:skewx(0.1);
					v:linear(240/190/4);
					v:skewx(0);
				end
			end
		end"
		Harmonica1MessageCommand="%function()
			for i,v in pairs(prefix_plr) do
				local multi = -1; if i == 2 then multi = 1; end
				if v then
					v:linear(240/190/8);
					v:skewx(0.1);
					v:linear(240/190/12);
					v:skewx(-0.1);
					v:linear(240/190/12);
					v:skewx(0.1);
					v:linear(240/190/12);
					v:skewx(-0.1);
					v:linear(240/190/12);
					v:skewx(0.1);
					v:linear(240/190/12);
					v:skewx(-0.1);
					v:linear(240/190/12);
					v:skewx(0.1);
					v:linear(240/190/16);
					v:skewx(-0.1);
					v:linear(240/190/16);
					v:skewx(0.1);
					v:linear(240/190/16);
					v:skewx(-0.1);
					v:linear(240/190/16);
					v:skewx(0.1);
					v:linear(240/190/16);
					v:skewx(-0.1);
					v:linear(240/190/16);
					v:skewx(0.1);
					v:linear(240/190/4);
					v:skewx(-0.1);
					v:linear(240/190/8);
					v:skewx(0.1);
					v:linear(240/190/8);
					v:skewx(0);
				end
			end
		end"
		Harmonica2MessageCommand="%function()
			for i,v in pairs(prefix_plr) do
				local multi = -1; if i == 2 then multi = 1; end
				if v then
					v:linear(240/190/16);
					v:skewx(0.1);
					v:linear(240/190/16);
					v:skewx(-0.1);
					v:linear(240/190/16);
					v:skewx(0.1);
					v:linear(240/190/16);
					v:skewx(-0.1);
					v:linear(240/190/16);
					v:skewx(0.1);
					v:linear(240/190/16);
					v:skewx(-0.1);
					v:linear(240/190/16);
					v:skewx(0.1);
					v:linear(240/190/16);
					v:skewx(-0.1);
					v:linear(240/190/16);
					v:skewx(0.1);
					v:linear(240/190/16);
					v:skewx(-0.1);
					v:linear(240/190/16);
					v:skewx(0.1);
					v:linear(240/190/16);
					v:skewx(-0.1);
					v:linear(240/190/16);
					v:skewx(0.1);
					v:linear(240/190/16);
					v:skewx(-0.1);
					v:linear(240/190/16);
					v:skewx(0.1);
					v:linear(240/190/16);
					v:skewx(-0.1);
					v:linear(240/190/16);
					v:skewx(0);
				end
			end
		end"
		Harmonica3MessageCommand="%function()
			for i,v in pairs(prefix_plr) do
				local multi = -1; if i == 2 then multi = 1; end
				if v then
					v:linear(240/190/16);
					v:skewx(0.1);
					v:linear(240/190/16);
					v:skewx(-0.1);
					v:linear(240/190/16);
					v:skewx(0.1);
					v:linear(240/190/16);
					v:skewx(-0.1);
					v:linear(240/190/4);
					v:skewx(0.1);
					v:linear(240/190/8);
					v:skewx(-0.1);
					v:linear(240/190/4);
					v:skewx(0.1);
					v:linear(240/190/8);
					v:skewx(-0.1);
					v:linear(240/190/16);
					v:skewx(0.1);
					v:linear(240/190/16);
					v:skewx(-0.1);
					v:linear(240/190/16);
					v:skewx(0.1);
					v:linear(240/190/16);
					v:skewx(-0.1);
					v:linear(240/190/16);
					v:skewx(0);
				end
			end
		end"
	/>
	
</children></ActorFrame>