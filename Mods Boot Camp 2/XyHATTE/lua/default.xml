<ActorFrame><children>

	<Layer
		Type="Quad"
		InitCommand="hidden,1"
		OnCommand="sleep,114.773"
	/>
	
	<Layer
		Type="Quad"
		InitCommand="hidden,1"
		OnCommand="%function(self)
				fgcurcommand = 1;
				checked = false;
				prefix_time = 0;
				prefix_phase = 0;
				
				prefix_curmessage = 1;
				
				
				prefix_messages = {
					{17.568+240/222/16*0,'IncrementPhase'},
					{17.568+240/222/16*1,'IncrementPhase'},
					{17.568+240/222/16*2,'IncrementPhase'},
					{17.568+240/222/16*3,'IncrementPhase'},
					{17.568+240/222/16*4,'IncrementPhase'},
					{17.568+240/222/16*5,'IncrementPhase'},
					{17.568+240/222/16*6,'IncrementPhase'},
					{17.568+240/222/16*7,'IncrementPhase'},
					{17.568+240/222/16*8,'IncrementPhase'},
					{17.568+240/222/16*9,'IncrementPhase'},
					{17.568+240/222/16*10,'IncrementPhase'},
					{17.568+240/222/16*11,'IncrementPhase'},
					{17.568+240/222/16*12,'IncrementPhase'},
					{17.568+240/222/16*13,'IncrementPhase'},
					{17.568+240/222/16*14,'IncrementPhase'},
					{17.568+240/222/16*15,'IncrementPhase'},

					{18.649+240/222/16*0,'DecrementPhase'},
					{18.649+240/222/16*1,'DecrementPhase'},
					{18.649+240/222/16*2,'DecrementPhase'},
					{18.649+240/222/16*3,'DecrementPhase'},
					{18.649+240/222/16*4,'DecrementPhase'},
					{18.649+240/222/16*5,'DecrementPhase'},
					{18.649+240/222/16*6,'DecrementPhase'},
					{18.649+240/222/16*7,'DecrementPhase'},
					{18.649+240/222/16*8,'DecrementPhase'},
					{18.649+240/222/16*9,'DecrementPhase'},
					{18.649+240/222/16*10,'DecrementPhase'},
					{18.649+240/222/16*11,'DecrementPhase'},
					{18.649+240/222/16*12,'DecrementPhase'},
					{18.649+240/222/16*13,'DecrementPhase'},
					{18.649+240/222/16*14,'DecrementPhase'},
					{18.649+240/222/16*15,'DecrementPhase'},

					--{19.730+240/222/16*0,'IncrementPhase'},
					{19.730+240/222/16*1,'IncrementPhase'},
					{19.730+240/222/16*2,'IncrementPhase'},
					{19.730+240/222/16*3,'IncrementPhase'},
					{19.730+240/222/16*4,'IncrementPhase'},
					{19.730+240/222/16*5,'IncrementPhase'},
					{19.730+240/222/16*6,'IncrementPhase'},
					{19.730+240/222/16*7,'IncrementPhase'},

					--{20.271+240/222/16*0,'DecrementPhase'},
					{20.271+240/222/16*1,'DecrementPhase'},
					{20.271+240/222/16*2,'DecrementPhase'},
					{20.271+240/222/16*3,'DecrementPhase'},
					{20.271+240/222/16*4,'DecrementPhase'},
					{20.271+240/222/16*5,'DecrementPhase'},
					{20.271+240/222/16*6,'DecrementPhase'},
					{20.271+240/222/16*7,'DecrementPhase'},

					--{20.812+240/222/16*0,'IncrementPhase'},
					{20.812+240/222/16*1,'IncrementPhase'},
					{20.812+240/222/16*2,'IncrementPhase'},
					{20.812+240/222/16*3,'IncrementPhase'},
					{20.812+240/222/16*4,'IncrementPhase'},
					{20.812+240/222/16*5,'IncrementPhase'},
					{20.812+240/222/16*6,'IncrementPhase'},
					{20.812+240/222/16*7,'IncrementPhase'},
					{20.812+240/222/16*8,'IncrementPhase'},
					{20.812+240/222/16*9,'IncrementPhase'},
					{20.812+240/222/16*10,'IncrementPhase'},
					{20.812+240/222/16*11,'IncrementPhase'},
					{20.812+240/222/16*12,'IncrementPhase'},
					{20.812+240/222/16*13,'IncrementPhase'},
					{20.812+240/222/16*14,'IncrementPhase'},
					{20.812+240/222/16*15,'IncrementPhase'},
					{21.893+240/222/16*0,'IncrementPhase'},
					{21.893+240/222/16*1,'IncrementPhase'},
					{21.893+240/222/16*2,'IncrementPhase'},
					{21.893+240/222/16*3,'IncrementPhase'},
					{21.893+240/222/16*4,'IncrementPhase'},
					{21.893+240/222/16*5,'IncrementPhase'},
					{21.893+240/222/16*6,'IncrementPhase'},
					{21.893+240/222/16*7,'IncrementPhase'},
					{21.893+240/222/16*8,'IncrementPhase'},
					{21.893+240/222/16*9,'IncrementPhase'},
					{21.893+240/222/16*10,'IncrementPhase'},
					{21.893+240/222/16*11,'IncrementPhase'},
					{21.893+240/222/16*12,'IncrementPhase'},
					{21.893+240/222/16*13,'IncrementPhase'},
					{21.893+240/222/16*14,'IncrementPhase'},
					{21.893+240/222/16*15,'IncrementPhase'},
					{22.974+240/222/16*0,'IncrementPhase'},
					{22.974+240/222/16*1,'IncrementPhase'},
					{22.974+240/222/16*2,'IncrementPhase'},
					{22.974+240/222/16*3,'IncrementPhase'},
					{22.974+240/222/16*4,'IncrementPhase'},
					{22.974+240/222/16*5,'IncrementPhase'},
					{22.974+240/222/16*6,'IncrementPhase'},
					{22.974+240/222/16*7,'IncrementPhase'},
					{22.974+240/222/16*8,'IncrementPhase'},
					{22.974+240/222/16*9,'IncrementPhase'},
					{22.974+240/222/16*10,'IncrementPhase'},
					{22.974+240/222/16*11,'IncrementPhase'},
					{22.974+240/222/16*12,'IncrementPhase'},
					{22.974+240/222/16*13,'IncrementPhase'},
					{22.974+240/222/16*14,'IncrementPhase'},
					{22.974+240/222/16*15,'IncrementPhase'},

					--{24.055+240/222/16*0,'IncrementPhase'},
					{24.055+240/222/16*1,'IncrementPhase'},
					{24.055+240/222/16*2,'IncrementPhase'},
					{24.055+240/222/16*3,'IncrementPhase'},
					{24.055+240/222/16*4,'IncrementPhase'},
					{24.055+240/222/16*5,'IncrementPhase'},
					{24.055+240/222/16*6,'IncrementPhase'},
					{24.055+240/222/16*7,'IncrementPhase'},
					{24.055+240/222/16*8,'IncrementPhase'},
					{24.055+240/222/16*9,'IncrementPhase'},
					{24.055+240/222/16*10,'IncrementPhase'},
					{24.055+240/222/16*11,'IncrementPhase'},
					{24.055+240/222/16*12,'IncrementPhase'},
					{24.055+240/222/16*13,'IncrementPhase'},
					{24.055+240/222/16*14,'IncrementPhase'},
					{24.055+240/222/16*15,'IncrementPhase'},

					{25.136+240/222/12*0,'IncrementPhase'},
					{25.136+240/222/12*1,'IncrementPhase'},
					{25.136+240/222/12*2,'DecrementPhase'},
					{25.136+240/222/12*3,'IncrementPhase'},
					{25.136+240/222/12*4,'IncrementPhase'},
					{25.136+240/222/12*6,'DecrementPhase'},
					{25.136+240/222/12*7,'DecrementPhase'},
					{25.136+240/222/12*8,'IncrementPhase'},
					{25.136+240/222/12*9,'DecrementPhase'},
					{25.136+240/222/12*10,'DecrementPhase'},

					{80.271,'ResetPhase'},

					{86.757+240/222/12*1,'IncrementPhase'},
					{86.757+240/222/12*2,'IncrementPhase'},
					{86.757+240/222/12*3,'IncrementPhase'},
					{86.757+240/222/12*4,'DecrementPhase'},
					{86.757+240/222/12*5,'DecrementPhase'},
					{86.757+240/222/12*6,'DecrementPhase'},
					{86.757+240/222/12*7,'IncrementPhase'},
					{86.757+240/222/12*8,'IncrementPhase'},
					{86.757+240/222/12*9,'IncrementPhase'},
					{86.757+240/222/12*10,'DecrementPhase'},
					{86.757+240/222/12*11,'DecrementPhase'},
					{86.757+240/222/12*12,'DecrementPhase'},
					{86.757+240/222/12*13,'IncrementPhase'},
					{86.757+240/222/12*14,'IncrementPhase'},
					{86.757+240/222/12*15,'IncrementPhase'},
					{86.757+240/222/12*16,'DecrementPhase'},
					{86.757+240/222/12*17,'DecrementPhase'},
					{86.757+240/222/12*18,'DecrementPhase'},
					{86.757+240/222/12*19,'IncrementPhase'},
					{86.757+240/222/12*20,'IncrementPhase'},
					{86.757+240/222/12*21,'IncrementPhase'},
					{86.757+240/222/12*22,'DecrementPhase'},
					{86.757+240/222/12*23,'DecrementPhase'},

					{86.757+240/222/12*24,'DecrementPhase'},
					{86.757+240/222/12*25,'IncrementPhase'},
					{86.757+240/222/12*26,'IncrementPhase'},
					{86.757+240/222/12*27,'IncrementPhase'},
					{86.757+240/222/12*28,'IncrementPhase'},
					{86.757+240/222/12*29,'IncrementPhase'},
					{86.757+240/222/12*30,'IncrementPhase'},
					{86.757+240/222/12*31,'IncrementPhase'},
					{86.757+240/222/12*32,'IncrementPhase'},
					{86.757+240/222/12*33,'IncrementPhase'},
					{86.757+240/222/12*34,'IncrementPhase'},
					{86.757+240/222/12*35,'IncrementPhase'},

					{86.757+240/222/12*36,'IncrementPhase'},
					{86.757+240/222/12*37,'IncrementPhase'},
					{86.757+240/222/12*38,'IncrementPhase'},
					{86.757+240/222/12*39,'IncrementPhase'},
					{86.757+240/222/12*40,'IncrementPhase'},
					{86.757+240/222/12*41,'IncrementPhase'},
					{86.757+240/222/12*42,'IncrementPhase'},
					{86.757+240/222/12*43,'IncrementPhase'},
					{86.757+240/222/12*44,'IncrementPhase'},
					{86.757+240/222/12*45,'IncrementPhase'},
					{86.757+240/222/12*46,'IncrementPhase'},
					{86.757+240/222/12*47,'IncrementPhase'},

					{86.757+240/222/12*48,'IncrementPhase'},
					{86.757+240/222/12*49,'IncrementPhase'},
					{86.757+240/222/12*50,'IncrementPhase'},
					{86.757+240/222/12*51,'IncrementPhase'},
					{86.757+240/222/12*52,'DecrementPhase'},
					{86.757+240/222/12*53,'DecrementPhase'},
					{86.757+240/222/12*54,'DecrementPhase'},
					{86.757+240/222/12*55,'IncrementPhase'},
					{86.757+240/222/12*56,'IncrementPhase'},
					{86.757+240/222/12*57,'IncrementPhase'},
					{86.757+240/222/12*58,'DecrementPhase'},
					{86.757+240/222/12*59,'DecrementPhase'},

					{100.812,'ResetPhase'},

					{101.893+240/222/16*0,'IncrementPhase'},
					{101.893+240/222/16*1,'IncrementPhase'},
					{101.893+240/222/16*2,'IncrementPhase'},
					{101.893+240/222/16*3,'IncrementPhase'},
					{101.893+240/222/16*4,'IncrementPhase'},
					{101.893+240/222/16*5,'IncrementPhase'},
					{101.893+240/222/16*6,'IncrementPhase'},
					{101.893+240/222/16*7,'IncrementPhase'},
					{101.893+240/222/16*8,'IncrementPhase'},
					{101.893+240/222/16*9,'IncrementPhase'},
					{101.893+240/222/16*10,'IncrementPhase'},
					{101.893+240/222/16*11,'IncrementPhase'},
					{101.893+240/222/16*12,'IncrementPhase'},
					{101.893+240/222/16*13,'IncrementPhase'},
					{101.893+240/222/16*14,'IncrementPhase'},
					{101.893+240/222/16*15,'IncrementPhase'},

					{102.974+240/222/16*0,'DecrementPhase'},
					{102.974+240/222/16*1,'DecrementPhase'},
					{102.974+240/222/16*2,'DecrementPhase'},
					{102.974+240/222/16*3,'DecrementPhase'},
					{102.974+240/222/16*4,'DecrementPhase'},
					{102.974+240/222/16*5,'DecrementPhase'},
					{102.974+240/222/16*6,'DecrementPhase'},
					{102.974+240/222/16*7,'DecrementPhase'},
					{102.974+240/222/16*8,'DecrementPhase'},
					{102.974+240/222/16*9,'DecrementPhase'},
					{102.974+240/222/16*10,'DecrementPhase'},
					{102.974+240/222/16*11,'DecrementPhase'},
					{102.974+240/222/16*12,'DecrementPhase'},
					{102.974+240/222/16*13,'DecrementPhase'},
					{102.974+240/222/16*14,'DecrementPhase'},
					{102.974+240/222/16*15,'DecrementPhase'},

					--{104.055+240/222/16*0,'IncrementPhase'},
					{104.055+240/222/16*1,'IncrementPhase'},
					{104.055+240/222/16*2,'IncrementPhase'},
					{104.055+240/222/16*3,'IncrementPhase'},
					{104.055+240/222/16*4,'IncrementPhase'},
					{104.055+240/222/16*5,'IncrementPhase'},
					{104.055+240/222/16*6,'IncrementPhase'},
					{104.055+240/222/16*7,'IncrementPhase'},

					--{104.595+240/222/16*0,'DecrementPhase'},
					{104.595+240/222/16*1,'DecrementPhase'},
					{104.595+240/222/16*2,'DecrementPhase'},
					{104.595+240/222/16*3,'DecrementPhase'},
					{104.595+240/222/16*4,'DecrementPhase'},
					{104.595+240/222/16*5,'DecrementPhase'},
					{104.595+240/222/16*6,'DecrementPhase'},
					{104.595+240/222/16*7,'DecrementPhase'},

					--{105.136+240/222/16*0,'IncrementPhase'},
					{105.136+240/222/16*1,'IncrementPhase'},
					{105.136+240/222/16*2,'IncrementPhase'},
					{105.136+240/222/16*3,'IncrementPhase'},
					{105.136+240/222/16*4,'IncrementPhase'},
					{105.136+240/222/16*5,'IncrementPhase'},
					{105.136+240/222/16*6,'IncrementPhase'},
					{105.136+240/222/16*7,'IncrementPhase'},
					{105.136+240/222/16*8,'IncrementPhase'},
					{105.136+240/222/16*9,'IncrementPhase'},
					{105.136+240/222/16*10,'IncrementPhase'},
					{105.136+240/222/16*11,'IncrementPhase'},
					{105.136+240/222/16*12,'IncrementPhase'},
					{105.136+240/222/16*13,'IncrementPhase'},
					{105.136+240/222/16*14,'IncrementPhase'},
					{105.136+240/222/16*15,'IncrementPhase'},
					{106.217+240/222/16*0,'IncrementPhase'},
					{106.217+240/222/16*1,'IncrementPhase'},
					{106.217+240/222/16*2,'IncrementPhase'},
					{106.217+240/222/16*3,'IncrementPhase'},
					{106.217+240/222/16*4,'IncrementPhase'},
					{106.217+240/222/16*5,'IncrementPhase'},
					{106.217+240/222/16*6,'IncrementPhase'},
					{106.217+240/222/16*7,'IncrementPhase'},
					{106.217+240/222/16*8,'IncrementPhase'},
					{106.217+240/222/16*9,'IncrementPhase'},
					{106.217+240/222/16*10,'IncrementPhase'},
					{106.217+240/222/16*11,'IncrementPhase'},
					{106.217+240/222/16*12,'IncrementPhase'},
					{106.217+240/222/16*13,'IncrementPhase'},
					{106.217+240/222/16*14,'IncrementPhase'},
					{106.217+240/222/16*15,'IncrementPhase'},
					{107.298+240/222/16*0,'IncrementPhase'},
					{107.298+240/222/16*1,'IncrementPhase'},
					{107.298+240/222/16*2,'IncrementPhase'},
					{107.298+240/222/16*3,'IncrementPhase'},
					{107.298+240/222/16*4,'IncrementPhase'},
					{107.298+240/222/16*5,'IncrementPhase'},
					{107.298+240/222/16*6,'IncrementPhase'},
					{107.298+240/222/16*7,'IncrementPhase'},
					{107.298+240/222/16*8,'IncrementPhase'},
					{107.298+240/222/16*9,'IncrementPhase'},
					{107.298+240/222/16*10,'IncrementPhase'},
					{107.298+240/222/16*11,'IncrementPhase'},
					{107.298+240/222/16*12,'IncrementPhase'},
					{107.298+240/222/16*13,'IncrementPhase'},
					{107.298+240/222/16*14,'IncrementPhase'},
					{107.298+240/222/16*15,'IncrementPhase'},

					--{108.379+240/222/16*0,'IncrementPhase'},
					{108.379+240/222/16*1,'IncrementPhase'},
					{108.379+240/222/16*2,'IncrementPhase'},
					{108.379+240/222/16*3,'IncrementPhase'},
					{108.379+240/222/16*4,'IncrementPhase'},
					{108.379+240/222/16*5,'IncrementPhase'},
					{108.379+240/222/16*6,'IncrementPhase'},
					{108.379+240/222/16*7,'IncrementPhase'},
					{108.379+240/222/16*8,'IncrementPhase'},
					{108.379+240/222/16*9,'IncrementPhase'},
					{108.379+240/222/16*10,'IncrementPhase'},
					{108.379+240/222/16*11,'IncrementPhase'},
					{108.379+240/222/16*12,'IncrementPhase'},
					{108.379+240/222/16*13,'IncrementPhase'},
					{108.379+240/222/16*14,'IncrementPhase'},
					{108.379+240/222/16*15,'IncrementPhase'},

					{109.460+240/222/12*0,'IncrementPhase'},
					{109.460+240/222/12*1,'IncrementPhase'},
					{109.460+240/222/12*2,'DecrementPhase'},
					{109.460+240/222/12*3,'IncrementPhase'},
					{109.460+240/222/12*4,'IncrementPhase'},
					{109.460+240/222/12*6,'DecrementPhase'},
					{109.460+240/222/12*7,'DecrementPhase'},
					{109.460+240/222/12*8,'IncrementPhase'},
					{109.460+240/222/12*9,'DecrementPhase'},
					{109.460+240/222/12*10,'DecrementPhase'},


				};
				
				
				prefix_mods = {
				
				{0,200,'2x,-999999% Cover,-50% Flip,*10000 No Beat','end'},
				{0,0.500,'*10000 -50% Flip,*10000 Overhead','end'},
				{0,5.339,'*10000 -50% Drunk','end'},
				{0,1.082,'*10000 No Reverse,*10000 No Split,*10000 No Cross,*10000 No Alternate','end'},
				
				{1.082+240/222/4*0,240/222/2,'*10000 -500% Reverse,*10000 250% Split,*10000 250% Cross,*10000 250% Alternate','len',1},
				{1.082+240/222/4*1,240/222/2,'*10000 -500% Reverse,*10000 250% Split,*10000 250% Cross,*10000 250% Alternate','len',2},
				{1.082+240/222/4*2,240/222/2,'*10000 -500% Reverse,*10000 500% Split,*10000 No Cross,*10000 No Alternate','len',1},
				{1.082+240/222/4*3,240/222/2,'*10000 -500% Reverse,*10000 500% Split,*10000 No Cross,*10000 No Alternate','len',2},
				{1.082+240/222/4*4,240/222/2,'*10000 -500% Reverse,*10000 250% Split,*10000 -250% Cross,*10000 250% Alternate','len',1},
				{1.082+240/222/4*5,240/222/2,'*10000 -500% Reverse,*10000 250% Split,*10000 -250% Cross,*10000 250% Alternate','len',2},
				{1.082+240/222/4*6,240/222/2,'*10000 -500% Reverse,*10000 No Split,*10000 No Cross,*10000 No Alternate','len',1},
				{1.082+240/222/4*7,240/222/2,'*10000 No Reverse,*10000 No Split,*10000 No Cross,*10000 No Alternate','len'},

				{3.244+240/222/2*0,240/222/2,'*3.7 100.01% Reverse','len'},
				{3.244+240/222/2*1,240/222/2,'*1.85 50% Reverse','len'},

				{4.325,5.541,'*0.4112 No Reverse','end'},

				{4.325,240/222/12,'*11.1 Drunk','len'},
				{4.415,240/222/12,'*22.2 -100% Drunk','len'},
				{4.505,240/222/12,'*22.2 Drunk','len'},
				{4.595,240/222/12,'*22.2 -100% Drunk','len'},
				{4.685,240/222/12,'*22.2 Drunk','len'},
				{4.776,240/222/12,'*22.2 -100% Drunk','len'},
				{4.866,240/222/8,'*14.8 Drunk','len'},
				{5.001,240/222/8,'*14.8 -100% Drunk','len'},
				{5.136,240/222/16*3,'*9.867 Drunk','len'},
				{5.339,240/222/16*3,'*4.934 No Drunk','len'},

				{6.217,240/222/4,'*16 90% Stealth,*16 150% Flip','len',1},
				{6.217+240/222/4*1,240/222/4,'*16 No Stealth,*16 -50% Flip','len',1},

				{6.217+240/222/4*1,240/222/4,'*16 90% Stealth,*16 150% Flip','len',2},
				{6.217+240/222/4*2,240/222/4,'*16 No Stealth,*16 -50% Flip','len',2},

				{7.028+240/222/12*0,240/222/12*3,'*16 90% Stealth','len',2},
				{7.028+240/222/12*3,240/222/12,'*16 No Stealth','len',2},

				{7.028+240/222/12*0,240/222/12,'*32 150% Flip,*32 -200% Invert','len',2},
				{7.028+240/222/12*1,240/222/12,'*32 -50% Flip,*64 200% Invert','len',2},
				{7.028+240/222/12*2,240/222/12,'*32 150% Flip,*32 No Invert','len',2},
				{7.028+240/222/12*3,240/222/12,'*32 -50% Flip,*32 No Invert','len',2},

				{7.028+240/222/12*3,240/222/12*3,'*16 90% Stealth','len',1},
				{7.028+240/222/12*6,240/222/12,'*16 No Stealth','len',1},

				{7.028+240/222/12*3,240/222/12,'*32 150% Flip,*32 -200% Invert','len',1},
				{7.028+240/222/12*4,240/222/12,'*32 -50% Flip,*64 200% Invert','len',1},
				{7.028+240/222/12*5,240/222/12,'*32 150% Flip,*32 No Invert','len',1},
				{7.028+240/222/12*6,240/222/12,'*32 -50% Flip,*32 No Invert','len',1},

				{7.839+240/222/4*0,240/222/4,'*16 150% Flip,*16 -200% Invert','len',2},
				{7.839+240/222/4*1,240/222/4,'*16 -50% Flip,*16 No Invert','len',2},
				{7.839+240/222/4*2,240/222/4,'*16 -50% Flip,*16 200% Invert','len',2},
				{7.839+240/222/4*3,240/222/4,'*16 -50% Flip,*16 No Invert','len',2},

				{7.839+240/222/4*1,240/222/4,'*16 150% Flip,*16 -200% Invert','len',1},
				{7.839+240/222/4*2,240/222/4,'*16 -50% Flip,*16 No Invert','len',1},
				{7.839+240/222/4*3,240/222/4,'*16 -50% Flip,*16 200% Invert','len',1},
				{7.839+240/222/4*4,240/222/4,'*16 -50% Flip,*16 No Invert','len',1},

				{8.920,17.028,'*0.925 Wave,*0.925 Drunk,*0.925 Bumpy','end',1},
				{8.920,17.028,'*0.925 -100% Wave,*0.925 -100% Drunk,*0.925 -100% Bumpy','end',2},

				{8.920,13.244,'*7.4 95% Stealth,*7.4 95% Dark','end',1},
				{13.244,15.406,'*7.4 No Stealth,*7.4 No Dark','end',1},
				{15.406,15.947,'*7.4 95% Stealth,*7.4 95% Dark','end',1},
				{15.947,16.487,'*7.4 No Stealth,*7.4 No Dark','end',1},
				{16.487,16.757,'*7.4 95% Stealth,*7.4 95% Dark','end',1},
				{16.757,17.028,'*7.4 No Stealth,*7.4 No Dark','end',1},

				{12.974,15.406,'*7.4 95% Stealth,*7.4 95% Dark','end',2},
				{15.406,15.947,'*7.4 No Stealth,*7.4 No Dark','end',2},
				{15.947,16.487,'*7.4 95% Stealth,*7.4 95% Dark','end',2},
				{16.487,16.757,'*7.4 No Stealth,*7.4 No Dark','end',2},
				{16.757,17.028,'*7.4 95% Stealth','end',2},

				{17.028,240/222/2,'*1.85 No Wave,*1.85 No Drunk,*1.85 No Bumpy,*1.85 Stealth,*1.85 Dark','len'},

				{17.568,26.217,'*10000 No Reverse,*10000 No Split,*10000 No Cross,*10000 No Alternate,*10000 0.18x','end'},
				{26.217,240/222/2,'*10000 No Reverse,*10000 No Split,*10000 No Cross,*10000 No Alternate,*10000 2x,*10000 No Stealth','len'},

				{17.568+240/222*0,240/222,'*10000 50% Stealth','len',1},
				{17.568+240/222*0,240/222,'*10000 95% Stealth','len',2},
				{17.568+240/222*1,240/222,'*10000 50% Stealth','len',2},
				{17.568+240/222*1,240/222,'*10000 95% Stealth','len',1},
				{17.568+240/222*2,240/222/2,'*10000 50% Stealth','len'},
				{17.568+240/222/2*5,240/222/2,'*10000 75% Stealth','len'},
				{17.568+240/222/2*6,240/222*3,'*10000 50% Stealth','len',1},
				{17.568+240/222/2*6,240/222*3,'*10000 95% Stealth','len',2},
				{17.568+240/222*6,240/222,'*10000 50% Stealth','len',2},
				{17.568+240/222*6,240/222,'*10000 95% Stealth','len',1},
				{17.568+240/222/2*14,240/222/2,'*10000 50% Stealth','len',1},
				{17.568+240/222/2*14,240/222/2,'*10000 95% Stealth','len',2},
				{17.568+240/222/2*15,240/222/2,'*10000 50% Stealth','len',2},
				{17.568+240/222/2*15,240/222/2,'*10000 95% Stealth','len',1},
				{26.217,240/222/8,'*10000 50% Stealth,*22.2 300% Tornado','len'},
				{26.217+240/222/8,240/222/8*5,'*0.8 No Stealth,*5 No Tornado,','len'},

				{27.298+240/222/4*0,240/222/4,'*16 -50% Flip,*16 200% Invert,*16 50% Stealth','len',1},
				{27.298+240/222/4*1,240/222/4,'*16 150% Flip,*16 No Invert,*16 50% Stealth','len',1},
				{27.298+240/222/4*2,240/222/4,'*16 -50% Flip,*16 No Invert,*16 No Stealth','len',1},

				{27.298+240/222/4*4,240/222/4,'*16 150% Flip,*16 -200% Invert,*16 50% Stealth','len',1},
				{27.298+240/222/4*5,240/222/4,'*16 -50% Flip,*32 200% Invert,*16 50% Stealth','len',1},
				{27.298+240/222/4*6,240/222/4,'*16 -50% Flip,*16 No Invert,*16 No Stealth','len',1},

				{27.298+240/222/4*8,240/222/4,'*16 150% Flip,*16 No Invert,*16 50% Stealth','len',1},
				{27.298+240/222/4*9,240/222/4,'*16 150% Flip,*16 -200% Invert,*16 50% Stealth','len',1},
				{27.298+240/222/4*10,240/222/4,'*16 -50% Flip,*16 No Invert,*16 No Stealth','len',1},

				{27.298+240/222/4*12,240/222/4,'*16 -50% Flip,*16 200% Invert,*16 50% Stealth','len',1},
				{27.298+240/222/4*13,240/222/4,'*16 150% Flip,*16 No Invert,*16 50% Stealth','len',1},
				{27.298+240/222/4*14,240/222/4,'*16 -50% Flip,*16 No Invert,*16 No Stealth','len',1},

				{27.298+240/222/4*16,240/222/4,'*16 150% Flip,*16 -200% Invert,*16 50% Stealth','len',1},
				{27.298+240/222/4*17,240/222/4,'*16 -50% Flip,*32 200% Invert,*16 50% Stealth','len',1},
				{27.298+240/222/4*18,240/222/4,'*16 -50% Flip,*16 No Invert,*16 No Stealth','len',1},

				{27.839+240/222/4*0,240/222/4,'*16 -50% Flip,*16 200% Invert,*16 50% Stealth','len',2},
				{27.839+240/222/4*1,240/222/4,'*16 150% Flip,*16 No Invert,*16 50% Stealth','len',2},
				{27.839+240/222/4*2,240/222/4,'*16 -50% Flip,*16 No Invert,*16 No Stealth','len',2},

				{27.839+240/222/4*4,240/222/4,'*16 150% Flip,*16 -200% Invert,*16 50% Stealth','len',2},
				{27.839+240/222/4*5,240/222/4,'*16 -50% Flip,*32 200% Invert,*16 50% Stealth','len',2},
				{27.839+240/222/4*6,240/222/4,'*16 -50% Flip,*16 No Invert,*16 No Stealth','len',2},

				{27.839+240/222/4*8,240/222/4,'*16 150% Flip,*16 No Invert,*16 50% Stealth','len',2},
				{27.839+240/222/4*9,240/222/4,'*16 150% Flip,*16 -200% Invert,*16 50% Stealth','len',2},
				{27.839+240/222/4*10,240/222/4,'*16 -50% Flip,*16 No Invert,*16 No Stealth','len',2},

				{27.839+240/222/4*12,240/222/4,'*16 -50% Flip,*16 200% Invert,*16 50% Stealth','len',2},
				{27.839+240/222/4*13,240/222/4,'*16 150% Flip,*16 No Invert,*16 50% Stealth','len',2},
				{27.839+240/222/4*14,240/222/4,'*16 -50% Flip,*16 No Invert,*16 No Stealth','len',2},

				{27.839+240/222/4*16,240/222/4,'*16 150% Flip,*16 -200% Invert,*16 50% Stealth','len',2},
				{27.839+240/222/4*17,240/222/4,'*16 -50% Flip,*32 200% Invert,*16 50% Stealth','len',2},
				{27.839+240/222/4*18,240/222/4,'*16 -50% Flip,*16 No Invert,*16 No Stealth','len',2},

				{32.974+240/222/4*0,240/222/4,'*16 150% Flip,*16 No Invert','len',1},
				{32.974+240/222/4*0,240/222/4,'*16 150% Flip,*16 -200% Invert','len',2},

				{32.974+240/222/4*1,240/222/4,'*16 150% Flip,*16 -200% Invert','len',1},
				{32.974+240/222/4*1,240/222/4,'*16 -50% Flip,*32 200% Invert','len',2},

				{32.974+240/222/4*2,240/222/4,'*16 -50% Flip,*32 200% Invert','len',1},
				{32.974+240/222/4*2,240/222/4,'*16 150% Flip,*16 No Invert','len',2},

				{32.974+240/222/4*3,240/222/4,'*16 -50% Flip,*16 No Invert','len'},

				{33.785,54.325,'*2 200% Wave,*2 Stealth,*2 -200% Hidden,*2 -200% Sudden,*10000 12% HiddenOffset,*10000 14% SuddenOffset,*4 1.5x','end',1},
				{33.785,54.325,'*2 200% Wave,*2 200% Hidden,*2 200% Sudden,*10000 12% HiddenOffset,*10000 14% SuddenOffset,*4 1.5x','end',2},

				{42.975,54.325,'*1.5 75% Stealth','end',2},

				{43.514+240/222/4*0,240/222/4,'*16 -50% Flip,*16 200% Invert','len',2},
				{43.514+240/222/4*1,240/222/4,'*16 -50% Flip,*16 No Invert','len',2},
				{43.514+240/222/4*2,240/222/4,'*16 150% Flip,*16 No Invert','len',2},
				{43.514+240/222/4*3,240/222/4,'*16 -50% Flip,*16 No Invert','len',2},
				{43.514+240/222/4*4,240/222/4,'*16 150% Flip,*16 -200% Invert','len',2},
				{43.514+240/222/4*5,240/222/4,'*16 -50% Flip,*16 No Invert','len',2},
				{43.514+240/222/4*6,240/222/4,'*16 -50% Flip,*16 200% Invert','len',2},
				{43.514+240/222/4*7,240/222/4,'*16 -50% Flip,*16 No Invert','len',2},
				{43.514+240/222/4*8,240/222/4,'*16 150% Flip,*16 No Invert','len',2},
				{43.514+240/222/4*9,240/222/4,'*16 -50% Flip,*16 No Invert','len',2},
				{43.514+240/222/4*10,240/222/4,'*16 150% Flip,*16 -200% Invert','len',2},
				{43.514+240/222/4*11,240/222/4,'*16 -50% Flip,*16 No Invert','len',2},

				{46.757+240/222/16*0,240/222/16*3,'*16 -50% Flip,*16 200% Invert','len',2},
				{46.757+240/222/16*3,240/222/16*3,'*16 150% Flip,*16 No Invert','len',2},
				{46.757+240/222/16*6,240/222/4,'*16 150% Flip,*16 -200% Invert','len',2},
				{46.757+240/222/16*10,240/222/4,'*16 -50% Flip,*16 No Invert','len',2},

				{47.839+240/222/4*0,240/222/4,'*16 -50% Flip,*16 200% Invert','len',2},
				{47.839+240/222/4*1,240/222/4,'*16 -50% Flip,*16 No Invert','len',2},
				{47.839+240/222/4*2,240/222/4,'*16 150% Flip,*16 No Invert','len',2},
				{47.839+240/222/4*3,240/222/4,'*16 -50% Flip,*16 No Invert','len',2},
				{47.839+240/222/4*4,240/222/4,'*16 150% Flip,*16 -200% Invert','len',2},
				{47.839+240/222/4*5,240/222/4,'*16 -50% Flip,*16 No Invert','len',2},
				{47.839+240/222/4*6,240/222/4,'*16 -50% Flip,*16 200% Invert','len',2},
				{47.839+240/222/4*7,240/222/4,'*16 -50% Flip,*16 No Invert','len',2},
				{47.839+240/222/4*8,240/222/4,'*16 150% Flip,*16 No Invert','len',2},
				{47.839+240/222/4*9,240/222/4,'*16 -50% Flip,*16 No Invert','len',2},
				{47.839+240/222/4*10,240/222/4,'*16 150% Flip,*16 -200% Invert','len',2},
				{47.839+240/222/4*11,240/222/4,'*16 -50% Flip,*16 No Invert','len',2},
				{47.839+240/222/4*12,240/222/4,'*16 -50% Flip,*16 200% Invert','len',2},
				{47.839+240/222/4*13,240/222/4,'*16 -50% Flip,*16 No Invert','len',2},
				{47.839+240/222/4*14,240/222/4,'*16 150% Flip,*16 No Invert','len',2},
				{47.839+240/222/4*15,240/222/4,'*16 -50% Flip,*16 No Invert','len',2},
				{47.839+240/222/4*16,240/222/4,'*16 150% Flip,*16 -200% Invert','len',2},
				{47.839+240/222/4*17,240/222/4,'*16 -50% Flip,*16 No Invert','len',2},
				{47.839+240/222/4*18,240/222/4,'*16 -50% Flip,*16 200% Invert','len',2},
				{47.839+240/222/4*19,240/222/4,'*16 -50% Flip,*16 No Invert','len',2},

				{53.244+240/222/8*0,240/222/8,'*16 -50% Flip,*16 200% Invert','len',2},
				{53.244+240/222/8*1,240/222/4,'*16 150% Flip,*16 No Invert','len',2},
				{53.244+240/222/8*3,240/222/4,'*16 150% Flip,*16 -200% Invert','len',2},
				{53.244+240/222/8*5,240/222/4,'*16 -50% Flip,*16 No Invert','len',2},

				{54.325,56.487,'*2 No Wave,*2 No Stealth,*2 No Hidden,*2 No Sudden,*4 2x','end'},

				{55.947,240/222/4*9,'*2 Bumpy','len',1},
				{55.947,240/222/4*9,'*2 -100% Bumpy','len',2},
				{58.379,240/222/4,'*4 No Bumpy','len'},

				{56.487,240/222/4*8,'*8 No Flip','len'},
				{56.487+240/222/4*8,240/222/4,'*8 -50% Flip','len'},

				{56.487+240/222/4*0,240/222/4,'*12 -150% Invert','len',1},
				{56.487+240/222/4*0,240/222/4,'*20 250% Invert','len',2},
				{56.487+240/222/4*1,240/222/4,'*32 250% Invert','len',1},
				{56.487+240/222/4*1,240/222/4,'*32 -150% Invert','len',2},
				{56.487+240/222/4*2,240/222/4,'*32 -150% Invert','len',1},
				{56.487+240/222/4*2,240/222/4,'*32 250% Invert','len',2},
				{56.487+240/222/4*3,240/222/4,'*32 250% Invert','len',1},
				{56.487+240/222/4*3,240/222/4,'*32 -150% Invert','len',2},
				{56.487+240/222/4*4,240/222/4,'*32 -150% Invert','len',1},
				{56.487+240/222/4*4,240/222/4,'*32 250% Invert','len',2},
				{56.487+240/222/4*5,240/222/4,'*32 250% Invert','len',1},
				{56.487+240/222/4*5,240/222/4,'*32 -150% Invert','len',2},
				{56.487+240/222/4*6,240/222/4,'*32 -150% Invert','len',1},
				{56.487+240/222/4*6,240/222/4,'*32 250% Invert','len',2},
				{56.487+240/222/4*7,240/222/4,'*32 250% Invert','len',1},
				{56.487+240/222/4*7,240/222/4,'*32 -150% Invert','len',2},
				{56.487+240/222/4*8,240/222/4,'*20 No Invert','len',1},
				{56.487+240/222/4*8,240/222/4,'*12 No Invert','len',2},

				{58.649,240/222/8*3,'*5 200% Hallway,*5 200% Drunk','len',1},
				{58.649,240/222/8*3,'*5 200% Distant,*5 -200% Drunk','len',2},

				{58.649+240/222/8*3,240/222/8*3,'*5 200% Overhead,*5 No Drunk','len'},

				{59.595+240/222/8*0,240/222/4,'*16 -50% Flip,*16 200% Invert','len',1},
				{59.595+240/222/8*1,240/222/8*3,'*16 150% Flip,*16 No Invert','len',2},
				{59.595+240/222/8*2,240/222/4,'*16 150% Flip,*32 -200% Invert','len',1},

				{59.595+240/222/8*4,240/222/4,'*16 150% Flip,*16 No Invert','len',1},
				{59.595+240/222/8*4,240/222/4,'*16 -50% Flip,*16 200% Invert','len',2},

				{59.595+240/222/8*6,240/222/4,'*16 -50% Flip,*16 No Invert','len'},

				{60.541,240/222/4*8,'*4 Bumpy','len',2},
				{60.541,240/222/4*8,'*4 -100% Bumpy','len',1},
				{62.703,240/222/4,'*4 No Bumpy','len'},

				{60.812,240/222/4*8,'*8 No Flip','len'},
				{60.812+240/222/4*8,240/222/4,'*8 -50% Flip','len'},

				{60.812+240/222/4*0,240/222/4,'*12 -150% Invert','len',2},
				{60.812+240/222/4*0,240/222/4,'*20 250% Invert','len',1},
				{60.812+240/222/4*1,240/222/4,'*32 250% Invert','len',2},
				{60.812+240/222/4*1,240/222/4,'*32 -150% Invert','len',1},
				{60.812+240/222/4*2,240/222/4,'*32 -150% Invert','len',2},
				{60.812+240/222/4*2,240/222/4,'*32 250% Invert','len',1},
				{60.812+240/222/4*3,240/222/4,'*32 250% Invert','len',2},
				{60.812+240/222/4*3,240/222/4,'*32 -150% Invert','len',1},
				{60.812+240/222/4*4,240/222/4,'*32 -150% Invert','len',2},
				{60.812+240/222/4*4,240/222/4,'*32 250% Invert','len',1},
				{60.812+240/222/4*5,240/222/4,'*32 250% Invert','len',2},
				{60.812+240/222/4*5,240/222/4,'*32 -150% Invert','len',1},
				{60.812+240/222/4*6,240/222/4,'*32 -150% Invert','len',2},
				{60.812+240/222/4*6,240/222/4,'*32 250% Invert','len',1},
				{60.812+240/222/4*7,240/222/4,'*32 250% Invert','len',2},
				{60.812+240/222/4*7,240/222/4,'*32 -150% Invert','len',1},
				{60.812+240/222/4*8,240/222/4,'*20 No Invert','len',2},
				{60.812+240/222/4*8,240/222/4,'*12 No Invert','len',1},

				{62.974,240/222/8*3,'*5 200% Hallway,*5 200% Drunk','len',1},
				{62.974,240/222/8*3,'*5 200% Distant,*5 -200% Drunk','len',2},

				{62.974+240/222/8*3,240/222/8*3,'*5 200% Overhead,*5 No Drunk','len'},

				{63.920+240/222/8*0,240/222/4,'*16 -50% Flip,*16 200% Invert','len',2},
				{63.920+240/222/8*1,240/222/8*3,'*16 150% Flip,*16 No Invert','len',1},
				{63.920+240/222/8*2,240/222/4,'*16 150% Flip,*32 -200% Invert','len',2},

				{63.920+240/222/8*4,240/222/4,'*16 150% Flip,*16 No Invert','len',2},
				{63.920+240/222/8*4,240/222/4,'*16 -50% Flip,*16 200% Invert','len',1},

				{63.920+240/222/8*6,240/222/8,'*16 -50% Flip,*16 200% Invert','len',2},
				{63.920+240/222/8*6,240/222/8,'*16 150% Flip,*32 -200% Invert','len',1},

				{63.920+240/222/8*7,240/222/4,'*16 -50% Flip,*16 No Invert','len'},

				{64.055,72.703,'*2 200% Wave,*2 Stealth,*2 -200% Hidden,*2 -200% Sudden,*10000 12% HiddenOffset,*10000 14% SuddenOffset,*4 1.5x','end'},
				{71.622,73.785,'*2 No Wave,*2 No Stealth,*2 No Hidden,*2 No Sudden,*4 2x','end'},

				{64.866,240/222/4*8,'*4 Bumpy','len',1},
				{64.866,240/222/4*8,'*4 -100% Bumpy','len',2},
				{67.028,240/222/4,'*4 No Bumpy','len'},

				{65.136,240/222/4*8,'*8 No Flip','len'},
				{65.136+240/222/4*8,240/222/4,'*8 -50% Flip','len'},

				{65.136+240/222/4*0,240/222/4,'*12 -150% Invert','len',1},
				{65.136+240/222/4*0,240/222/4,'*20 250% Invert','len',2},
				{65.136+240/222/4*1,240/222/4,'*32 250% Invert','len',1},
				{65.136+240/222/4*1,240/222/4,'*32 -150% Invert','len',2},
				{65.136+240/222/4*2,240/222/4,'*32 -150% Invert','len',1},
				{65.136+240/222/4*2,240/222/4,'*32 250% Invert','len',2},
				{65.136+240/222/4*3,240/222/4,'*32 250% Invert','len',1},
				{65.136+240/222/4*3,240/222/4,'*32 -150% Invert','len',2},
				{65.136+240/222/4*4,240/222/4,'*32 -150% Invert','len',1},
				{65.136+240/222/4*4,240/222/4,'*32 250% Invert','len',2},
				{65.136+240/222/4*5,240/222/4,'*32 250% Invert','len',1},
				{65.136+240/222/4*5,240/222/4,'*32 -150% Invert','len',2},
				{65.136+240/222/4*6,240/222/4,'*32 -150% Invert','len',1},
				{65.136+240/222/4*6,240/222/4,'*32 250% Invert','len',2},
				{65.136+240/222/4*7,240/222/4,'*32 250% Invert','len',1},
				{65.136+240/222/4*7,240/222/4,'*32 -150% Invert','len',2},
				{65.136+240/222/4*8,240/222/4,'*20 No Invert','len',1},
				{65.136+240/222/4*8,240/222/4,'*12 No Invert','len',2},

				{67.298,240/222/8*3,'*5 200% Hallway,*5 200% Drunk','len',1},
				{67.298,240/222/8*3,'*5 200% Distant,*5 -200% Drunk','len',2},

				{67.298+240/222/8*3,240/222/8*3,'*5 200% Overhead,*5 No Drunk','len'},

				{68.244+240/222/8*0,240/222/4,'*16 -50% Flip,*16 200% Invert','len',1},
				{68.244+240/222/8*1,240/222/8*3,'*16 150% Flip,*16 No Invert','len',2},
				{68.244+240/222/8*2,240/222/4,'*16 150% Flip,*32 -200% Invert','len',1},

				{68.244+240/222/8*4,240/222/4,'*16 150% Flip,*16 No Invert','len',1},
				{68.244+240/222/8*4,240/222/4,'*16 -50% Flip,*16 200% Invert','len',2},

				{68.244+240/222/8*6,240/222/4,'*16 -50% Flip,*16 No Invert','len'},

				{69.190,240/222/4*8,'*4 Bumpy','len',2},
				{69.190,240/222/4*8,'*4 -100% Bumpy','len',1},
				{71.352,240/222/4,'*4 No Bumpy','len'},

				{69.460,240/222/4*8,'*8 No Flip','len'},
				{69.460+240/222/4*8,240/222/4,'*8 -50% Flip','len'},

				{69.460+240/222/4*0,240/222/4,'*12 -150% Invert','len',2},
				{69.460+240/222/4*0,240/222/4,'*20 250% Invert','len',1},
				{69.460+240/222/4*1,240/222/4,'*32 250% Invert','len',2},
				{69.460+240/222/4*1,240/222/4,'*32 -150% Invert','len',1},
				{69.460+240/222/4*2,240/222/4,'*32 -150% Invert','len',2},
				{69.460+240/222/4*2,240/222/4,'*32 250% Invert','len',1},
				{69.460+240/222/4*3,240/222/4,'*32 250% Invert','len',2},
				{69.460+240/222/4*3,240/222/4,'*32 -150% Invert','len',1},
				{69.460+240/222/4*4,240/222/4,'*32 -150% Invert','len',2},
				{69.460+240/222/4*4,240/222/4,'*32 250% Invert','len',1},
				{69.460+240/222/4*5,240/222/4,'*32 250% Invert','len',2},
				{69.460+240/222/4*5,240/222/4,'*32 -150% Invert','len',1},
				{69.460+240/222/4*6,240/222/4,'*32 -150% Invert','len',2},
				{69.460+240/222/4*6,240/222/4,'*32 250% Invert','len',1},
				{69.460+240/222/4*7,240/222/4,'*32 250% Invert','len',2},
				{69.460+240/222/4*7,240/222/4,'*32 -150% Invert','len',1},
				{69.460+240/222/4*8,240/222/4,'*20 No Invert','len',2},
				{69.460+240/222/4*8,240/222/4,'*12 No Invert','len',1},

				{71.622,240/222/8*3,'*5 200% Hallway,*5 200% Drunk','len',1},
				{71.622,240/222/8*3,'*5 200% Distant,*5 -200% Drunk','len',2},

				{71.622+240/222/8*3,240/222/8*3,'*5 200% Overhead,*5 No Drunk','len'},

				{72.703+240/222/4*0,240/222/4,'*16 150% Flip,*16 No Invert','len',1},
				{72.703+240/222/4*1,240/222/4,'*16 150% Flip,*16 -200% Invert','len',1},
				{72.703+240/222/4*2,240/222/4,'*16 -50% Flip,*16 No Invert','len',1},
				{72.703+240/222/4*3,240/222/4,'*16 -50% Flip,*16 200% Invert','len',1},

				{72.703+240/222/4*0,240/222/4,'*16 -50% Flip,*16 No Invert','len',2},
				{72.703+240/222/4*1,240/222/4,'*16 -50% Flip,*16 200% Invert','len',2},
				{72.703+240/222/4*2,240/222/4,'*16 150% Flip,*16 No Invert','len',2},
				{72.703+240/222/4*3,240/222/4,'*16 150% Flip,*16 -200% Invert','len',2},

				{72.703+240/222/4*4,240/222/4,'*16 -50% Flip,*16 No Invert','len'},

				{74.055+240/222/4*0,240/222/2,'*16 150% Flip,*16 -200% Invert','len',1},
				{74.055+240/222/4*1,240/222/2,'*16 150% Flip,*16 -200% Invert','len',2},
				{74.055+240/222/4*2,240/222/2,'*16 150% Flip,*16 No Invert','len',1},
				{74.055+240/222/4*3,240/222/2,'*16 150% Flip,*16 No Invert','len',2},
				{74.055+240/222/4*4,240/222/2,'*16 -50% Flip,*16 200% Invert','len',1},
				{74.055+240/222/4*5,240/222/2,'*16 -50% Flip,*16 200% Invert','len',2},
				{74.055+240/222/4*6,240/222/2,'*16 -50% Flip,*16 No Invert','len',1},
				{74.055+240/222/4*7,240/222/2,'*16 -50% Flip,*16 No Invert','len',2},

				{76.487+240/222/8*0,240/222/4,'*16 150% Flip,*16 -200% Invert','len',2},
				{76.487+240/222/8*1,240/222/4,'*16 150% Flip,*16 No Invert','len',1},
				{76.487+240/222/8*2,240/222/4,'*16 -50% Flip,*32 200% Invert','len',2},
				{76.487+240/222/8*3,240/222/4,'*16 -50% Flip,*16 No Invert','len',1},
				{76.487+240/222/8*4,240/222/4,'*16 -50% Flip,*16 No Invert','len',2},

				{77.568,80.271,'*2 Hidden,*2 Sudden,*10000 -120% HiddenOffset,*10000 -120% SuddenOffset','end',1},
				{77.568,80.271,'*2 Hidden,*2 Sudden,*10000 200% HiddenOffset,*10000 200% SuddenOffset','end',2},

				{78.109,240/222/4,'*12 200% HiddenOffset,*12 200% SuddenOffset','len',1},
				{78.109+240/222/4*1,240/222/4,'*12 -120% HiddenOffset,*12 -120% SuddenOffset','len',1},
				{78.109+240/222/4*2,240/222/4,'*12 200% HiddenOffset,*12 200% SuddenOffset','len',1},
				{78.109+240/222/4*3,240/222/4,'*12 -120% HiddenOffset,*12 -120% SuddenOffset','len',1},
				{78.109+240/222/4*4,240/222/4,'*12 200% HiddenOffset,*12 200% SuddenOffset','len',1},
				{78.109+240/222/4*5,240/222/4,'*12 -120% HiddenOffset,*12 -120% SuddenOffset','len',1},
				{78.109+240/222/4*6,240/222/4,'*12 200% HiddenOffset,*12 200% SuddenOffset','len',1},
				{78.109+240/222/4*7,240/222/4,'*12 -120% HiddenOffset,*12 -120% SuddenOffset','len',1},

				{78.109,240/222/4,'*12 -120% HiddenOffset,*12 -120% SuddenOffset','len',2},
				{78.109+240/222/4*1,240/222/4,'*12 200% HiddenOffset,*12 200% SuddenOffset','len',2},
				{78.109+240/222/4*2,240/222/4,'*12 -120% HiddenOffset,*12 -120% SuddenOffset','len',2},
				{78.109+240/222/4*3,240/222/4,'*12 200% HiddenOffset,*12 200% SuddenOffset','len',2},
				{78.109+240/222/4*4,240/222/4,'*12 -120% HiddenOffset,*12 -120% SuddenOffset','len',2},
				{78.109+240/222/4*5,240/222/4,'*12 200% HiddenOffset,*12 200% SuddenOffset','len',2},
				{78.109+240/222/4*6,240/222/4,'*12 -120% HiddenOffset,*12 -120% SuddenOffset','len',2},
				{78.109+240/222/4*7,240/222/4,'*12 200% HiddenOffset,*12 200% SuddenOffset','len',2},

				{77.568,240/222,'*6 314% Dizzy','len'},
				{77.568+240/222,240/222,'*12 -314% Dizzy','len'},
				{77.568+240/222*2,240/222,'*6 No Dizzy','len'},

				{80.271,240/222,'*2 No Hidden,*2 No Sudden','len'},

				{81.352+240/222/8*0,240/222/4,'*16 150% Flip,*16 -200% Invert','len',1},
				{81.352+240/222/8*0,240/222/8*3,'*16 -50% Flip,*16 200% Invert','len',2},

				{81.352+240/222/8*2,240/222/8*3,'*16 -50% Flip,*32 200% Invert','len',1},
				{81.352+240/222/8*3,240/222/4,'*16 150% Flip,*32 -200% Invert','len',2},

				{81.352+240/222/8*5,240/222/8*3,'*16 150% Flip,*16 No Invert','len'},

				{81.352+240/222/8*8,240/222/4,'*16 -50% Flip,*32 No Invert','len'},

				{82.703+240/222/4*0,240/222/2,'*16 150% Flip,*16 -200% Invert','len',1},
				{82.703+240/222/4*1,240/222/2,'*16 150% Flip,*16 -200% Invert','len',2},
				{82.703+240/222/4*2,240/222/2,'*16 150% Flip,*16 No Invert','len',1},
				{82.703+240/222/4*3,240/222/2,'*16 150% Flip,*16 No Invert','len',2},
				{82.703+240/222/4*4,240/222/2,'*16 -50% Flip,*16 200% Invert','len',1},
				{82.703+240/222/4*5,240/222/2,'*16 -50% Flip,*16 200% Invert','len',2},
				{82.703+240/222/4*6,240/222/2,'*16 -50% Flip,*16 No Invert','len',1},
				{82.703+240/222/4*7,240/222/2,'*16 -50% Flip,*16 No Invert','len',2},

				{85.136+240/222/8*0,240/222/4,'*16 150% Flip,*16 -200% Invert','len',2},
				{85.136+240/222/8*1,240/222/4,'*16 150% Flip,*16 No Invert','len',1},
				{85.136+240/222/8*2,240/222/4,'*16 -50% Flip,*32 200% Invert','len',2},
				{85.136+240/222/8*3,240/222/4,'*16 -50% Flip,*16 No Invert','len',1},
				{85.136+240/222/8*4,240/222/4,'*16 -50% Flip,*16 No Invert','len',2},

				{85.812,240/222/8*7,'*1.2 Stealth','len'},

				{85.812,240/222/8*3,'*7.5 300% Tornado,*7.5 300% Bumpy','len',1},
				{85.812,240/222/8*3,'*7.5 -300% Tornado,*7.5 -300% Bumpy','len',2},

				{86.217,240/222/4,'*22.5 No Tornado,*22.5 No Bumpy','len'},

				{86.757,92.163,'*10000 No Reverse,*10000 No Split,*10000 No Cross,*10000 No Alternate,*10000 0.14x,*10000 50% Stealth','end'},
				{92.163,240/222/2,'*10000 No Reverse,*10000 No Split,*10000 No Cross,*10000 No Alternate,*10000 2x,*10000 No Stealth','len'},

				{92.163,240/222/8,'*10000 50% Stealth,*22.2 300% Tornado','len'},
				{92.163+240/222/8,240/222/8*5,'*0.8 No Stealth,*5 No Tornado,','len'},

				{93.244+240/222/4*0,240/222/4*6,'*16 -50% Flip,*16 200% Invert','len',1},
				{93.244+240/222/4*6,240/222/4,'*16 150% Flip,*16 No Invert','len',1},
				{93.244+240/222/4*7,240/222/4,'*16 150% Flip,*16 -200% Invert','len',1},
				{93.244+240/222/4*8,240/222/4*6,'*16 -50% Flip,*16 No Invert','len',1},
				{93.244+240/222/4*14,240/222/4,'*16 -50% Flip,*16 200% Invert','len',1},
				{93.244+240/222/4*15,240/222/4,'*16 150% Flip,*16 No Invert','len',1},
				{93.244+240/222/4*16,240/222/4*6,'*16 150% Flip,*16 -200% Invert','len',1},
				{93.244+240/222/4*22,240/222/4,'*16 -50% Flip,*16 No Invert','len',1},
				{93.244+240/222/4*23,240/222/4,'*16 -50% Flip,*16 200% Invert','len',1},
				{93.244+240/222/4*24,240/222/4*6,'*16 150% Flip,*16 No Invert','len',1},
				{93.244+240/222/4*2,240/222/4,'*16 -50% Flip,*16 200% Invert','len',2},
				{93.244+240/222/4*3,240/222/4,'*16 150% Flip,*16 No Invert','len',2},
				{93.244+240/222/4*4,240/222/4*6,'*16 150% Flip,*16 -200% Invert','len',2},
				{93.244+240/222/4*10,240/222/4,'*16 -50% Flip,*16 No Invert','len',2},
				{93.244+240/222/4*11,240/222/4,'*16 -50% Flip,*16 200% Invert','len',2},
				{93.244+240/222/4*12,240/222/4*6,'*16 150% Flip,*16 No Invert','len',2},
				{93.244+240/222/4*18,240/222/4,'*16 150% Flip,*16 -200% Invert','len',2},
				{93.244+240/222/4*19,240/222/4,'*16 -50% Flip,*16 No Invert','len',2},
				{93.244+240/222/4*20,240/222/4*6,'*16 -50% Flip,*16 200% Invert','len',2},
				{93.244+240/222/4*26,240/222/4,'*16 150% Flip,*16 No Invert','len',2},
				{93.244+240/222/4*27,240/222/4,'*16 150% Flip,*16 -200% Invert','len',2},
				{93.244+240/222/4*28,240/222/4*6,'*16 -50% Flip,*16 No Invert','len',2},

				{101.352,240/222/4,'*16 -50% Flip,*16 No Invert','len',1},

				{101.352,240/222/2,'*1.85 No Wave,*1.85 No Drunk,*1.85 No Bumpy,*1.85 Stealth,*1.85 Dark','len'},

				{101.893,110.541,'*10000 No Reverse,*10000 No Split,*10000 No Cross,*10000 No Alternate,*10000 0.18x','end'},
				{110.541,240/222/2,'*10000 No Reverse,*10000 No Split,*10000 No Cross,*10000 No Alternate,*10000 2x,*10000 No Stealth','len'},

				{101.893+240/222*0,240/222,'*10000 50% Stealth','len',1},
				{101.893+240/222*0,240/222,'*10000 95% Stealth','len',2},
				{101.893+240/222*1,240/222,'*10000 50% Stealth','len',2},
				{101.893+240/222*1,240/222,'*10000 95% Stealth','len',1},
				{101.893+240/222*2,240/222/2,'*10000 50% Stealth','len'},
				{101.893+240/222/2*5,240/222/2,'*10000 75% Stealth','len'},
				{101.893+240/222/2*6,240/222*3,'*10000 50% Stealth','len',1},
				{101.893+240/222/2*6,240/222*3,'*10000 95% Stealth','len',2},
				{101.893+240/222*6,240/222,'*10000 50% Stealth','len',2},
				{101.893+240/222*6,240/222,'*10000 95% Stealth','len',1},
				{101.893+240/222/2*14,240/222/2,'*10000 50% Stealth','len',1},
				{101.893+240/222/2*14,240/222/2,'*10000 95% Stealth','len',2},
				{101.893+240/222/2*15,240/222/2,'*10000 50% Stealth','len',2},
				{101.893+240/222/2*15,240/222/2,'*10000 95% Stealth','len',1},
				{110.541,240/222/8,'*10000 50% Stealth,*22.2 300% Tornado','len'},
				{110.541+240/222/8,240/222/8*5,'*0.8 No Stealth,*5 No Tornado,','len'},

				{111.622+240/222/4*0,240/222/4*6,'*16 -50% Flip,*16 200% Invert','len',1},
				{111.622+240/222/4*6,240/222/4,'*16 150% Flip,*16 No Invert','len',1},
				{111.622+240/222/4*7,240/222/4,'*16 -50% Flip,*16 No Invert','len',1},

				{111.622+240/222/4*2,240/222/4,'*16 -50% Flip,*16 200% Invert','len',2},
				{111.622+240/222/4*3,240/222/4,'*16 150% Flip,*16 No Invert','len',2},
				{111.622+240/222/4*4,240/222/4*6,'*16 -50% Flip,*16 No Invert','len',2},

				{113.244,200,'*0.925 50% Stealth','end'},
				{113.785,115.947,'*1.85 50% Stealth','end'},

				{111.622+240/222/4*8,200,'*0.23125 50% Flip,*1.15625 -500% Mini,*0.4625 Dark','end'},

				{113.785,240/222/4,'*1.85 Stealth','len'},
				{113.785+240/222/4*2,240/222/4,'*1.85 Stealth','len'},
				{113.785+240/222/4*4,240/222/4,'*1.85 Stealth','len'},
				{113.785+240/222/4*6,240/222/4,'*1.85 Stealth','len'},
				{113.785+240/222/4*8,240/222/2,'*0.925 Stealth','len'},
				{113.785+240/222/4*12,240/222,'*0.4625 Stealth','len'},

				}
				
				
				prefix_plr = {};
				
				self:queuecommand('Update');
			end"
		
		UpdateCommand="%function(self)
		
			local beat = GAMESTATE:GetSongBeat();
			
			-----------------------
			-- Player mod resets --
			-----------------------
			GAMESTATE:ApplyGameCommand('mod,clearall')
			
			--------------------------------------------------------------------------------------------
			-- Mod reader code originally coded by Taronuke, remade to support end times and lengths. --
			--------------------------------------------------------------------------------------------
			for i,v in pairs(prefix_mods) do
				if prefix_time >=v[1] then
					if (v[4] == 'len' and prefix_time <=v[1]+v[2]) or (v[4] == 'end' and prefix_time <=v[2]) then
						if table.getn(v) == 5 then
							GAMESTATE:ApplyGameCommand('mod,'..v[3],v[5]);
						else
							GAMESTATE:ApplyGameCommand('mod,'..v[3]);
						end
					end
				end
			end
			
			
			
			if beat >= 0 and not checked then
				
				table.insert(prefix_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP1'));
				table.insert(prefix_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP2'));
				checked = true;
				
				SCREENMAN:GetTopScreen():GetChild('Overlay'):hidden(1);
				SCREENMAN:GetTopScreen():GetChild('Underlay'):hidden(1);
				for i,v in pairs(prefix_plr) do
					local multi = -1; if i == 2 then multi = 1; end
					if v then
						SCREENMAN:GetTopScreen():GetChild('ScoreP'..i):hidden(1);
						SCREENMAN:GetTopScreen():GetChild('LifeP'..i):hidden(1);
						v:y(SCREEN_CENTER_Y+1350);
						v:x(SCREEN_CENTER_X+32*multi);
						v:GetChild('Judgment'):x(32*multi*4);
						v:GetChild('Judgment'):bob();
						v:GetChild('Judgment'):effectmagnitude(0,-175,0);
						v:GetChild('Judgment'):effectperiod(100000);
						v:GetChild('Judgment'):effectoffset(25000);
						v:GetChild('Combo'):hidden(1);
						
					end
				end
			end

			if beat >= 10 and fgcurcommand == 1 then
				for i,v in pairs(prefix_plr) do
					if v then
						v:y(SCREEN_CENTER_Y);
					end
				end
				fgcurcommand = fgcurcommand + 1;
			end

			if beat >= 64 and fgcurcommand == 2 then
				for i,v in pairs(prefix_plr) do
					if v then
						v:y(SCREEN_CENTER_Y+1350);
					end
				end
				fgcurcommand = fgcurcommand + 1;
			end

			if beat >= 96 and fgcurcommand == 3 then
				for i,v in pairs(prefix_plr) do
					if v then
						v:y(SCREEN_CENTER_Y);
					end
				end
				fgcurcommand = fgcurcommand + 1;
			end

			if beat >= 320 and fgcurcommand == 4 then
				for i,v in pairs(prefix_plr) do
					if v then
						v:y(SCREEN_CENTER_Y+1350);
					end
				end
				fgcurcommand = fgcurcommand + 1;
			end

			if beat >= 340 and fgcurcommand == 5 then
				for i,v in pairs(prefix_plr) do
					if v then
						v:y(SCREEN_CENTER_Y);
					end
				end
				fgcurcommand = fgcurcommand + 1;
			end

			if beat >= 376 and fgcurcommand == 6 then
				for i,v in pairs(prefix_plr) do
					if v then
						v:y(SCREEN_CENTER_Y+1350);
					end
				end
				fgcurcommand = fgcurcommand + 1;
			end

			if beat >= 408 and fgcurcommand == 7 then
				for i,v in pairs(prefix_plr) do
					if v then
						v:y(SCREEN_CENTER_Y);
					end
				end
				fgcurcommand = fgcurcommand + 1;
			end

			if beat >= 420.25 and fgcurcommand == 8 then
				for i,v in pairs(prefix_plr) do
					if v then
						v:linear(240/222/16*63);						
						v:x(SCREEN_CENTER_X);
					end
				end
				fgcurcommand = fgcurcommand + 1;
			end

			-------------------------
			-- BEAT SPECIFIC STUFF --
			-------------------------
			if beat >= 64 and beat < 72 or beat >= 376 and beat < 384 then
				local phase = math.mod(prefix_phase,16) + 1;
				if phase == 1 then
					GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse,*10000 No Split,*10000 No Cross,*10000 No Alternate',1);
					GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse,*10000 No Split,*10000 No Cross,*10000 No Alternate',2);
				elseif phase == 2 then
					GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse,*10000 No Split,*10000 No Cross,*10000 No Alternate',2);
					GAMESTATE:ApplyGameCommand('mod,*10000 -500% Reverse,*10000 250% Split,*10000 250% Cross,*10000 250% Alternate',1);
				elseif phase == 3 then
					GAMESTATE:ApplyGameCommand('mod,*10000 -500% Reverse,*10000 250% Split,*10000 250% Cross,*10000 250% Alternate',1);
					GAMESTATE:ApplyGameCommand('mod,*10000 -500% Reverse,*10000 250% Split,*10000 250% Cross,*10000 250% Alternate',2);
				elseif phase == 4 then
					GAMESTATE:ApplyGameCommand('mod,*10000 -500% Reverse,*10000 250% Split,*10000 250% Cross,*10000 250% Alternate',2);
					GAMESTATE:ApplyGameCommand('mod,*10000 -500% Reverse,*10000 500% Split,*10000 No Cross,*10000 No Alternate',1);
				elseif phase == 5 then
					GAMESTATE:ApplyGameCommand('mod,*10000 -500% Reverse,*10000 500% Split,*10000 No Cross,*10000 No Alternate',1);
					GAMESTATE:ApplyGameCommand('mod,*10000 -500% Reverse,*10000 500% Split,*10000 No Cross,*10000 No Alternate',2);
				elseif phase == 6 then
					GAMESTATE:ApplyGameCommand('mod,*10000 -500% Reverse,*10000 500% Split,*10000 No Cross,*10000 No Alternate',2);
					GAMESTATE:ApplyGameCommand('mod,*10000 -500% Reverse,*10000 250% Split,*10000 -250% Cross,*10000 250% Alternate',1);
				elseif phase == 7 then
					GAMESTATE:ApplyGameCommand('mod,*10000 -500% Reverse,*10000 250% Split,*10000 -250% Cross,*10000 250% Alternate',1);
					GAMESTATE:ApplyGameCommand('mod,*10000 -500% Reverse,*10000 250% Split,*10000 -250% Cross,*10000 250% Alternate',2);
				elseif phase == 8 then
					GAMESTATE:ApplyGameCommand('mod,*10000 -500% Reverse,*10000 250% Split,*10000 -250% Cross,*10000 250% Alternate',2);
					GAMESTATE:ApplyGameCommand('mod,*10000 -500% Reverse,*10000 No Split,*10000 No Cross,*10000 No Alternate',1);
				elseif phase == 9 then
					GAMESTATE:ApplyGameCommand('mod,*10000 -500% Reverse,*10000 No Split,*10000 No Cross,*10000 No Alternate',1);
					GAMESTATE:ApplyGameCommand('mod,*10000 -500% Reverse,*10000 No Split,*10000 No Cross,*10000 No Alternate',2);
				elseif phase == 10 then
					GAMESTATE:ApplyGameCommand('mod,*10000 -500% Reverse,*10000 No Split,*10000 No Cross,*10000 No Alternate',2);
					GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse,*10000 -250% Split,*10000 -250% Cross,*10000 -250% Alternate',1);
				elseif phase == 11 then
					GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse,*10000 -250% Split,*10000 -250% Cross,*10000 -250% Alternate',1);
					GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse,*10000 -250% Split,*10000 -250% Cross,*10000 -250% Alternate',2);
				elseif phase == 12 then
					GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse,*10000 -250% Split,*10000 -250% Cross,*10000 -250% Alternate',2);
					GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse,*10000 -500% Split,*10000 No Cross,*10000 No Alternate',1);
				elseif phase == 13 then
					GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse,*10000 -500% Split,*10000 No Cross,*10000 No Alternate',1);
					GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse,*10000 -500% Split,*10000 No Cross,*10000 No Alternate',2);
				elseif phase == 14 then
					GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse,*10000 -500% Split,*10000 No Cross,*10000 No Alternate',2);
					GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse,*10000 -250% Split,*10000 250% Cross,*10000 -250% Alternate',1);
				elseif phase == 15 then
					GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse,*10000 -250% Split,*10000 250% Cross,*10000 -250% Alternate',1);
					GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse,*10000 -250% Split,*10000 250% Cross,*10000 -250% Alternate',2);
				else
					GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse,*10000 -250% Split,*10000 250% Cross,*10000 -250% Alternate',2);
					GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse,*10000 No Split,*10000 No Cross,*10000 No Alternate',1);
				end
			end

			if beat >= 72 and beat < 74 or beat >= 384 and beat < 386 then
				local phase = math.mod(prefix_phase,2) + 1;
				if phase == 1 then
					GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse,*10000 No Split,*10000 No Cross,*10000 -500% Alternate');
				else
					GAMESTATE:ApplyGameCommand('mod,*10000 -500% Reverse,*10000 No Split,*10000 No Cross,*10000 500% Alternate');
				end
			end

			if beat >= 74 and beat < 76 or beat >= 386 and beat < 388 then
				local phase = math.mod(prefix_phase,16) + 1;
				if phase == 1 then
					GAMESTATE:ApplyGameCommand('mod,*10000 -500% Reverse,*10000 250% Split,*10000 250% Cross,*10000 250% Alternate',1);
				elseif phase == 2 then
					GAMESTATE:ApplyGameCommand('mod,*10000 -500% Reverse,*10000 250% Split,*10000 250% Cross,*10000 250% Alternate',2);
				elseif phase == 3 then
					GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse,*10000 250% Split,*10000 -250% Cross,*10000 -250% Alternate',1);
				elseif phase == 4 then
					GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse,*10000 250% Split,*10000 -250% Cross,*10000 -250% Alternate',2);
				elseif phase == 5 then
					GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse,*10000 -250% Split,*10000 -250% Cross,*10000 250% Alternate',1);
				elseif phase == 6 then
					GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse,*10000 -250% Split,*10000 -250% Cross,*10000 250% Alternate',2);
				elseif phase == 7 then
					GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse,*10000 -250% Split,*10000 250% Cross,*10000 -250% Alternate',1);
				elseif phase == 8 then
					GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse,*10000 -250% Split,*10000 250% Cross,*10000 -250% Alternate',2);
				end
			end

			if beat >= 76 and beat < 88 or beat >= 388 and beat < 400 then
				local phase = math.mod(prefix_phase,16) + 1;
				if phase == 1 then
					GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse,*10000 -250% Split,*10000 250% Cross,*10000 -250% Alternate',1);
					GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse,*10000 -250% Split,*10000 250% Cross,*10000 -250% Alternate',2);
				elseif phase == 2 then
					GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse,*10000 -500% Split,*10000 No Cross,*10000 No Alternate',2);
				elseif phase == 3 then
					GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse,*10000 No Split,*10000 -500% Cross,*10000 No Alternate',2);
				elseif phase == 4 then
					GAMESTATE:ApplyGameCommand('mod,*10000 -500% Reverse,*10000 500% Split,*10000 No Cross,*10000 -No Alternate',2);
				elseif phase == 5 then
					GAMESTATE:ApplyGameCommand('mod,*10000 -500% Reverse,*10000 250% Split,*10000 250% Cross,*10000 250% Alternate',2);
					GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse,*10000 -250% Split,*10000 250% Cross,*10000 -250% Alternate',1);
				elseif phase == 6 then
					GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse,*10000 -500% Split,*10000 No Cross,*10000 No Alternate',1);
				elseif phase == 7 then
					GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse,*10000 No Split,*10000 -500% Cross,*10000 No Alternate',1);
				elseif phase == 8 then
					GAMESTATE:ApplyGameCommand('mod,*10000 -500% Reverse,*10000 500% Split,*10000 No Cross,*10000 No Alternate',1);
				elseif phase == 9 then
					GAMESTATE:ApplyGameCommand('mod,*10000 -500% Reverse,*10000 250% Split,*10000 250% Cross,*10000 250% Alternate',1);
					GAMESTATE:ApplyGameCommand('mod,*10000 -500% Reverse,*10000 250% Split,*10000 250% Cross,*10000 250% Alternate',2);
				elseif phase == 10 then
					GAMESTATE:ApplyGameCommand('mod,*10000 -500% Reverse,*10000 500% Split,*10000 No Cross,*10000 No Alternate',2);
				elseif phase == 11 then
					GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse,*10000 No Split,*10000 -500% Cross,*10000 No Alternate',2);
				elseif phase == 12 then
					GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse,*10000 -500% Split,*10000 No Cross,*10000 No Alternate',2);
				elseif phase == 13 then
					GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse,*10000 -250% Split,*10000 250% Cross,*10000 -250% Alternate',2);
					GAMESTATE:ApplyGameCommand('mod,*10000 -500% Reverse,*10000 250% Split,*10000 250% Cross,*10000 250% Alternate',1);
				elseif phase == 14 then
					GAMESTATE:ApplyGameCommand('mod,*10000 -500% Reverse,*10000 500% Split,*10000 No Cross,*10000 No Alternate',1);
				elseif phase == 15 then
					GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse,*10000 No Split,*10000 -500% Cross,*10000 No Alternate',1);
				else
					GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse,*10000 -500% Split,*10000 No Cross,*10000 No Alternate',1);
				end
			end

			if beat >= 88 and beat < 92 or beat >= 400 and beat < 404 then
				local phase = math.mod(prefix_phase,8) + 1;
				if phase == 1 then
					GAMESTATE:ApplyGameCommand('mod,*10000 -500% Reverse,*10000 250% Split,*10000 250% Cross,*10000 250% Alternate',1);
					GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse,*10000 250% Split,*10000 -250% Cross,*10000 -250% Alternate',2);
				elseif phase == 2 then
					GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse,*10000 250% Split,*10000 -250% Cross,*10000 -250% Alternate',2);
					GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse,*10000 -250% Split,*10000 -250% Cross,*10000 250% Alternate',1);
				elseif phase == 3 then
					GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse,*10000 -250% Split,*10000 -250% Cross,*10000 250% Alternate',1);
					GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse,*10000 -250% Split,*10000 250% Cross,*10000 -250% Alternate',2);
				elseif phase == 4 then
					GAMESTATE:ApplyGameCommand('mod,*10000 -500% Reverse,*10000 No Split,*10000 500% Cross,*10000 No Alternate',2);
				elseif phase == 5 then
					GAMESTATE:ApplyGameCommand('mod,*10000 -500% Reverse,*10000 250% Split,*10000 250% Cross,*10000 250% Alternate',2);
					GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse,*10000 250% Split,*10000 -250% Cross,*10000 -250% Alternate',1);
				elseif phase == 6 then
					GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse,*10000 250% Split,*10000 -250% Cross,*10000 -250% Alternate',1);
					GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse,*10000 -250% Split,*10000 -250% Cross,*10000 250% Alternate',2);
				elseif phase == 7 then
					GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse,*10000 -250% Split,*10000 -250% Cross,*10000 250% Alternate',2);
					GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse,*10000 -250% Split,*10000 250% Cross,*10000 -250% Alternate',1);
				else
					GAMESTATE:ApplyGameCommand('mod,*10000 -500% Reverse,*10000 No Split,*10000 500% Cross,*10000 No Alternate',1);
				end
			end

			if beat >= 92 and beat < 96 or beat >= 404 and beat < 408 then
				local phase = math.mod(prefix_phase,3) + 1;
				if phase == 1 then
					GAMESTATE:ApplyGameCommand('mod,*10000 -500% Reverse,*10000 250% Split,*10000 250% Cross,*10000 250% Alternate',1);
					GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse,*10000 250% Split,*10000 -250% Cross,*10000 -250% Alternate',2);
				elseif phase == 2 then
					GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse,*10000 -250% Split,*10000 -250% Cross,*10000 250% Alternate',1);
					GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse,*10000 -250% Split,*10000 250% Cross,*10000 -250% Alternate',2);
				else
					GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse,*10000 No Split,*10000 500% Cross,*10000 No Alternate');
				end
			end

			if beat >= 320 and beat < 324 or beat >= 336 and beat < 338 then
				local phase = math.mod(prefix_phase,4) + 1;
				if phase == 1 then
					GAMESTATE:ApplyGameCommand('mod,*10000 -500% Reverse,*10000 500% Split,*10000 500% Cross,*10000 500% Alternate');
				elseif phase == 2 then
					GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse,*10000 250% Split,*10000 -250% Cross,*10000 -250% Alternate');
				elseif phase == 3 then
					GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse,*10000 -250% Split,*10000 -250% Cross,*10000 250% Alternate');
				else
					GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse,*10000 -250% Split,*10000 250% Cross,*10000 -250% Alternate');
				end
			end

			if beat >= 324 and beat < 328 or beat >= 338 and beat < 340 then
				local phase = math.mod(prefix_phase,4) + 1;
				if phase == 1 then
					GAMESTATE:ApplyGameCommand('mod,*10000 -500% Reverse,*10000 500% Split,*10000 500% Cross,*10000 500% Alternate');
				elseif phase == 2 then
					GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse,*10000 -250% Split,*10000 -250% Cross,*10000 250% Alternate');
				elseif phase == 3 then
					GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse,*10000 250% Split,*10000 -250% Cross,*10000 -250% Alternate');
				else
					GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse,*10000 -250% Split,*10000 250% Cross,*10000 -250% Alternate');
				end
			end

			if beat >= 328 and beat < 332 then
				local phase = math.mod(prefix_phase,6) + 1;
				if phase == 1 then
					GAMESTATE:ApplyGameCommand('mod,*10000 -500% Reverse,*10000 500% Split,*10000 500% Cross,*10000 500% Alternate');
				elseif phase == 2 then
					GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse,*10000 -250% Split,*10000 -250% Cross,*10000 250% Alternate');
				elseif phase == 3 then
					GAMESTATE:ApplyGameCommand('mod,*10000 -500% Reverse,*10000 500% Split,*10000 500% Cross,*10000 500% Alternate');
				elseif phase == 4 then
					GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse,*10000 -250% Split,*10000 250% Cross,*10000 -250% Alternate');
				elseif phase == 5 then
					GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse,*10000 250% Split,*10000 -250% Cross,*10000 -250% Alternate');
				else
					GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse,*10000 -250% Split,*10000 250% Cross,*10000 -250% Alternate');
				end
			end

			if beat >= 332 and beat < 336 then
				local phase = math.mod(prefix_phase,6) + 1;
				if phase == 1 then
					GAMESTATE:ApplyGameCommand('mod,*10000 -500% Reverse,*10000 500% Split,*10000 500% Cross,*10000 500% Alternate');
				elseif phase == 2 then
					GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse,*10000 250% Split,*10000 -250% Cross,*10000 -250% Alternate');
				elseif phase == 3 then
					GAMESTATE:ApplyGameCommand('mod,*10000 -500% Reverse,*10000 500% Split,*10000 500% Cross,*10000 500% Alternate');
				elseif phase == 4 then
					GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse,*10000 -250% Split,*10000 250% Cross,*10000 -250% Alternate');
				elseif phase == 5 then
					GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse,*10000 -250% Split,*10000 -250% Cross,*10000 250% Alternate');
				else
					GAMESTATE:ApplyGameCommand('mod,*10000 No Reverse,*10000 -250% Split,*10000 250% Cross,*10000 -250% Alternate');
				end
			end
			
			--------------------------------------------------------------
			-- Message reader to make specific values of the actor aux. --
			--------------------------------------------------------------
			if prefix_curmessage <= table.getn(prefix_messages) then
				if prefix_time >= prefix_messages[prefix_curmessage][1] then
					MESSAGEMAN:Broadcast(prefix_messages[prefix_curmessage][2]);
					prefix_curmessage = prefix_curmessage + 1;
				end
			end
			
			self:queuecommand('Update2');
			
		end"


		Update2Command="%function(self)
		self:sleep(0.02);
		self:queuecommand('Update');
		end"

	/>
	
	<BitmapText
		Font="Common Normal"
		Text="test"
		OnCommand="x,SCREEN_CENTER_X;y,SCREEN_CENTER_Y;effectclock,music;playcommand,SetTime;hidden,1"
		SetTimeCommand="%function(self) self:settext(self:GetSecsIntoEffect()); prefix_time = PREFSMAN:GetPreference('GlobalOffsetSeconds') - (-0.259 - 0.543) + tonumber(self:GetText()); self:sleep(0.02); self:queuecommand('SetTime'); end"
	/>
	
	<!-- Aux actor, VERY IMPORTANT -->
	<Layer
		Type="Quad"
		OnCommand=""
		InitCommand="%function(self) auxvar = self; self:hidden(1) end"
		SkewTwitchMessageCommand="finishtweening;aux,0;linear,9.6;aux,1.5;linear,1.6;aux,0"
		IncrementPhaseMessageCommand="%function() prefix_phase = prefix_phase + 1; end"
		DecrementPhaseMessageCommand="%function() prefix_phase = prefix_phase - 1; end"
		ResetPhaseMessageCommand="%function() prefix_phase = 0; end"
	/>
	
</children></ActorFrame>