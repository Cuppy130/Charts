<ActorFrame><children>

	<Layer
		Type="Quad"
		InitCommand="hidden,1"
		OnCommand="sleep,119.38"
	/>
	
	<Layer
		Type="Quad"
		InitCommand="hidden,1"
		OnCommand="%function(self)
				fgcurcommand = 1;
				checked = false;
				prefix_time = 0;
				prefix_spincrement = 0;
				
				prefix_curmessage = 1;
				
				
				prefix_messages = {
					{1.071,'VibLong'},
					{2.009,'VibLong'},
					{5.357,'VibLong'},
					{6.295,'VibLong'},
					
					{8.839,'VibChip'},
					
					{49.420,'VibCharge'},
					{51.563,'VibCharge'},
					{53.705,'VibCharge'},
					{55.848,'VibCharge'},
					{57.991,'VibChargeLongStart'},
					
					{76.071,'Flash'},
					
					{76.071,'VibLong'},
					{77.009,'VibLong'},
					
					{86.250,'ChipIn'},
					{88.393,'ChipOut'},
					{90.536,'ChipIn'},
					{94.821,'ChipOut'},
					{96.964,'ChipIn'},
					{99.107,'ChipOut'},
				};
				
				
				prefix_mods = {
				
				{0,200,'1.5x,-999999% Cover,*10000 No Beat','end'},
				
				{0.536,240/224/4,'*7.4667 100.01% Reverse','len'},
				{0.536+240/224/4,240/224/4,'*7.4667 No Reverse','len'},
				
				{2.813,240/224/8,'*7.4667 50% Split,*7.4667 -50% Cross,*7.4667 50% Alternate','len'},
				{2.813+240/224/8,240/224/8,'*7.4667 Split,*7.4667 No Cross,*7.4667 No Alternate','len'},
				{2.813+240/224/8*2,240/224/8,'*7.4667 50% Split,*7.4667 50% Cross,*7.4667 50% Alternate','len'},
				{2.813+240/224/8*3,240/224*4,'*14.9334 100.01% Reverse,*7.4667 No Split,*7.4667 No Cross,*7.4667 No Alternate','len'},
				
				{3.884,240/224/8,'*14.9334 Invert','len'},
				{3.884+240/224/8,240/224/8,'*14.9334 Flip,*29.8667 -100% Invert','len'},
				{3.884+240/224/8*2,240/224/8*5,'*14.9334 Flip,*14.9334 No Invert','len'},
				
				{4.821,240/224/2,'*1.8667 No Flip','len'},
				
				{4.821,240/224/4,'*18.6667 -500% Mini','len'},
				{4.821+240/224/4,240/224/4,'*18.6667 No Mini','len'},
				
				{7.098,240/224/8,'*14.9334 100.01% Reverse,*7.4667 -50% Split,*7.4667 50% Cross,*7.4667 -50% Alternate','len'},
				{7.098+240/224/8,240/224/8,'*14.9334 100.01% Reverse,*7.4667 -100% Split,*7.4667 No Cross,*7.4667 No Alternate','len'},
				{7.098+240/224/8*2,240/224/8,'*14.9334 100.01% Reverse,*7.4667 -50% Split,*7.4667 -50% Cross,*7.4667 -50% Alternate','len'},
				{7.098+240/224/8*3,240/224/4,'*14.9334 No Reverse,*7.4667 No Split,*7.4667 No Cross,*7.4667 No Alternate','len'},
				
				{8.839,240/224/4*3,'*1.2445 100% Stealth,*10000 -120% SuddenOffset,*10000 -120% HiddenOffset','len'},
				
				{9.643,18.214,'*10000 Sudden,*10000 Hidden,*10.4534 -120% SuddenOffset,*10.4534 -120% HiddenOffset,*3.7334 Wave,*3.7334 Drunk','end'},
				{9.643,35.893,'*10000 50% Stealth','end'},
				
				{17.143,240/224,'*0.9334 No Drunk,*0.9334 Dark','len'},
				
				{18.214,35.893,'*10000 No Sudden,*10000 No Hidden,*10000 No Wave,*10000 No Dark','end'},
				
				{19.286,35.893,'*10000 -350% Hidden,*10000 -350% Sudden,*10000 400% Stealth,*10000 68% HiddenOffset,*10000 -100% SuddenOffset','end'},
				
				{18.259-0.035,240/224/12,'*10000 Split','len'},
				{18.259-0.035+240/224/12,240/224/12,'*10000 100.01% Reverse,*10000 -100% Split','len'},
				{18.259-0.035+240/224/12*2,240/224/12,'*10000 No Reverse,*10000 No Split,*10000 Alternate','len'},
				{18.259-0.035+240/224/12*3,240/224/12,'*10000 100.01% Reverse,*10000 -100% Alternate','len'},
				{18.259-0.035+240/224/12*4,240/224/12,'*10000 No Reverse,*10000 No Alternate,*10000 Cross','len'},
				{18.259-0.035+240/224/12*5,240/224/12,'*10000 100.01% Reverse,*10000 -100% Cross','len'},
				
				{18.750-0.050,240/224/16*3,'*10000 100.01% Reverse,*10000 No Cross','len'},
				{18.750-0.050+240/224/16*3,240/224/16*3,'*10000 No Reverse','len'},
				{18.750-0.050+240/224/16*6,240/224/16*3,'*10000 100.01% Reverse','len'},
				{18.750-0.050+240/224/16*8,240/224/16*3,'*10000 No Reverse','len'},
				
				{18.259,240/224/24,'*10000 450% Stealth,*10000 Dark','len'},
				{18.259+240/224/12,240/224/24,'*10000 450% Stealth,*10000 Dark','len'},
				{18.259+240/224/12*2,240/224/24,'*10000 450% Stealth,*10000 Dark','len'},
				{18.259+240/224/12*3,240/224/24,'*10000 450% Stealth,*10000 Dark','len'},
				{18.259+240/224/12*4,240/224/24,'*10000 450% Stealth,*10000 Dark','len'},
				{18.259+240/224/12*5,240/224/24,'*10000 450% Stealth,*10000 Dark','len'},
				
				{18.850,240/224/32*3,'*10000 450% Stealth,*10000 Dark','len'},
				{18.850+240/224/16*3,240/224/32*3,'*10000 450% Stealth,*10000 Dark','len'},
				{18.850+240/224/32*11,240/224/16,'*10000 450% Stealth,*10000 Dark','len'},
				
				{19.286-0.050+240/224/16*3,240/224/16*3,'*10000 Invert','len'},
				{19.286-0.050+240/224/16*6,240/224/16*3,'*10000 Flip,*10000 No Invert','len'},
				{19.286-0.050+240/224/16*9,240/224/16*3,'*10000 Flip,*10000 -100% Invert','len'},
				{19.286-0.050+240/224/16*12,240/224/16*3,'*10000 No Flip,*10000 No Invert','len'},
				{19.286-0.050+240/224/16*15,240/224/16*3,'*10000 Invert','len'},
				{19.286-0.050+240/224/16*18,240/224/16*3,'*10000 Flip,*10000 No Invert','len'},
				{19.286-0.050+240/224/16*21,240/224/16*3,'*10000 Flip,*10000 -100% Invert','len'},
				{19.286-0.050+240/224/16*24,240/224/16*3,'*10000 No Flip,*10000 No Invert','len'},
				
				{19.386,240/224/32*3,'*10000 450% Stealth,*10000 Dark','len'},
				{19.386+240/224/16*3,240/224/32*3,'*10000 450% Stealth,*10000 Dark','len'},
				{19.386+240/224/16*6,240/224/32*3,'*10000 450% Stealth,*10000 Dark','len'},
				{19.386+240/224/16*9,240/224/32*3,'*10000 450% Stealth,*10000 Dark','len'},
				{19.386+240/224/16*12,240/224/32*3,'*10000 450% Stealth,*10000 Dark','len'},
				{19.386+240/224/16*15,240/224/32*3,'*10000 450% Stealth,*10000 Dark','len'},
				{19.386+240/224/16*18,240/224/32*3,'*10000 450% Stealth,*10000 Dark','len'},
				{19.386+240/224/16*21,240/224/32*3,'*10000 450% Stealth,*10000 Dark','len'},
				
				{20.893,240/224/16,'*10000 No Reverse,*10000 -250% Split,*10000 -250% Cross,*10000 -250% Alternate','len'},
				{20.893+240/224/16,240/224/16,'*10000 No Reverse,*10000 -500% Split,*10000 No Cross,*10000 No Alternate','len'},
				{20.893+240/224/16*2,240/224/16,'*10000 No Reverse,*10000 -250% Split,*10000 250% Cross,*10000 -250% Alternate','len'},
				{20.893+240/224/16*3,240/224/16,'*10000 No Reverse,*10000 No Split,*10000 No Cross,*10000 No Alternate','len'},
				{20.893+240/224/16*4,240/224/16,'*10000 -500% Reverse,*10000 250% Split,*10000 250% Cross,*10000 250% Alternate','len'},
				{20.893+240/224/16*5,240/224/16,'*10000 -500% Reverse,*10000 500% Split,*10000 No Cross,*10000 No Alternate','len'},
				{20.893+240/224/16*6,240/224/16,'*10000 -500% Reverse,*10000 250% Split,*10000 -250% Cross,*10000 250% Alternate','len'},
				{20.893+240/224/16*7,240/224/16,'*10000 -500% Reverse,*10000 No Split,*10000 No Cross,*10000 No Alternate','len'},
				{20.893+240/224/16*8,240/224/16,'*10000 No Reverse,*10000 No Split,*10000 No Cross,*10000 No Alternate','len'},
				
				{21.429-0.050+240/224/16*3,240/224/16*3,'*10000 Invert','len'},
				{21.429-0.050+240/224/16*6,240/224/16*3,'*10000 Flip,*10000 No Invert','len'},
				{21.429-0.050+240/224/16*9,240/224/16*3,'*10000 Flip,*10000 -100% Invert','len'},
				{21.429-0.050+240/224/16*12,240/224/16*3,'*10000 No Flip,*10000 No Invert','len'},
				{21.429-0.050+240/224/16*15,240/224/16*3,'*10000 Invert','len'},
				{21.429-0.050+240/224/16*18,240/224/16*3,'*10000 Flip,*10000 No Invert','len'},
				{21.429-0.050+240/224/16*21,240/224/16*3,'*10000 Flip,*10000 -100% Invert','len'},
				{21.429-0.050+240/224/16*24,240/224/16*3,'*10000 No Flip,*10000 No Invert','len'},
				{21.429-0.050+240/224/16*27,240/224/16*3,'*10000 Invert','len'},
				{21.429-0.050+240/224/16*30,240/224/16*3,'*10000 Flip,*10000 No Invert','len'},
				{21.429-0.050+240/224/16*32,240/224/2,'*10000 Flip,*10000 -100% Invert','len'},
				
				{21.529,240/224/32*3,'*10000 450% Stealth,*10000 Dark','len'},
				{21.529+240/224/16*3,240/224/32*3,'*10000 450% Stealth,*10000 Dark','len'},
				{21.529+240/224/16*6,240/224/32*3,'*10000 450% Stealth,*10000 Dark','len'},
				{21.529+240/224/16*9,240/224/32*3,'*10000 450% Stealth,*10000 Dark','len'},
				{21.529+240/224/16*12,240/224/32*3,'*10000 450% Stealth,*10000 Dark','len'},
				{21.529+240/224/16*15,240/224/32*3,'*10000 450% Stealth,*10000 Dark','len'},
				{21.529+240/224/16*18,240/224/32*3,'*10000 450% Stealth,*10000 Dark','len'},
				{21.529+240/224/16*21,240/224/32*3,'*10000 450% Stealth,*10000 Dark','len'},
				{21.529+240/224/16*24,240/224/32*3,'*10000 450% Stealth,*10000 Dark','len'},
				{21.529+240/224/16*27,240/224/32*3,'*10000 450% Stealth,*10000 Dark','len'},
				{21.529+240/224/16*30,240/224/32*3,'*10000 450% Stealth,*10000 Dark','len'},
				{23.504,240/224/16,'*10000 450% Stealth,*10000 Dark','len'},
				
				{23.839,240/224/4,'*10000 450% Stealth,*1000000 Dark','len'},
				{24.107,240/224/2,'*10000 No Flip, *10000 No Invert','len'},
				
				{24.107,240/224/16,'*10000 No Reverse,*10000 -250% Split,*10000 -250% Cross,*10000 -250% Alternate','len'},
				{24.107+240/224/16,240/224/16,'*10000 No Reverse,*10000 -500% Split,*10000 No Cross,*10000 No Alternate','len'},
				{24.107+240/224/16*2,240/224/16,'*10000 No Reverse,*10000 -250% Split,*10000 250% Cross,*10000 -250% Alternate','len'},
				{24.107+240/224/16*3,240/224/16,'*10000 No Reverse,*10000 No Split,*10000 No Cross,*10000 No Alternate','len'},
				{24.107+240/224/16*4,240/224/16,'*10000 -500% Reverse,*10000 250% Split,*10000 250% Cross,*10000 250% Alternate','len'},
				{24.107+240/224/16*5,240/224/16,'*10000 -500% Reverse,*10000 500% Split,*10000 No Cross,*10000 No Alternate','len'},
				{24.107+240/224/16*6,240/224/16,'*10000 -500% Reverse,*10000 250% Split,*10000 -250% Cross,*10000 250% Alternate','len'},
				{24.107+240/224/16*7,240/224/16,'*10000 -500% Reverse,*10000 No Split,*10000 No Cross,*10000 No Alternate','len'},
				{24.107+240/224/16*8,240/224/16,'*10000 No Reverse,*10000 No Split,*10000 No Cross,*10000 No Alternate','len'},
				
				{24.844-0.050,240/224/16*3,'*10000 Flip','len'},
				{24.844-0.050+240/224/16*3,240/224/16*3,'*10000 No Flip','len'},
				{25.379-0.050,240/224/16*3,'*10000 Flip','len'},
				{25.379-0.050+240/224/16*3,240/224/16*3,'*10000 No Flip','len'},
				{25.915-0.050,240/224/16*3,'*10000 Flip','len'},
				{25.915-0.050+240/224/16*3,240/224/16*3,'*10000 No Flip','len'},
				{26.451-0.050,240/224/16*3,'*10000 Flip','len'},
				{26.451-0.050+240/224/16*3,240/224/16*3,'*10000 No Flip','len'},
				
				{25.179-0.050,240/224/2,'*10000 100.01% Reverse','len'},
				{25.179-0.050+240/224/2,240/224/2,'*10000 No Reverse','len'},
				{25.179-0.050+240/224/2*2,240/224/2,'*10000 100.01% Reverse','len'},
				{25.179-0.050+240/224/2*3,240/224/2,'*10000 No Reverse','len'},
				
				{24.743,240/224/32*3,'*10000 450% Stealth,*10000 Dark','len'},
				{24.743+240/224/16*3,240/224/32*3,'*10000 450% Stealth,*10000 Dark','len'},
				{24.743+240/224/32*11,240/224/16,'*10000 450% Stealth,*10000 Dark','len'},
				{25.279,240/224/32*3,'*10000 450% Stealth,*10000 Dark','len'},
				{25.279+240/224/16*3,240/224/32*3,'*10000 450% Stealth,*10000 Dark','len'},
				{25.279+240/224/32*11,240/224/16,'*10000 450% Stealth,*10000 Dark','len'},
				{25.815,240/224/32*3,'*10000 450% Stealth,*10000 Dark','len'},
				{25.815+240/224/16*3,240/224/32*3,'*10000 450% Stealth,*10000 Dark','len'},
				{25.815+240/224/32*11,240/224/16,'*10000 450% Stealth,*10000 Dark','len'},
				{26.350,240/224/32*3,'*10000 450% Stealth,*10000 Dark','len'},
				{26.350+240/224/16*3,240/224/32*3,'*10000 450% Stealth,*10000 Dark','len'},
				{26.350+240/224/32*11,240/224/16,'*10000 450% Stealth,*10000 Dark','len'},
				
				{27.054,240/224/16,'*10000 -500% Reverse,*10000 250% Split,*10000 250% Cross,*10000 250% Alternate','len'},
				{27.054+240/224/16,240/224/16,'*10000 -500% Reverse,*10000 500% Split,*10000 No Cross,*10000 No Alternate','len'},
				{27.054+240/224/16*2,240/224/16,'*10000 -500% Reverse,*10000 250% Split,*10000 -250% Cross,*10000 250% Alternate','len'},
				{27.054+240/224/16*3,240/224/16,'*10000 -500% Reverse,*10000 No Split,*10000 No Cross,*10000 No Alternate','len'},
				{27.054+240/224/16*4,240/224/16,'*10000 No Reverse,*10000 No Split,*10000 No Cross,*10000 No Alternate','len'},
				
				{27.321-0.050,240/224/16*3,'*10000 100.01% Reverse','len'},
				{27.321-0.050+240/224/16*3,240/224/16*3,'*10000 No Reverse','len'},
				{27.321-0.050+240/224/16*6,240/224/16*3,'*10000 100.01% Reverse','len'},
				{27.321-0.050+240/224/16*8,240/224/8,'*10000 No Reverse','len'},
				
				{27.422,240/224/32*3,'*10000 450% Stealth,*10000 Dark','len'},
				{27.422+240/224/16*3,240/224/32*3,'*10000 450% Stealth,*10000 Dark','len'},
				{27.422+240/224/32*11,240/224/16,'*10000 450% Stealth,*10000 Dark','len'},
				
				{27.857-0.050+240/224/16*3,240/224/16*3,'*10000 Invert','len'},
				{27.857-0.050+240/224/16*6,240/224/16*3,'*10000 Flip,*10000 No Invert','len'},
				{27.857-0.050+240/224/16*9,240/224/16*3,'*10000 Flip,*10000 -100% Invert','len'},
				{27.857-0.050+240/224/16*12,240/224/16*3,'*10000 No Flip,*10000 No Invert','len'},
				{27.857-0.050+240/224/16*15,240/224/16*3,'*10000 Invert','len'},
				{27.857-0.050+240/224/16*18,240/224/16*3,'*10000 Flip,*10000 No Invert','len'},
				{27.857-0.050+240/224/16*21,240/224/16*3,'*10000 Flip,*10000 -100% Invert','len'},
				{27.857-0.050+240/224/16*24,240/224/16*3,'*10000 No Flip,*10000 No Invert','len'},
				
				{27.958,240/224/32*3,'*10000 450% Stealth,*10000 Dark','len'},
				{27.958+240/224/16*3,240/224/32*3,'*10000 450% Stealth,*10000 Dark','len'},
				{27.958+240/224/16*6,240/224/32*3,'*10000 450% Stealth,*10000 Dark','len'},
				{27.958+240/224/16*9,240/224/32*3,'*10000 450% Stealth,*10000 Dark','len'},
				{27.958+240/224/16*12,240/224/32*3,'*10000 450% Stealth,*10000 Dark','len'},
				{27.958+240/224/16*15,240/224/32*3,'*10000 450% Stealth,*10000 Dark','len'},
				{27.958+240/224/16*18,240/224/32*3,'*10000 450% Stealth,*10000 Dark','len'},
				{27.958+240/224/16*21,240/224/32*3,'*10000 450% Stealth,*10000 Dark','len'},
				
				{29.464,240/224/16,'*10000 No Reverse,*10000 -250% Split,*10000 -250% Cross,*10000 -250% Alternate','len'},
				{29.464+240/224/16,240/224/16,'*10000 No Reverse,*10000 -500% Split,*10000 No Cross,*10000 No Alternate','len'},
				{29.464+240/224/16*2,240/224/16,'*10000 No Reverse,*10000 -250% Split,*10000 250% Cross,*10000 -250% Alternate','len'},
				{29.464+240/224/16*3,240/224/16,'*10000 No Reverse,*10000 No Split,*10000 No Cross,*10000 No Alternate','len'},
				{29.464+240/224/16*4,240/224/16,'*10000 -500% Reverse,*10000 250% Split,*10000 250% Cross,*10000 250% Alternate','len'},
				{29.464+240/224/16*5,240/224/16,'*10000 -500% Reverse,*10000 500% Split,*10000 No Cross,*10000 No Alternate','len'},
				{29.464+240/224/16*6,240/224/16,'*10000 -500% Reverse,*10000 250% Split,*10000 -250% Cross,*10000 250% Alternate','len'},
				{29.464+240/224/16*7,240/224/16,'*10000 -500% Reverse,*10000 No Split,*10000 No Cross,*10000 No Alternate','len'},
				{29.464+240/224/16*8,240/224/16,'*10000 No Reverse,*10000 No Split,*10000 No Cross,*10000 No Alternate','len'},
				
				{30.000-0.050+240/224/16*3,240/224/16*3,'*10000 Invert','len'},
				{30.000-0.050+240/224/16*6,240/224/16*3,'*10000 Flip,*10000 No Invert','len'},
				{30.000-0.050+240/224/16*9,240/224/16*3,'*10000 Flip,*10000 -100% Invert','len'},
				{30.000-0.050+240/224/16*12,240/224/16*3,'*10000 No Flip,*10000 No Invert','len'},
				{30.000-0.050+240/224/16*15,240/224/16*3,'*10000 Invert','len'},
				{30.000-0.050+240/224/16*18,240/224/16*3,'*10000 Flip,*10000 No Invert','len'},
				{30.000-0.050+240/224/16*21,240/224/16*3,'*10000 Flip,*10000 -100% Invert','len'},
				{30.000-0.050+240/224/16*24,240/224/16*3,'*10000 No Flip,*10000 No Invert','len'},
				{30.000-0.050+240/224/16*27,240/224/16*3,'*10000 Invert','len'},
				{30.000-0.050+240/224/16*30,240/224/16*3,'*10000 Flip,*10000 No Invert','len'},
				
				{30.100,240/224/32*3,'*10000 450% Stealth,*10000 Dark','len'},
				{30.100+240/224/16*3,240/224/32*3,'*10000 450% Stealth,*10000 Dark','len'},
				{30.100+240/224/16*6,240/224/32*3,'*10000 450% Stealth,*10000 Dark','len'},
				{30.100+240/224/16*9,240/224/32*3,'*10000 450% Stealth,*10000 Dark','len'},
				{30.100+240/224/16*12,240/224/32*3,'*10000 450% Stealth,*10000 Dark','len'},
				{30.100+240/224/16*15,240/224/32*3,'*10000 450% Stealth,*10000 Dark','len'},
				{30.100+240/224/16*18,240/224/32*3,'*10000 450% Stealth,*10000 Dark','len'},
				{30.100+240/224/16*21,240/224/32*3,'*10000 450% Stealth,*10000 Dark','len'},
				{30.100+240/224/16*24,240/224/32*3,'*10000 450% Stealth,*10000 Dark','len'},
				{30.100+240/224/16*27,240/224/32*3,'*10000 450% Stealth,*10000 Dark','len'},
				{30.100+240/224/16*29.5,240/224/32*3,'*10000 450% Stealth,*10000 Dark','len'},
				
				{32.143-0.050,240/224/16*3,'*10000 No Flip','len'},
				{32.143-0.050+240/224/16*3,240/224/16*3,'*10000 Invert','len'},
				{32.143-0.050+240/224/16*6,240/224/16*3,'*10000 Flip,*10000 No Invert','len'},
				{32.143-0.050+240/224/16*8,240/224/8,'*10000 Flip,*10000 -100% Invert','len'},
				{32.143-0.050+240/224/16*10,240/224/8,'*10000 No Flip,*10000 No Invert,*10000 100.01% Reverse','len'},
				{32.143-0.050+240/224/16*12,240/224/8,'*10000 No Reverse','len'},
				
				{32.243,240/224/32*3,'*10000 450% Stealth,*10000 Dark','len'},
				{32.243+240/224/16*3,240/224/32*3,'*10000 450% Stealth,*10000 Dark','len'},
				{32.243+240/224/32*11,240/224/16,'*10000 450% Stealth,*10000 Dark','len'},
				{32.243+240/224/32*15,240/224/16,'*10000 450% Stealth,*10000 Dark','len'},
				{32.243+240/224/32*19,240/224/16,'*10000 450% Stealth,*10000 Dark','len'},
				
				{32.946-0.050+240/224/16*3,240/224/16*3,'*10000 Invert','len'},
				{32.946-0.050+240/224/16*6,240/224/16*3,'*10000 Flip,*10000 No Invert','len'},
				{32.946-0.050+240/224/16*8,240/224/8,'*10000 Flip,*10000 -100% Invert','len'},
				{32.946-0.050+240/224/16*10,240/224/8,'*10000 No Flip,*10000 No Invert,*10000 100.01% Reverse','len'},
				{32.946-0.050+240/224/16*12,240/224/8,'*10000 No Reverse','len'},
				
				{33.047,240/224/32*3,'*10000 450% Stealth,*10000 Dark','len'},
				{33.047+240/224/16*3,240/224/32*3,'*10000 450% Stealth,*10000 Dark','len'},
				{33.047+240/224/32*11,240/224/16,'*10000 450% Stealth,*10000 Dark','len'},
				{33.047+240/224/32*15,240/224/16,'*10000 450% Stealth,*10000 Dark','len'},
				{33.047+240/224/32*19,240/224/16,'*10000 450% Stealth,*10000 Dark','len'},
				
				{33.750-0.050+240/224/16*3,240/224/16*3,'*10000 Invert','len'},
				{33.750-0.050+240/224/16*6,240/224/16*3,'*10000 Flip,*10000 No Invert','len'},
				{33.750-0.050+240/224/16*8,240/224/8,'*10000 Flip,*10000 -100% Invert','len'},
				{33.750-0.050+240/224/16*10,240/224/8,'*10000 No Flip,*10000 No Invert','len'},
				
				{33.850,240/224/32*3,'*10000 450% Stealth,*10000 Dark','len'},
				{33.850+240/224/16*3,240/224/32*3,'*10000 450% Stealth,*10000 Dark','len'},
				{33.850+240/224/32*11,240/224/16,'*10000 450% Stealth,*10000 Dark','len'},
				{33.850+240/224/32*15,240/224/16,'*10000 450% Stealth,*10000 Dark','len'},
				
				{34.688-0.050,240/224/8,'*10000 Flip,*10000 -100% Invert','len'},
				{34.688-0.050+240/224/8,240/224/8,'*10000 No Flip,*10000 No Invert','len'},
				
				{35.223-0.050,240/224/8,'*10000 Flip,*10000 -100% Invert','len'},
				{35.223-0.050+240/224/8,240/224/8,'*10000 No Flip,*10000 No Invert','len'},
				
				{34.554,240/224/8,'*10000 450% Stealth,*10000 Dark','len'},
				{34.754,240/224/16,'*10000 450% Stealth,*10000 Dark','len'},
				{35.022,240/224/16*3,'*10000 450% Stealth,*10000 Dark','len'},
				{35.290,240/224/16,'*10000 450% Stealth,*10000 Dark','len'},
				{35.491,240/224/8,'*10000 450% Stealth,*10000 Dark','len'},
				
				{35.893,240/224/4,'*10000 -160% SuddenOffset,*10000 -160% HiddenOffset','len',2},
				{35.893,240/224/8,'*10000 -360% SuddenOffset,*10000 40% HiddenOffset','len',1},
				{35.893,48.750,'*3.7334 Mini,*100 -200% Flip,*10 2.5x','end',2},
				{35.893,48.750,'*1.8667 -400% Hidden,*1.8667 -400% Sudden,*11.2 400% Stealth','end',2},
				{35.893,48.884,'*11.2 -300% Mini,*10 0.5x','end',1},
				{35.893,48.884,'*28 400% Hidden,*28 400% Sudden,*14.9334 No Stealth','end',1},
				{36.429,48.750,'*15.1 -160% SuddenOffset,*15.1 -160% HiddenOffset','end',2},
				{36.429,48.884,'*14.1 -360% SuddenOffset,*14.1 40% HiddenOffset','end',1},
				
				{48.750,240/224/4,'*7.4667 No Mini,*14.9334 No Flip,*10 1.5x,*29.8667 No Hidden,*29.8667 No Sudden,*29.8667 No Stealth','len',2},
				{48.884,240/224/4,'*22.4 No Mini,*10 1.5x,*29.8667 No Hidden,*29.8667 No Sudden','len',1},
				
				{49.152,240/224*2,'*3.7334 Hallway','len'},
				{49.152+240/224*2,240/224*2,'*7.4667 Distant','len'},
				{49.152+240/224*4,240/224*2,'*9.3334 150% Hallway','len'},
				{49.152+240/224*6,240/224*2,'*11.2 150% Distant','len'},
				{49.152+240/224*8,240/224*2,'*5.6 No Distant','len'},
				
				{59.196,240/224/2,'*3.7334 Hallway','len'},
				{59.196+240/224/2,240/224/2,'*7.4667 Distant','len'},
				{59.196+240/224/2*2,240/224/2,'*7.4667 Hallway','len'},
				{59.196+240/224/2*3,240/224/2,'*7.4667 Distant','len'},
				{59.196+240/224/2*4,240/224/2,'*7.4667 Hallway','len'},
				{59.196+240/224/2*5,240/224/2,'*7.4667 Distant','len'},
				
				{62.277,240/224/4,'*14.9334 Hallway','len'},
				{62.277+240/224/4,240/224/4,'*14.9334 Distant','len'},
				{62.277+240/224/4*2,240/224/4,'*14.9334 Hallway','len'},
				{62.277+240/224/4*3,240/224/4,'*14.9334 Distant','len'},
				{62.277+240/224/4*4,240/224/4,'*14.9334 Hallway','len'},
				{62.277+240/224/4*5,240/224/4,'*14.9334 Distant','len'},
				{62.277+240/224/4*6,240/224/4,'*14.9334 Hallway','len'},
				{62.277+240/224/4*7,240/224/4,'*7.4667 No Distant','len'},
				
				{65.893,75.469,'*3 200% Distant,*1.5 Mini,*10000 0.1125x,*10000 -1000% Reverse,*10000 95.45% Centered,*24 -1600% Bumpy,*1.5 75% Stealth,*1.5 Drunk, *10000 500 sudden,*10000 -85 suddenoffset','end'},
				{75.469,76.071,'*10000 Stealth,*10000 Dark,Blind','end'},
				
				{75.804,0.2,'*10000 No Distant,*10000 No Mini,*10000 1.5x,*10000 No Reverse,*10000 No Centered,*10000 No Bumpy,*10000 No Drunk, *10000 no sudden','len'},
				{76.071,0.2,'*10000 No Stealth,*10000 No Dark,No Blind','len'},
				
				{77.813,240/224/8,'*7.4667 50% Split,*7.4667 -50% Cross,*7.4667 50% Alternate','len'},
				{77.813+240/224/8,240/224/8,'*7.4667 Split,*7.4667 No Cross,*7.4667 No Alternate','len'},
				{77.813+240/224/8*2,240/224/8,'*7.4667 50% Split,*7.4667 50% Cross,*7.4667 50% Alternate','len'},
				{77.813+240/224/8*3,240/224*5.5,'*14.9334 100.01% Reverse,*7.4667 No Split,*7.4667 No Cross,*7.4667 No Alternate','len'},
				
				{78.884,240/224/8,'*14.9334 Invert','len'},
				{78.884+240/224/8,240/224/8,'*14.9334 Flip,*29.8667 -100% Invert','len'},
				{78.884+240/224/8*2,240/224/8*5,'*14.9334 Flip,*14.9334 No Invert','len'},
				
				{79.821,240/224/2,'*1.8667 No Flip','len'},
				
				{79.821,240/224/4,'*18.6667 -500% Mini','len'},
				{79.821+240/224/4,240/224/4,'*18.6667 No Mini','len'},
				
				{83.973,240/224/4,'*10000 1000% Beat','len'},
				{84.107,240/224/8,'*29.8667 No Tipsy,*14.9334 No Reverse','len'},
				
				{84.107,240/224/2,'*1.8667 100% Stealth,*10000 -120% SuddenOffset,*10000 -120% HiddenOffset,*4 1x','len',1},
				{84.107,240/224/2,'*1.8667 100% Stealth,*10000 160% SuddenOffset,*10000 160% HiddenOffset,*4 1x','len',2},
				
				{84.643,101.250,'*10000 Sudden,*10000 Hidden,*10.4534 -120% SuddenOffset,*10.4534 -120% HiddenOffset,*10000 50% Stealth,1.25x','end',1},
				{84.643,101.250,'*10000 Sudden,*10000 Hidden,*10.4534 160% SuddenOffset,*10.4534 160% HiddenOffset,*10000 50% Stealth,1.25x','end',2},
				
				{86.250,240/224/16,'*10000 -125% Invert','len'},
				{86.250+240/224/16,240/224/16,'*10000 -250% Invert','len'},
				{86.250+240/224/16*2,240/224/16,'*10000 -375% Invert','len'},
				{86.250+240/224/16*3,240/224/16*29,'*10000 -500% Invert','len'},
				
				{88.393,240/224/16,'*10000 -375% Invert','len'},
				{88.393+240/224/16,240/224/16,'*10000 -250% Invert','len'},
				{88.393+240/224/16*2,240/224/16,'*10000 -125% Invert','len'},
				{88.393+240/224/16*3,240/224/16*29,'*10000 No Invert','len'},
				
				{90.536,240/224/16,'*10000 -125% Invert','len'},
				{90.536+240/224/16,240/224/16,'*10000 -250% Invert','len'},
				{90.536+240/224/16*2,240/224/16,'*10000 -375% Invert','len'},
				{90.536+240/224/16*3,240/224/16*61,'*10000 -500% Invert','len'},
				
				{94.821,240/224/16,'*10000 -375% Invert','len'},
				{94.821+240/224/16,240/224/16,'*10000 -250% Invert','len'},
				{94.821+240/224/16*2,240/224/16,'*10000 -125% Invert','len'},
				{94.821+240/224/16*3,240/224/16*29,'*10000 No Invert','len'},
				
				{96.964,240/224/16,'*10000 -125% Invert','len'},
				{96.964+240/224/16,240/224/16,'*10000 -250% Invert','len'},
				{96.964+240/224/16*2,240/224/16,'*10000 -375% Invert','len'},
				{96.964+240/224/16*3,240/224/16*29,'*10000 -500% Invert','len'},
				
				{99.107,240/224/16,'*10000 -375% Invert','len'},
				{99.107+240/224/16,240/224/16,'*10000 -250% Invert','len'},
				{99.107+240/224/16*2,240/224/16,'*10000 -125% Invert','len'},
				{99.107+240/224/16*3,240/224/16*29,'*10000 No Invert','len'},
				
				{101.250,240/224/8*3,'*2.4889 No Sudden,*2.4889 No Hidden,*1.2445 No Stealth,*4 1.5x','len'},
				
				{101.652,110.357,'*10000 0.05x,*10000 C6720,*74.6667 3000% Wave,*2.4889 Drunk,*9.9556 400% Bumpy','end'},
				
				{110.089,240/224/2,'*112 No Wave,*3.7334 No Drunk,*14.9334 No Bumpy','len'},
				{110.089+240/224/4,240/224/8,'*10000 1.5x,*10000 C224','len'},
				
				{109.821,240/224/4*3,'*1.8667 100% Stealth,*10000 -120% SuddenOffset,*10000 -120% HiddenOffset','len'},
				
				{110.357,200,'*10000 Sudden,*10000 Hidden,*10.4534 -120% SuddenOffset,*10.4534 -120% HiddenOffset,*3.7334 Wave,*3.7334 Drunk,*10000 50% Stealth','end'},
				
				}
				
				for i = 9.643,18.213,240/224/2 do
					table.insert(prefix_mods,{i,240/224/4,'*10.4534 160% SuddenOffset,*10.4534 160% HiddenOffset','len'});
				end
				
				for i = 84.643,101.249,240/224/2 do
					table.insert(prefix_mods,{i,240/224/4,'*10.4534 160% SuddenOffset,*10.4534 160% HiddenOffset','len',1});
					table.insert(prefix_mods,{i,240/224/4,'*10.4534 -120% SuddenOffset,*10.4534 -120% HiddenOffset','len',2});
				end
				
				for i = 110.357,118.392,240/224/2 do
					table.insert(prefix_mods,{i,240/224/4,'*10.4534 160% SuddenOffset,*10.4534 160% HiddenOffset','len'});
				end
				
				for i = 36.429,49.749,240/224/2 do
					table.insert(prefix_mods,{i,240/224/4,'*15 2000% SuddenOffset,*15 2000% HiddenOffset','len',2});
					table.insert(prefix_mods,{i,240/224/4,'*14 2000% SuddenOffset,*14 2000% HiddenOffset','len',1});
				end
				
				for i = 80.357,84.106,240/224/4 do
					table.insert(prefix_mods,{i,240/224/8,'*7.4667 Brake','len'});
					table.insert(prefix_mods,{i+240/224/8,240/224/8,'*7.4667 No Brake','len'});
					table.insert(prefix_mods,{i,240/224/16,'*29.8667 200% Drunk','len'});
					table.insert(prefix_mods,{i+240/224/16,240/224/8,'*29.8667 No Drunk','len'});
					table.insert(prefix_mods,{i+240/224/16*2,240/224/16,'*29.8667 -200% Drunk','len'});
					table.insert(prefix_mods,{i+240/224/16*3,240/224/8,'*29.8667 No Drunk','len'});
				end
				
				for i = 82.500,84.106,240/224/4 do
					table.insert(prefix_mods,{i,240/224/16,'*29.8667 200% Tipsy','len'});
					table.insert(prefix_mods,{i+240/224/16,240/224/8,'*29.8667 -200% Tipsy','len'});
				end
				
				for i = 101.786,109.820,240/224/2 do
					table.insert(prefix_mods,{i,240/224/4,'*1.8667 50% Stealth','len'});
					table.insert(prefix_mods,{i+240/224/4,240/224/4,'*1.8667 No Stealth','len'});
				end
				
				prefix_plr = {};
				
				self:queuecommand('Update');
			end"
		
		UpdateCommand="%function(self)
		
			local beat = GAMESTATE:GetSongBeat();
			
			-----------------------
			-- Player mod resets --
			-----------------------
			GAMESTATE:ApplyGameCommand('mod,clearall')
			
			--------------------------------------------------------------------------------------------
			-- Mod reader code originally coded by Taronuke, remade to support end times and lengths. --
			--------------------------------------------------------------------------------------------
			for i,v in pairs(prefix_mods) do
				if prefix_time >=v[1] then
					if (v[4] == 'len' and prefix_time <=v[1]+v[2]) or (v[4] == 'end' and prefix_time <=v[2]) then
						if table.getn(v) == 5 then
							GAMESTATE:ApplyGameCommand('mod,'..v[3],v[5]);
						else
							GAMESTATE:ApplyGameCommand('mod,'..v[3]);
						end
					end
				end
			end
			
			
			
			if beat >= 0 and not checked then
				
				table.insert(prefix_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP1'));
				table.insert(prefix_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP2'));
				checked = true;
				
				SCREENMAN:GetTopScreen():GetChild('Overlay'):hidden(1);
				SCREENMAN:GetTopScreen():GetChild('Underlay'):hidden(1);
				for i,v in pairs(prefix_plr) do
					if v then
						SCREENMAN:GetTopScreen():GetChild('ScoreP'..i):hidden(1);
						SCREENMAN:GetTopScreen():GetChild('LifeP'..i):hidden(1);
						local d = SCREEN_CENTER_X-160
						if i == 2 then d = SCREEN_CENTER_X+160 end
						v:x(d);
					end
				end
			end
			
			if beat >= 13 and fgcurcommand == 1 or beat >= 29 and fgcurcommand == 3 or beat >= 293 and fgcurcommand == 12 then
				for i,v in pairs(prefix_plr) do
					local multi = -1; if i == 2 then multi = 1; end
					if v then
						v:linear(240/224/16);
						v:skewx(0.5);
						v:linear(240/224/16);
						v:skewx(-0.5);
						v:linear(240/224/16);
						v:skewx(0);
					end
				end
				fgcurcommand = fgcurcommand + 1;
			end
			
			if beat >= 16.5 and fgcurcommand == 2 or beat >= 30.5 and fgcurcommand == 4 or beat >= 296.5 and fgcurcommand == 13 then
				for i,v in pairs(prefix_plr) do
					local multi = -1; if i == 2 then multi = 1; end
					if v then
						v:decelerate(240/224/8);
						v:zoomx(1.5);
						v:zoomy(0.75);
						v:decelerate(240/224/8);
						v:zoomx(0.75);
						v:zoomy(1.5);
						v:decelerate(240/224/8);
						v:zoomx(1);
						v:zoomy(1);
					end
				end
				fgcurcommand = fgcurcommand + 1;
			end
			
			if beat >= 134 and fgcurcommand == 5 then
				for i,v in pairs(prefix_plr) do
					local multi = -1; if i == 2 then multi = 1; end
					if v then
						v:spring(240/224/4);
						v:x(SCREEN_CENTER_X);
						v:GetChild('Judgment'):x(multi*160);
						v:GetChild('Combo'):x(multi*160);
					end
				end
				fgcurcommand = fgcurcommand + 1;
			end
			
			if beat >= 183.5 and fgcurcommand == 6 then
				for i,v in pairs(prefix_plr) do
					local multi = -1; if i == 2 then multi = 1; end
					if v then
						v:spring(240/224/4);
						v:x(SCREEN_CENTER_X+160*multi);
						v:GetChild('Judgment'):x(0);
						v:GetChild('Combo'):x(0);
					end
				end
				fgcurcommand = fgcurcommand + 1;
			end
			
			if beat >= 190 and fgcurcommand == 7 or beat >= 198 and fgcurcommand == 8 or beat >= 206 and fgcurcommand == 9 or beat >= 214 and fgcurcommand == 10 then
				for i,v in pairs(prefix_plr) do
					local multi = -1; if i == 2 then multi = 1; end
					if v then
						v:linear(240/224/16);
						v:x(SCREEN_CENTER_X+80*multi);
						v:sleep(240/224/16);
						v:linear(240/224/16);
						v:x(SCREEN_CENTER_X);
						v:sleep(240/224/16*3);
						v:spring(240/224/4);
						v:x(SCREEN_CENTER_X+160*multi);
					end
				end
				fgcurcommand = fgcurcommand + 1;
			end
			
			if beat >= 281.75 and fgcurcommand == 11 then
				SCREENMAN:GetTopScreen():zoom(0);
				SCREENMAN:GetTopScreen():sleep(240/224/16*9);
				SCREENMAN:GetTopScreen():zoom(1);
				fgcurcommand = fgcurcommand + 1;
			end
			
			if beat >= 442 and fgcurcommand == 14 then
				SCREENMAN:GetTopScreen():decelerate(240/224/2);
				SCREENMAN:GetTopScreen():x(-SCREEN_CENTER_X);
				SCREENMAN:GetTopScreen():y(SCREEN_CENTER_Y);
				SCREENMAN:GetTopScreen():zoomx(2);
				SCREENMAN:GetTopScreen():zoomy(0);
				fgcurcommand = fgcurcommand + 1;
			end
			
			-------------------------
			-- BEAT SPECIFIC STUFF --
			-------------------------
			if beat >= 4 and beat < 32 then
				for i,v in pairs(prefix_plr) do
					if v then
						v:vibrate();
						v:effectmagnitude(auxvar:getaux(),auxvar:getaux(),0);
					end
				end
			end
			
			if beat >= 33 and beat < 37 then
				for i,v in pairs(prefix_plr) do
					if v then
						v:vibrate();
						v:effectmagnitude(auxvar:getaux(),0,0);
					end
				end
			end
			
			if beat >= 183.5 and beat < 220 then
				for i,v in pairs(prefix_plr) do
					if v then
						v:vibrate();
						v:effectmagnitude(auxvar:getaux(),auxvar:getaux(),0);
					end
				end
			end
			
			if beat >= 220 and beat < 232 then
				for i,v in pairs(prefix_plr) do
					if v then
						if math.mod(beat,2) >= 1 then
							v:vibrate();
							v:effectmagnitude(67,67,0);
						else
							v:vibrate();
							v:effectmagnitude(33,33,0);
						end
					end
				end
			end
			
			if beat >= 232 and beat < 240 then
				for i,v in pairs(prefix_plr) do
					if v then
						if math.mod(beat,1) >= 0.5 then
							v:vibrate();
							v:effectmagnitude(67,67,0);
						else
							v:vibrate();
							v:effectmagnitude(33,33,0);
						end
					end
				end
			end
			
			if beat >= 240 and beat < 244 then
				for i,v in pairs(prefix_plr) do
					if v then
						if math.mod(beat,0.5) >= 0.25 then
							v:vibrate();
							v:effectmagnitude(67,67,0);
						else
							v:vibrate();
							v:effectmagnitude(33,33,0);
						end
					end
				end
			end
			
			if beat >= 244 and beat < 246 then
				for i,v in pairs(prefix_plr) do
					if v then
						v:vibrate();
						v:effectmagnitude(75,75,0);
					end
				end
			end
			
			if beat >= 246 and beat < 248 then
				for i,v in pairs(prefix_plr) do
					if v then
						v:vibrate();
						v:effectmagnitude(0,0,0);
					end
				end
			end
			
			if beat >= 284 and beat < 312 then
				for i,v in pairs(prefix_plr) do
					if v then
						v:vibrate();
						v:effectmagnitude(auxvar:getaux(),auxvar:getaux(),0);
					end
				end
			end
			
			if beat >= 428 and beat < 436 then
				for i,v in pairs(prefix_plr) do
					if v then
						v:vibrate();
						v:effectmagnitude(15,15,0);
					end
				end
			end
			
			if beat >= 436 and beat < 440 then
				for i,v in pairs(prefix_plr) do
					if v then
						v:vibrate();
						v:effectmagnitude(30,30,0);
					end
				end
			end
			
			if beat >= 440 and beat < 442 then
				SCREENMAN:GetTopScreen():vibrate();
				SCREENMAN:GetTopScreen():effectmagnitude(45,45,0);
				for i,v in pairs(prefix_plr) do
					if v then
						v:vibrate();
						v:effectmagnitude(0,0,0);
					end
				end
			end
			
			if beat >= 442 and beat < 443 then
				SCREENMAN:GetTopScreen():vibrate();
				SCREENMAN:GetTopScreen():effectmagnitude(0,0,0);
			end
			
			--------------------------------------------------------------
			-- Message reader to make specific values of the actor aux. --
			--------------------------------------------------------------
			if prefix_curmessage <= table.getn(prefix_messages) then
				if prefix_time >= prefix_messages[prefix_curmessage][1] then
					MESSAGEMAN:Broadcast(prefix_messages[prefix_curmessage][2]);
					prefix_curmessage = prefix_curmessage + 1;
				end
			end
			
			self:queuecommand('Update2');
			
		end"


		Update2Command="%function(self)
		self:sleep(0.02);
		self:queuecommand('Update');
		end"

	/>
	
	<BitmapText
		Font="Common Normal"
		Text="test"
		OnCommand="x,SCREEN_CENTER_X;y,SCREEN_CENTER_Y;effectclock,music;playcommand,SetTime;hidden,1"
		SetTimeCommand="%function(self) self:settext(self:GetSecsIntoEffect()); prefix_time = PREFSMAN:GetPreference('GlobalOffsetSeconds') - (0.012 - 0.045) + tonumber(self:GetText()); self:sleep(0.02); self:queuecommand('SetTime'); end"
	/>
	
	<!-- Aux actor, VERY IMPORTANT -->
	<Layer
		Type="Quad"
		OnCommand=""
		InitCommand="%function(self) auxvar = self; self:hidden(1) end"
		VibLongMessageCommand="finishtweening;aux,0;linear,240/224/4*3;aux,15;sleep,0;aux,0"
		VibChipMessageCommand="finishtweening;aux,10;sleep,240/224/4;aux,20;sleep,240/224/4;aux,30;sleep,240/224/4;aux,0"
		VibChargeMessageCommand="finishtweening;aux,0;linear,240/224/8*11;aux,67;sleep,0;aux,0"
		VibChargeLongStartMessageCommand="finishtweening;aux,0;linear,240/224/8*7;aux,35;sleep,0;aux,0"
		ChipInMessageCommand="%function()
			for i,v in pairs(prefix_plr) do
				local multi = -1; if i == 2 then multi = 1; end
				if v then
					v:x(SCREEN_CENTER_X+multi*200);
					v:GetChild('Judgment'):x(multi*-40);
					v:GetChild('Combo'):x(multi*-40);
					v:sleep(240/224/16);
					v:GetChild('Judgment'):sleep(240/224/16);
					v:GetChild('Combo'):sleep(240/224/16);
					v:x(SCREEN_CENTER_X+multi*240);
					v:GetChild('Judgment'):x(multi*-80);
					v:GetChild('Combo'):x(multi*-80);
					v:sleep(240/224/16);
					v:GetChild('Judgment'):sleep(240/224/16);
					v:GetChild('Combo'):sleep(240/224/16);
					v:x(SCREEN_CENTER_X+multi*280);
					v:GetChild('Judgment'):x(multi*-120);
					v:GetChild('Combo'):x(multi*-120);
					v:sleep(240/224/16);
					v:GetChild('Judgment'):sleep(240/224/16);
					v:GetChild('Combo'):sleep(240/224/16);
					v:x(SCREEN_CENTER_X+multi*320);
					v:GetChild('Judgment'):x(multi*-160);
					v:GetChild('Combo'):x(multi*-160);
				end
			end
		end"
		ChipOutMessageCommand="%function()
			for i,v in pairs(prefix_plr) do
				local multi = -1; if i == 2 then multi = 1; end
				if v then
					v:x(SCREEN_CENTER_X+multi*280);
					v:GetChild('Judgment'):x(multi*-120);
					v:GetChild('Combo'):x(multi*-120);
					v:sleep(240/224/16);
					v:GetChild('Judgment'):sleep(240/224/16);
					v:GetChild('Combo'):sleep(240/224/16);
					v:x(SCREEN_CENTER_X+multi*240);
					v:GetChild('Judgment'):x(multi*-80);
					v:GetChild('Combo'):x(multi*-80);
					v:sleep(240/224/16);
					v:GetChild('Judgment'):sleep(240/224/16);
					v:GetChild('Combo'):sleep(240/224/16);
					v:x(SCREEN_CENTER_X+multi*200);
					v:GetChild('Judgment'):x(multi*-40);
					v:GetChild('Combo'):x(multi*-40);
					v:sleep(240/224/16);
					v:GetChild('Judgment'):sleep(240/224/16);
					v:GetChild('Combo'):sleep(240/224/16);
					v:x(SCREEN_CENTER_X+multi*160);
					v:GetChild('Judgment'):x(0);
					v:GetChild('Combo'):x(0);
				end
			end
		end"
	/>
	
	<Layer
		File="whiteflash"
		OnCommand="%function(self)
		self:stretchto(0,0,SCREEN_WIDTH,SCREEN_HEIGHT);
		self:diffusealpha(0); end"
		FlashMessageCommand="%function(self)
		self:diffusealpha(1);
		self:sleep(0.05);
		self:linear(240/224/2-0.05);
		self:diffusealpha(0); end"
	/>
	
</children></ActorFrame>