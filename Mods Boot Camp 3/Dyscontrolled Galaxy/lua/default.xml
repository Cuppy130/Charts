<ActorFrame
InitCommand="%function(self)

	songName = GAMESTATE:GetCurrentSong():GetSongDir();
	
	mod_globaloffset = PREFSMAN:GetPreference('GlobalOffsetSeconds');
	
	sw = SCREEN_WIDTH
	sh = SCREEN_HEIGHT --shortcuts
	
	function Plr(pn)
		return _G['P'..pn]
	end
	function GetJud(pn)
		return _G['jud'..pn]
	end
	function GetCom(pn)
		return _G['com'..pn]
	end
	
	function mod_do(str,pn)
		if pn then
			GAMESTATE:ApplyGameCommand('mod,'..str,pn)
		else
			GAMESTATE:ApplyGameCommand('mod,'..str)
		end
	end
	
	function taro_Sound(str)
		local met = GAMESTATE:GetCurrentSong():GetSongDir();
		SOUND:PlayOnce(met..'lua/'..str..'.ogg');
	end
	
	function dys_other(pn)
		if pn == 1 then return 2 end
		if pn == 2 then return 1 end
		return 0
	end
	
	function math.clamp(val,min,max)
		if val > max then return max end
		if val < min then return min end
		return val
	end
	
end"
><children>

	<Layer
		Type="Quad"
		InitCommand="hidden,1"
		OnCommand="sleep,1000"
	/>
	
	<Layer File="modhelpers.xml" />
	<Layer File="easing.xml" />
	
	<Layer File="spellcard.xml" />
	<Layer File="../dys_hits1.xml" />
	<Layer File="../crossing.xml" />
	<Layer File="../crossing2.xml" />
	
	<Layer
		Type="Quad"
		OnCommand="hidden,1"
		InitCommand="%function(self)
		
			slumpo = false
			for pn=1,2 do
				if GAMESTATE:IsPlayerEnabled(pn-1) then
					if GAMESTATE:GetCurrentSteps(pn-1):GetDifficulty() == 5 then
						slumpo = true
					end
				end
			end
		
			checked = false; P1=nil;P2=nil;P3=nil;P4=nil;jud1=nil;com1=nil;jud2=nil;com2=nil;jud3=nil;com3=nil;
		
			---------------------------------------------------------
			---------DOCUMENTATION-----------------------------------
			---------------------------------------------------------
			
			--function perframe( beat, endBeat )
				--return true if the current beat is between 'beat' and 'endBeat'
			
			--function mod_shader(beat,key,which)
				--turn on shader key at specified beat (up to 10 keys available, defined by 'which' = 0-9
				
			--function mod_insert(beat,len,mod,len_or_end,pn)
				--insert mod into beat mods table
			--function mod_insert2(time,len,mod,len_or_end,pn)
				--insert mod into time mods table
				
			--function mod_message(beat,msg,persistent)
				--insert something into the actions table.
				--msg can also be a function. If string, a message gets broadcast at that beat
				--if 'persistent' is true, message will run even if editor starts at a beat past it
				
			--function mod_blacklist(t,n)
				--check if number n occurs in table t
				--useful for doing 'every beat EXCEPT the contents of t'
				
			--function simple_m0d(beat,strength,mult,mod)
			--function simple_m0d2(beat,strength,mult,mod,pn)
			--function simple_m0d3(beat,strength,duration,bpm,mod,pn)
				--activate mods at specific beat but also deactivate them
				
			--function mod_wiggle(beat,num,div,amt,speed,mod,pn,first)
				--alternates a mod back and forth before resetting to 0
				
			--function mod_springt(time,strength,dur,mod,pn)
				--time-based per-frame alternating mod that decreases based on how much time is left.
					--think doorstopper
			
			--function mod_springt2(time,strength,dur,mod,pn)
				--time-based per-frame alternating mod
			
			--function mod_onebeat(beat,strength,pn)
				--turns on beat for the beat specified, at the desired strength	
			
			--function switcheroo_add(beat,which,speed,len,pn)
				--adds a column swap at the desired beat
			--[[	switcheroos = {normal = {0,0}, ldur = {0,0}, reset = {0,0},
					flip = {100,0}, rudl = {100,0}, invert = {0,100}, dlru = {0,100},
					ludr = {25,-75}, rdul = {75,75}, drlu = {25,125}, ulrd = {75,-125}, urld = {100,-100}}
			]]
			
			--use a variable called 'switcheroo_width' to change how much space is between each column
			--e.g. switcheroo_width = 2 for ayakashi
			
			--function mod_sugarkiller(beat,duration,speed,minstealth,maxstealth,pn)
				--portable version of the effect from sugarkill X
				
			--function doSpline(spd, axis, path, col)
				--draws spline 'path' in specified axis, for specific col. Offsets are *10000, but positions use *spd
				
			--function doSplineAll(spd, axis, path)
				--same as above, but for all columns
				--(faster performance than using doSpline 4 times due to more efficient concat)
			
			--function mindf_rotateAndCounter(xDegrees, yDegrees, zDegrees, player)
				--counteract euler rotations after rotating player in multiple axes, using a TON of math.
			
			
			---------------------------------------------------------
			--------END DOCUMENTATION--------------------------------
			---------------------------------------------------------
			
			local m = mod_insert
			local mt = mod2_insert
			local m2 = mod_message
			local me = mod_ease
			
			
			local l = 'len'
			local e = 'end'
			
			
			
			
			
			
			
			init_modsp1 = '';
			init_modsp2 = '';
			
			mod_plr = {};
			
			mod_firstSeenBeat = GAMESTATE:GetSongBeat(); --necessary to prevent long freezes
			
			
			
			
			
			
			
			
			
			
			
---------------------------------------------------------------------------------------
----------------------Begin tables 'n stuff--------------------------------------------
---------------------------------------------------------------------------------------

			--beat based mods
			--{beat_start, beat_end, mods, len_or_end, player_number}
			mods = {
				{0,9999,'*2 2x, *1000 no beat, *1000 -999999 cover','end'},
			}
			
			--switcheroos = {{0,0},{100,0},{0,100},{25,-75},{75,75},{25,125},{75,-125},{100,-100}}
			
			
			
			
			
			
			
			--time based mods
			mod_time = 0;
			--{time_start, time_end, mods, len_or_end, player_number}
			mods2 = {
				--{0,200.345,'3x','end',1},
			}
			
			
			
			
			--this is both a message broadcaster and a function runner
			--if you put {beat,'String'}, then 'String' is broadcast as a message on that beat
			--if you put {beat,function() somecode end}, then function() is run at that beat
			--see example on beat 32
			
			curaction = 1;
			--{beat,thing,persists}
			mod_actions = {
			
			
				
			}
			
			
			
			
			
			
			--beat-based ease mods
			--{time_start, time_end, mod_start, mod_end, mod, len_or_end, ease_type, player_number, sustaintime, optional_param1, optional_param2}
			--valid ease types are:
				--linear
				--inQuad    outQuad    inOutQuad    outInQuad
				--inCubic   outCubic   inOutCubic   outInCubic
				--inQuart   outQuart   inOutQuart   outInQuart
				--inQuint   outQuint   inOutQuint   outInQuint
				--inSine    outSine    inOutSine    outInSine
				--inExpo    outExpo    inOutExpo    outInExpo
				--inCirc    outCirc    inOutCirc    outInCirc
				--inElastic outElastic inOutElastic outInElastic    --can take 2 optional parameters - amplitude & period
				--inBack    outBack    inOutBack    outInBack       --can take 1 optional parameter  - spring amount
				--inBounce  outBounce  inOutBounce  outInBounce
				
			mods_ease = {
				-- EXAMPLE TWEEN: from beat 0 to 4, make rotationz go from 360 to 0 with the inOutBack tween
				--{0,4,360,0,'rotationz','end',inOutBack},
			}
			
			
			m2(0,function()
				screen:zoom(0)
				screen:x(sw/2)
				screen:y(sh/2)
				screen:rotationz(45)
				
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:x(sw/2 + 160*(pn*2-3))
					end
				end
				
			end)
			
			m2(0,function()
				for pn=1,2 do
					
					local a = GetJud(pn)
					if a then
						a:bob()
						a:effectperiod(100000)
						a:effectoffset(25000)
						a:effectmagnitude(0,0,0)
					end
					local a = GetCom(pn)
					if a then
						a:bob()
						a:effectperiod(100000)
						a:effectoffset(25000)
						a:effectmagnitude(0,0,0)
					end
					
				end
			end,true)
			
			m2(3.5,function()
				screen:accelerate(30/161)
				screen:zoom(1)
				screen:x(0)
				screen:y(0)
				screen:rotationz(0)
			end)
			
			m(9.5,24.5,'*10000 reverse',e)
			m(8.5,1,'*16 reverse, *8 -50 split, *8 -50 cross, *8 -50 alternate',l)
			m(8.75,1,'*16 reverse, *8 -100 split, *8 0 cross, *8 0 alternate',l)
			m(9.0,1,'*16 reverse, *8 -50 split, *8 50 cross, *8 -50 alternate',l)
			m(9.25,1,'*16 reverse, *8 0 split, *8 0 cross, *8 0 alternate',l)
			
			m(24.5,1,'*16 no reverse, *8 50 split, *8 50 cross, *8 50 alternate',l)
			m(24.75,1,'*16 no reverse, *8 100 split, *8 0 cross, *8 0 alternate',l)
			m(25.0,1,'*16 no reverse, *8 50 split, *8 -50 cross, *8 50 alternate',l)
			m(25.25,1,'*16 no reverse, *8 0 split, *8 0 cross, *8 0 alternate',l)
			
			
			m2(10,function()
				screen:decelerate(105/161)
				screen:zoom(0.1)
				screen:x(0.9*sw/2)
				screen:y(0.9*sh/2)
				screen:rotationz(-45)
			end)
			
			m2(11.75,function()
				screen:accelerate(15/161)
				screen:zoom(1)
				screen:x(0)
				screen:y(0)
				screen:rotationz(0)
			end)
			
			m(14,3,'*1 1x',l)
			
			m(16.5,3.25,'*50 1000 dizzy, *1 1x, *6 600 drunk, *3 300 tipsy, *1 stealth, *1 dark',l)
			m(19.75,1,'*1000 no dizzy, *1000 2x, *1000 no drunk, *1000 no tipsy, *1000 no stealth, *1000 no dark',l)
			
			m2(16.5,function()
			
				dys_bg:linear(120/161)
				dys_bg:diffuse(0,0,0,1)
				dys_bg:sleep(75/161)
				dys_bg:diffuse(.5,.5,.5,1)
			
				screen:sleep(195/161)
				screen:zoom(0)
				screen:x(0.9*sw/2)
				screen:y(0.9*sh/2)
				screen:rotationz(45)
				
			end)
			
			m2(19.75,function()
				screen:accelerate(15/161)
				screen:zoom(1)
				screen:x(0)
				screen:y(0)
				screen:rotationz(0)
			end)
			
			m2(26,function()
				screen:decelerate(105/161)
				screen:zoom(0.1)
				screen:x(0.9*sw/2)
				screen:y(0.9*sh/2)
				screen:rotationz(-45)
			end)
			
			m2(27.75,function()
				screen:accelerate(15/161)
				screen:zoom(1)
				screen:x(0)
				screen:y(0)
				screen:rotationz(0)
			end)
			
			m2(4,'Bang')
			m2(12,'Bang')
			m2(20,'Bang')
			m2(28,'Bang')
			
			local fl = 1
			for i=0,2 do
				--simple_m0d(7.5+8*i,80,.4,'drunk');
				simple_m0d2(7.5-.1+8*i,-100,.5,'mini');
				simple_m0d2(7.5-.1+8*i,80,.5,'brake');
				m(7.5+8*i-.1,4.5,'*10 invert',l)
				m(12+8*i-.1,1,'*10 no invert',l)
				fl = fl*-1
			end
			
			m(31.5-.1,1,'*10 invert',l)
			m(32.5-.1,1,'*10 no invert',l)
			
			me(31.5,32.5,2,1.3,'xmod',e,linear,nil,34.5)
			
			m(33.5,1,'*4 stealth, *4 dark',l)
			
			m(34.5,44,'*4 no stealth, *4 no dark, *10000 0.4x, *10000 50 centered, *10000 150 bumpy, *10000 5000 sudden, *10000 -69 suddenoffset',e);
			m(34.5,44,'*10000 -400 reverse, *10000 26 flip, *10000 -24 invert, *100000 -3557 split, *10000 57 alternate',e,1);
			m(34.5,44,'*100000 -3900 reverse, *10000 26 flip, *10000 -24 invert, *100000 3443 split, *10000 57 alternate',e,2);
			
			me(43,1,-400,0,'reverse',l,linear)
			me(43,1,26,0,'flip',l,linear)
			me(43,1,-24,0,'invert',l,linear)
			me(43,1,-57,0,'split',l,linear)
			me(43,1,57,0,'alternate',l,linear)
			me(43,1,50,100,'centered',l,linear)
			me(43,1,0,150,'mini',l,linear)
			me(43,1,5000,800,'sudden',l,linear)
			me(43,1,0.4,0.14,'xmod',l,linear)
			me(43,1,100,2000,'bumpy',l,inQuad)
			me(43,1,-68,-97,'suddenoffset',l,linear)
			
			m(44,1,'*1000000 no reverse, *1000000 no split, *10000 no invert, *10000 no alternate, *10000 no flip',l);
			
			m2(33.5,'PadOn');
			m2(43,'PadOff');
			
			m2(34.5,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:x(sw/2 + 5 + 100*(pn*2-3))
						a:rotationx(-23.25)
						a:y(sh/2+415);
						a:z(335);
						a:zoomz(2);
						a:skewx(0.2*(pn*2-3))
						--a:y(sh/2 - 64)
					end
					
					local a = GetJud(pn)
					if a then
						a:x(180*(pn*2-3))
					end
					local a = GetCom(pn)
					if a then
						a:x(180*(pn*2-3))
					end
					
				end
				
				dys_judy:x(-415)
				
			end)
			
			m2(43,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:linear(60/161)
						a:x(sw/2)
						a:rotationx(0)
						a:skewx(0)
						a:zoomz(1)
						a:z(0)
						a:y(sh/2)
					end
					
				end
				
				dys_judy:linear(60/161)
				dys_judy:x(0)
				
			end)
			
			
			
			if FUCK_EXE then
				m(34,52,'*1000 -90 drawsizeback',e)
			end
			m(44,51,'*10000 150 mini,*10000 2000 bumpy,*10000 -97 suddenoffset,*10000 0.14x,*10000 centered,*10000 25 flip,*10000 800 sudden',e)
			
			m2(51,function()
				for pn=1,2 do
				
					local a = GetJud(pn)
					if a then
						a:linear(60/161)
						a:x(0)
					end
					local a = GetCom(pn)
					if a then
						a:linear(60/161)
						a:x(0)
					end
					
				end
				
				dys_judy:linear(60/161)
				dys_judy:x(240)
				
			end)
			
			me(51,1,2000,0,'bumpy',l,outQuad)
			me(51,1,100,0,'sudden',l,linear)
			me(51,52,150,100,'mini',e,linear,nil,64)
			me(51,52,100,140,'centered',e,linear,nil,64)
			me(51,1,0.14,2,'xmod',l,linear)
			me(51,1,25,0,'flip',l,linear)
			
			me(60,4,100,200,'mini',l,inQuad)
			
			m(64,1,'*1000 no centered')
			
			m2(64,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:x(sw/2)
						a:y(sh/2)
						a:zoom(1)
						a:rotationz(0)
					end
					
					local a = GetJud(pn)
					if a then
						a:x(180*(pn*2-3))
					end
					local a = GetCom(pn)
					if a then
						a:x(180*(pn*2-3))
					end
				end
				
				dys_judy:x(0)
			end)
			
			me(64,4,200,0,'mini',l,outQuad)
			
			m2(72-.1,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:x(sw/2)
						--a:y(sh/2 - 64)
					end
					
					local a = GetJud(pn)
					if a then
						a:x(180*(pn*2-3))
					end
					local a = GetCom(pn)
					if a then
						a:x(180*(pn*2-3))
					end
					
				end
				
				dys_hidsud:x(-20);
				
			end,true)
			
			if FUCK_EXE then
				m(0,999,'stealthpastreceptors',e)
			end
			
			m(72,97,'*1000 50 mini, *10 no centered',e)
			
			--m(71.5,95.5,'*1000 200 beat',e)
			
			m(72,96,'*1000 1000 hidden, *1000 1000 sudden',e,1)
			m(72,96,'*1000 -1000 hidden, *1000 -1000 sudden, *1000 1000 stealth',e,2)
			
			m(73-.1,89,'*10 invert',e,1)
			m(89-.1,96,'*10 flip',e,1)
			
			m(72,96,'*1000 dark',e,1)
			m(72,96,'*1000 no dark',e,2)
			
			for i=0,5 do
				m(73+4*i,3,'*1.91 300 centered',l)
				
				m(76+4*i-.1,1,'*10 no invert, *10 no flip',l,1)
				
				m(74+4*i,1,'*10000 no dark',l,1)
				m(74+4*i,1,'*10000 dark',l,2)
				
				if i ~= 3 then
					m2(73+4*i,function()
						dys_hidsud:linear(180/161)
						dys_hidsud:x(-203)
						dys_hidsud:sleep(0/161)
						dys_hidsud:x(-20)
					end)
				end
				
				local fluct = 1
				
				--[[
				for j=0,3 do
					--simple_m0d(72+4*i+j,500*fluct,.2,'drunk');
					--simple_m0d(72+4*i+j,-500*fluct,.2,'dizzy');
					me(72+4*i+j,1,500*fluct,0,'drunk',l,outQuad);
					me(72+4*i+j,1,-500*fluct,0,'dizzy',l,outQuad);
					fluct = fluct*-1
				end
				]]
				
				if i<4 then
				me(72+4*i,1,800*fluct,0,'drunk',l,linear);
				me(72+4*i,1,-300*fluct,0,'dizzy',l,linear,1);
				me(72+4*i,1,300*fluct,0,'dizzy',l,linear,2);
				end
				
			end
			
			m2(72-.1,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:linear(.1)
						a:z(0)
						a:rotationy(0)
						a:zoom(1)
						a:zoomz(1)
						a:rotationx(-30)
						a:sleep(60/161-.1)
						a:linear(180/161)
						a:rotationx(50)
					end
				end
			end)
			
			mod_wiggle(73,12,4,150,2,'drunk',1)
			mod_wiggle(73,12,4,-150,2,'drunk',2)
			
			m2(76-.1,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:linear(.1)
						a:rotationx(-30)
						a:sleep(60/161-.1)
						a:linear(60/161)
						a:rotationx(0)
						a:linear(30/161)
						a:zoom(0)
						a:sleep(0)
						a:rotationx(50)
						a:linear(30/161)
						a:zoom(1)
						a:spring(60/161)
						a:rotationx(-30)
					end
				end
			end)
			
			m(78.5,1.5,'*1000 no centered',l)
			m(78.5,1.5,'*1000 flip',l,2)
			m(80-.1,1.5,'*10 no flip',l,2)
			
			mod_wiggle(77,4,4,150,2,'drunk',1)
			mod_wiggle(77,4,4,-150,2,'drunk',2)
			
			m2(80-.1,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:linear(.1)
						a:rotationx(-30)
						a:sleep(60/161-.1)
						a:linear(180/161)
						a:rotationx(50)
					end
				end
			end)
			
			mod_wiggle(81,12,4,150,2,'drunk',1)
			mod_wiggle(81,12,4,-150,2,'drunk',2)
			
			m(84,4,'*10 no centered',l)
			m(84,4,'*10 no flip, *10 no invert',l)
			
			m2(84-.1,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:linear(.1)
						a:rotationx(0)
					end
				end
			end)
			
			mod_wiggle(85,4,4,150,2,'drunk')
			
			me(86,.75,0,200,'tornado',l,outExpo)
			me(86.75,.75,200,-200,'tornado',l,outExpo)
			me(87.5,.75,-200,0,'tornado',l,outExpo)
			
			me(86,.75,0,300,'dizzy',l,outExpo)
			me(86.75,.75,300,-300,'dizzy',l,outExpo)
			me(87.5,.75,-300,0,'dizzy',l,outExpo)
			
			m2(86-.1,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:decelerate(45/161)
						a:rotationz(40)
						a:rotationy(40)
						a:rotationx(0)
						a:zoom(1.2)
						a:decelerate(45/161)
						a:rotationz(0)
						a:rotationy(30)
						a:rotationx(-30)
						a:zoom(0.9)
						a:decelerate(30/161)
						a:rotationz(0)
						a:rotationy(0)
						a:rotationx(0)
						a:zoom(1)
					end
				end
			end)
			
			m2(88-.1,function()
				dys_hidsud:x(48)
				dys_hidsud:linear(66/161)
				dys_hidsud:x(-20)
			end)
			
			m2(88-.1,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:decelerate(15/161)
						a:addx(40*(pn*2-3))
						a:rotationx(-15)
						a:sleep(15/161)
						a:decelerate(15/161)
						a:addx(40*(pn*2-3))
						a:rotationx(-30)
					end
				end
				
			end)
			
			mod_wiggle(89,12,4,150,2,'drunk',1)
			mod_wiggle(89,12,4,-150,2,'drunk',2)
			
			m2(89-.1,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:rotationx(-30)
						a:linear(180/161)
						a:rotationx(50)
					end
				end
			end)
			
			m2(92,'Black');
			
			mod_wiggle(93,12,4,150,2,'drunk',1)
			mod_wiggle(93,12,4,-150,2,'drunk',2)
			
			m2(93,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:rotationx(-30)
						a:linear(60/161)
						a:rotationx(0)
						a:linear(30/161)
						a:zoom(0)
						a:sleep(0)
						a:x(sw/2)
						a:rotationx(50)
						a:linear(30/161)
						a:zoom(1)
						a:spring(60/161)
						a:rotationx(0)
						a:z(-500)
					end
				end
			end)
			
			m(94.5,2,'*1000 no flip',l)
			m(94.5,2,'*1000 no centered',l)
			
			m(96,1,'*1000 no stealth, *1000 no hidden, *1000 no sudden',l);
			
			--[[
			me(88,.5,200,100,'centered',l,outQuart)
			me(88.5,.5,100,0,'centered',l,outQuart)
			]]
			
			function dys_zjump(pn,land,dur,reset)
				
				local v = Plr(pn)
				if v then
					
					v:decelerate(240/161/16*dur);
					v:z(math.random(0,250));
					v:rotationz(math.random(0,30) * (pn*2-3) );
					if not reset then
						v:x(sw/2 + math.random(0,120)*(pn*2-3));
					else
						v:x(sw/2)
					end
					
					if land then
						v:accelerate(240/161/16*dur);
						v:z(-900);
						v:rotationz(0);
						v:x(SCREEN_CENTER_X);
					end
					
				end
				
			end
			
			m2(96,function()
				dys_zjump(1,true,3)
			end)
			m2(96.75,function()
				dys_zjump(2,true,3)
			end)
			m2(98,function()
				dys_zjump(1,true,3)
			end)
			m2(98.75,function()
				dys_zjump(2,true,3)
			end)
			
			mod_wiggle(97.25-.1,3,4,300,1.5,'drunk')
			mod_wiggle(99.25-.1,3,4,300,1.5,'drunk')
			
			m2(100,function() dys_zjump(1,false,2) end)
			m2(100.5,function() dys_zjump(2,false,2) end)
			m2(101.25,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:decelerate(45/161)
						a:x(sw/2 + 32*(pn*2-3))
						a:y(sh/2)
						a:z(0)
						a:rotationz(0)
					end
				end
			end)
			
			me(102,1,2,4,'xmod',l,outQuad)
			me(103,1,4,2,'xmod',l,inQuad)
			me(102,1,0,125,'tornado',l,outQuad)
			me(103,1,125,0,'tornado',l,inQuad)
			
			me(101.25,102,0,-50,'flip',e,outQuad)
			m(102,134,'*100 -50 flip',e)
			
			me(134,1,0,125,'tornado',l,outQuad)
			me(135,1,125,0,'tornado',l,inQuad)
			
			--m(102,134,'*10000 0.05x, *10000 C6440',e)
			
			--me(102,128,0,2000,'wave',e,linear)
			
			m2(102,function()
				screen:x( sw/2 )
				screen:y( sh/2 )
				
				if SongBackground then
					SongBackground:x(-sw/2)
					SongBackground:y(-sh/2)
				end
				if SongForeground then
					SongForeground:x(-sw/2)
					SongForeground:y(-sh/2)
				end
				
				for pn=1,2 do
					local a = Plr(pn)
					if a then
					
						a:x(32*(pn*2-3))
						a:y(0)
					end
				end
				
			end,true)
			
			m2(102.01,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
					
						a:decelerate(60/161)
						a:zoomz(30)
						a:accelerate(60/161)
						a:zoomz(1)
					end
				end
				
				dys_shake:linear(120/161)
				dys_shake:x(30)
				dys_shake:linear(.1)
				dys_shake:x(0)
				
			end)
			
			function dys_randomscreen(dir,size,len,aboot)
				
				local crx,cry,crz = screen:getrotation()
				local cx,cy = screen:GetX(), screen:GetY()
				local cs = screen:GetZoom()
				
				local nx,ny,nrz = sw/2 + math.random(20,40)*dir, sh/2 + math.random(-40,40), 180 + 180*dir + math.random(20,30)*(1-size*0.5)*dir
				local ns = size
				
				if aboot then
					nx,ny,nrz = sw/2 + math.random(80,120)*dir, sh/2 + math.random(-80,80), 360 + math.random(20,30)*(1-size*0.5)*dir
				end
				
				if not aboot then
					screen:accelerate(len/2)
					screen:rotationz( crz + 0.5*(nrz-crz) )
					screen:x( cx + 0.5*(nx-cx) )
					screen:y( cy + 0.5*(ny-cy) )
					screen:zoom( cs + 0.5*(ns - cs) )
					
					screen:decelerate(len/2)
					screen:rotationz(nrz)
					screen:x(nx)
					screen:y(ny)
					screen:zoom(ns)
				else
					screen:linear(len)
					screen:rotationz(nrz)
					screen:x(nx)
					screen:y(ny)
					screen:zoom(ns)
					
					dys_shake:x(20)
					dys_shake:sleep(len)
					dys_shake:x(0)
					
				end
				
			end
			
			for i=1,table.getn(dys_hits1) do
				local a = dys_hits1[i]
				local amp = a[2]-1.5
				simple_m0d(a[1],100*amp,.3*math.abs(amp),'tipsy')
				simple_m0d(a[1],40*amp,.3*math.abs(amp),'tornado')
			end
			
			mod_wiggle(103-.1,4,4,200,2,'tipsy')
			
			m2(104-.2,function() dys_randomscreen(-1,.9,.1) end)
			m2(107.5,function() dys_randomscreen(1,.8,40/161) end)
			m2(111.5,function() dys_randomscreen(-1,.7,40/161) end)
			m2(115.5,function() dys_randomscreen(1,.6,40/161) end)
			m2(119.5,function() dys_randomscreen(-1,.6,40/161) end)
			m2(123.5,function() dys_randomscreen(1,.5,40/161) end)
			
			m2(128,function() dys_randomscreen(-1,.4,30/161,true) end)
			m2(130,function() dys_randomscreen(1,.35,30/161,true) end)
			m2(132,function() dys_randomscreen(-1,.3,30/161,true) end)
			
			me(104,124,0,100,'drunk',e,linear,1)
			me(104,124,0,-100,'drunk',e,linear,2)
			me(104,124,0,100,'boost',e,linear,1)
			me(104,124,0,50,'brake',e,linear,2)
			
			--if slumpo then
				m(104,124,'hidden',e,1)
				m(104,124,'sudden',e,2)
				
				me(104,134,-100,50,'hiddenoffset',e,linear,1)
				me(104,134,100,-50,'suddenoffset',e,linear,2)
			--end
			
			m(104,124,'*0.1 100 dizzy',e,1)
			m(104,124,'*0.1 -100 dizzy',e,2)
			
			me(124,128,100,0,'drunk',e,linear,1)
			me(124,128,-100,0,'drunk',e,linear,2)
			me(124,128,100,0,'boost',e,linear,1)
			me(124,128,50,0,'brake',e,linear,2)
			
			m(104,134,'*6 no stealth',e)
			
			m(104,3.5,'*6 90 stealth',l,1)
			m(107.5,4,'*6 90 stealth',l,2)
			m(111.5,4,'*6 90 stealth',l,1)
			m(115.5,4,'*6 90 stealth',l,2)
			m(119.5,4,'*6 90 stealth',l,1)
			m(123.5,4,'*6 90 stealth',l,2)
			
			sugarkill_width = 2
			switcheroo_width = 2
			
			mod_sugarkiller(128,.5,2,50,80,1,1)
			mod_sugarkiller(128,.5,2,50,80,2,-1)
			switcheroo_add(128.5,'flip',1000,.25)
			mod_sugarkiller(128.75,.5,2,50,80,1,1)
			mod_sugarkiller(128.75,.5,2,50,80,2,-1)
			
			mod_sugarkiller(130,.5,2,50,80,1,1)
			mod_sugarkiller(130,.5,2,50,80,2,-1)
			switcheroo_add(130.5,'invert',1000,.25)
			mod_sugarkiller(130.75,.5,2,50,80,1,1)
			mod_sugarkiller(130.75,.5,2,50,80,2,-1)
			
			mod_sugarkiller(132,.5,2,50,80,1,1)
			mod_sugarkiller(132,.5,2,50,80,2,-1)
			switcheroo_add(132.5,'flip',1000,.25)
			mod_sugarkiller(132.75,.5,2,50,80,1,1)
			mod_sugarkiller(132.75,.5,2,50,80,2,-1)
			switcheroo_add(133.25,'invert',1000,.25)
			mod_sugarkiller(133.5,.5,2,50,80,1,1)
			mod_sugarkiller(133.5,.5,2,50,80,2,-1)
			
			sugarkill_width = 1
			switcheroo_width = 1
			
			me(134,2,-50,0,'flip',l,linear)
			me(134,136,0,500,'invert',e,linear,nil,150)
			me(150,2,500,0,'invert',l,inQuad)
			
			m(136,150,'sudden, *1000 100 suddenoffset',e)
			
			local dys_r = 0
			local dys_m = 0
			function dys_rbump(beat,amt)
				me(beat,.5,dys_r,dys_r+amt,'reverse',l,linear,nil,2)
				me(beat+.75,.5,dys_r+amt,dys_r+amt*2,'reverse',l,linear,nil,2)
				--[[
				me(beat,.5,dys_m,dys_m-amt*2,'bumpy',l,linear,nil,2)
				me(beat+.75,.5,dys_m-amt*2,dys_m-amt*4,'bumpy',l,linear,nil,2)
				]]
				dys_r = dys_r+amt*2
				dys_m = dys_m-amt*4
			end
			
			function dys_gunfire(beat,lead)
				m2(beat,function()
					local a = Plr(lead)
					if a then
						a:zoom(0)
						a:linear(7.5/161)
						a:zoom(1)
						a:sleep(7.5/161)
						a:zoom(0)
						a:linear(7.5/161)
						a:zoom(1)
					end
					local a = Plr(dys_other(lead))
					if a then
						a:sleep(7.5/161)
						a:zoom(0)
						a:linear(7.5/161)
						a:zoom(1)
						a:sleep(7.5/161)
						a:zoom(0)
						a:sleep(7.5/161)
						a:linear(7.5/161)
						a:zoom(1)
					end
					
					dys_shake:x(20)
					dys_shake:sleep(30/161)
					dys_shake:x(0)
					
				end)
				
			end
			
			dys_rbump(136,2)
			dys_rbump(138,2)
			dys_rbump(140,2)
			dys_rbump(141.5,2)
			
			dys_rbump(144,2)
			dys_rbump(146,2)
			dys_rbump(148,2)
			
			dys_r = 0
			dys_m = 0
			
			dys_gunfire(136.01,1)
			dys_gunfire(136.75,2)
			dys_gunfire(138,1)
			dys_gunfire(138.75,2)
			dys_gunfire(140,1)
			dys_gunfire(140.75,2)
			dys_gunfire(141.5,1)
			dys_gunfire(142.25,2)
			
			dys_gunfire(144,1)
			dys_gunfire(144.75,2)
			dys_gunfire(146,1)
			dys_gunfire(146.75,2)
			dys_gunfire(148,1)
			dys_gunfire(148.75,2)
			dys_gunfire(149.5,1)
			
			me(150,2,0,200,'mini',l,inQuad)
			me(150,2,dys_r,49,'reverse',l,linear)
			me(150,2,0,3000,'bumpy',l,linear)
			
			m2(134,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:linear(120/161)
						a:x(320*(pn*2-3))
					end
					local a = GetJud(pn)
					if a then
						a:linear(120/161)
						a:x(-160*(pn*2-3))
					end
					local a = GetCom(pn)
					if a then
						a:linear(120/161)
						a:x(-160*(pn*2-3))
					end
				end
				
				screen:linear(120/161)
				screen:zoom(1)
				screen:rotationz(360)
				screen:x(sw/2)
				screen:y(sh/2)
				
			end)
			
			m2(136,function()
			
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:x( sw/2 + 320*(pn*2-3))
						a:y( sh/2 )
					end
				end
				
				if SongBackground then
					SongBackground:x(0)
					SongBackground:y(0)
				end
				
				if SongForeground then
					SongForeground:x(0)
					SongForeground:y(0)
				end
				
				screen:x(0)
				screen:y(0)
				
			end,true)
			
			me(134,136,2,1.6,'xmod',e,linear,nil,152)
			
			me(137,.25,0,-200,'mini',l,outQuad)
			me(137.25,.33,-200,0,'mini',l,inQuad,nil,1)
			
			m(139.25,2,'*1000 no dark, *1000 no stealth',l)
			m(139.25,.2,'*1000 dark, *1000 100 stealth',l)
			m(139.5,.2,'*1000 dark, *1000 100 stealth',l)
			m(139.7,2,'*10 no dark, *10 no stealth',l)
			
			me(137,.5,500,600,'invert',l,linear,nil,1.5)
			me(139,.5,600,500,'invert',l,linear)
			me(139,.5,0,100,'flip',l,linear,nil,4)
			me(143,1,100,0,'flip',l,linear)
			
			m2(143,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:decelerate(30/161)
						a:zoomz(50)
						a:accelerate(30/161)
						a:zoomz(1)
					end
				end
			end)
			
			me(8+137,.25,0,-200,'mini',l,outQuad)
			me(8+137.25,.33,-200,0,'mini',l,inQuad,nil,1)
			
			m(8+139.25,2,'*1000 no dark, *1000 no stealth',l)
			m(8+139.25,.2,'*1000 dark, *1000 100 stealth',l)
			m(8+139.5,.2,'*1000 dark, *1000 100 stealth',l)
			m(8+139.7,2,'*10 no dark, *10 no stealth',l)
			
			me(8+137,.5,500,600,'invert',l,linear,nil,1.5)
			me(8+139,.5,600,500,'invert',l,linear,nil,1)
			me(8+139,8+139.25,0,100,'flip',e,linear,nil,152)
			
			m2(150,function()
			
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:accelerate(120/161)
						a:x( sw/2 )
						a:y( sh/2 )
					end
					local a = GetJud(pn)
					if a then
						a:accelerate(120/161)
						a:x( 180*(pn*2-3) )
					end
					local a = GetCom(pn)
					if a then
						a:accelerate(120/161)
						a:x( 180*(pn*2-3) )
					end
				end
				
			end)
			
			m2(152,function()
			
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:x( sw/2 )
						a:y( sh/2 )
					end
					local a = GetJud(pn)
					if a then
						a:x( 180*(pn*2-3) )
					end
					local a = GetCom(pn)
					if a then
						a:x( 180*(pn*2-3) )
					end
				end
				
			end,true)
			
			
			
			
			
			m2(156,'WhiteFlash')
			
			me(152,160,200,0,'mini',e,outSine)
			
			m(152,186,'*10000 -100% Flip, *10000 -25% invert,*10000 Reverse,*10000 300% Hallway,*10000 -20% Centered,*10000 2000% Bumpy,*10000 20% Sudden,*10000 180% SuddenOffset,*10000 90% Stealth,*10000 4x',e)
			m(182.5,8,'0.5 no stealth',l)
			m(186,16,'*2 No Flip, *0.5 no invert,*8 No Hallway,*4 No Reverse,*4 2x,*2 No Stealth,*32 No Bumpy',l)
			
			m2(186,function()
				dys_video:linear(120/161)
				dys_video:diffusealpha(0)
				dys_video:queuecommand('Hide');
			end)
			m2(188,function()
				dys_video:queuecommand('Hide');
			end,true)
			
			m(188,195,'*10000 reverse',e,1)
			m2(188,function()
				local a = Plr(1)
				if a then
					a:rotationx(180)
					a:y(sh/2 + 10)
				end
				local a = GetJud(1)
				if a then
					a:rotationx(180)
				end
				local a = GetCom(1)
				if a then
					a:rotationx(180)
				end
				local a = Plr(2)
				if a then
					a:y(sh/2 - 10)
				end
			end)
			
			m(188,195,'*10 dark',e);
			--function mod_sugarkiller(beat,duration,speed,minstealth,maxstealth,pn)
			mod_sugarkiller(189.5,.5,2,50,50)
			mod_sugarkiller(191.5,.5,2,50,50)
			mod_sugarkiller(193.5,.5,2,50,50)
			
			me(195,196,2,2.5,'xmod',e,linear,nil,203)
			
			m2(194,function()
				local a = Plr(1)
				if a then
					a:linear(60/161)
					a:rotationx(180)
					a:y(sh/2 + 10)
					a:linear(0/161)
					a:rotationx(0)
					a:y(sh/2)
					a:x(sw/2 - 256)
					a:zoomx(0)
				end
				local a = GetJud(1)
				if a then
					a:linear(60/161)
					a:rotationx(180)
					a:linear(60/161)
					a:rotationx(0)
					a:x(0)
				end
				local a = GetCom(1)
				if a then
					a:linear(60/161)
					a:rotationx(180)
					a:linear(60/161)
					a:rotationx(0)
					a:x(0)
				end
				local a = Plr(2)
				if a then
					a:linear(60/161)
					a:rotationx(0)
					a:y(sh/2 - 10)
					a:linear(60/161)
					a:y(sh/2)
					a:zoomx(2)
				end
				local a = GetJud(2)
				if a then
					a:linear(60/161)
					a:rotationx(0)
					a:linear(60/161)
					a:x(0)
				end
				local a = GetCom(2)
				if a then
					a:linear(60/161)
					a:rotationx(0)
					a:linear(60/161)
					a:x(0)
				end
				dys_judy:sleep(60/161)
				dys_judy:linear(60/161)
				dys_judy:z(0.5)
			end)
			m2(196,function()
				for pn=1,2 do
					local a = GetJud(pn)
					if a then
						a:x(0)
					end
					local a = GetCom(pn)
					if a then
						a:x(0)
					end
				end
			end,true)
			
			me(195,1,100,0,'reverse',l,inOutQuad,1)
			
			m(198,2,'*10000 reverse',l)
			m(200,3,'*10000 no reverse',l,1)
			m(200,3,'*10000 reverse',l,2)
			--me(203,1,100,0,'reverse',l,linear,2)
			
			
			m2(196,function()
				local a = Plr(1)
				if a then
					a:linear(30/161)
					a:zoomx(2)
					a:x(sw/2)
					a:linear(30/161)
					a:zoomx(0)
					a:x(sw/2-256)
					a:linear(30/161)
					a:zoomx(2)
					a:x(sw/2)
				end
				local a = Plr(2)
				if a then
					a:linear(30/161)
					a:zoomx(0)
					a:x(sw/2+256)
					a:linear(30/161)
					a:zoomx(2)
					a:x(sw/2)
					a:linear(30/161)
					a:zoomx(0)
					a:x(sw/2+256)
				end
			end)
			m2(198,function()
				local a = Plr(1)
				if a then
					a:linear(30/161)
					a:zoomx(0)
					a:x(sw/2-256)
					a:linear(30/161)
					a:zoomx(2)
					a:x(sw/2)
					a:linear(30/161)
					a:zoomx(0)
					a:x(sw/2-256)
				end
				local a = Plr(2)
				if a then
					a:linear(30/161)
					a:zoomx(2)
					a:x(sw/2)
					a:linear(30/161)
					a:zoomx(0)
					a:x(sw/2+256)
					a:linear(30/161)
					a:zoomx(2)
					a:x(sw/2)
				end
			end)
			m2(200,function()
				local a = Plr(1)
				if a then
					a:linear(30/161)
					a:zoomx(2)
					a:x(sw/2)
					a:linear(30/161)
					a:zoomx(0)
					a:x(sw/2-256)
					a:linear(30/161)
					a:zoomx(2)
					a:x(sw/2)
				end
				local a = Plr(2)
				if a then
					a:linear(30/161)
					a:zoomx(0)
					a:x(sw/2+256)
					a:linear(30/161)
					a:zoomx(2)
					a:x(sw/2)
					a:linear(30/161)
					a:zoomx(0)
					a:x(sw/2+256)
				end
			end)
			mod_sugarkiller(197.5,.5,2,50,50)
			mod_sugarkiller(199.5,.5,2,50,50)
			mod_sugarkiller(201.5,.5,2,50,50)
			
			me(203,204,2.5,1.5,'xmod',e,linear,nil)
			
			--m(203,204,'*10000 no reverse',e)
			me(203,204,0,-500,'reverse',e,linear,nil)
			me(203,204,1.5,0.2,'xmod',e,linear,nil)
			
			
			
			m2(203,function()
				dys_judy:linear(60/161)
				dys_judy:z(1)
				dys_judy:x(-1300)
			end)
			m2(219,function()
				dys_judy:x(0)
			end)
			
			m2(204,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:zoom(160/128)
						a:x(sw/2+160*(pn*2-3))
						a:y(sh/2+1660)
					end
				end
			end)
			
			mod_wiggle(202-.1,4,4,200,2,'drunk');
			
			m2(204,function()
				dys_shake:x(4)
			end)
			
			local function flashdiz(b,le)
				m(b,le,'*10000 2560 dizzy, *10000 50 stealth','len')
				m(b+le,.5,'*10000 no dizzy, *10000 no stealth','len')
			end
			
			flashdiz(205.5,.5)
			flashdiz(207.5,.5)
			flashdiz(208.5,.5)
			flashdiz(209.5,.5)
			flashdiz(210.5,.5)
			flashdiz(211.5,.5)
			
			m2(205.5,function() dys_shake:x(10) dys_shake:sleep(30/161) dys_shake:x(4) end)
			m2(207.5,function() dys_shake:x(10) dys_shake:sleep(30/161) dys_shake:x(4) end)
			m2(208.5,function() dys_shake:x(10) dys_shake:sleep(30/161) dys_shake:x(4) end)
			m2(209.5,function() dys_shake:x(10) dys_shake:sleep(30/161) dys_shake:x(4) end)
			m2(210.5,function() dys_shake:x(10) dys_shake:sleep(30/161) dys_shake:x(4) end)
			m2(211.5,function() dys_shake:x(10) end)
			m2(212,function() dys_shake:x(30) end)
			m2(215,function() dys_shake:x(4) end)
			m2(216,function() dys_shake:x(0) end)
			
			local function colup(b,len,str,pn)
				if str == '0111' then
					m(b,len,'*10000 no reverse, *10000 -250 split, *10000 -250 cross, *10000 -250 alternate',l,pn)
				elseif str == '0011' then
					m(b,len,'*10000 no reverse, *10000 -500 split, *10000 0 cross, *10000 0 alternate',l,pn)
				elseif str == '0001' then
					m(b,len,'*10000 no reverse, *10000 -250 split, *10000 250 cross, *10000 -250 alternate',l,pn)
				elseif str == '0000' then
					m(b,len,'*10000 no reverse, *10000 0 split, *10000 0 cross, *10000 0 alternate',l,pn)
				--
				elseif str == '1000' then
					m(b,len,'*10000 -500 reverse, *10000 250 split, *10000 250 cross, *10000 250 alternate',l,pn)
				elseif str == '1100' then
					m(b,len,'*10000 -500 reverse, *10000 500 split, *10000 0 cross, *10000 0 alternate',l,pn)
				elseif str == '1110' then
					m(b,len,'*10000 -500 reverse, *10000 250 split, *10000 -250 cross, *10000 250 alternate',l,pn)
				elseif str == '1111' then
					m(b,len,'*10000 -500 reverse, *10000 0 split, *10000 0 cross, *10000 0 alternate',l,pn)
				end
			end
			
			local function setcolup(b,str)
				colup(b,1,string.sub(str,1,4),1)
				colup(b,1,string.sub(str,5,8),2)
			end
			
			setcolup(204,'01111111')
			setcolup(204.5,'00111111')
			setcolup(205,'00011111')
			
			local cloop = {
				'00001111',
				'10000111',
				'11000011',
				'11100001',
				'11110000',
				'01111000',
				'00111100',
				'00011110'
			}
			
			local curcloop = 0
			for i=1,table.getn(crossing2) do
				local a = crossing2[i]
				if a then
					setcolup(a[1],cloop[math.mod(curcloop,8)+1])
					curcloop = curcloop+1
				end
			end
			
			setcolup(214.75,'00000111')
			setcolup(215,'00000011')
			setcolup(215.5,'00000001')
			setcolup(216,'00000000')
			
			m(216.1,1,'*10000 no reverse, *10000 no split, *10000 no cross, *10000 no alternate',l)
			
			m2(216.1,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:zoom(1)
						a:x(sw/2)
						a:y(sh/2)
					end
					
					local a = GetJud(pn)
					if a then
						a:x( 180*(pn*2-3) )
					end
					local a = GetCom(pn)
					if a then
						a:x( 180*(pn*2-3) )
					end
					
				end
			end)
			
			m(204,216,'*10000 1x, *1000 C32',e)
			m(216,220,'*10000 1x, *1000 C320, *10000 invert',e)
			m(216,219.9,'*1000 brake, *1000 52.5 dizzy',e)
			m(218.9,.6,'*1000 no dizzy',l)
			m(220.5,224,'*1000 no brake, *1000 no dizzy, *1000 no invert, *1000 no dark',e)
			
			m2(216,function()
				dys_aux:x(100)
				dys_aux:sleep(60/161)
				dys_aux:linear(180/161)
				dys_aux:x(0)
				
				dys_haunt_line:hidden(0)
				dys_haunt_line:sleep(60/161)
				dys_haunt_line:linear(180/161)
				dys_haunt_line:diffusealpha(1)
				dys_haunt_line:sleep(30/161)
				dys_haunt_line:queuecommand('Hide')
				
			end)
			
			
			
			--me(214,215.75,0,100,'stealth',e,linear,nil,220)
			m(216,1,'*10000 dark',l)
			--me(217,219,100,0,'stealth',e,linear,nil,220)
			--me(217,219,100,100,'dark',e,linear,nil,220)
			
			me(220.5,4-.5,0,2,'xmod',l,outQuad)
			me(220.5,5-.5,100,0,'stealth',l,linear)
			me(220.5,4-.5,200,0,'dizzy',l,inQuad)
			me(220.5,4-.5,200,0,'drunk',l,inQuad)
			me(220.5,4-.5,200,0,'tipsy',l,inQuad)
			me(220.5,4-.5,-100,0,'flip',l,inQuad)
			
			m(216,224,'*1000 no reverse',e)
			
			m2(220,'BlackFlash');
			
			m2(222,function()
				dys_awoo:x(-1)
			end)
			
			m2(226,function()
				dys_awoo:x(-1)
				dys_awoo:accelerate(2*60/161)
				dys_awoo:x(0)
				dys_awoo:decelerate(2*60/161)
				dys_awoo:x(1)
				dys_awoo:sleep(4*60/161)
				dys_awoo:accelerate(2*60/161)
				dys_awoo:x(0)
				dys_awoo:decelerate(2*60/161)
				dys_awoo:x(-1)
				dys_awoo:sleep(4*60/161)
				dys_awoo:accelerate(2*60/161)
				dys_awoo:x(0)
				dys_awoo:decelerate(2*60/161)
				dys_awoo:x(1)
			end)
			m2(258,function()
				dys_awoo:accelerate(2*60/161)
				dys_awoo:x(0)
				dys_awoo:decelerate(2*60/161)
				dys_awoo:x(-1)
				dys_awoo:sleep(4*60/161)
				dys_awoo:accelerate(2*60/161)
				dys_awoo:x(0)
				dys_awoo:decelerate(2*60/161)
				dys_awoo:x(1)
			end)
			
			m2(248,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:z(0)
					end
				end
			end)
			m(248,251,'*1000 no reverse, *1000 -100 flip, *1000 100 invert',e,1)
			m(248,251,'*1000 100 reverse, *1000 no flip, *1000 no invert',e,2)
			
			me(248,249.5,0,300,'reverse',e,linear,1,250)
			me(248,250,100,500,'reverse',e,linear,2)
			
			me(250,257,100,100,'reverse',e,linear)
			
			me(251,252,-100,0,'flip',e,linear,1)
			me(251,252,100,0,'invert',e,linear,1)
			
			
			
			
			m2(250,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:z(0)
						a:decelerate(60/161)
						a:z(-600)
					end
				end
			end)
			
			m2(252,function()
				dys_zjump(1,true,3)
			end)
			m2(252.75,function()
				dys_zjump(2,true,3)
			end)
			m2(254,function()
				dys_zjump(1,false,3,true)
			end)
			m2(254.75,function()
				dys_zjump(2,false,3,true)
			end)
			
			m2(256,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:decelerate(60/161)
						a:rotationz(0)
						a:z(0)
					end
				end
			end)
			
			me(256,257,0,-100,'split',e,outQuad,1)
			me(256,257,0,100,'split',e,outQuad,2)
			me(256,257,100,0,'reverse',e,outQuad,2)
			me(256,257,0,-100,'flip',e,outQuad,2)
			me(256,257,0,100,'invert',e,outQuad,2)
			
			me(271,272,-100,0,'split',e,inOutQuad,1)
			me(271,272,100,0,'split',e,inOutQuad,2)
			me(271,272,0,100,'reverse',e,inOutQuad,2)
			
			m2(272,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:z(0)
						a:decelerate(180/161)
						a:rotationy(60*(pn*2-3))
						a:rotationz(10*(pn*2-3))
						a:zoomz(2)
						a:z(-200)
						a:accelerate(60/161)
						a:rotationy(0)
						a:rotationz(0)
						a:zoomz(1)
						a:z(0)
						a:decelerate(180/161)
						a:rotationy(-60*(pn*2-3))
						a:rotationz(-20*(pn*2-3))
						a:zoomz(3)
						a:z(-300)
						a:accelerate(60/161)
						a:rotationy(0)
						a:rotationz(0)
						a:zoomz(1)
						a:z(0)
					end
				end
			end)
			
			m(271,275,'*10000 reverse',e)
			
			m(275,279,'*16 0 reverse, *8 50 split, *8 50 alternate, *8 50 cross',e,1)
			m(275.25,279,'*16 0 reverse, *8 0 split, *8 100 alternate, *8 0 cross',e,1)
			m(275.50,279,'*16 0 reverse, *8 50 split, *8 50 alternate, *8 -50 cross',e,1)
			m(275.75,279,'*16 0 reverse, *8 0 split, *8 0 alternate, *8 0 cross',e,1)
			
			m(275,279,'*16 100 reverse, *8 50 split, *8 -50 alternate, *8 -50 cross',e,2)
			m(275.25,279,'*16 100 reverse, *8 0 split, *8 -100 alternate, *8 0 cross',e,2)
			m(275.50,279,'*16 0 reverse, *8 50 split, *8 -50 alternate, *8 50 cross',e,2)
			m(275.75,279,'*16 0 reverse, *8 0 split, *8 0 alternate, *8 0 cross',e,2)
			
			m(279,280,'*16 0 reverse, *8 50 split, *8 50 alternate, *8 -50 cross',e,1)
			m(279.25,280,'*16 0 reverse, *8 0 split, *8 100 alternate, *8 0 cross',e,1)
			m(279.5,280,'*16 0 reverse, *8 50 split, *8 50 alternate, *8 50 cross',e,1)
			m(279.75,280,'*16 100 reverse, *8 0 split, *8 0 alternate, *8 0 cross',e,1)
			
			m(279,280,'*16 0 reverse, *8 50 split, *8 -50 alternate, *8 50 cross',e,2)
			m(279.25,280,'*16 100 reverse, *8 0 split, *8 -100 alternate, *8 0 cross',e,2)
			m(279.5,280,'*16 100 reverse, *8 50 split, *8 -50 alternate, *8 -50 cross',e,2)
			m(279.75,280,'*16 100 reverse, *8 0 split, *8 0 alternate, *8 0 cross',e,2)
			
			me(280,281,0,33,'alternate',e,linear,nil,283)
			me(283,284,33,0,'alternate',e,linear,nil)
			me(280,281,0,66,'split',e,linear,nil,283)
			me(283,284,66,0,'split',e,linear,nil)
			
			m(280,281,'*10000 reverse',e)
			me(281,282,100,200,'reverse',e,linear,nil)
			me(282,284,200,0,'reverse',e,linear,nil)
			
			
			
			me(271,272,0,0,'flip',e,outQuad,1,280)
			me(271,272,0,200,'invert',e,outQuad,1,280)
			me(271,272,-100,0,'flip',e,outQuad,2,280)
			me(271,272,100,-200,'invert',e,outQuad,2,280)
			
			me(280,284,200,0,'invert',e,linear,1)
			me(280,284,-200,0,'invert',e,linear,2)
			
			m2(284,'Countdown')
			
			m2(284,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:x(sw/2)
					end
					local a = GetJud(pn)
					if a then
						a:x(180*(pn*2-3))
					end
					local a = GetJud(pn)
					if a then
						a:x(180*(pn*2-3))
					end
				end
			end)
			
			for i=0,2 do
				me(280+i,1,-50*(i),-50*(i+1),'mini',l,inOutQuad,1)
				me(280.5+i,1,-50*(i),-50*(i+1),'mini',l,inOutQuad,2)
			end
			
			me(283,284,-150,100,'mini',e,inOutQuad,1,286)
			me(283.5,284.5,-150,100,'mini',e,inOutQuad,2,286)
			
			--m(284,2,'*1000 mini',l)
			--me(284,2,0,100,'centered',l,linear)
			m(284,2,'*1.28 centered',l)
			
			
			m2(286,function()
				dys_rotamp:linear(120/161)
				dys_rotamp:x(180)
				
				dys_zoom:linear(120/161)
				dys_zoom:x(0.75)
				
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:x(sw/2)
					end
					local a = GetJud(pn)
					if a then
						a:linear(120/161)
						a:x(0)
					end
					local a = GetCom(pn)
					if a then
						a:linear(120/161)
						a:x(0)
					end
				end
				
			end)
			
			--[[
			m2(286,function()
				screen:decelerate(105/161)
				screen:zoom(0.7)
				screen:x(0.3*sw/2)
				screen:y(0.3*sh/2)
				screen:rotationz(-30)
				screen:accelerate(15/161)
				screen:zoom(1)
				screen:x(0)
				screen:y(0)
				screen:rotationz(0)
			end)
			m2(288,'Bang2')
			]]
			
			me(286,2,100,0,'centered',l,linear)
			me(286,2,100,0,'mini',l,linear)
			
			me(284,284.5,0,100,'invert',e,linear,2,286)
			me(284,284.5,0,628,'dizzy',e,linear,2,286)
			me(284,284.5,0,80,'stealth',e,linear,2,286)
			me(284,284.5,0,100,'drunk',e,linear,2,286)
			me(284,284.5,50,100,'dark',e,linear,2,286)
			
			me(286,2,80,0,'stealth',l,linear,2)
			me(286,2,628,0,'dizzy',l,linear,2)
			me(286,2,100,0,'invert',l,linear,2)
			me(286,2,100,0,'drunk',l,linear,2)
			me(286,2,100,50,'dark',l,linear,2)
			
			m(286,318,'*6 no flip, *6 no invert',e)
			
			--mod_sugarkiller(318,2,1,50,80)
			--simple_m0d2(304-.1,-100,.2,'mini')
			--me(304,1.5,-200,0,'mini',l,inQuad)
			--me(304,1.5,.5,2,'xmod',l,inQuad)
			
			simple_m0d2(304-.1,100,.5,'brake')
			simple_m0d2(304-.1,-50,.5,'mini')
			simple_m0d2(304-.1,200,.5,'hallway',1)
			simple_m0d2(304-.1,-200,.5,'hallway',2)
			
			m2(304-.1,function()
				dys_aux:linear(.05)
				dys_aux:z(5)
				dys_aux:linear(60/161)
				dys_aux:z(1)
			end)
			
			me(318,0.5,0,200,'hallway',l,outQuad,1)
			me(318,0.5,0,-200,'hallway',l,outQuad,2)
			me(318.5,1,200,-200,'hallway',l,inOutQuad,1)
			me(318.5,1,-200,200,'hallway',l,inOutQuad,2)
			me(319.5,0.5,-200,0,'hallway',l,inQuad,1)
			me(319.5,0.5,200,0,'hallway',l,inQuad,2)
			
			m(320,2,'*1000 no hallway',l)
			
			--[[
			me(318,2,0,200,'mini',l,linear)
			me(320,2,0,0,'mini',l,outQuad)
			]]
			
			me(318,2,2,10,'xmod',l,linear)
			me(320,2,2,2,'xmod',l,outQuad)
			
			m2(318,function()
				dys_rotamp:accelerate(60/161)
				dys_rotamp:x(90)
				dys_rotamp:decelerate(60/161)
				dys_rotamp:x(0)
				
				dys_zoom:linear(120/161)
				dys_zoom:x(1)
			end)
			
			
			
			
			me(-2+323,.5,0,80,'brake',l,linear,1)
			me(-2+323.5,.5,80,0,'brake',l,linear,1)
			me(-2+323,.5,0,-80,'brake',l,linear,2)
			me(-2+323.5,.5,-80,0,'brake',l,linear,2)
			me(-2+325,.5,0,80,'brake',l,linear,2)
			me(-2+325.5,.5,80,0,'brake',l,linear,2)
			me(-2+325,.5,0,-80,'brake',l,linear,1)
			me(-2+325.5,.5,-80,0,'brake',l,linear,1)
			
			me(-2+8+323,.5,0,80,'brake',l,linear,1)
			me(-2+8+323.5,.5,80,0,'brake',l,linear,1)
			me(-2+8+323,.5,0,-80,'brake',l,linear,2)
			me(-2+8+323.5,.5,-80,0,'brake',l,linear,2)
			me(-2+8+325,.5,0,80,'brake',l,linear,2)
			me(-2+8+325.5,.5,80,0,'brake',l,linear,2)
			me(-2+8+325,.5,0,-80,'brake',l,linear,1)
			me(-2+8+325.5,.5,-80,0,'brake',l,linear,1)
			
			me(318,320,0,500,'invert',e,inQuad)
			
			m(320,334,'*10000 500 invert',e)
			me(184+150,2,500,0,'invert',l,inQuad)
			
			dys_gunfire(184+136.01,1)
			dys_gunfire(184+136.75,2)
			dys_gunfire(184+138,1)
			dys_gunfire(184+138.75,2)
			dys_gunfire(184+140,1)
			dys_gunfire(184+140.75,2)
			dys_gunfire(184+141.5,1)
			dys_gunfire(184+142.25,2)
			
			dys_gunfire(184+144,1)
			dys_gunfire(184+144.75,2)
			dys_gunfire(184+146,1)
			dys_gunfire(184+146.75,2)
			dys_gunfire(184+148,1)
			dys_gunfire(184+148.75,2)
			dys_gunfire(184+149.5,1)
			
			me(184+150,2,0,200,'mini',l,inQuad)
			me(184+150,2,0,49,'reverse',l,linear)
			
			m2(305,function()
				dys_judy:linear(13*60/161)
				dys_judy:z(2)
				dys_judy:aux(2)
			end)
			
			m2(318,function()
			
				for pn=1,2 do
					local a = GetJud(pn)
					if a then
						a:sleep(0)
						a:rotationz(-360)
						a:decelerate(120/161)
						a:x(-180*(pn*2-3))
						a:rotationz(0)
					end
					local a = GetCom(pn)
					if a then
						a:sleep(0)
						a:rotationz(-360)
						a:decelerate(120/161)
						a:x(-180*(pn*2-3))
						a:rotationz(0)
					end
				end
				
				dys_judy:linear(120/161)
				dys_judy:z(1)
				dys_judy:aux(1)
				
			end,true)
			
			m2(320,function()
			
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:x( sw/2 + 320*(pn*2-3))
						a:y( sh/2 )
					end
				end
				
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:x(sw/2 + 320*(pn*2-3))
					end
					local a = GetJud(pn)
					if a then
						a:x(-160*(pn*2-3))
					end
					local a = GetCom(pn)
					if a then
						a:x(-160*(pn*2-3))
					end
				end
				
			end,true)
			
			m2(320,function()
			
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:rotationz(4*(pn*2-3))
					end
				end
				
				screen:rotationz(4)
				screen:y(-20)
				screen:x(20)
				
			end)
			
			m2(322,function()
			
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:rotationz(-3*(pn*2-3))
					end
				end
				
				screen:rotationz(-4)
				screen:y(20)
				screen:x(-20)
				
			end)
			
			m2(324,function()
			
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:rotationz(5*(pn*2-3))
					end
				end
				
				screen:rotationz(6)
				screen:y(-40)
				screen:x(40)
				
			end)
			
			m2(327,function()
				screen:linear(60/161)
				screen:rotationz(0)
				screen:y(0)
				screen:x(0)
			end)
			
			m2(8+320,function()
			
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:rotationz(-5*(pn*2-3))
					end
				end
				
				screen:rotationz(-6)
				screen:y(40)
				screen:x(-40)
				
			end)
			
			m2(8+322,function()
			
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:rotationz(6*(pn*2-3))
					end
				end
				
				screen:rotationz(9)
				screen:y(-50)
				screen:x(50)
				
			end)
			
			m2(8+324,function()
			
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:rotationz(-8*(pn*2-3))
					end
				end
				
				screen:rotationz(-12)
				screen:y(60)
				screen:x(-60)
				
			end)
			
			me(184+134,184+136,2,1.6,'xmod',e,linear,nil,184+150)
			--me(334,336,'xmod',e,linear,nil,400)
			me(336.5,344,0,10,'xmod',e,linear,nil,400)
			
			me(184+137,.25,0,-200,'mini',l,outQuad)
			me(184+137.25,.33,-200,0,'mini',l,inQuad,nil,1)
			
			m(184+139.25,2,'*1000 no dark, *1000 no stealth',l)
			m(184+139.25,.2,'*1000 dark, *1000 100 stealth',l)
			m(184+139.5,.2,'*1000 dark, *1000 100 stealth',l)
			m(184+139.7,2,'*10 no dark, *10 no stealth',l)
			
			--[[
			me(184+137,.5,500,600,'invert',l,linear,nil,1.5)
			me(184+139,.5,600,500,'invert',l,linear)
			me(184+139,.5,0,100,'flip',l,linear,nil,4)
			me(184+143,1,100,0,'flip',l,linear)
			]]
			
			m2(184+143,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:decelerate(30/161)
						a:zoomz(50)
						a:accelerate(30/161)
						a:zoomz(1)
					end
				end
			end)
			
			me(184+8+137,.25,0,-200,'mini',l,outQuad)
			me(184+8+137.25,.33,-200,0,'mini',l,inQuad,nil,1)
			
			m(184+8+139.25,2,'*1000 no dark, *1000 no stealth',l)
			m(184+8+139.25,.2,'*1000 dark, *1000 100 stealth',l)
			m(184+8+139.5,.2,'*1000 dark, *1000 100 stealth',l)
			m(184+8+139.7,2,'*10 no dark, *10 no stealth',l)
			
			--[[
			me(184+8+137,.5,500,600,'invert',l,linear,nil,1.5)
			me(184+8+139,.5,600,500,'invert',l,linear,nil,1)
			me(184+8+139,184+8+139.25,0,100,'flip',e,linear,nil,184+152)
			]]
			
			m2(184+150,function()
			
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:accelerate(120/161)
						a:x( sw/2 )
						a:y( sh/2 )
						a:zoomz(1)
						a:rotationz(0)
					end
					local a = GetJud(pn)
					if a then
						a:accelerate(120/161)
						a:x( 180*(pn*2-3) )
					end
					local a = GetCom(184+pn)
					if a then
						a:accelerate(120/161)
						a:x( 180*(pn*2-3) )
					end
				end
				
				screen:linear(120/161)
				screen:rotationz(0)
				screen:x(0)
				screen:y(0)
				
			end)
			
			me(336,344,200,0,'mini',e,outQuad,nil,400)
			me(336,344,0,1000,'tornado',e,outQuad,nil,400)
			me(334,336,0,100,'space',e,linear,nil,400)
			me(336,344,100,200,'space',e,outQuad,nil,400)
			
			me(334,336,0,3000,'bumpy',e,linear,1,1000)
			me(334,336,0,3000,'bumpy',e,linear,2,1000)
			me(336,344,0,500,'bumpy',e,outQuad,1,1000)
			me(336,344,0,-500,'bumpy',e,outQuad,2,1000)
			
			m(344,999,'*10000 stealth',e)
			
			if FUCK_EXE then
				m(332,999,'*10000 hidemines',e)
				m(344,999,'*10000 stealthpastreceptors, *1000 disablemines',e)
			end
			
			
			dys_flicker = 1
			dys_rang = 0
			
			
			
			
			
			
			
			
			
			
			
			
			------------------------------------------------
			-------------bg control
			
			
			m2(30,function()
				dys_citybg:hidden(0)
				dys_bg:linear(240/161)
				dys_bg:diffusealpha(0)
			end)
			
			
			m2(52,function()
				
				dys_backlayer:accelerate(8*60/161)
				dys_backlayer:addy(SCREEN_HEIGHT)
				dys_forelayer:accelerate(8*60/161)
				dys_forelayer:addy(SCREEN_HEIGHT*2)
				
				dys_static:linear(8*60/161)
				dys_static:diffusealpha(0)
				
				dys_skydark:accelerate(12*60/161)
				dys_skydark:diffusealpha(1)
				dys_stars:accelerate(12*60/161)
				dys_stars:diffusealpha(.5)
				
				dys_starscroll:linear(8*60/161)
				dys_starscroll:y(-.2)
				dys_starscroll:linear(4*60/161)
				dys_starscroll:y(0)
				dys_starscroll:x(.1)
				
			end)
			
			local function auror(beat,w,sus)
				local t = w
				local g = 4
				if sus then
					g = sus
				end
				m2(beat,function()
					
					for g=t,t+1 do
						_G['dys_auror'..g]:linear(180/161)
						_G['dys_auror'..g]:diffusealpha(.8)
						_G['dys_auror'..g]:sleep(g*60/161)
						_G['dys_auror'..g]:linear(180/161)
						_G['dys_auror'..g]:diffusealpha(0)
					end
					
				end)
			end
			
			for i=0,2 do
				auror(224+16*i,3)
				auror(232+16*i,1)
			end
			
			auror(224+16*3,3)
			auror(232+16*3,1,2)
			
			
			m2(102,function()
				dys_bg:linear(120/161)
				dys_bg:diffusealpha(1)
			end)
			m2(104,function()
				dys_citybg:hidden(1)
			end)
			
			m2(220,function()
			
				dys_bg:diffusealpha(0)
				dys_skydark:diffusealpha(1)
			
				dys_citybg:hidden(0)
				
				dys_backlayer:y(SCREEN_CENTER_Y+SCREEN_HEIGHT)
				dys_forelayer:y(SCREEN_BOTTOM+SCREEN_HEIGHT*2)
				dys_static:diffusealpha(0)
				
				dys_starscroll:x(.2)
				dys_starscroll:y(.2)
				dys_stars:diffusealpha(.5)
				dys_stars:accelerate(8*240/161)
				dys_stars:rotationz(45)
				dys_stars:decelerate(8*240/161)
				dys_stars:rotationz(90)
				
				dys_stars:linear(4*60/161)
				dys_stars:diffusealpha(.3)
				
				
			end)
			
			m2(220,'SmileStarsOn')
			m2(228,'SmileStarsOff')
			
			m2(284,function()
			
				dys_bg:diffusealpha(0)
				dys_citybg:hidden(0)
				
				dys_skydark:diffusealpha(1)
				dys_stars:diffusealpha(.5)
				
				dys_backlayer:y(SCREEN_CENTER_Y+SCREEN_HEIGHT)
				dys_backlayer:linear(4*60/161)
				dys_backlayer:addy(-SCREEN_HEIGHT)
				
				dys_chazo:hidden(0)
				dys_chazo:y(SCREEN_HEIGHT*0.23 + SCREEN_HEIGHT*2)
				dys_chazo:linear(4*60/161)
				dys_chazo:addy(-SCREEN_HEIGHT*2)
				
				dys_forelayer:y(SCREEN_BOTTOM+SCREEN_HEIGHT*2)
				dys_forelayer:linear(4*60/161)
				dys_forelayer:addy(-SCREEN_HEIGHT*2)
				
				dys_static:diffusealpha(0)
				dys_static:linear(4*60/161)
				dys_static:diffusealpha(.05)
				
				dys_skydark:accelerate(4*60/161)
				dys_skydark:diffusealpha(0)
				
				dys_quad:linear(240/161)
				dys_quad:diffusealpha(.3)
				
				dys_starscroll:linear(240/161)
				dys_starscroll:x(-.1)
				dys_starscroll:y(0)
				
			end)
			
			m2(318,function()
				dys_bg:linear(120/161)
				dys_bg:diffusealpha(1)
			end)
			m2(320,function()
				dys_chazo:hidden(1)
				dys_citybg:hidden(1)
			end)
			
			m2(336,function()
				dys_bg:linear(240/161)
				dys_bg:diffusealpha(0)
				
				dys_static:linear(240/161)
				dys_static:diffusealpha(.03)
			end)
			m2(336,function()
				dys_quad:diffusealpha(0)
				dys_citybg:hidden(0)
			end)
			
			--[[
			local spx01 = {{000,-99.21875},{100,-98.4375}}
			local spy01 = {{000,-137.5},{100,-117.96875}}
			
			local spx31 = {{000,114.84375},{100,115.625}}
			local spy31 = {{000,-132.8125},{100,-113.28125}}
			
			local spx02 = {{000,-224.21875},{100,-133.59375},{200,-39.0625},{300,60.9375},{500,159.375},{500,253.125}}
			local spy02 = {{000,89.0625},{100,134.375},{200,157.8125},{300,162.5},{400,143.75},{500,112.5}}
			
			local spx32 = {{000,253.125},{100,159.375},{200,60.9375},{300,-39.0625},{400,-133.59375},{500,-224.21875}}
			local spy32 = {{000,112.5},{100,143.75},{200,162.5},{300,157.8125},{400,134.375},{500,89.0625}}
			
			local str1 = ''
			str1 = str1..doSpline(10000,'x',spx01,0)..','..doSpline(10000,'x',spx31,3)..','..doSpline(10000,'y',spy01,0)..','..doSpline(10000,'y',spy31,3)
			m(343,99999,str1,l,1)
			
			local str2 = ''
			str2 = str2..doSpline(10000,'x',spx02,0)..','..doSpline(10000,'x',spx32,3)..','..doSpline(10000,'y',spy02,0)..','..doSpline(10000,'y',spy32,3)
			
			m(343,99999,str2,l,2)
			
			]]
			
			--[[
			m2(343,function()
			
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:finishtweening()
						a:x(sw/2)
						a:y(sh/2)
						a:zoom(0)
					end
				end
			
				dys_bg:hidden(1)
				dys_citybg:hidden(0)
				dys_quad:diffusealpha(1)
			end,true)
			
			m2(464,function()
				dys_d:diffusealpha(0)
				dys_d:rotationz(4)
				dys_d:zoomx(.9*4)
				dys_d:zoomy(1.2*2)
				dys_d:tween(.4,'outQuint(%f,0,1,1)')
				dys_d:diffusealpha(1)
				dys_d:rotationz(0)
				dys_d:zoomx(.9)
				dys_d:zoomy(1.2)
				dys_d:sleep(.1)
				dys_d:tween(.4,'inCubic(%f,0,1,1)')
				dys_d:diffusealpha(-.1)
				
				dys_d_gli:x(.1)
				dys_d_gli:decelerate(.4)
				dys_d_gli:x(.01)
				dys_d_gli:sleep(.1)
				dys_d_gli:tween(.5,'inCubic(%f,0,1,1)')
				dys_d_gli:x(.3)
			end)
			
			m2(465.7,function()
				dys_g:diffusealpha(0)
				dys_g:rotationz(4)
				dys_g:zoomx(.9*6)
				dys_g:zoomy(1.2*3)
				dys_g:tween(.6,'outQuint(%f,0,1,1)')
				dys_g:diffusealpha(1)
				dys_g:rotationz(0)
				dys_g:zoomx(.9*1.5)
				dys_g:zoomy(1.2*1.5)
				dys_g:sleep(.2)
				dys_g:tween(.4,'inCubic(%f,0,1,1)')
				dys_g:diffusealpha(-.1)
				
				dys_g_gli:x(.1)
				dys_g_gli:decelerate(.4)
				dys_g_gli:x(.01)
				dys_g_gli:sleep(.1)
				dys_g_gli:tween(.5,'inCubic(%f,0,1,1)')
				dys_g_gli:x(.5)
			end)
			]]
			
			
			--------------------------------------------------
			--------WinDOO
			
			m2(64,function()
			
				char_nick:basezoomx(.8)
				char_nick:basezoomy(.8)
				
				char_nick:x(sw/2)
				char_nick:y(sh/2)
				char_nick:queuecommand('Spawn')
			end)
			
			m2(67.6,function()
				--taro_Sound('spell')
			end)
			
			m2(68,function()
			
				--char_nick:queuecommand('Cast2')
			end)
			
			m2(71.5,function()
			
				char_nick:queuecommand('Hide')
			end)
			
			m2(216,function()
			
				char_nick:basezoomx(.8)
				char_nick:basezoomy(.8)
				
				char_nick:x(sw/2)
				char_nick:y(sh/2)
				char_nick:queuecommand('Spawn')
			end)
			
			m2(218.6,function()
				--taro_Sound('spell')
			end)
			
			m2(218.6,function()
			
				char_nick:queuecommand('Attack')
			end)
			
			m2(223.5,function()
			
				char_nick:queuecommand('Hide')
			end)
			
			m2(280,function()
			
				char_nick:basezoomx(.8)
				char_nick:basezoomy(.8)
				
				char_nick:x(sw/2)
				char_nick:y(sh/2 + SCREEN_HEIGHT*2.5)
				char_nick:queuecommand('SpawnQ')
				char_nick:queuecommand('Attack')
				
				char_nick:y(sh/2 + SCREEN_HEIGHT*5)
				char_nick:linear(480/161)
				char_nick:y(sh/2)
				
			end)
			
			m2(303,function()
			
				char_nick:queuecommand('Attack')
			end)
			
			m2(317.5,function()
			
				char_nick:queuecommand('Hide')
			end)
			
			
			
---------------------------------------------------------------------------------------
----------------------Sort the actions table-------------------------------------------
---------------------------------------------------------------------------------------
			
			function modtable_compare(a,b)
				return a[1] < b[1]
			end
			
			if table.getn(mod_actions) > 1 then
				table.sort(mod_actions, modtable_compare)
			end
			
			self:queuecommand('Update');
			
		end"
		
		UpdateCommand="%function(self)

			if GAMESTATE:GetSongBeat()>=0 and not checked then
			
				local ThingsToGrab = {'LifeP1','LifeP2','ScoreP1','ScoreP2','BPMDisplay','LifeFrame','ScoreFrame',
										'Lyrics','SongBackground','SongForeground','Overlay','Underlay'}
				local ThingsToHide = {'LifeP1','LifeP2','ScoreP1','ScoreP2','BPMDisplay','LifeFrame','ScoreFrame','Overlay','Underlay'}
				
				for i,v in ipairs(ThingsToGrab) do
					_G[v] = SCREENMAN:GetTopScreen():GetChild(v) or nil
				end
				
				for i,v in ipairs(ThingsToHide) do
					if _G[v] then _G[v]:hidden(1) end
				end
				
				table.insert(mod_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP1'));
				table.insert(mod_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP2'));
				
				--name players, judgment and combo
				for pn=1,2 do
					_G['P'..pn] = SCREENMAN:GetTopScreen():GetChild('PlayerP'..pn) or nil;
					if _G['P'..pn] then
						_G['jud'..pn] = _G['P'..pn]:GetChild('Judgment');
						_G['com'..pn] = _G['P'..pn]:GetChild('Combo');
					end
				end
				
				screen = SCREENMAN:GetTopScreen();
				checked = true; --let this only run once
				
				screen:vibrate()
				screen:effectmagnitude(0,0,0)
				
			end

			local beat = GAMESTATE:GetSongBeat()
			
			
---------------------------------------------------------------------------------------
----------------------Begin table handlers---------------------------------------------
---------------------------------------------------------------------------------------
			
			disable = false;
			if disable ~= true and beat > mod_firstSeenBeat+0.1 and checked then
			
				dys_flicker = dys_flicker*-1
				
				-----------------------
				-- Player mod resets --
				-----------------------
				if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --
					for i=1,2 do
						mod_do('clearall',i)
					end
				end
				
				------------------------------------------------------------------------------
				-- custom mod reader by TaroNuke edited by WinDEU and re-stolen by TaroNuke --
				------------------------------------------------------------------------------
				if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --
					for i,v in pairs(mods) do
						if v and table.getn(v) > 3 and v[1] and v[2] and v[3] and v[4] then
							if beat >=v[1] then
								if (v[4] == 'len' and beat <=v[1]+v[2]) or (v[4] == 'end' and beat <=v[2]) then
									if table.getn(v) == 5 then
										mod_do(v[3],v[5]);
									else
										mod_do(v[3]);
									end
								end
							end
						else
							v[1] = 0;
							v[2] = 0;
							v[3] = '';
							v[4] = 'error';
							SCREENMAN:SystemMessage('Bad mod in beat-based table (line '..i..')');
						end
					end
				end
				
				-----------------------------------------------------------------------------------------------------
				-- WinDEU's time-based len/end version of the #swag custom mod reader #teamproofofconcept (c) 2015 --
				-----------------------------------------------------------------------------------------------------
				if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --
					for i,v in pairs(mods2) do
						if v and table.getn(v) > 3 and v[1] and v[2] and v[3] and v[4] then
							if mod_time >=v[1] then
								if (v[4] == 'len' and mod_time <=v[1]+v[2]) or (v[4] == 'end' and mod_time <=v[2]) then
									if table.getn(v) == 5 then
										mod_do(v[3],v[5]);
									else
										mod_do(v[3]);
									end
								end
							end
						else
							v[1] = 0;
							v[2] = 0;
							v[3] = 'error';
							v[4] = 'error';
							SCREENMAN:SystemMessage('Bad mod in time-based table (line '..i..')');
						end
					end
				end
				
				--------------------------------------------------------------------------------------
				-- i dont know who this reader is but he looks like he is made out of EASE HAHAHAHA --
				-- original code by exschwasion, bastardized by taro for cmod support and less 'if' --
				--------------------------------------------------------------------------------------
				for i,v in pairs(mods_ease) do
					if v and table.getn(v) > 6 and v[1] and v[2] and v[3] and v[4] and v[5] and v[6] and v[7] then
						if beat >=v[1] then
							if (v[6] == 'len' and beat <=v[1]+v[2]) or (v[6] == 'end' and beat <=v[2]) then
								
								local duration = v[2];
								if v[6] == 'end' then duration = v[2] - v[1] end
								local curtime = beat - v[1]
								local diff = v[4] - v[3]
								local startstrength = v[3]
								local curve = v[7]
								local mod = v[5]
								
								local strength = curve(curtime, startstrength, diff, duration, v[10], v[11]) --extra parameters for back and elastic eases :eyes:
								
								local modstr = v[5] == 'xmod' and strength..'x' or (v[5] == 'cmod' and 'C'..strength or strength..' '..v[5])
								mod_do('*10000 '..modstr,v[8]);
								
							elseif (v[9] and ((v[6] == 'len' and beat <=v[1]+v[2]+v[9]) or (v[6] == 'end' and beat <=v[9]))) then
							
								local strength = v[4]
								
								local modstr = v[5] == 'xmod' and strength..'x' or (v[5] == 'cmod' and 'C'..strength or strength..' '..v[5])
								mod_do('*10000 '..modstr,v[8]);
								
							end
						end
					else
						SCREENMAN:SystemMessage('Bad mod in beat-based ease table (line '..i..')');
					end
				end
				
				--------------------
				-- Perframe stuff --
				--------------------
				
				SCREENMAN:GetTopScreen():effectmagnitude(dys_shake:GetX(),dys_shake:GetX(),0);
				
				for pn=1,2 do
					local a,b = GetJud(pn), GetCom(pn)
					if a then
						a:effectmagnitude(0,dys_judy:GetX(),0)
						a:basezoomx(dys_judy:GetZ())
						a:basezoomy(dys_judy:getaux())
					end
					if b then
						b:effectmagnitude(0,dys_judy:GetX(),0)
						b:basezoomx(dys_judy:GetZ())
						b:basezoomy(dys_judy:getaux())
					end
				end
				
				if beat > 0 and beat < 34 then
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:x( sw/2 + 160*(pn*2-3) + 32*dys_flicker*dys_aux:GetX()*math.sin(beat*math.pi) )
							a:y( sh/2 + 32*dys_flicker*dys_aux:GetX()*math.cos(beat*math.pi) )
						end
					end
				elseif beat > 44 and beat < 51 then
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:rotationx( 2*math.sin(beat*math.pi*0.5) )
							a:rotationy( 2*math.cos(beat*math.pi*0.5) )
						end
					end
				elseif beat > 51 and beat < 64 then
					local p2a = 90*math.min((beat-51.5)*2,1)
					local rspd = 0
					local addy = 0;
					if beat > 51 and beat < 52 then
						addy = -100*inOutQuad(beat-51,0,1,1)
					end
					if beat > 52 then
						addy = -100+100*inQuad((beat-52)/12,0,1,1)
					end
					if beat > 51 then
						rspd = 60*inCirc((beat-51)/13,0,1,1)
					end
					dys_rang = dys_rang + rspd
					for pn=1,2 do
						local a = Plr(pn)
						local ang = dys_rang+90*dys_flicker
						if pn == 2 then
							ang = ang+p2a
						end
						if a then
							a:y(sh/2 + addy)
							a:rotationz(ang)
						end
					end
				elseif beat > 68 and beat < 71.9 then
					local t = 0
					if beat > 68 and beat < 71 then
						t = outQuart((beat-68)/3,0,1,1)
					end
					if beat > 71 and beat < 72 then
						t = 1-inQuart((beat-71),0,1,1)
					end
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:x( sw/2 + (pn*2-3)*160*t )
							a:z( 0 + dys_flicker*(pn*2-3)*120*t )
							a:zoom( 1 + 0.2*dys_flicker*(pn*2-3)*t )
							a:zoomz( 1 + 0.2*t )
							a:rotationy( 420*t*(pn*2-3) )
						end
					end
				elseif beat > 72 and beat < 96 then
					for pn=1,2 do
						mod_do('*10000 '..(dys_hidsud:GetX()+440)..' hiddenoffset',1);
						mod_do('*10000 '..(dys_hidsud:GetX()-440)..' suddenoffset',1);
						mod_do('*10000 '..(dys_hidsud:GetX()+460)..' hiddenoffset',2);
						mod_do('*10000 '..(dys_hidsud:GetX()-460)..' suddenoffset',2);
					end
				elseif beat > 188 and beat < 193.5 then
					local pos = beat*math.pi*2
					if math.mod(beat,2) > 1.5 then
						pos = math.pi
					end
					if math.mod(beat,4) > 2 then
						pos = pos+math.pi
					end
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:rotationx(90-90*(pn*2-3)+90-90*math.cos(pos))
							a:y( sh/2 - 10*(pn*2-3)*math.cos(pos) )
						end
					end
				elseif beat > 203 and beat < 204 then
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							local xsc = 0 + 1.25*(beat-203)
							local x = 128 + 32*(beat-203)
							if pn == 1 then
								xsc = 2 - 0.75*(beat-203)
								x = -160*(beat-203)
							end
							local ysc = 1 + 0.25*(beat-203)
							local y = 1660*(beat-203)
							local wao = 0.2
							a:zoomx(xsc + wao*math.sin(beat*math.pi*4))
							a:zoomy(ysc)
							a:x(sw/2+x)
							a:y(sh/2+y)
						end
					end
				elseif beat > 216 and beat < 220 then
					
					mod_do('*10000 '..(dys_aux:GetX())..' invert')
					
				elseif beat > 224 and beat < 272 then
					
					for pn=1,2 do
						--[[
						local famt = 100+100*(pn*2-3)*math.cos(beat*math.pi);
						local iamt = 0; --50+50*(pn*2-3)*math.cos(beat*math.pi)
						]]
						if beat > 224 and beat < 248 then
						
							local m = 1 --math.min((beat-224)/16,1) --NO
							local a = Plr(pn)
							
							if beat < 225 then
								--mod_do('*10000 -100 flip, *10000 100 invert',pn)
								mod_do('*10000 no reverse',pn)
							end
							
							if pn == 1 or beat > 225 then
								if a then
									a:z(300*(pn*2-3)*math.sin(beat*math.pi))
								end
							end
							
							if pn == 1 or beat > 225 then
								local famt = -50+50*(pn*2-3)*dys_awoo:GetX()*math.cos(beat*math.pi);
								local iamt = 50-50*(pn*2-3)*dys_awoo:GetX()*math.cos(beat*math.pi)
								mod_do('*10000 '..famt..' flip, *10000 '..iamt..' invert',pn);
								
								local ramt = 50+50*(pn*2-3)*math.cos(beat*math.pi)
								
								mod_do('*10000 '..(m*ramt)..' reverse',pn)
							end
							
							
							
						elseif beat > 257 and beat < 272 then
							local m = 1 --math.min((beat-256)/16,1) --NO
							local a = Plr(pn)
							
							if pn == 2 or beat < 271 then
								if a then
									a:z(300*(pn*2-3)*math.sin(beat*math.pi))
								end
								if beat < 271 then
									local famt = -50+50*(pn*2-3)*dys_awoo:GetX()*math.cos(beat*math.pi);
									local iamt = 50-50*(pn*2-3)*dys_awoo:GetX()*math.cos(beat*math.pi)
									mod_do('*10000 '..famt..' flip, *10000 '..iamt..' invert',pn);
									
									local ramt = 50+50*(pn*2-3)*math.cos(beat*math.pi)
									
									--mod_do('*10000 '..(0+ramt)..' reverse, *10000 100 split',pn)
									
									mod_do('*10000 '..(0+ramt)..' reverse, *10000 '..(m*100)..' split',pn)
								end
							end
							
						end
						
					end
					
				elseif beat > 286 and beat < 320 then
					local mult = 0 + (beat-286)/32
					
					local splitter = 0
					
					if beat > 318 then
						splitter = inQuad((beat-318)/2,0,1,1)
					end
					
					if beat > 305 and beat < 318 then
					
						local spinny = (360*20)*inQuad((beat-305)/13,0,1,1)
					
						for pn=1,2 do
							local a = GetJud(pn)
							if a then
								a:rotationz(spinny)
							end
							local a = GetCom(pn)
							if a then
								a:rotationz(spinny)
							end
						end
						
					end
					
					for pn=1,2 do
						local a = Plr(pn)
						
						local newbeat = beat
						if beat > 304 and beat < 305 then
							newbeat = 304
						end
						if beat > 305 then
							newbeat = 305-beat
						end
						local ang = newbeat*0.125*math.pi + pn*math.pi*0.5 + math.pi*0.5*dys_flicker
						
						local bounce = math.min((beat-286)/8,1)
						
						if a then
							a:x(sw/2 + dys_rotamp:GetX()*math.sin(ang) + 320*splitter*(pn*2-3) )
							a:y(sh/2 - math.abs(30*bounce*math.sin(beat*math.pi)) )
							--a:z(0 + 1.5*dys_rotamp:GetX()*math.cos(ang) )
							a:zoom(dys_zoom:GetX() + math.cos(ang) * (dys_rotamp:GetX()/640) );
							a:rotationz( mult * (15+10*bounce)*(dys_rotamp:GetX()/160) * math.cos(beat*math.pi) * (pn*2-3) )
							a:zoomz(dys_aux:GetZ());
						end
					end
					
					if beat > 288 and beat < 315.5 then
						if math.mod(GAMESTATE:GetSongBeat(),2) < 1 then
							mod_do('*6 Flip',1);
						else
							mod_do('*6 Invert',2);
						end
					end
					
				end
				
				dys_stars:texcoordvelocity(dys_starscroll:GetX(),dys_starscroll:GetY())
				
				
				--[[ --FREEFORM EDITOR
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						if btns[1] == 1 then
							a:addy(-1) if pn == 1 then Trace('y:'..a:GetY()) end
						end
						if btns[2] == 1 then
							a:addy(1) if pn == 1 then Trace('y:'..a:GetY()) end
						end
						if btns[3] == 1 then
							a:addz(-1) if pn == 1 then Trace('z:'..a:GetZ()) end
						end
						if btns[4] == 1 then
							a:addz(1) if pn == 1 then Trace('z:'..a:GetZ()) end
						end
						if btns[5] == 1 then
							a:addrotationx(-.25) if pn == 1 then local rx, ry, rz = a:getrotation(); Trace('rx:'..rx) end
						end
						if btns[6] == 1 then
							a:addrotationx(.25) if pn == 1 then local rx, ry, rz = a:getrotation(); Trace('rx:'..rx) end
						end
					end
				end
				
				dys_d:GetShader():uniform1f( 'timer', math.floor(beat*8) )
				dys_g:GetShader():uniform1f( 'timer', 9999-math.floor(beat*8) )
				dys_d:GetShader():uniform1f( 'glitch', dys_d_gli:GetX() )
				dys_g:GetShader():uniform1f( 'glitch', dys_g_gli:GetX() )
				
				
				]]
				
				---------------------------------------
				-- ACTION RPGS AINT GOT SHIT ON THIS --
				---------------------------------------
				if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --
					while curaction<=table.getn(mod_actions) and GAMESTATE:GetSongBeat()>=mod_actions[curaction][1] do
						if mod_actions[curaction][3] or GAMESTATE:GetSongBeat() < mod_actions[curaction][1]+2 then
							if type(mod_actions[curaction][2]) == 'function' then
								mod_actions[curaction][2]()
							elseif type(mod_actions[curaction][2]) == 'string' then
								MESSAGEMAN:Broadcast(mod_actions[curaction][2]);
							end
						end
						curaction = curaction+1;
					end
				end
				
			end
			
			self:sleep(0.02);
			self:queuecommand('Update');

---------------------------------------------------------------------------------------
----------------------END DON'T TOUCH IT KIDDO-----------------------------------------
---------------------------------------------------------------------------------------
			
		end"
		
	/>
	
	<!--Handling messages here is still fun and profitable-->
	<CODE Type="Quad" OnCommand="hidden,1;z,1;"
	InitCommand="%function(self) dys_aux = self end"
	BangMessageCommand="stoptweening;x,2.5;linear,300/161;x,0;"
	/>
	<CODE Type="Quad" OnCommand="hidden,1"
	InitCommand="%function(self) dys_shake = self end"
	BangMessageCommand="stoptweening;x,50;linear,90/161;x,0;"
	Bang2MessageCommand="stoptweening;x,20;linear,90/161;x,0;"
	/>
	<CODE Type="Quad" OnCommand="hidden,1"
	InitCommand="%function(self) dys_rotamp = self end"
	/>
	<CODE Type="Quad" OnCommand="hidden,1;x,1"
	InitCommand="%function(self) dys_zoom = self end"
	/>
	<CODE Type="Quad" OnCommand="hidden,1;x,1"
	InitCommand="%function(self) dys_hidsud = self end"
	/>
	<CODE Type="Quad" OnCommand="hidden,1;x,1"
	InitCommand="%function(self) dys_awoo = self; end"
	/>
	<CODE Type="Quad" OnCommand="hidden,1;x,0;z,1;aux,1"
	InitCommand="%function(self) dys_judy = self; end"
	/>
	<CODE Type="Quad" OnCommand="hidden,1;x,0;y,0;"
	InitCommand="%function(self) dys_starscroll = self; end"
	/>
	<!--FREEFORM EDITOR-->
	<!--CODE Type="Quad" OnCommand="hidden,1;x,1"
	InitCommand="%function(self) btns = {0,0,0,0,0,0} end"
	StepP1Action3PressMessageCommand="%function(self) btns[1] = 1 end"
	StepP1Action3LiftMessageCommand="%function(self) btns[1] = 0 end"
	StepP1Action4PressMessageCommand="%function(self) btns[2] = 1 end"
	StepP1Action4LiftMessageCommand="%function(self) btns[2] = 0 end"
	StepP1Action5PressMessageCommand="%function(self) btns[3] = 1 end"
	StepP1Action5LiftMessageCommand="%function(self) btns[3] = 0 end"
	StepP1Action6PressMessageCommand="%function(self) btns[4] = 1 end"
	StepP1Action6LiftMessageCommand="%function(self) btns[4] = 0 end"
	StepP1Action7PressMessageCommand="%function(self) btns[5] = 1 end"
	StepP1Action7LiftMessageCommand="%function(self) btns[5] = 0 end"
	StepP1Action8PressMessageCommand="%function(self) btns[6] = 1 end"
	StepP1Action8LiftMessageCommand="%function(self) btns[6] = 0 end"
	/-->
	
	<Layer File="../bg/skygrad"  OnCommand="stretchto,0,0,sw,sh;cropbottom,.8;fadebottom,.05;diffuse,1,1,1,0;cropleft,0;cropright,.2;" PadOnMessageCommand="linear,60/161;diffusealpha,1;" PadOffMessageCommand="linear,60/161;diffusealpha,0;" />
	
	<Layer Type="ActorFrame" OnCommand="fov,60;rotationx,40;" ><children>
		<Layer File="pad/platform.model" OnCommand="hidden,1;diffusealpha,1;x,sw/2;y,sh/2+80;z,-150;zoom,0;zoomz,0;wag;effectmagnitude,0,1,0;"
		PadOnMessageCommand="hidden,0;rotationx,0;rotationz,0;rotationy,360;accelerate,50/161;zoom,.75;zoomz,.75;rotationy,180;decelerate,50/161;zoom,1.5;zoomz,1.5;rotationy,0;"
		PadOffMessageCommand="linear,60/161;rotationx,360;rotationy,180;rotationz,90;zoom,0;zoomz,0;queuecommand,Hide;" HideCommand="hidden,1;"
		/>
	</children></Layer>
	
	<!--This is for the time based mod reader-->
	<BitmapText
		Font="Common Normal"
		Text="test"
		OnCommand="x,SCREEN_CENTER_X;y,SCREEN_CENTER_Y;effectclock,music;playcommand,SetTime;hidden,1"
		SetTimeCommand="%function(self) self:settext(self:GetSecsIntoEffect()); mod_time = mod_globaloffset + tonumber(self:GetText());
		self:sleep(1/60); self:queuecommand('SetTime'); end"
	/>
	
	<Layer Type="Quad" OnCommand="blend,add;hidden,1;stretchto,0,sh/2-128-3,sw,sh/2-128+3;diffuse,1,0,0,0;" HideCommand="hidden,1;"
	InitCommand="%function(self) dys_haunt_line = self end" />
	
	<Layer Type="Quad" OnCommand="stretchto,0,0,sw,sh;diffuse,0,0,0,0" BlackMessageCommand="diffusealpha,1;sleep,60/161;diffusealpha,0;" />
	<Layer Type="Quad" OnCommand="stretchto,sw/2-320,0,sw/2+320,sh;diffuse,0,0,0,0"
	BlackFlashMessageCommand="diffusealpha,1;sleep,0.2;linear,1.5;diffusealpha,0;" />
	
	<Layer Type="Quad" OnCommand="zoomto,sw,sh;horizalign,right;x,sw/2-320;y,sh/2;diffuse,0,0,0,0" BlackFlashMessageCommand="diffusealpha,1;sleep,0.2;linear,1.5;diffusealpha,0;" />
	<Layer Type="Quad" OnCommand="zoomto,sw,sh;horizalign,left;x,sw/2+320;y,sh/2;diffuse,0,0,0,0" BlackFlashMessageCommand="diffusealpha,1;sleep,0.2;linear,1.5;diffusealpha,0;" />
	<Layer Type="Quad" OnCommand="zoomto,sw,sh;horizalign,right;x,sw/2-320;y,sh/2;diffuse,0,0,0,0" BlackFlashMessageCommand="diffusealpha,.4;linear,1;diffusealpha,0;" />
	<Layer Type="Quad" OnCommand="zoomto,sw,sh;horizalign,left;x,sw/2+320;y,sh/2;diffuse,0,0,0,0" BlackFlashMessageCommand="diffusealpha,.4;linear,1;diffusealpha,0;" />
	<Layer File="splineface" OnCommand="blend,add;scaletofit,0,0,sw,sh;diffusealpha,0;" BlackFlashMessageCommand="diffusealpha,1;sleep,0.2;linear,1.5;diffusealpha,0;" />
	<Layer File="splineface" OnCommand="scaletofit,0,0,sw,sh;diffusealpha,0;rainbow;effectperiod,1;" BlackFlashMessageCommand="diffusealpha,.4;linear,1;diffusealpha,0;" />
	<Layer Type="Quad" OnCommand="stretchto,0,0,sw,sh;diffuse,1,1,1,0" WhiteFlashMessageCommand="diffusealpha,1;linear,4;diffusealpha,0;" />
	
	<Layer File="starpool" />
	
	<!--Layer File="d" Shader="horizon.frag" Var="dys_d" OnCommand="x,sw/2;y,sh/2-30;basezoomx,640/800;basezoomy,640/800;zoomx,.9;zoomy,1.2;diffusealpha,0;queuecommand,Make;"
		MakeCommand="%function(self)
			self:GetShader():uniform1f( 'glitch', 0.1 )
			self:GetShader():uniform1f( 'timer', 10 )
		end"
	/>
	<Layer File="g" Shader="horizon.frag" Var="dys_g" OnCommand="x,sw/2;y,sh/2+30;basezoomx,640/800;basezoomy,640/800;zoomx,.9;zoomy,1.2;diffusealpha,0;queuecommand,Make;"
		MakeCommand="%function(self)
			self:GetShader():uniform1f( 'glitch', 0.1 )
			self:GetShader():uniform1f( 'timer', 10 )
		end"
	/>
	
	<Aux Var="dys_d_gli" OnCommand="x,.2" />
	<Aux Var="dys_g_gli" OnCommand="x,.2" /-->
	
	<Layer File="dg.mpg" OnCommand="blend,add;stretchto,0,0,sw,sh;croptop,.3;cropbottom,.3;hibernate,24.907;sleep,2.5;diffuse,1,0,0,1;queuecommand,Hide" HideCommand="hidden,1" />
	
	<Layer
		Font="Common Normal"
		OnCommand="x,SCREEN_CENTER_X-140;y,SCREEN_CENTER_Y-120"
		Text=""
		CountdownMessageCommand="diffuse,#00FF00FF;settext,4;zoom,4;linear,0.1;zoom,2;sleep,30/161-0.1;queuecommand,Three"
		ThreeCommand="diffuse,#60A000FF;settext,3;zoom,4;linear,0.1;zoom,2;sleep,30/161-0.1;queuecommand,Two"
		TwoCommand="diffuse,#A06000FF;settext,2;zoom,4;linear,0.1;zoom,2;sleep,30/161-0.1;queuecommand,One"
		OneCommand="diffuse,#FF0000FF;settext,1;zoom,4;linear,0.1;zoom,2;sleep,30/161-0.1;diffuse,#00000000"
	/>
	
	<Layer
		Font="Common Normal"
		OnCommand="x,SCREEN_CENTER_X+140;y,SCREEN_CENTER_Y-120"
		Text=""
		CountdownMessageCommand="diffuse,#00FF00FF;settext,4;zoom,4;linear,0.1;zoom,2;sleep,30/161-0.1;queuecommand,Three"
		ThreeCommand="diffuse,#60A000FF;settext,3;zoom,4;linear,0.1;zoom,2;sleep,30/161-0.1;queuecommand,Two"
		TwoCommand="diffuse,#A06000FF;settext,2;zoom,4;linear,0.1;zoom,2;sleep,30/161-0.1;queuecommand,One"
		OneCommand="diffuse,#FF0000FF;settext,1;zoom,4;linear,0.1;zoom,2;sleep,30/161-0.1;diffuse,#00000000"
	/>
	
</children></ActorFrame>