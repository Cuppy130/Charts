<ActorFrame
InitCommand="%function(self)

	slumpo = false
	for pn=1,2 do
		if GAMESTATE:IsPlayerEnabled(pn-1) then
			if GAMESTATE:GetCurrentSteps(pn-1):GetDifficulty() == 5 then
				slumpo = true
			end
		end
	end
	
	started = false

	if FUCK_EXE then

		songName = GAMESTATE:GetCurrentSong():GetSongDir();
		
		mod_globaloffset = PREFSMAN:GetPreference('GlobalOffsetSeconds');
		
		sw = SCREEN_WIDTH
		sh = SCREEN_HEIGHT --shortcuts
		
		function Plr(pn)
			return _G['P'..pn]
		end
		function GetJud(pn)
			return _G['jud'..pn]
		end
		function GetCom(pn)
			return _G['com'..pn]
		end
		
		function mod_do(str,pn)
			if pn then
				GAMESTATE:ApplyGameCommand('mod,'..str,pn)
			else
				GAMESTATE:ApplyGameCommand('mod,'..str)
			end
		end
		
		function taro_Sound(str)
			local met = GAMESTATE:GetCurrentSong():GetSongDir();
			SOUND:PlayOnce(met..'lua/'..str..'.ogg');
		end
		
		function math.clamp(val,min,max)
			if val < min then return min end
			if val > max then return max end
			return val
		end
		
		
		function gmr_main()
		
			if GAMESTATE:GetSongBeat()>=0 and started and not checked then
		
				local ThingsToGrab = {'LifeP1','LifeP2','ScoreP1','ScoreP2','BPMDisplay','LifeFrame','ScoreFrame',
										'Lyrics','SongBackground','SongForeground','Overlay','Underlay'}
				local ThingsToHide = {'LifeP1','LifeP2','ScoreP1','ScoreP2','BPMDisplay','LifeFrame','ScoreFrame','Overlay','Underlay'}
				
				for i,v in ipairs(ThingsToGrab) do
					_G[v] = SCREENMAN:GetTopScreen():GetChild(v) or nil
				end
				
				for i,v in ipairs(ThingsToHide) do
					if _G[v] then _G[v]:hidden(1) end
				end
				
				--name players, judgment and combo
				for pn=1,3 do
					table.insert(mod_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP'..pn));
					_G['P'..pn] = SCREENMAN:GetTopScreen():GetChild('PlayerP'..pn) or nil;
					if _G['P'..pn] then
						_G['jud'..pn] = _G['P'..pn]:GetChild('Judgment');
						_G['com'..pn] = _G['P'..pn]:GetChild('Combo');
					end
				end
				
				if not P1 or not P2 or not P3 then
					SCREENMAN:SystemMessage('This file requires both players.');
				end
				
				screen = SCREENMAN:GetTopScreen();
				checked = true; --let this only run once
				
			end

			local beat = GAMESTATE:GetSongBeat()
			local time = GAMESTATE:GetSongTime()
			
			--if time > opt_lastTime then
			if checked then
			
---------------------------------------------------------------------------------------
----------------------Begin table handlers---------------------------------------------
---------------------------------------------------------------------------------------
			
				disable = false;
				if disable ~= true and beat > mod_firstSeenBeat+0.1 and checked then
					
					-----------------------
					-- Player mod resets --
					-----------------------
					for i=1,3 do
						mod_do('clearall',i)
					end
					
					------------------------------------------------------------------------------
					-- custom mod reader by TaroNuke edited by WinDEU and re-stolen by TaroNuke --
					------------------------------------------------------------------------------
					
					for i,v in pairs(mods) do
						if v and table.getn(v) > 3 and v[1] and v[2] and v[3] and v[4] then
							if beat >=v[1] then
								if (v[4] == 'len' and beat <=v[1]+v[2]) or (v[4] == 'end' and beat <=v[2]) then
									if table.getn(v) == 5 then
										mod_do(v[3],v[5]);
									else
										mod_do(v[3]);
									end
								end
							end
						else
							v[1] = 0;
							v[2] = 0;
							v[3] = '';
							v[4] = 'error';
							SCREENMAN:SystemMessage('Bad mod in beat-based table (line '..i..')');
						end
					end
					
					-----------------------------------------------------------------------------------------------------
					-- WinDEU's time-based len/end version of the #swag custom mod reader #teamproofofconcept (c) 2015 --
					-----------------------------------------------------------------------------------------------------
					if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --
						for i,v in pairs(mods2) do
							if v and table.getn(v) > 3 and v[1] and v[2] and v[3] and v[4] then
								if mod_time >=v[1] then
									if (v[4] == 'len' and mod_time <=v[1]+v[2]) or (v[4] == 'end' and mod_time <=v[2]) then
										if table.getn(v) == 5 then
											mod_do(v[3],v[5]);
										else
											mod_do(v[3]);
										end
									end
								end
							else
								v[1] = 0;
								v[2] = 0;
								v[3] = 'error';
								v[4] = 'error';
								SCREENMAN:SystemMessage('Bad mod in time-based table (line '..i..')');
							end
						end
					end
					
					--------------------------------------------------------------------------------------
					-- i dont know who this reader is but he looks like he is made out of EASE HAHAHAHA --
					-- original code by exschwasion, bastardized by taro for cmod support and less 'if' --
					--------------------------------------------------------------------------------------
					for i,v in pairs(mods_ease) do
						if v and table.getn(v) > 6 and v[1] and v[2] and v[3] and v[4] and v[5] and v[6] and v[7] then
							if beat >=v[1] then
								if (v[6] == 'len' and beat <=v[1]+v[2]) or (v[6] == 'end' and beat <=v[2]) then
									
									local duration = v[2];
									if v[6] == 'end' then duration = v[2] - v[1] end
									local curtime = beat - v[1]
									local diff = v[4] - v[3]
									local startstrength = v[3]
									local curve = v[7]
									local mod = v[5]
									
									local strength = curve(curtime, startstrength, diff, duration, v[10], v[11]) --extra parameters for back and elastic eases :eyes:
									
									local modstr = v[5] == 'xmod' and strength..'x' or (v[5] == 'cmod' and 'C'..strength or strength..' '..v[5])
									mod_do('*10000 '..modstr,v[8]);
									
								elseif (v[9] and ((v[6] == 'len' and beat <=v[1]+v[2]+v[9]) or (v[6] == 'end' and beat <=v[9]))) then
								
									local strength = v[4]
									
									local modstr = v[5] == 'xmod' and strength..'x' or (v[5] == 'cmod' and 'C'..strength or strength..' '..v[5])
									mod_do('*10000 '..modstr,v[8]);
									
								end
							end
						else
							SCREENMAN:SystemMessage('Bad mod in beat-based ease table (line '..i..')');
						end
					end
					
					----------------------------------------
					-- HBLBHCBLBJGBHL DO THIS EVERY FRAME --
					----------------------------------------
					
					if table.getn(mod_perframes)>0 then
						for i=1,table.getn(mod_perframes) do
							local a = mod_perframes[i]
							if beat > a[1] and beat < a[2] then
								a[3](beat);
							end
						end
					end
					
					groove_fcmarker:GetShader():uniform1f('left',math.max(groove_fcmarker:getaux(),0))
					groove_fcmarker:GetShader():uniform1f('right',math.max(groove_fcmarker:getaux()*-1,0))
					groove_title:GetShader():uniform1f('left',math.max(groove_title:getaux(),0))
					groove_title:GetShader():uniform1f('right',math.max(groove_title:getaux()*-1,0))
					
					groove_update(beat);
					
					if beat > 93.5 and beat < 97 then
						
						local b93_5 = 2
						
						for i=1,table.getn(gc_notedata) do
			
							if gc_notedata[i][1] == 93.5 then
								b93_5 = gc_notedata[i][2]
								--Trace('FIXING GC ROLL')
							end
						end
						
						mod_do('*-1 -500 holdstealth'..b93_5, 1)
						mod_do('*-1 -500 stealth'..b93_5, 1)
						--mod_do('*-1 -500 holdtiny'..b93_5, 1)
						
					end
					
					---------------------------------------
					-- ACTION RPGS AINT GOT SHIT ON THIS --
					---------------------------------------
					while curaction<=table.getn(mod_actions) and GAMESTATE:GetSongBeat()>=mod_actions[curaction][1] do
						if mod_actions[curaction][3] or GAMESTATE:GetSongBeat() < mod_actions[curaction][1]+2 then
							if type(mod_actions[curaction][2]) == 'function' then
								mod_actions[curaction][2]()
							elseif type(mod_actions[curaction][2]) == 'string' then
								MESSAGEMAN:Broadcast(mod_actions[curaction][2]);
							end
						end
						curaction = curaction+1;
					end
					
				end
				
				opt_lastTime = time;
				
			end
			
			return 0
			
		end
		
		
		
		
	else
		
		SCREENMAN:SystemMessage('Requires NotITG ver. 3.2!')
		
	end
	
end"
><children>

	<Layer Type="ActorFrame" Condition="FUCK_EXE"><children>

		<LAER
			Type="Quad"
			InitCommand="hidden,1"
			OnCommand="sleep,9999;"
		/>
		<LAER
			Type="Quad"
			InitCommand="hidden,1"
			OnCommand="sleep,0.02;queuecommand,Main"
			MainCommand="%function(self)
				self:tween(999,'gmr_main()');
			end"
		/>
		
		<LAER File="modhelpers.xml" />
		<LAER File="easing.xml" />
		<LAER File="groove_coaster.xml" />
		<LAER File="freq.xml" />
		<LAER File="gmr_c2l_fills.xml" />
		<LAER File="spellcard" />
		
		<LAER
			Type="Quad"
			InitCommand="hidden,1"
			OnCommand="%function(self)
				checked = false; P1=nil;P2=nil;P3=nil;P4=nil;jud1=nil;com1=nil;jud2=nil;com2=nil;jud3=nil;com3=nil;
				started = false
				self:sleep(0.02)
				self:queuecommand('Do')
			end"
			DoCommand="%function(self)
			
				if tonumber(GAMESTATE:GetVersionDate()) > 20190000 then
				
					checked = false; P1=nil;P2=nil;P3=nil;P4=nil;jud1=nil;com1=nil;jud2=nil;com2=nil;jud3=nil;com3=nil;
				
					---------------------------------------------------------
					---------DOCUMENTATION-----------------------------------
					---------------------------------------------------------
					
					--function perframe( beat, endBeat )
						--return true if the current beat is between 'beat' and 'endBeat'
					
					--function mod_shader(beat,key,which)
						--turn on shader key at specified beat (up to 10 keys available, defined by 'which' = 0-9
						
					--function mod_insert(beat,len,mod,len_or_end,pn)
						--insert mod into beat mods table
					--function mod_insert2(time,len,mod,len_or_end,pn)
						--insert mod into time mods table
						
					--function mod_message(beat,msg,persistent)
						--insert something into the actions table.
						--msg can also be a function. If string, a message gets broadcast at that beat
						--if 'persistent' is true, message will run even if editor starts at a beat past it
						
					--function mod_blacklist(t,n)
						--check if number n occurs in table t
						--useful for doing 'every beat EXCEPT the contents of t'
						
					--function simple_m0d(beat,strength,mult,mod)
					--function simple_m0d2(beat,strength,mult,mod,pn)
					--function simple_m0d3(beat,strength,duration,bpm,mod,pn)
						--activate mods at specific beat but also deactivate them
						
					--function mod_wiggle(beat,num,div,amt,speed,mod,pn,first)
						--alternates a mod back and forth before resetting to 0
						
					--function mod_springt(time,strength,dur,mod,pn)
						--time-based per-frame alternating mod that decreases based on how much time is left.
							--think doorstopper
					
					--function mod_springt2(time,strength,dur,mod,pn)
						--time-based per-frame alternating mod
					
					--function mod_onebeat(beat,strength,pn)
						--turns on beat for the beat specified, at the desired strength	
					
					--function switcheroo_add(beat,which,speed,len,pn)
						--adds a column swap at the desired beat
					--[[	switcheroos = {normal = {0,0}, ldur = {0,0}, reset = {0,0},
							flip = {100,0}, rudl = {100,0}, invert = {0,100}, dlru = {0,100},
							ludr = {25,-75}, rdul = {75,75}, drlu = {25,125}, ulrd = {75,-125}, urld = {100,-100}}
					]]
					
					--use a variable called 'switcheroo_width' to change how much space is between each column
					--e.g. switcheroo_width = 2 for ayakashi
					
					--function mod_sugarkiller(beat,duration,speed,minstealth,maxstealth,pn)
						--portable version of the effect from sugarkill X
						
					--function doSpline(spd, axis, path, col)
						--draws spline 'path' in specified axis, for specific col. Offsets are *10000, but positions use *spd
						
					--function doSplineAll(spd, axis, path)
						--same as above, but for all columns
						--(faster performance than using doSpline 4 times due to more efficient concat)
					
					--function mindf_rotateAndCounter(xDegrees, yDegrees, zDegrees, player)
						--counteract euler rotations after rotating player in multiple axes, using a TON of math.
					
					
					---------------------------------------------------------
					--------END DOCUMENTATION--------------------------------
					---------------------------------------------------------
					
					local m = mod_insert
					local m2 = mod_message
					local me = mod_ease
					
					
					local l = 'len'
					local e = 'end'
					
					
					
					
					
					
					
					init_modsp1 = '';
					init_modsp2 = '';
					
					mod_plr = {};
					
					mod_firstSeenBeat = GAMESTATE:GetSongBeat(); --necessary to prevent long freezes
					
					
					
					
					
					
					
					
					
					
					
		---------------------------------------------------------------------------------------
		----------------------Begin tables 'n stuff--------------------------------------------
		---------------------------------------------------------------------------------------

					--beat based mods
					--{beat_start, beat_end, mods, len_or_end, player_number}
					mods = {
						{0,9999,'*2 2x, *1000 no beat, *10000 -99999 cover','end'},
					}
					
					--switcheroos = {{0,0},{100,0},{0,100},{25,-75},{75,75},{25,125},{75,-125},{100,-100}}
					
					
					
					
					
					
					
					--time based mods
					mod_time = 0;
					--{time_start, time_end, mods, len_or_end, player_number}
					mods2 = {
						--{0,200.345,'3x','end',1},
					}
					
					
					
					
					--this is both a message broadcaster and a function runner
					--if you put {beat,'String'}, then 'String' is broadcast as a message on that beat
					--if you put {beat,function() somecode end}, then function() is run at that beat
					--see example on beat 32
					
					curaction = 1;
					--{beat,thing,persists}
					mod_actions = {
					
						{0,'GetProxy',true},
						
						{0,function()
						
							GAMESTATE:ForceSmoothLines(1);
						
							for pn=1,3 do
								local a = Plr(pn)
								if a then
									a:SetAwake(true)
									a:GetChild('NoteField'):y(0);
									a:fov(60)
									a:SetFarDist(10000)
									a:x(sw/2)
									a:y(sh/2)
								end
								
								
								local a = Plr(pn)
								if a and pn == 3 then -- if they exist do a thing
									a:SetArrowPathBlendMode( 'add' );
									
									--[[
									for col = 0,3 do -- iterate through all the columns
										a:SetNumPathGradientPoints(col,1)	-- for each column, set the number of points to 1
									end
									a:SetPathGradientPoint(0,0,0) -- set their points
									a:SetPathGradientPoint(0,1,0)
									a:SetPathGradientPoint(0,2,0)
									a:SetPathGradientPoint(0,3,0)

									a:SetPathGradientColor(0,0,1,0,0,1)	-- set their colors and shiet
									a:SetPathGradientColor(0,1,0,1,0,1)
									a:SetPathGradientColor(0,2,0,0,1,1)
									a:SetPathGradientColor(0,3,1,1,0,1)
									]]
									
								end
								
								
							end
							
							GAMESTATE:UnloadSteps(2)
							
							for pn=1,2 do
								local d = 0.2; if pn == 2 then d = 0.8 end
								
								local b = _G['jud'..pn]
								if b then
									b:hidden(1);
									b:basezoomx(1);
									b:basezoomy(1);
								end
								local c = _G['com'..pn]
								if c then
									c:hidden(1);
									c:basezoomx(1);
									c:basezoomy(1);
								end
								
								local b = _G['jud'..pn..'p']
								if b then
									b:hidden(0);
									b:basezoomx(.8);
									b:basezoomy(.8);
									b:x(SCREEN_WIDTH*d)
									b:y(SCREEN_HEIGHT*0.5)
									--Trace(tostring(b));
								end
								local c = _G['com'..pn..'p']
								if c then
									c:hidden(0);
									c:basezoomx(.8);
									c:basezoomy(.8);
									c:x(SCREEN_WIDTH*d)
									c:y(SCREEN_HEIGHT*0.5)
								end
								
								if not Plr(pn) then
									groove_fc[pn] = false;
								end
								
							end
							
						
							
						end,true},
						
					}
					
					
					
					
					mod_perframes = {
					}
					
					function mpf(s,e,f)
						table.insert(mod_perframes,{s,e,f})
					end
					
					
					--beat-based ease mods
					--{time_start, time_end, mod_start, mod_end, mod, len_or_end, ease_type, player_number, sustaintime, optional_param1, optional_param2}
					--valid ease types are:
						--linear
						--inQuad    outQuad    inOutQuad    outInQuad
						--inCubic   outCubic   inOutCubic   outInCubic
						--inQuart   outQuart   inOutQuart   outInQuart
						--inQuint   outQuint   inOutQuint   outInQuint
						--inSine    outSine    inOutSine    outInSine
						--inExpo    outExpo    inOutExpo    outInExpo
						--inCirc    outCirc    inOutCirc    outInCirc
						--inElastic outElastic inOutElastic outInElastic    --can take 2 optional parameters - amplitude & period
						--inBack    outBack    inOutBack    outInBack       --can take 1 optional parameter  - spring amount
						--inBounce  outBounce  inOutBounce  outInBounce
						
					mods_ease = {
						-- EXAMPLE TWEEN: from beat 0 to 4, make rotationz go from 360 to 0 with the inOutBack tween
						--{0,4,360,0,'rotationz','end',inOutBack},
					}
					
					
					
					
					
					gc_notedata = {}
					
					for pn=1,2 do
						local a = SCREENMAN:GetTopScreen():GetChild('PlayerP'..pn)
						if a then
							gc_notedata = a:GetNoteData()
							break;
						end
					end
					
					
					
					
					
					
					
					--
					m(0,999,'*4 50 flip, *4 90 dark, *4 50 reverse, 100 drawsize, dizzyholds, -100 spiralholds, zbuffer, *1000 stealthpastreceptors, *1000 sudden, *1000 hidden','end',1)
					m(0,999,'*4 50 flip, *4 90 dark, *4 50 reverse, 100 drawsize, dizzyholds, -100 spiralholds, zbuffer, *1000 stealthpastreceptors, *1000 sudden, *1000 hidden','end',2)
					--
					m(0,999,'*1000 stealth',e,1)
					
					m(0,999,'*1000 manualnoteflash, *1000 stealthtype, *1000 halgun',e)
					
					m(0,999,'*4 50 flip, *1000 stealth, *1000 dark, *1000 stealthpastreceptors, *100 100 arrowpathdrawsize, *1000 -100 drawsize, *1000 -100 drawsizeback',e,3)
					m(0,272.5,'*100 arrowpath',e,3)
					m(272.5,1,'*100 no arrowpath',l,3)
					
					--sections that are running groove coaster (format: {start,end,start,end,...})
					groove_sections = {0,999}
					
					--create the required tables
					groove_registerpath(1)
					
					--car = cam rotation
					--caz = cam zoom
					--cat = cam transition
					--caf = cam follow
					
					--groove path = let's start travelling( start beat,len (beats),{x,y,z},{tweenx,y,z}, column )
					
					--intro
					--groove_active_player(0,2);
					groove_path(0,32.25,{0,nil,-32250},{linear,nil,linear});
					
					groove_cat( 0,0, 'linear', nil, nil, -100, true );
					
					--notes fall towards the targets( beat, len, tween, fallamp{x,y,z}, falltime{s,e}, player, persist)
					groove_fall( 0,0, 'linear', {1,1,1}, {0,300}, 2, true )
					--(when, distance of l, d, u, r, player)
					groove_fall_x( 0, -600, 0, 0, 600, 2 );
					groove_fall_y( 0, 0, 600, -600, 0, 2 );
					groove_fall_z( 0, 0, 0, 0, 0, 2 );
					
					groove_caz( 0,0, 'linear', 0.8, true );
					groove_car( 0,0,'linear',90, -135, nil );
					
					groove_car( 3, 3.5 ,'outQuad', nil, -170, nil );
					groove_car( 6.5, 7 ,'inOutQuad', nil, -135, nil );
					groove_car( 13.5, 3.5 ,'inQuad', nil, -180, nil );
					
					groove_car( 18, 6,'linear', 45, 0, nil );
					
					groove_car( 24, 0,'linear', 45, 0, nil, true );
					
					groove_fall( 18, 6,'linear', 0, 500 );
					
					groove_fall( 24, 0,'linear', 0, 500, nil, true );
					
					me(27,28,50,0,'flip',e,linear,nil,50.5)
					me(27,28,90,50,'dark',e,linear,1,50.5)
					me(27,28,90,50,'dark',e,linear,2,50.5)
					
					mod_wiggle(27,4,4,200,2,'drunk');
					simple_m0d(28,-500,.3,'tiny');
					simple_m0d(28.5,-500,.3,'tiny');
					simple_m0d(29,-500,.3,'tiny');
					
					groove_caf(29, false, true, true );
					
					groove_path(32.25,.75,{-600,nil,-750},{linear,nil,linear});
					
					
					
					groove_path(33,2.25,{0,nil,-2250},{linear,nil,linear});
					groove_path(35.25,.75,{600,nil,-750},{linear,nil,linear});
					
					groove_path(36,2.25,{0,nil,-2250},{linear,nil,linear});
					groove_path(38.25,.75,{600,nil,-750},{linear,nil,linear});
					
					--groove_path(39,200,{0,nil,-200000},{linear,nil,linear});
					
					groove_path(39,1.5,{0,0,-1500},{nil,nil,nil});
					groove_path(40.5,1,{-600,0,-1000},{nil,nil,nil});
					
					--sideways
						groove_path(41.5,3,{-600-0,-300,-3000},{inOutQuad,outInQuad,nil},0);
						groove_path(41.5,3,{-600-100,-100,-3000},{inOutQuad,outInQuad,nil},1);
						groove_path(41.5,3,{-600-200,100,-3000},{inOutQuad,outInQuad,nil},2);
						groove_path(41.5,3,{-600-300,300,-3000},{inOutQuad,outInQuad,nil},3);
						groove_car( 41.5,3,'inOutQuad', nil, 10, 0 );
					--and back
						groove_path(44.5,3,{600-0,300,-3000},{inQuad,outInQuad,nil},0);
						groove_path(44.5,3,{600+100,100,-3000},{inQuad,outInQuad,nil},1);
						groove_path(44.5,3,{600+200,-100,-3000},{inQuad,outInQuad,nil},2);
						groove_path(44.5,3,{600+300,-300,-3000},{inQuad,outInQuad,nil},3);
						groove_car( 44.5,3,'inOutQuad', nil, 0, 0 );
					--and right
						groove_path(47.5,3,{600-0,300,-3000},{outQuad,outInQuad,nil},0);
						groove_path(47.5,3,{600-100,100,-3000},{outQuad,outInQuad,nil},1);
						groove_path(47.5,3,{600-200,-100,-3000},{outQuad,outInQuad,nil},2);
						groove_path(47.5,3,{600-300,-300,-3000},{outQuad,outInQuad,nil},3);
						groove_car( 47.5,3,'inOutQuad', nil, -10, 0 );
					--and back
						groove_path(50.5,1.5,{-600+0,-300,-1500},{inOutQuad,outInQuad,nil},0);
						groove_path(50.5,1.5,{-600+100,-100,-1500},{inOutQuad,outInQuad,nil},1);
						groove_path(50.5,1.5,{-600+200,100,-1500},{inOutQuad,outInQuad,nil},2);
						groove_path(50.5,1.5,{-600+300,300,-1500},{inOutQuad,outInQuad,nil},3);
						
					groove_car( 50.5,1.5,'inOutQuad', -30, 0, 0 );
					
					groove_sudden( 50.5,1.5,'linear', 80 );
					
					me(50.5,51.5,0,50,'flip',e,linear,nil)
					me(50.5,51.5,50,95,'dark',e,linear,1)
					me(50.5,51.5,50,95,'dark',e,linear,2)
					
					groove_fall( 50.5, 1, 'linear', {1,1,1}, {0,600}, nil)
					
					
					
					
					
					
					
					
					
					
					--10-9-10-9 section 1 (beat 52)
					
					m2(50,function()
						test_cube:linear(120/133)
						test_cube:diffuse(0,0,0,1)
					end)
					m2(70.5,function()
						test_cube:linear(2.5*60/133)
						test_cube:diffuse(.3,.3,.3,1)
					end)
					
					groove_fall_angle( 50, 1200, 'xy', 190+30,190+10,190-10,190-30, 2 )
					groove_fall_z( 50, 0,0,0,0, 2 )
					
					groove_fall_angle( 52, 800, 'zy', 190+30,190+10,190-10,190-30, 1 )
					groove_fall_x( 52, 0,0,0,0, 1 )
					
					groove_fall_angle( 54.75, -1600, 'xy', 0-30,0-10,0+10,0+30, 2 )
					groove_fall_z( 54.75, 800,800,800,800, 2 )
					
					groove_fall_angle( 57.25, 800, 'zy', 170-30,170-10,170+10,170+30, 1 )
					groove_fall_x( 57.25, 0,0,0,0, 1 )
					
					groove_fall_angle( 60, 1200, 'xy', -10-30,-10-10,-10+10,-10+30, 2 )
					groove_fall_z( 60, 0,0,0,0, 2 )
					
					groove_fall_angle( 62.5, 1600, 'zy', -10-30,-10-10,-10+10,-10+30, 1 )
					groove_fall_x( 62.5, 0,0,0,0, 1 )
					
					groove_fall_angle( 65.25, 1200, 'xy', 10+30,10+10,10-10,10-30, 2 )
					groove_fall_z( 65.25, 0,0,0,0, 2 )
					
					groove_fall_angle( 67.75, 1600, 'zy', 10+30,10+10,10-10,10-30, 1 )
					groove_fall_x( 67.75, 0,0,0,0, 1 )
					
					groove_fall(70.5, 2.5, 'linear', {0,0,0}, {0,600}, nil)
					
					groove_caf( 52, true, true, true );
					
					groove_car( 52, 21,'linear', nil, -720, nil );
					
					groove_car( 52, 2.75,'inOutQuad', 30, nil, nil );
					groove_car( 54.75, 2.5,'inOutQuad', -30, nil, nil );
					groove_car( 57.25, 2.75,'inOutQuad', 30, nil, nil );
					groove_car( 60, 2.5,'inOutQuad', -60, nil, nil );
					groove_car( 62.5, 2.75,'inOutQuad', 30, nil, nil );
					groove_car( 65.25, 2.5,'inOutQuad', -30, nil, nil );
					groove_car( 67.75, 2.75,'inOutQuad', 30, nil, nil );
					groove_car( 70.5, 2.5,'inOutQuad', -30, nil, nil );
					
					groove_cat( 52, 5.25, 'inOutQuad', nil, nil, 100, true );
					groove_cat( 57.25, 5.25, 'inOutQuad', nil, nil, -100, true );
					groove_cat( 62.5, 5.25, 'inOutQuad', nil, nil, 100, true );
					groove_cat( 67.75, 5.25, 'inOutQuad', nil, nil, -100, true );
					
					--we move 2750 both times so we form two perfect squares in the x and z axes
					groove_path(52,2.75,{0,-2750*0.707,-2750*0.707},nil);
					
					groove_path(54.75,2.5,{2750*0.707,-2750*0.707,0},nil);
					
					groove_path(57.25,2.75,{0,-2750*0.707,2750*0.707},nil);
					
					groove_path(60,2.5,{-2750*0.707,-2750*0.707,0},nil);
					
					groove_path(62.5,2.75,{0,2750*0.707,-2750*0.707},nil);
					
					groove_path(65.25,2.5,{2750*0.707,2750*0.707,0},nil);
					
					groove_path(67.75,2.75,{0,2750*0.707,2750*0.707},nil);
					
					groove_path(70.5,2.5,{-2750*0.707,2750*0.707,0},nil);
					
					groove_active_player(54.5,1)
					groove_active_player(57,2)
					groove_active_player(59.75,1)
					groove_active_player(62.25,2)
					groove_active_player(65,1)
					groove_active_player(67.5,2)
					groove_active_player(70.25,1)
					groove_active_player(72.75,2)
					
					m(52,73,'*10000 no stealth',e,1)
					
					--Trace('STEALTH SPLINE FOR P2 {when,amt}')
					--for i=1,table.getn(groove_splines_1_stealth2[1]) do
					--	Trace('{'..tostring(groove_splines_1_stealth2[1][i][1])..','..tostring(groove_splines_1_stealth2[1][i][2])..'}')
					--end
					
					groove_car( 73, 0,'inOutSine', -30, 0, 0, true);
					
					-----------------
					
					
					
					
					
					me(70.5,73,50,0,'flip',e,linear,nil,79)
					me(70.5,73,90,50,'dark',e,linear,1,79)
					me(70.5,73,90,50,'dark',e,linear,2,79)
					
					me(79,86,0,50,'flip',e,inOutQuad)
					me(79,86,50,95,'dark',e,inOutQuad,1)
					me(79,86,50,95,'dark',e,inOutQuad,2)
					
					
					--75.75
					
					groove_path(73,14.5,{0,0,-14500},nil);
					
					groove_car( 75.75, 2.625, 'inSine', 0, nil, nil );
					groove_car( 75.75+2.625, 2.625, 'outSine', 30, nil, nil );
					groove_car( 75.75, 2.625, 'outSine', nil, -30, nil );
					groove_car( 75.75+2.625, 2.625, 'inSine', nil, 0, nil );
					--groove_car( 75.75, 5.25, 'outSine', nil, nil, 360 );
					
					groove_car( 81,5,'inOutQuad', 45, nil, nil );
					
					groove_caf( 81, false, true, true );
					
					function groove_ball(b, l, cols, tween, zmult)
						if not tween then tween = {outCirc,inCirc} end
						if not zmult then zmult = 1 end
						groove_path(b,l/2,{cols[1],0,-1000*zmult*l/2},{tween[1],nil,nil},0);
						groove_path(b,l/2,{cols[2],0,-1000*zmult*l/2},{tween[1],nil,nil},1);
						groove_path(b,l/2,{cols[3],0,-1000*zmult*l/2},{tween[1],nil,nil},2);
						groove_path(b,l/2,{cols[4],0,-1000*zmult*l/2},{tween[1],nil,nil},3);
						groove_path(b+l/2,l/2,{-cols[1],0,-1000*zmult*l/2},{tween[2],nil,nil},0);
						groove_path(b+l/2,l/2,{-cols[2],0,-1000*zmult*l/2},{tween[2],nil,nil},1);
						groove_path(b+l/2,l/2,{-cols[3],0,-1000*zmult*l/2},{tween[2],nil,nil},2);
						groove_path(b+l/2,l/2,{-cols[4],0,-1000*zmult*l/2},{tween[2],nil,nil},3);
					end
					
					me(86,87.5,90,50,'dark',e,inOutQuad,1,101)
					me(86,87.5,90,50,'dark',e,inOutQuad,2,101)
					
					--BITE THIS ONIONS
					groove_ball(87.5,1,{-300,-100,100,300});
					groove_path(88.5,0.5,{600,0,-500},nil);
					groove_ball(89,1,{-300,-100,100,300});
					groove_path(90,0.5,{-1000,0,-500},nil);
					groove_ball(90.5,1,{-300,-100,100,300});
					groove_path(91.5,0.5,{400,0,-500},nil);
					groove_ball(92,1,{300,100,-100,-300});
					groove_path(93,0.5,{0,0,-500},nil);
					
					--gc roll
					
					local b93_5 = 2
					
					for i=1,table.getn(gc_notedata) do
						
						if gc_notedata[i][1] == 93.5 then
							b93_5 = gc_notedata[i][2]
							--Trace('FIXING GC ROLL')
						end
					end
					
					m(93,98,'*-1 -75 bumpyxperiod'..b93_5 ..',*-1 -75 bumpyyperiod'..b93_5 ..',*-1 20 bumpyyoffset'..b93_5,e)
					
					me(93.5,95,0,150,'holdtiny'..b93_5,e,outCubic,1,97)
					me(93.5,95,0,30,'bumpyx'..b93_5,e,outCubic,1,97)
					me(93.5,95,0,20,'bumpyy'..b93_5,e,outCubic,1,97)
					me(97,1,30,0,'bumpyx'..b93_5,l,inCubic,1,.1)
					me(97,1,20,0,'bumpyy'..b93_5,l,inCubic,1,.1)
					me(93.5,95,0,150,'holdtiny'..b93_5,e,outCubic,2,97)
					me(93.5,95,0,20,'bumpyx'..b93_5,e,outCubic,2,97)
					me(93.5,95,0,-30,'bumpyy'..b93_5,e,outCubic,2,97)
					me(97,1,20,0,'bumpyx'..b93_5,l,inCubic,2,.1)
					me(97,1,-30,0,'bumpyy'..b93_5,l,inCubic,2,.1)
					me(93.5,95,0,150,'holdtiny'..b93_5,e,outCubic,3,97)
					me(93.5,95,0,20,'bumpyx'..b93_5,e,outCubic,3,97)
					me(93.5,95,0,20,'bumpyy'..b93_5,e,outCubic,3,97)
					me(97,1,20,0,'bumpyx'..b93_5,l,inCubic,3,.1)
					me(97,1,20,0,'bumpyy'..b93_5,l,inCubic,3,.1)
					
					--
					
					--spread
						groove_path(93.5,4,{300,-1000,-4000},{outSine,nil,nil}, 0);
						groove_path(93.5,4,{100,-1000,-4000},{outSine,nil,nil}, 1);
						groove_path(93.5,4,{-100,-1000,-4000},{outSine,nil,nil}, 2);
						groove_path(93.5,4,{-300,-1000,-4000},{outSine,nil,nil}, 3);
					
					
					groove_car(87.5,6,'outSine',nil,20,nil);
					groove_car(93.5,4,'inOutSine',nil,0,nil);
					
					--
					groove_path(97.5,0.5,{0,0,-500},nil);
					
					--arcaea it a bit
						groove_path(98,1.5,{-600,0,-1500},{inOutSine,nil,nil}, 0);
						groove_path(98,1.5,{-200,0,-1500},{inOutSine,nil,nil}, 1);
						groove_path(98,1.5,{200,0,-1500},{inOutSine,nil,nil}, 2);
						groove_path(98,1.5,{600,0,-1500},{inOutSine,nil,nil}, 3);
						groove_path(99.5,1.5,{300,0,-1500},{inOutSine,nil,nil}, 0);
						groove_path(99.5,1.5,{100,0,-1500},{inOutSine,nil,nil}, 1);
						groove_path(99.5,1.5,{-100,0,-1500},{inOutSine,nil,nil}, 2);
						groove_path(99.5,1.5,{-300,0,-1500},{inOutSine,nil,nil}, 3);
					
					--me(93.5,3,0,150,'zigzag',l,outQuad)
					--me(96.5,2,150,0,'zigzag',l,inQuad)
					
					groove_path(101,3,{0,-1000,-2000/1.5},nil);
					groove_path(104,18,{0,0,-18000/1.5},nil);
					
					groove_car(101,3,'linear',80,180,0);
					groove_cat(101,3,'linear',nil,nil,-150);
					
					groove_car(104,0,'linear',80,180,0,true);
					groove_cat(104,0,'linear',nil,nil,-150,true);
					
					
					
					
					
					
					
					--CHORUS 1!!!!!!!! FINALLY!!!!!!!!! (b104)
					m(101,140,'*10000 dark',e,1)
					m(101,140,'*10000 no stealth',e,1)
					groove_active_player(104,1)
					groove_active_player(112,2)
					groove_active_player(113.8,1)
					groove_active_player(117,2)
					groove_active_player(119.75,1)
					groove_active_player(121.625,2)
					groove_active_player(124.75,1)
					groove_active_player(133,2)
					groove_active_player(134.8,1)
					groove_active_player(139.75,2)
					
					groove_fall( 101, 3, 'linear', {1,1,1}, {0,600}, 1)
					groove_fall_y( 101, 0,0,0,0, 1 )
					groove_fall_x( 101, 600, 200, -200, -600, 1 )
					groove_fall_z( 101, 100, -100, -100, 100, 1 )
					
					groove_ball( 122, 1.5, {200,200,-200,-200}, {linear,linear}, 2/3 )
					groove_ball( 123.5, 1.5, {-200,200,-200,200}, {linear,linear}, 2/3  )
					
					groove_path(125,15,{0,0,-15000/1.5},nil);
					
					groove_car( 119, 3, 'linear', nil, 225, nil );
					groove_car( 122, 1.5, 'linear', 45, (225+360)/2, nil );
					groove_car( 123.5, 1.5, 'linear', 80, 360, nil );
					groove_car( 125, 0, 'linear', 80, 0, 0, true );
					
					groove_fall_y( 122, 0,0,0,0, 1 )
					groove_fall_x( 122, -600, -200, 200, 600, 1 )
					groove_fall_z( 122, 100, -100, -100, 100, 1 )
					
					function groove_splode(b,x,y,pn)
						if not pn then pn=2 end
						for i=0,3 do
							me(b,0.75,0,x[i+1],'movex'..i,l,outQuad,pn)
							me(b,0.75,0,x[i+1],'movex'..i,l,outQuad,3)
							me(b,0.75,0,y[i+1],'movey'..i,l,outQuad,pn)
							me(b,0.75,0,y[i+1],'movey'..i,l,outQuad,3)
							me(b+0.75,1.75,x[i+1],0,'movex'..i,l,inQuad,pn)
							me(b+0.75,1.75,x[i+1],0,'movex'..i,l,inQuad,3)
							me(b+0.75,1.75,y[i+1],0,'movey'..i,l,inQuad,pn)
							me(b+0.75,1.75,y[i+1],0,'movey'..i,l,inQuad,3)
							
							me(b,0.75,90,50,'dark',l,outQuad,pn)
							me(b+0.75,10.75,50,95,'dark',l,outQuad,pn)
							
						end
						
						
						
						m2(b+0.75,function()
							groove_confuser:tween(1.75*60/133,'t_inOutQuad(%f)')
							groove_confuser:z(360)
							groove_confuser:sleep(0)
							groove_confuser:z(0)
						end)
						
						simple_m0d2(b-.1,200,1,'drunk');
						simple_m0d2(b-.1,-300,1,'tiny');
						simple_m0d2(b-.1,-300,1,'tinyz');
						
					end
					
					groove_splode(111.5,{300,100,-100,-300},{300,-150,150,-300})
					groove_splode(116.5,{300,100,-100,-300},{-300,150,-150,300})
					groove_splode(132.5,{-300,-100,100,300},{300,-150,150,-300})
					
					
					
					
					
					
					
					
					--now let me see you (b140)
					
					groove_caf( 140, true, true, true );
					
					groove_car( 140, 1.5, 'linear', 90, 0, 0 );
					--groove_caz( 140, 1.5, 'linear', 0.7, true );
					
					groove_path(140,1.5,{0,0,-1500},nil)
					groove_path(141.5,0.5,{500,0,0},nil)
					groove_path(142,0.5,{0,0,-500},nil)
					groove_path(142.5,1,{-1000,0,0},nil)
					groove_path(143.5,0.5,{0,0,-500},nil)
					groove_path(144,1,{1000,0,0},nil)
					groove_path(145,1,{0,0,-1000},nil)
					
					groove_path(146,0.25,{-250,0,0},nil)
					groove_path(146.25,0.5,{0,0,-500},nil)
					groove_path(146.75,0.75,{750,0,0},nil)
					groove_path(147.5,1,{0,0,-1000},nil)
					groove_path(148.5,0.5,{-500,0,0},nil)
					groove_path(149,1,{0,0,-1000},nil)
					
					groove_path(150,1,{-1000*0.707,0,-1000*0.707},nil)
					
					--let's get some mojo config going
						groove_path(151,0.75,{-750,0,100},nil,0)
						groove_path(151,0.75,{-750,0,300},nil,1)
						groove_path(151,0.75,{-750,0,-300},nil,2)
						groove_path(151,0.75,{-750,0,-100},nil,3)
						
					--lmao
						groove_path(151.75,3.25,{-3250,0,-100},nil,0)
						groove_path(151.75,3.25,{-3250,0,-300},nil,1)
						groove_path(151.75,3.25,{-3250,0,300},nil,2)
						groove_path(151.75,3.25,{-3250,0,100},nil,3)
						
					groove_path(155,2,{0,0,-2000},nil)
					
					--once again, but to the right
						groove_path(157,0.75,{750,0,100},nil,0)
						groove_path(157,0.75,{750,0,300},nil,1)
						groove_path(157,0.75,{750,0,-300},nil,2)
						groove_path(157,0.75,{750,0,-100},nil,3)
						
					--lmao
						groove_path(157.75,3.25,{3250,0,-100},nil,0)
						groove_path(157.75,3.25,{3250,0,-300},nil,1)
						groove_path(157.75,3.25,{3250,0,300},nil,2)
						groove_path(157.75,3.25,{3250,0,100},nil,3)
					
					groove_fall( 159, 3, 'linear', {1,1,1}, {0,350}, 1)
					groove_fall_y( 159, 0,0,0,0, 1 )
					groove_fall_x( 159, -800, -800, 800, 800, 1 )
					groove_fall_z( 159, 0, 0, 0, 0, 1 )
					
					groove_path(161,2,{0,0,-2000},nil)
					
					m(158,6,'*10000 no stealth',l,1)
					
					groove_active_player(161.5,1)
					groove_active_player(162.75,2)
					
					me(151,.75,90,50,'dark',l,inOutQuad,1,3.25)
					me(151,.75,90,50,'dark',l,inOutQuad,2,3.25)
					me(157,.75,90,50,'dark',l,inOutQuad,1,3.25)
					me(157,.75,90,50,'dark',l,inOutQuad,2,3.25)
					
					groove_cat(149,2,'linear',-300,nil,0);
					groove_cat(151,4,'linear',0,nil,-100);
					groove_cat(155,2,'linear',300,nil,0);
					groove_cat(157,4,'linear',0,nil,-100);
					
					groove_sudden( 158, 0, 'linear', 100, 1, true )
					
					groove_sudden( 163, 0, 'linear', 100, 1, true )
					
					--long holds (b163) --curve this path
					
					--groove_path(163,200,{0,0,-200000},nil)
					
					groove_path( 163, 2.5, {-2500*0.707, -1000, -2500*0.707}, {inQuad, inQuad, outQuad} )
					
					groove_path( 165.5, 2.5, {-2500*0.707, -1000, -2500*0.707}, {outQuad, outQuad, inQuad} )
					
					groove_path( 168, 2.5, {2500*0.707, 1000, -2500*0.707}, {inQuad, inQuad, outQuad} )
					
					groove_path( 170.5, 2.5, {2500*0.707, 1000, -2500*0.707}, {outQuad, outQuad, inQuad} )
					
					--groove_path( 173, 10, {0, 0, -10000}, nil );
					
					--[[
					groove_fall( 173, 10, 'inOutQuad', {1,1,1}, {0,600}, 2)
					groove_fall_y( 163, 0,800,-800,0, 2 )
					groove_fall_x( 163, -800, 0, 0, 800, 2 )
					groove_fall_z( 163, 0, 0, 0, 0, 2 )
					]]
					
					groove_car( 159, 4, 'inOutQuad', 40, -30, nil )
					
					groove_car( 163, 10-.02, 'linear', -360, 360, 0 )
					
					--groove_car( 173-.02, 0, 'linear', 0, 0, 0 )
					
					groove_car( 173-.01, 10, 'inOutQuart', -360 - 70, 360, 360*4 -30 )
					groove_car( 183-.01, 0, 'linear', -360 -70, 0, -30 , true )
					
					groove_caz( 163, 5, 'outQuad', 0.5 )
					groove_caz( 168, 5, 'inQuad', 0.8 )
					--groove_caz( 173, 10, 'linear', 0.4 )
					
					
					groove_ball(173,10,{-600,-600,600,600});
					
					m(173,183,'*10000 dark1, *10000 dark2',e)
					groove_cat(173,10,'linear',0,0,-200)
					
					
					
					
					--10-9-10-9- again (b183)
					
					--groove_path(183,200,{0,0,-200000},nil)
					m(173,307,'*10000 no stealth',e,1)
					
					groove_fall(173, 0, 'linear', {1,1,1}, {0,600}, 1)
					groove_fall(183, 0, 'linear', {1,1,1}, {0,600}, 2)
					
					groove_path(183, 2.75, {2750*0.707, 0, -2750*0.707}, nil )
					
					groove_path(185.75, 2.5, {2750*0.707, -2750*0.707, 0}, nil )
					
					groove_path(188.25, 2.75, {2750*0.707, 0, 2750*0.707}, nil )
					
					groove_path(191, 2.5, {2750*0.707, 2750*0.707, 0}, nil )
					
					groove_path(193.5, 2.75, {-2750*0.707, 0, -2750*0.707}, nil )
					
					groove_path(196.25, 2.5, {-2750*0.707, -2750*0.707, 0}, nil )
					
					groove_path(198.75, 2.75, {-2750*0.707, 0, 2750*0.707}, nil )
					
					groove_path(201.5, 2.5, {-2750*0.707, 2750*0.707, 0}, nil )
					
					groove_active_player(183-.25,1)
					groove_active_player(185.75-.25,2)
					groove_active_player(188.25-.25,1)
					groove_active_player(191-.25,2)
					groove_active_player(193.5-.25,1)
					groove_active_player(196.25-.25,2)
					groove_active_player(198.75-.25,1)
					groove_active_player(201.5-.25,2)
					
					groove_fall_angle( 173, 1200, 'xy', 0-30, 0-10, 0+10, 0+30, 1 )
					groove_fall_z( 173, 0,0,0,0, 1 )
					
					groove_fall_angle( 183, 1600, 'xz', 180+30, 180+10, 180-10, 180-30, 2 )
					groove_fall_y( 183, 0, 0, 0, 0, 2 )
					
					groove_fall_angle( 188.25, 1600, 'xz', 180+30, 180+10, 180-10, 180-30, 2 )
					groove_fall_y( 188.25, -2500, -2500, -2500, -2500, 2 )
					
					groove_fall_angle( 193.5, 1600, 'xz', 180+30, 180+10, 180-10, 180-30, 2 )
					groove_fall_y( 193.5, 0, 0, 0, 0, 2 )
					
					groove_fall_angle( 198.75, 1600, 'xz', 30+180+30, 30+180+10, 30+180-10, 30+180-30, 2 )
					groove_fall_y( 198.75, -2500, -2500, -2500, -2500, 2 )
					
					--groove_car(183,21,'linear',45-720,nil,nil)
					
					groove_car(183,2.75,'inOutQuad',-360-120,nil,nil)
					groove_car(185.75,2.5,'inOutQuad',-360-60,nil,nil)
					groove_car(188,2.75,'inOutQuad',-360-120,nil,nil)
					groove_car(191,2.5,'inOutQuad',-360-60,nil,nil)
					groove_car(193.5,2.75,'inOutQuad',-360-120,nil,nil)
					groove_car(196.25,2.5,'inOutQuad',-360-60,nil,nil)
					groove_car(198.75,2.75,'inOutQuad',-360-120,nil,nil)
					groove_car(201.5,2.5,'inOutQuad',-360-90,nil,nil)
					
					groove_car(189,6,'inOutQuad',nil,nil,35)
					groove_car(201,6,'inOutQuad',nil,nil,0)
					
					groove_caz(198.75, 4.25, 'inOutQuad', 0.55 )
					groove_caz(203, 4, 'inOutQuad', 0.8 )
					
					groove_cat(183,5.25,'linear',nil,nil,200)
					groove_cat(188.25,5.25,'linear',nil,nil,-200)
					groove_cat(193.5,5.25,'linear',nil,nil,200)
					groove_cat(198.75,3.75,'linear',nil,nil,-150)
					groove_cat(202.5,1.5,'outQuad',nil,nil,-250)
					
					groove_fall(201, 3, 'linear', {0,0,0}, {0,600}, 1)
					groove_fall(201, 3, 'linear', {1,1,1}, {0,600}, 2)
					
					me(201,204,50,0,'flip',e,linear,nil,224)
					me(224,3,0,50,'flip',l,linear)
					me(201,204,90,50,'dark',e,linear,1,224)
					me(224,3,90,50,'dark',l,linear,1)
					--me(201,204,90,50,'dark',e,linear,2,224)
					--me(224,3,90,50,'dark',l,linear,2)
					
					
					
					
					
					
					--triumphant magnetic
					
					groove_caf(204, false, false, false )
					
					m(204,224,'*1000 dark',e,2);
					m(224,225,'*1000 no dark',e,2);
					
					--groove_path(204,200,{0,0,-200000},nil)
					
					
					for i=0,3 do
						groove_path(204+i*5,1.25,{0,800,-800},{nil,outSine,inSine})
						groove_path(205.25+i*5,1.25,{0,-800,-800},{nil,inSine,outSine})
						groove_path(206.5+i*5,1.25,{0,-800,800},{nil,outSine,inSine})
						groove_path(207.75+i*5,1.25,{0,800,800},{nil,inSine,outSine})
						
						groove_active_player(204-.25 + i*5,1)
						groove_active_player(206.5 + i*5,2)
						
						
					end
					
					groove_fall_x(204,-600,-200,200,600,2)
					groove_fall_z(204,0,0,0,0,2)
					groove_fall_y(204,-5000,-5000,-5000,-5000,2)
					--m(204,224,'*1000 -200 tiny, *1000 -200 tinyz',e,2)
					
					groove_fall_x(209,300,100,-100,-300,2)
					groove_fall_z(209,0,0,0,0,2)
					
					groove_fall_x(214,600,200,-200,-600,2)
					groove_fall_z(214,0,0,0,0,2)
					
					groove_fall_x(219,1200,400,-400,-1200,2)
					groove_fall_z(219,0,0,0,0,2)
					
					groove_path(224,3,{0,0,-3000/2},{nil,nil,inSine})
					
					groove_car(220,0,'linear',-90,0,0)
					
					groove_caf(224,true,true,true)
					
					groove_active_player(224-.25,1)
					
					groove_car(224,.25,'outQuad',-90+15*1,0,0)
					groove_car(224.5,.25,'outQuad',-90+15*2,0,0)
					groove_car(225,.25,'outQuad',-90+15*3,0,0)
					groove_car(225.5,.25,'outQuad',-90+15*4,0,0)
					groove_car(226,.25,'outQuad',-90+15*5,0,0)
					groove_car(226.5,.25,'outQuad',0,0,0)
					
					groove_cat(224,.25,'outQuad',nil,nil,-250-25*1)
					groove_cat(224.5,.25,'outQuad',nil,nil,-250-25*2)
					groove_cat(225,.25,'outQuad',nil,nil,-250-25*3)
					groove_cat(225.5,.25,'outQuad',nil,nil,-250-25*4)
					groove_cat(226,.25,'outQuad',nil,nil,-250-25*5)
					groove_cat(226.5,.25,'outQuad',nil,nil,-400)
					
					groove_fall(224,3,'linear',{1,1,1},{0,600},1)
					groove_fall_x(209,-600,0,0,600,1)
					groove_fall_y(209,0,600,-600,0,1)
					groove_fall_z(209,0,0,0,0,1)
					
					groove_path(227,3,{0,0,-3000},nil)
					
					groove_caf(227,false,false,true)
					
					m(227,5,'*1000 -100 arrowpath3',l,3)
					
					--notedata-based stuff
					
					function groove_compare(a,b)
						--Trace(tostring(a.num)..' '..tostring(b.num))
						--return false
						return a.num < b.num
					end
					
					
					
					local b230 = 3
					for i=1,table.getn(gc_notedata) do
						if gc_notedata[i][1] == 230 then
							b230 = gc_notedata[i][2]
						end
					end
					
					--dewee / THE PICKLE
					for i=0,3 do
						if i == b230 then
							if i==0 or i==3 then
								groove_path(230,0.2,{0,-400,-200},nil,i)
								groove_path(230,1.8,{0,400,-1800},{nil,outElastic,nil},i)
							else
								groove_path(230,0.2,{-400,0,-200},nil,i)
								groove_path(230,1.8,{400,0,-1800},{outElastic,nil,nil},i)
							end
						else
							groove_path(230,2,{0,0,-2000},nil,i)
						end
						
					end
					
					
						
					groove_path(232,5,{0,0,-5000},nil)
					
					groove_caf(232,true,true,true)
					
					groove_car(233.5,3.6,'inOutQuad',80,0,360)
					groove_cat(233.5,3.6,'inOutQuad',0,-5,-150)
					
					
					
					
					
					
					
					
					
					
					
					
					
					--CHORUS 2 (b237)
					
					groove_caf(237,false,true,true)
					
					groove_car(237,0,'linear',80,0,0,true)
					groove_cat(237,0,'linear',0,-5,-150,true)
					
					groove_fall( 232, 0, 'linear', {1,1,1}, {0,600}, 2)
					
					groove_fall( 237, 18, 'linear', {1,1,1}, {300,600}, 2)
					groove_fall( 255, 3, 'linear', {1,1,1}, {0,600}, 2)
					
					groove_fall_y( 232, 0,0,0,0, 2 )
					groove_fall_x( 232, -600, -200, 200, 600, 2 )
					groove_fall_z( 232, 100, -100, -100, 100, 2 )
					
					groove_fall( 237, 0, 'linear', {0,0,0}, {0,600}, 1)
					
					--groove_path(237,18,{0,0,-18000/1.5},nil)
					groove_path(237, 0.75, { -750/1.5, 0, -750/1.5 }, nil )
					groove_path(237.75, 0.75, { 0, 0, -750/1.5 }, nil )
					groove_path(238.5, 0.5, { 500/1.5, 0, -500/1.5 }, nil )
					groove_path(239, 0.5, { -500/1.5, 0, -500/1.5 }, nil )
					
					groove_path(239.5, 0.75, { 750/1.5, 0, -750/1.5 }, nil )
					groove_path(240.25, 0.75, { 0, 0, -750/1.5 }, nil )
					groove_path(241, 0.5, { 500/1.5, 0, -500/1.5 }, nil )
					groove_path(241.5, 0.5, { -500/1.5, 0, -500/1.5 }, nil )
					
					groove_path(242, 0.75, { 750/1.5, 750, -750/1.5 }, nil )
					groove_path(242.75, 0.75, { 0, 0, -750/1.5 }, nil )
					groove_path(243.5, 0.5, { -500/1.5, 0, -500/1.5 }, nil )
					groove_path(244, 0.5, { 500/1.5, 0, -500/1.5 }, nil )
					
					groove_path(244.5, 0.75, { -750/1.5, -750, -750/1.5 }, nil )
					groove_path(245.25, 0.75, { 0, 0, -750/1.5 }, nil )
					groove_path(246, 0.5, { -500/1.5, 0, -500/1.5 }, nil )
					groove_path(246.5, 0.5, { 500/1.5, 0, -500/1.5 }, nil )
					
					groove_path(247, 0.75, { 750/1.5, -750, -750/1.5 }, nil )
					groove_path(247.75, 0.75, { 0, 0, -750/1.5 }, nil )
					groove_path(248.5, 0.5, { -500/1.5, 0, -500/1.5 }, nil )
					groove_path(249, 0.5, { 0, 0, -500/1.5 }, nil )
					
					groove_path(249.5, 0.75, { -750/1.5, 750, -750/1.5 }, nil )
					groove_path(250.25, 0.75, { 0, 0, -750/1.5 }, nil )
					groove_path(251, 0.5, { 500/1.5, 0, -500/1.5 }, nil )
					groove_path(251.5, 0.5, { 0, 0, -500/1.5 }, nil )
					
					groove_path(252, 3, { 0, 0, -3000/1.5 }, nil )
					
					groove_active_player(237-.25,2)
					
					groove_hidden( 237, 18, 'linear', 50, 2 );
					groove_hidden( 255, 3, 'linear', -100, 2 );
					
					groove_active_player(255-.25,1)
					
					groove_ball( 255, 1.5, {200,-200,200,-200}, {linear,linear}, 2/3 )
					groove_ball( 256.5, 1.5, {200,200,-200,-200}, {linear,linear}, 2/3  )
					
					groove_path(258,15,{0,0,-18000/1.5},nil)
					
					m(258,273,'*10000 1000 bumpyxperiod',e)
					me(258,260.5,0,400,'bumpyx',e,inOutQuad,nil,268)
					me(268,5,400,0,'bumpyx',l,inOutQuad)
					
					groove_active_player(258-.25,2)
					
					groove_car( 252, 3, 'linear', nil, 90, nil );
					groove_car( 255, 1.5, 'linear', 45, 135, nil );
					groove_car( 256.5, 1.5, 'linear', 80, 180, nil );
					groove_car( 258, 0, 'linear', 80, 180, 0, true );
					
					mpf( 253, 273, function()
						
						--groove_fall_x( 232, -600, -200, 200, 600, 2 )
						--groove_fall_z( 232, 100, -100, -100, 100, 2 )
						
						local beat = GAMESTATE:GetSongBeat()
						
						local pos = (beat-258)*math.pi*0.4
						
						_G['groove_fx'..2] = { -600*math.cos(pos), -200*math.cos(pos), 200*math.cos(pos), 600*math.cos(pos) }
						_G['groove_fz'..2] = { -100*math.cos(pos*2), 100*math.cos(pos*2), 100*math.cos(pos*2), -100*math.cos(pos*2) }
						
					end)
					
					groove_active_player(266,1)
					groove_splode(265.5,{300,100,-100,-300},{300,-150,150,-300},1)
					groove_active_player(268.5,2)
					
					groove_active_player(273.25,1)
					groove_active_player(275,2)
					groove_active_player(276.75,1)
					
					
					mpf(253,300,function()
						--Trace('x: '..groove_world:GetX()..' y: '..groove_world:GetY() );
					end)
					
					
					
					
					
					--ayaxyhatte(b273)
					
					m(279,999,'*10000 dark',e,2)
					
					groove_caf( 273, false, false, true )
					
					groove_path( 273, 6, {0,0,-6000/1.5}, nil )
					
					groove_car(268,5,'linear',0,0,0);
					groove_car(273,0,'linear',0,0,0,true);
					
					groove_caz(268,5,'linear',.5);
					groove_caz(273,5,'linear',.8);
					
					groove_fall(270.5,0,'linear',{1,1,1},{0,600},1);
					groove_fall_z(270.5,600,600,600,600,1)
					groove_fall_y(270.5,600,600,600,600,1)
					groove_fall_x(270.5,0,0,0,0,1)
					
					groove_fall(273,0,'linear',{1,1,1},{0,600},2);
					groove_fall_z(273,600,600,600,600,2)
					groove_fall_y(273,-600,-600,-600,-600,2)
					groove_fall_x(273,0,0,0,0,2)
					
					m2(270.5,function()
						groove_fig8:linear(2.5*60/133)
						groove_fig8:xy(300,100)
					end)
					
					mpf(270.5,273,function(beat)
						
						local amt = inOutCubic((beat-270.5),0,1,2.5)
						
						--groove_world:x2(67*amt)
						groove_world:y2(-11*amt)
						
					end)
					
					
					me(270.5,272.5,90,50,'dark',e,inOutQuad,1,279)
					me(270.5,272.5,90,50,'dark',e,inOutQuad,2,279)
					
					mpf(270.5,279,function()
						local beat = GAMESTATE:GetSongBeat()
						
						for pn = 1,2 do
							for col = 0,3 do
								local t = (0.25*beat*math.pi) + (math.pi*(((pn-1)*4)+col)*0.25) + math.pi
								
								--figure 8
								--x(t) = a sin(t)
								--y(t) = a sin(t) cos(t)
								
								mod_do('*10000 '..(groove_fig8:GetX()*math.sin(t))..' movex'..col,pn);
								mod_do('*10000 '..(groove_fig8:GetY()*math.sin(t)*math.cos(t))..' movey'..col,pn);
								
								if pn == 1 or pn == 2 and beat > 273 then
									_G['groove_fall_amp'..pn]:y( 1 - 0.5*math.sin(t)*math.cos(t) )
								end
								
							end
						end
						
					end)
					
					m2(278,function()
						groove_fig8:linear(15/133)
						groove_fig8:xy(150,50)
						groove_fig8:sleep(15/133)
						groove_fig8:linear(15/133)
						groove_fig8:xy(0,0)
					end)
					
					function groove_lerp(t,a1,a2)
						return a1 + t*(a2-a1)
					end
					
					mpf(278,279,function()
						
						local t = (300-groove_fig8:GetX())/300
						
						--groove_fall_y(273,-600,-600,-600,-600,2)
						_G['groove_fx'..2] = { groove_lerp(t,0,-450), groove_lerp(t,0,-150), groove_lerp(t,0,150), groove_lerp(t,0,450) }
						_G['groove_fy'..2] = { groove_lerp(t,-600,-600), groove_lerp(t,-600,-700), groove_lerp(t,-600,-700), groove_lerp(t,-600,-600) }
						_G['groove_fz'..2] = { groove_lerp(t,600,0), groove_lerp(t,600,0), groove_lerp(t,600,0), groove_lerp(t,600,0) }
						
					end)
					
					--FINAL 10-9-10-9- (b279)
					
					groove_sudden( 277, 1, 'linear', 60 );
					
					groove_path( 279, 200, {0,0,-200000/1.5}, nil )
					
					groove_active_player(279-.25,2)
					groove_active_player(281.75-.25,1)
					groove_active_player(284.25-.25,2)
					groove_active_player(287-.25,1)
					groove_active_player(289.5-.25,2)
					groove_active_player(292.25-.25,1)
					groove_active_player(294.75-.25,2)
					groove_both_players(297.5-.25,1)
					
					groove_fall_z( 279, 0, 0, 0, 0, 1 )
					groove_fall_z( 281.75, 0, 0, 0, 0, 2 )
					
					groove_fall_angle( 279, 1000, 'xy', 160+30,160+10,160-10,160-30, 1 );
					groove_fall_angle( 281.75, 1000, 'xy', -60-30,-60-10,-60+10,-60+30, 2 );			
					groove_fall_angle( 284.25, 1000, 'xy', 110+30,110+10,110-10,110-30, 1 );
					groove_fall_angle( 287, 1000, 'xy', -160-30,-160-10,-160+10,-160+30, 2 );
					groove_fall_angle( 289, 1000, 'xy', 20-30,20-10,20+10,20+30, 1 );
					groove_fall_angle( 292.25, 1000, 'xy', -180+30,-180+10,-180-10,-180-30, 2 );			
					groove_fall_angle( 294.75, 1000, 'xy', 0+30,0+10,0-10,0-30, 1 );
					
					--groove_fall_angle( 279, 1000, 'xy', 0-30,0-10,0+10,0+30, 1 );
					--groove_fall_angle( 279, 1000, 'xy', 0-30,0-10,0+10,0+30, 1 );
					
					
					
					
					groove_car( 279, 18.5, 'inQuad', 0, 0, 540 )
					groove_car( 297.5, 2, 'linear', 0, 0, 720 )
					
					groove_car( 299.5, 6.5, 'outQuad', 0, 0, 1080 )
					
					mpf( 299.5,308, function()
						
						local beat = GAMESTATE:GetSongBeat()
						
						local t = math.min((beat-299.5)/6.5,1)
						
						groove_fx2[3] = groove_lerp(t,1000*math.sin(math.rad(-180-10)),1000*math.sin(math.rad(-180)))
						groove_fy2[3] = groove_lerp(t,-1000*math.cos(math.rad(-180-10)),-1000*math.cos(math.rad(-180)))
						groove_fx1[3] = groove_lerp(t,1000*math.sin(math.rad(-10)),1000*math.sin(math.rad(0)))
						groove_fy1[3] = groove_lerp(t,-1000*math.cos(math.rad(-10)),-1000*math.cos(math.rad(0)))
						
					end)
					
					me(299.5,6.5,0,2000,'longboys',l,linear)
					
					m(299,999,'*10000 hidemines',e)
					m(299,999,'*10000 stealthpastreceptors, *1000 disablemines',e)
					
					
					groove_adlibs = {143.5,144,144.5,150,150.5,151,155,155.5,156,156.5,278.5}
					
					groove_hitadlibs = {{},{}}
					for i=1,table.getn(groove_adlibs) do
						for pn=1,2 do
							table.insert(groove_hitadlibs[pn],false)
						end
					end
					
					function groove_countadlibs(pn)
						local ret = 0
						for i=1,table.getn(groove_adlibs) do
							if groove_hitadlibs[pn][i] then
								ret = ret+1
							end
						end
						return ret
					end
					
					m2(300,function()
						
						if FUCK_EXE and STATSMAN:GetCurStageStats() then
							for pn = 1,2 do
								if GAMESTATE:IsPlayerEnabled(pn-1) then
									local poss = STATSMAN:GetCurStageStats():GetPlayerStageStats(pn-1):GetPossibleDancePoints()
									local act = STATSMAN:GetCurStageStats():GetPlayerStageStats(pn-1):GetActualDancePoints()
									
									--add total adlibs to max score
									STATSMAN:GetCurStageStats():GetPlayerStageStats(pn-1):SetPossibleDancePoints( poss + table.getn(groove_adlibs)*5 )
									
									local adlibCount = groove_countadlibs(pn)
									--adlibCount = 11
									
									_G['groove_adlib'..pn]:zoom(.6)
									_G['groove_adlib'..pn]:diffusealpha(0)
									_G['groove_adlib'..pn]:x(sw*0.5 + sw*0.3*(pn*2-3) - 32 );
									_G['groove_adlib'..pn]:y(sh*0.5-64);
									_G['groove_adlib'..pn]:linear(1)
									_G['groove_adlib'..pn]:diffusealpha(1)
									_G['groove_adlib'..pn]:sleep(3)
									_G['groove_adlib'..pn]:linear(1)
									_G['groove_adlib'..pn]:diffusealpha(0)
									
									_G['groove_finalscore'..pn]:x(sw*0.5 + sw*0.3*(pn*2-3) + 40 );
									_G['groove_finalscore'..pn]:y(sh*0.5-64)
									_G['groove_finalscore'..pn]:zoom(.6)
									_G['groove_finalscore'..pn]:settext( ''..math.floor(100*adlibCount/table.getn(groove_adlibs))..'%' )
									_G['groove_finalscore'..pn]:linear(1)
									_G['groove_finalscore'..pn]:diffusealpha(1)
									_G['groove_finalscore'..pn]:sleep(3)
									_G['groove_finalscore'..pn]:linear(1)
									_G['groove_finalscore'..pn]:diffusealpha(0)
									
									_G['uksrt_p'..pn..'bonus'] = (adlibCount*5)/poss
									_G['uksrt_p'..pn..'moneyscore'] = (adlibCount*5)/poss
									local bonus = adlibCount*5
									STATSMAN:GetCurStageStats():GetPlayerStageStats(pn-1):SetActualDancePoints(act+bonus)
								end
							end
						end
						
						if groove_fc[1] or groove_fc[2] then
							MESSAGEMAN:Broadcast('FullChain')
						end
						
					end)
					
					
					
					
					
					m2(3,'Title');
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					--bg stuff a.k.a.
					--BACKGROUND CONTROL
					
					m2(0,function()
						gmr_gradient2_col0:xyza(0,0,0,1);
						gmr_gradient2_col1:xyza(0,0,0,1);
						gmr_gradient2_col2:xyza(0,0,0,1);
						gmr_gradient2_col3:xyza(0,0,0,1);
						gmr_gradient2_col4:xyza(0,0,0,1);
						gmr_gradient2_col5:xyza(0,0,0,1);
					end)
					
					m2(3,function()
						gmr_gradient2_col2:xyza(.8,0,0,1);
						gmr_gradient2_col2:linear(3*60/133);
						gmr_gradient2_col2:xyza(0,0,0,1);
						
						gmr_gradient2_col3:xyza(.8,0,0,1);
						gmr_gradient2_col3:linear(3*60/133);
						gmr_gradient2_col3:xyza(0,0,0,1);
						
						MESSAGEMAN:Broadcast('Aya1Flash');
					end)
					
					m2(6,function()
						gmr_gradient2_col2:sleep(0)
						gmr_gradient2_col2:xyza(.7,0,0,1);
						gmr_gradient2_col2:linear(3*60/133);
						gmr_gradient2_col2:xyza(0,0,0,1);
						
						gmr_gradient2_col3:sleep(0)
						gmr_gradient2_col3:xyza(.7,0,0,1);
						gmr_gradient2_col3:linear(3*60/133);
						gmr_gradient2_col3:xyza(0,0,0,1);
						
						MESSAGEMAN:Broadcast('Aya2Flash');
					end)
					
					m2(9,function()
						gmr_gradient2_col2:sleep(0)
						gmr_gradient2_col2:xyza(.6,0,0,1);
						gmr_gradient2_col2:linear(3*60/133);
						gmr_gradient2_col2:xyza(0,0,0,1);
						
						gmr_gradient2_col3:sleep(0)
						gmr_gradient2_col3:xyza(.6,0,0,1);
						gmr_gradient2_col3:linear(3*60/133);
						gmr_gradient2_col3:xyza(0,0,0,1);
						
						MESSAGEMAN:Broadcast('Aya1Flash');
					end)
					
					m2(12,function()
						gmr_gradient2_col2:sleep(0)
						gmr_gradient2_col2:xyza(.5,0,0,1);
						gmr_gradient2_col2:linear(3*60/133);
						gmr_gradient2_col2:xyza(0,0,0,0);
						
						gmr_gradient2_col3:sleep(0)
						gmr_gradient2_col3:xyza(.5,0,0,1);
						gmr_gradient2_col3:linear(3*60/133);
						gmr_gradient2_col3:xyza(0,0,0,0);
						
						gmr_gradient2_col0:xyza(0,0,0,0);
						gmr_gradient2_col1:xyza(0,0,0,0);
						gmr_gradient2_col4:xyza(0,0,0,0);
						gmr_gradient2_col5:xyza(0,0,0,0);
						
						MESSAGEMAN:Broadcast('Aya2FlashE');
					end)
					
					ray_onspeed = .7
					ray_offspeed = .4
					
					m2(14.5,'WideScreen');
					m2(18,'WideScreen2',true);
					
					m2(14.5,'RaysOn')
					m2(16.5,'RaysOff')
					
					m2(18,'Aya2FlashAway')
					
					m2(6,'IntroSquaresOn1')
					m2(9,'IntroSquaresOn2')
					m2(12,'IntroSquaresOn3')
					m2(18,'IntroSquaresOff')
					m2(18,'WhiteFlashBG')
					
					m2(19.5,function()
						gmr_gradient_col0:xyza(0,.6,1,1);
						gmr_gradient_col1:xyza(0,.6,1,1);
						gmr_gradient_col0:sleep(35/133)
						gmr_gradient_col1:sleep(35/133)
						gmr_gradient_col0:linear(.2)
						gmr_gradient_col1:linear(.2)
						gmr_gradient_col0:xyza(0,0,0,1);
						gmr_gradient_col1:xyza(0,0,0,1);
						
						gmr_tunnel1:diffusealpha(0.8);
						gmr_tunnel1:linear(60/133)
						gmr_tunnel1:rotationz(90)
					end)
					
					m2(21,function()
						gmr_gradient_col2:xyza(0,.6,1,1);
						gmr_gradient_col3:xyza(0,.6,1,1);
						gmr_gradient_col2:sleep(35/133)
						gmr_gradient_col3:sleep(35/133)
						gmr_gradient_col2:linear(.2)
						gmr_gradient_col3:linear(.2)
						gmr_gradient_col2:xyza(0,0,0,1);
						gmr_gradient_col3:xyza(0,0,0,1);
					end)
					
					m2(22.5,function()
						gmr_gradient4_col0:xyza(0,.6,1,1);
						gmr_gradient4_col3:xyza(0,.6,1,1);
						gmr_gradient4_col6:xyza(0,.6,1,1);
						gmr_gradient4_col0:sleep(30/133)
						gmr_gradient4_col3:sleep(30/133)
						gmr_gradient4_col6:sleep(30/133)
						gmr_gradient4_col0:xyza(0,0,0,1);
						gmr_gradient4_col3:xyza(0,0,0,1);
						gmr_gradient4_col6:xyza(0,0,0,1);
						
						gmr_tunnel1:diffusealpha(0.8)
						gmr_tunnel1:sleep(30/133)
						gmr_tunnel1:diffusealpha(0)
						gmr_tunnel1:sleep(30/133)
						gmr_tunnel1:diffusealpha(0.8)
						gmr_tunnel1:linear(40/133)
						gmr_tunnel1:addrotationz(60)
					end)
					
					m2(23,function()
						gmr_gradient4_col1:xyza(.6,0,0,1);
						gmr_gradient4_col4:xyza(.6,0,0,1);
						gmr_gradient4_col7:xyza(.6,0,0,1);
						gmr_gradient4_col1:sleep(30/133)
						gmr_gradient4_col4:sleep(30/133)
						gmr_gradient4_col7:sleep(30/133)
						gmr_gradient4_col1:xyza(0,0,0,1);
						gmr_gradient4_col4:xyza(0,0,0,1);
						gmr_gradient4_col7:xyza(0,0,0,1);
					end)
					
					m2(23.5,function()
						gmr_gradient4_col2:xyza(0,.6,1,1);
						gmr_gradient4_col5:xyza(0,.6,1,1);
						gmr_gradient4_col8:xyza(0,.6,1,1);
						gmr_gradient4_col2:sleep(35/133)
						gmr_gradient4_col5:sleep(35/133)
						gmr_gradient4_col8:sleep(35/133)
						gmr_gradient4_col2:linear(.2)
						gmr_gradient4_col5:linear(.2)
						gmr_gradient4_col8:linear(.2)
						gmr_gradient4_col2:xyza(0,0,0,1);
						gmr_gradient4_col5:xyza(0,0,0,1);
						gmr_gradient4_col8:xyza(0,0,0,1);
					end)
					
					m2(25,function()
						gmr_gradient4_col0:xyza(0,.6,1,1)
						gmr_gradient4_col8:xyza(0,.6,1,1)
						gmr_gradient4_col0:sleep(30/133)
						gmr_gradient4_col8:sleep(30/133)
						gmr_gradient4_col0:xyza(0,0,0,1)
						gmr_gradient4_col8:xyza(0,0,0,1)
					end)
					
					m2(25.5,function()
						gmr_gradient4_col2:xyza(0,.6,1,1);
						gmr_gradient4_col6:xyza(0,.6,1,1);
						gmr_gradient4_col2:sleep(30/133)
						gmr_gradient4_col6:sleep(30/133)
						gmr_gradient4_col2:linear(.2)
						gmr_gradient4_col6:linear(.2)
						gmr_gradient4_col2:xyza(0,0,0,1);
						gmr_gradient4_col6:xyza(0,0,0,1);
					end)
					
					m2(27.5,function()
						gmr_tunnel1:linear(60/133)
						gmr_tunnel1:addrotationz(90)
					end)
					
					m2(28,function()
						gmr_gradient4_col1:xyza(0,.6,1,1);
						gmr_gradient4_col4:xyza(0,.6,1,1);
						gmr_gradient4_col7:xyza(0,.6,1,1);
						gmr_gradient4_col1:sleep(30/133)
						gmr_gradient4_col4:sleep(30/133)
						gmr_gradient4_col7:sleep(30/133)
						gmr_gradient4_col1:xyza(0,0,0,1);
						gmr_gradient4_col4:xyza(0,0,0,1);
						gmr_gradient4_col7:xyza(0,0,0,1);
					end)
					
					m2(28.5,function()
						gmr_gradient4_col3:xyza(0,.6,1,1);
						gmr_gradient4_col4:xyza(0,.6,1,1);
						gmr_gradient4_col5:xyza(0,.6,1,1);
						gmr_gradient4_col3:sleep(30/133)
						gmr_gradient4_col4:sleep(30/133)
						gmr_gradient4_col5:sleep(30/133)
						gmr_gradient4_col3:xyza(1,1,1,1);
						gmr_gradient4_col4:xyza(1,1,1,1);
						gmr_gradient4_col5:xyza(1,1,1,1);
						gmr_gradient4_col3:linear(30/133)
						gmr_gradient4_col4:linear(30/133)
						gmr_gradient4_col5:linear(30/133)
						gmr_gradient4_col3:xyza(0,0,0,1);
						gmr_gradient4_col4:xyza(0,0,0,1);
						gmr_gradient4_col5:xyza(0,0,0,1);
						
						gmr_gradient4_col0:sleep(30/133)
						gmr_gradient4_col1:sleep(30/133)
						gmr_gradient4_col2:sleep(30/133)
						gmr_gradient4_col0:linear(30/133)
						gmr_gradient4_col1:linear(30/133)
						gmr_gradient4_col2:linear(30/133)
						gmr_gradient4_col0:xyza(.5,.2,0,1)
						gmr_gradient4_col1:xyza(.5,.2,0,1)
						gmr_gradient4_col2:xyza(.5,.2,0,1)
						
						gmr_gradient4_col6:sleep(30/133)
						gmr_gradient4_col7:sleep(30/133)
						gmr_gradient4_col8:sleep(30/133)
						gmr_gradient4_col6:linear(30/133)
						gmr_gradient4_col7:linear(30/133)
						gmr_gradient4_col8:linear(30/133)
						gmr_gradient4_col6:xyza(.5,.2,0,1)
						gmr_gradient4_col7:xyza(.5,.2,0,1)
						gmr_gradient4_col8:xyza(.5,.2,0,1)
						
						gmr_gradientbg4:sleep(30/133)
						gmr_gradientbg4:zoomy(1)
						gmr_gradientbg4:linear(30/133)
						gmr_gradientbg4:zoomy(.5)
						
						gmr_tunnel1:sleep(30/133)
						gmr_tunnel1:queuecommand('Hide');
						
					end)
					
					m2(29,function()
						
						groove_grid:hidden(0)
						groove_grid:diffuse(.25,.1,0,0)
						groove_grid:linear(60/133)
						groove_grid:diffuse(.25,.1,0,1)
						
					end)
					
					m2(32.25,function()
						
						gmr_gradient4_col0:linear(30/133)
						gmr_gradient4_col1:linear(30/133)
						gmr_gradient4_col2:linear(30/133)
						gmr_gradient4_col0:xyza(0,0,0,1)
						gmr_gradient4_col1:xyza(0,0,0,1)
						gmr_gradient4_col2:xyza(0,0,0,1)
						
						gmr_gradient4_col3:linear(30/133)
						gmr_gradient4_col4:linear(30/133)
						gmr_gradient4_col5:linear(30/133)
						gmr_gradient4_col3:xyza(.5,.2,0,1)
						gmr_gradient4_col4:xyza(.5,.2,0,1)
						gmr_gradient4_col5:xyza(.5,.2,0,1)
						
						gmr_gradient4_col6:linear(30/133)
						gmr_gradient4_col7:linear(30/133)
						gmr_gradient4_col8:linear(30/133)
						gmr_gradient4_col6:xyza(0,0,0,1)
						gmr_gradient4_col7:xyza(0,0,0,1)
						gmr_gradient4_col8:xyza(0,0,0,1)
						
					end)
					
					m2(36,function()
						
						gmr_gradient4_col1:linear(30/133)
						gmr_gradient4_col2:linear(30/133)
						gmr_gradient4_col4:linear(30/133)
						gmr_gradient4_col6:linear(30/133)
						gmr_gradient4_col7:linear(30/133)
						gmr_gradient4_col1:xyza(0,0,0,1)
						gmr_gradient4_col2:xyza(0,0,0,1)
						gmr_gradient4_col4:xyza(0,0,0,1)
						gmr_gradient4_col6:xyza(0,0,0,1)
						gmr_gradient4_col7:xyza(0,0,0,1)
						
						gmr_gradient4_col0:linear(30/133)
						gmr_gradient4_col3:linear(30/133)
						gmr_gradient4_col5:linear(30/133)
						gmr_gradient4_col8:linear(30/133)
						gmr_gradient4_col0:xyza(.5,.2,0,1)
						gmr_gradient4_col3:xyza(.5,.2,0,1)
						gmr_gradient4_col5:xyza(.5,.2,0,1)
						gmr_gradient4_col8:xyza(.5,.2,0,1)
						
					end)
					
					m2(39,function()
						
						gmr_gradient4_col0:linear(30/133)
						gmr_gradient4_col1:linear(30/133)
						gmr_gradient4_col3:linear(30/133)
						gmr_gradient4_col0:xyza(0,0,0,1)
						gmr_gradient4_col1:xyza(0,0,0,1)
						gmr_gradient4_col3:xyza(0,0,0,1)
						
						gmr_gradient4_col2:linear(30/133)
						gmr_gradient4_col4:linear(30/133)
						gmr_gradient4_col6:linear(30/133)
						gmr_gradient4_col2:xyza(.5,.2,0,1)
						gmr_gradient4_col4:xyza(.5,.2,0,1)
						gmr_gradient4_col6:xyza(.5,.2,0,1)
						
						gmr_gradient4_col5:linear(30/133)
						gmr_gradient4_col7:linear(30/133)
						gmr_gradient4_col8:linear(30/133)
						gmr_gradient4_col5:xyza(0,0,0,1)
						gmr_gradient4_col7:xyza(0,0,0,1)
						gmr_gradient4_col8:xyza(0,0,0,1)
						
					end)
					
					m2(41.5,function()
						
						gmr_gradient4_col0:xyza(0,0,0,1)
						gmr_gradient4_col1:xyza(0,0,0,1)
						gmr_gradient4_col3:xyza(0,0,0,1)
						
						gmr_gradient4_col2:xyza(0,0,0,1)
						gmr_gradient4_col4:xyza(0,0,0,1)
						gmr_gradient4_col6:xyza(0,0,0,1)
						
						gmr_gradient4_col5:xyza(0,0,0,1)
						gmr_gradient4_col7:xyza(0,0,0,1)
						gmr_gradient4_col8:xyza(0,0,0,1)
						
					end)
					
					m2(41.5,function()
					
						groove_grid:linear(10*60/133)
						groove_grid:diffuse(0,0,0,1)
						groove_grid:queuecommand('Hide');
						
					end)
					
					mpf(29,41.5,function(beat)
						
						local height = 2.5*inOutQuad((beat-29)/12.5,0,1,1)
						
						local diam = 24
						
						local a = groove_grid
						if a then
							
							for i=0,diam*diam-1 do
								local x = math.mod(i,diam) - diam/2
								local x2 = math.mod(i+1,diam) - diam/2
								local y = math.floor(i/diam) - diam/2
								local y2 = (math.floor(i/diam)+1) - diam/2
								
								local z1 = 0.5+0.5*math.sin(y*math.pi*0.1 - 0.2) + 0.5+0.5*math.cos(x*math.pi*0.15)
								local z2 = 0.5+0.5*math.sin(y*math.pi*0.1 - 0.2) + 0.5+0.5*math.cos(x2*math.pi*0.15)
								local z3 = 0.5+0.5*math.sin(y2*math.pi*0.1 - 0.2) + 0.5+0.5*math.cos(x2*math.pi*0.15)
								local z4 = 0.5+0.5*math.sin(y2*math.pi*0.1 - 0.2) + 0.5+0.5*math.cos(x*math.pi*0.15)
								
								a:SetVertexPosition(i*4+0,x,y,z1*height)
								a:SetVertexPosition(i*4+1,x+1,y,z2*height)
								a:SetVertexPosition(i*4+2,x+1,y+1,z3*height)
								a:SetVertexPosition(i*4+3,x,y+1,z4*height)
								
							end
							
						end
						
					end)
					
					--expandQuad should happen every time a player hits 50 combo
					--m2(40.5,'ExpandQuad');
					
					mpf(41.5,51.5,function(beat)
					
						local grain = 128
						local pulse = (((beat*2)-math.floor(beat*2)))
					
						groove_waves:hidden(0)
						groove_waves:diffusealpha( 0.6*(1-pulse) )
						groove_orangeglow:hidden(0)
						groove_orangeglow:diffusealpha( 0.6*(1-pulse) )
						
						local rings = {64+(64*pulse),52+(72*pulse),40+(64*pulse),28+(64*pulse),16+(64*pulse),4+(64*pulse)}
					
						for j=0,2 do
							for i=0,grain-1,4 do
									
								local r1, r2 = rings[j*2 + 2],rings[j*2 + 1]
						
								local ang1 = (i/(grain))*2*math.pi
								local ang2 = ((i+4)/(grain))*2*math.pi
								
								groove_waves:SetVertexPosition(i+j*grain,r2*math.cos(ang1),r2*math.sin(ang1),0)
								groove_waves:SetVertexColor(i+j*grain,.6,.3,0,1)
								
								groove_waves:SetVertexPosition(i+1+j*grain,r2*math.cos(ang2),r2*math.sin(ang2),0)
								groove_waves:SetVertexColor(i+1+j*grain,.6,.3,0,1)
								
								groove_waves:SetVertexPosition(i+2+j*grain,r1*math.cos(ang2),r1*math.sin(ang2),0)
								groove_waves:SetVertexColor(i+2+j*grain,.6,.3,0,0)
								
								groove_waves:SetVertexPosition(i+3+j*grain,r1*math.cos(ang1),r1*math.sin(ang1),0)
								groove_waves:SetVertexColor(i+3+j*grain,.6,.3,0,0)
								
							end
						end
						
					end)
					
					m2(52,function()
						groove_waves:hidden(1)
						groove_orangeglow:hidden(1)
						
						groove_gears:hidden(0)
						groove_sphere:hidden(0)
					end,true)
					
					mpf(52,73,function(beat)
						
						local alp = .5;
						if math.mod(beat*2,2) > 1 then
							alp = 0
						end
						
						if alp > 0 then
							groove_gears:hidden(0)
						else
							groove_gears:hidden(1)
						end
						groove_sphere:diffuse(.6,.25,0,alp)
						
					end)
					
					m2(73,function()
						groove_gears:hidden(1)
						groove_sphere:hidden(1)
						
					end,true)
					
					local all = 'all'
					
					local function vertColor(obj,verts,len,r,g,b,a)
						if verts == 'all' then
							verts = {}
							for i=1,9 do
								table.insert(verts,i-1)
							end
						end
						for i=1,table.getn(verts) do
							--Trace( tostring(_G[ 'gmr_gradient'..obj..'_col'..verts[i] ]) )
							if _G[ 'gmr_gradient'..obj..'_col'..verts[i] ] then
								_G[ 'gmr_gradient'..obj..'_col'..verts[i] ]:finishtweening()
								_G[ 'gmr_gradient'..obj..'_col'..verts[i] ]:linear(len)
								_G[ 'gmr_gradient'..obj..'_col'..verts[i] ]:xyza(r,g,b,a)
							end
						end
					end
					
					m2(73,function()
						
						vertColor(4,all,30/133,0,.5,.8,1)
						
					end)
					m2(73.75,function()
						
						vertColor(4,{3,4,5},30/133,0,0,0,1)
						
					end)
					m2(74.5,function()
						
						vertColor(4,{6,7,8},30/133,0,0,0,1)
						
					end)
					
					m2(75.75,function()
			
						gmr_gradientbg4:diffuseshift();
						gmr_gradientbg4:effectclock('bgm')
						gmr_gradientbg4:effectperiod(0.5)
						gmr_gradientbg4:effectcolor1(1,1,1,.4)
						gmr_gradientbg4:effectcolor2(1,1,1,.6)
						
						gmr_tunnel2:hidden(0)
						gmr_tunnel2:diffusealpha(0)
						gmr_tunnel2:linear(60/133)
						gmr_tunnel2:diffusealpha(.3)
						
					end)
					
					m2(76.00,function()
						
						vertColor(4,{0,1,2},120/133,0,0,0,1)
						vertColor(4,{3,4,5},120/133,0,.5,.8,1)
						
					end)
					
					m2(78.00,function()
						
						vertColor(4,{3,4,5},120/133,0,0,0,1)
						vertColor(4,{6,7,8},120/133,0,.5,.8,1)
						
					end)
					
					m2(80.25,function()
						
						vertColor(4,{6,7,8},30/133,0,0,0,1)
						
					end)
					m2(80.75,function()
						
						gmr_gradientbg4:stopeffect();
						
					end)
					
					m2(93.5,function()
						
						gmr_tunnel2:linear(3.5*60/133)
						gmr_tunnel2:rotationz(-90)
						
					end)
					m2(101,function()
						
						gmr_tunnel2:linear(180/133)
						gmr_tunnel2:diffuse(.1,0,.3,1)
						gmr_tunnel2:zoom(0)
						
					end)
					m2(104,function()
						
						gmr_tunnel2:hidden(1)
						
					end,true)
					
					m2(104,function()
						
						gmr_solidbg:hidden(0)
						gmr_solidbg:diffuse(1,.8,.1,.5)
						gmr_solidbg:x(sw*1.5)
						gmr_solidbg:linear(30/133)
						gmr_solidbg:x(sw/2)
						
					end)
					
					m2(109,function()
						
						gmr_solidbg:linear(30/133)
						gmr_solidbg:x(sw*1.5)
						gmr_solidbg:queuecommand('Hide')
						
					end)
					
					m2(114.5,function()
						
						vertColor(4,{0,1,2},120/133,.6,.6,.6,1)
						
					end)
					
					m2(117,function()
						
						vertColor(4,{0,1,2},120/133,0,0,0,1)
						vertColor(4,{3,4,5},120/133,.6,.6,.6,1)
						
					end)
					
					m2(119.5,function()
						
						vertColor(4,{3,4,5},120/133,0,0,0,1)
						vertColor(4,{6,7,8},120/133,.6,.6,.6,1)
						
					end)
					
					m2(122,function()
						
						vertColor(4,{6,7,8},0,0,0,0,1)
						
					end)
					
					--shnapes
					
					m2(104,function()
						--gmr_trace_worldpos()
						-- -320 397.77020263672 26173.494140625
						
					end)
					
					m2(104.75,function()
						
						gmr_unitQuad1:hidden(0)
						gmr_unitQuad1:halign(1)
						gmr_unitQuad1:zoomto(sw*1.5,256)
						gmr_unitQuad1:zoomz(256)
						gmr_unitQuad1:rotationz(180)
						gmr_unitQuad1:rotationx(80)
						gmr_unitQuad1:fadeleft(1)
						gmr_unitQuad1:diffuse(0,0,0,1)
						gmr_unitQuad1:x(sw*1.5)
						gmr_unitQuad1:y(-100)
						gmr_unitQuad1:z(-26200)
						gmr_unitQuad1:linear(60/133)
						gmr_unitQuad1:x(-sw*2.5)
						gmr_unitQuad1:queuecommand('Hide')
						
					end)
					
					m2(105.5,function()
						
						gmr_unitCircle1:hidden(0)
						gmr_unitCircle1:x( sw*1 )
						gmr_unitCircle1:y( -100 )
						gmr_unitCircle1:z( -26400 )
						gmr_unitCircle1:rotationz(0)
						gmr_unitCircle1:rotationy(0)
						gmr_unitCircle1:rotationx(80)
						gmr_unitCircle1:diffuse(0,0,0,1)
						gmr_unitCircle1:zoom(1)
						gmr_unitCircle1:zoomz(1)
						gmr_unitCircle1:linear(30/133)
						gmr_unitCircle1:zoom(140)
						gmr_unitCircle1:zoomz(140)
						gmr_unitCircle1:linear(30/133)
						gmr_unitCircle1:diffusealpha(0)
						gmr_unitCircle1:queuecommand('Hide')
						
					end)
					
					m2(106,function()
						
						gmr_unitCircle2:hidden(0)
						gmr_unitCircle2:x( sw*0 )
						gmr_unitCircle2:y( -100 )
						gmr_unitCircle2:z( -26600 )
						gmr_unitCircle2:rotationz(0)
						gmr_unitCircle2:rotationy(0)
						gmr_unitCircle2:rotationx(80)
						gmr_unitCircle2:diffuse(1*.6,1*.6,1*.6,1)
						gmr_unitCircle2:zoom(1)
						gmr_unitCircle2:zoomz(1)
						gmr_unitCircle2:linear(30/133)
						gmr_unitCircle2:zoom(140)
						gmr_unitCircle2:zoomz(140)
						gmr_unitCircle2:linear(30/133)
						gmr_unitCircle2:diffusealpha(0)
						gmr_unitCircle2:queuecommand('Hide')
						
					end)
					
					m2(106.5,function()
						
						gmr_unitCircle1:stoptweening()
						gmr_unitCircle1:hidden(0)
						gmr_unitCircle1:x( sw*0.5 )
						gmr_unitCircle1:y( -100 )
						gmr_unitCircle1:z( -26800 )
						gmr_unitCircle1:rotationz(0)
						gmr_unitCircle1:rotationy(0)
						gmr_unitCircle1:rotationx(80)
						gmr_unitCircle1:diffuse(.7*.6,.4*.6,1*.6,1)
						gmr_unitCircle1:zoom(1)
						gmr_unitCircle1:zoomz(1)
						gmr_unitCircle1:linear(30/133)
						gmr_unitCircle1:zoom(300)
						gmr_unitCircle1:zoomz(300)
						gmr_unitCircle1:linear(30/133)
						gmr_unitCircle1:diffusealpha(0)
						gmr_unitCircle1:queuecommand('Hide')
						
					end)
					
					m2(107.5,function()
						
						gmr_unitHexagon1:stoptweening()
						gmr_unitHexagon1:hidden(0)
						gmr_unitHexagon1:x( sw*-0.5 )
						gmr_unitHexagon1:y( -100 )
						gmr_unitHexagon1:z( -27000 )
						gmr_unitHexagon1:rotationz(0)
						gmr_unitHexagon1:rotationy(0)
						gmr_unitHexagon1:rotationx(80)
						gmr_unitHexagon1:diffuse(1*.6,1*.6,1*.6,1)
						gmr_unitHexagon1:zoom(1)
						gmr_unitHexagon1:zoomz(1)
						gmr_unitHexagon1:linear(30/133)
						gmr_unitHexagon1:zoom(400)
						gmr_unitHexagon1:zoomz(400)
						gmr_unitHexagon1:linear(30/133)
						gmr_unitHexagon1:diffusealpha(0)
						gmr_unitHexagon1:queuecommand('Hide')
						
					end)
					
					m2(108.5,function()
						
						gmr_unitLineHexagon1:stoptweening()
						gmr_unitLineHexagon1:hidden(0)
						gmr_unitLineHexagon1:x( sw*0.5 )
						gmr_unitLineHexagon1:y( -100 )
						gmr_unitLineHexagon1:z( -27200 )
						gmr_unitLineHexagon1:rotationz(0)
						gmr_unitLineHexagon1:rotationy(0)
						gmr_unitLineHexagon1:rotationx(80)
						gmr_unitLineHexagon1:diffuse(0,0,0,1)
						gmr_unitLineHexagon1:zoom(250)
						gmr_unitLineHexagon1:zoomz(250)
						gmr_unitLineHexagon1:sleep(75/133)
						gmr_unitLineHexagon1:queuecommand('Hide')
						
					end)
					
					m2(108.75,function()
						
						gmr_unitLineHexagon2:stoptweening()
						gmr_unitLineHexagon2:hidden(0)
						gmr_unitLineHexagon2:x( sw*0.5 )
						gmr_unitLineHexagon2:y( -100 )
						gmr_unitLineHexagon2:z( -27200 )
						gmr_unitLineHexagon2:rotationz(0)
						gmr_unitLineHexagon2:rotationy(0)
						gmr_unitLineHexagon2:rotationx(80)
						gmr_unitLineHexagon2:diffuse(0,0,0,1)
						gmr_unitLineHexagon2:zoom(400)
						gmr_unitLineHexagon2:zoomz(400)
						gmr_unitLineHexagon2:sleep(60/133)
						gmr_unitLineHexagon2:queuecommand('Hide')
						
					end)
					
					m2(109.75,function()
						
						gmr_unitQuad1:hidden(0)
						gmr_unitQuad1:halign(1)
						gmr_unitQuad1:zoomto(sw*1.5,256)
						gmr_unitQuad1:zoomz(256)
						gmr_unitQuad1:rotationz(0)
						gmr_unitQuad1:rotationx(80)
						gmr_unitQuad1:fadeleft(1)
						gmr_unitQuad1:diffuse(1,.8,.1,1)
						gmr_unitQuad1:x(sw*-0.5)
						gmr_unitQuad1:y(-100)
						gmr_unitQuad1:z(-27300)
						gmr_unitQuad1:linear(60/133)
						gmr_unitQuad1:x(sw*3)
						gmr_unitQuad1:queuecommand('Hide')
						
					end)
					
					m2(110.5,function()
						
						gmr_unitLineHexagon1:stoptweening()
						gmr_unitLineHexagon1:hidden(0)
						gmr_unitLineHexagon1:x( sw*0.5 )
						gmr_unitLineHexagon1:y( -100 )
						gmr_unitLineHexagon1:z( -27600 )
						gmr_unitLineHexagon1:rotationz(0)
						gmr_unitLineHexagon1:rotationy(0)
						gmr_unitLineHexagon1:rotationx(80)
						gmr_unitLineHexagon1:diffuse(.7,.4,1,1)
						gmr_unitLineHexagon1:zoom(250)
						gmr_unitLineHexagon1:zoomz(250)
						gmr_unitLineHexagon1:sleep(60/133)
						gmr_unitLineHexagon1:linear(30/133)
						gmr_unitLineHexagon1:diffusealpha(0)
						gmr_unitLineHexagon1:queuecommand('Hide')
						
					end)
					
					m2(111,function()
						
						gmr_unitLineHexagon2:stoptweening()
						gmr_unitLineHexagon2:hidden(0)
						gmr_unitLineHexagon2:x( sw*0.5 )
						gmr_unitLineHexagon2:y( -100 )
						gmr_unitLineHexagon2:z( -27600 )
						gmr_unitLineHexagon2:rotationz(0)
						gmr_unitLineHexagon2:rotationy(0)
						gmr_unitLineHexagon2:rotationx(80)
						gmr_unitLineHexagon2:diffuse(.7,.4,1,1)
						gmr_unitLineHexagon2:zoom(400)
						gmr_unitLineHexagon2:zoomz(400)
						gmr_unitLineHexagon2:sleep(30/133)
						gmr_unitLineHexagon2:linear(30/133)
						gmr_unitLineHexagon2:diffusealpha(0)
						gmr_unitLineHexagon2:queuecommand('Hide')
						
					end)
					
					local aya_fills = {{0},{1,4},{5},{6,13},{14},{10,15},{11},{3,8},{2,7,9,12}}
					
					m2(112,function()
						gmr_ayafill:hidden(0)
						gmr_ayafill:diffuse(.7,.4,1,1)
						for i=0,15 do
							gmr_ayafill:SetVertexColor(i,1,1,1,0)
						end
					end)
					
					for i=0,8 do
						local p = i
						m2(112.2+(i/8)*1.75,function()
							
							for j=1,table.getn(aya_fills[p+1]) do
								gmr_ayafill:SetVertexColor( aya_fills[p+1][j], 1,1,1,1 )
							end
							
						end)
					end
					
					m2(114-.05,function()
						gmr_ayafill:diffuse(1,1,1,1)
						gmr_ayafill:linear(60/133)
						gmr_ayafill:diffuse(.7,.4,1,0)
						gmr_ayafill:queuecommand('Hide')
					end)
					
					m2(119,function()
						
						groove_sphere:hidden(0)
						groove_sphere:diffuse(1,1,1,0)
						groove_sphere:linear(120/133)
						groove_sphere:diffusealpha(.2)
						
					end)
					
					m2(122,function()
						
						groove_sphere:linear(180/133)
						groove_sphere:diffusealpha(0)
						
					end)
					
					m2(125,function()
						
						groove_sphere:hidden(1)
						gmr_solidbg:hidden(0)
						gmr_solidbg:diffuse(0,.2,0,1)
						gmr_solidbg:x(sw/2)
						gmr_solidbg:zoomx(0)
						gmr_solidbg:linear(120/133)
						gmr_solidbg:zoomtowidth(sw)
						
					end)
					
					m2(127,function()
						
						gmr_trace_worldpos()
						
						gmr_unitQuadbg1:hidden(0)
						gmr_unitQuadbg1:valign(1)
						gmr_unitQuadbg1:zoomto(160,sh)
						gmr_unitQuadbg1:diffuse(0,0,0,1)
						gmr_unitQuadbg1:x(sw*0.25)
						gmr_unitQuadbg1:y(0)
						gmr_unitQuadbg1:linear(120/133)
						gmr_unitQuadbg1:y(sh)
						gmr_unitQuadbg1:sleep((139-127.5)*60/133)
						gmr_unitQuadbg1:queuecommand('Hide')
						
					end)
					
					m2(132,function()
					
						gmr_trace_worldpos()
					
						gmr_unitQuadbg2:hidden(0)
						gmr_unitQuadbg2:valign(1)
						gmr_unitQuadbg2:zoomto(160,sh)
						gmr_unitQuadbg2:diffuse(0,0,0,1)
						gmr_unitQuadbg2:x(sw*0.75)
						gmr_unitQuadbg2:y(0)
						gmr_unitQuadbg2:linear(120/133)
						gmr_unitQuadbg2:y(sh)
						gmr_unitQuadbg2:sleep((139-132.5)*60/133)
						gmr_unitQuadbg2:queuecommand('Hide')
						
					end)
					
					m2(137.5,function()
						
						gmr_unitHexagonbg:stoptweening()
						gmr_unitHexagonbg:hidden(0)
						gmr_unitHexagonbg:x( sw/2 )
						gmr_unitHexagonbg:y( sh/2 )
						gmr_unitHexagonbg:z( 0 )
						gmr_unitHexagonbg:rotationz(0)
						gmr_unitHexagonbg:rotationy(0)
						gmr_unitHexagonbg:diffuse(0,0,0,1)
						gmr_unitHexagonbg:zoom(1)
						gmr_unitHexagonbg:zoomz(1)
						gmr_unitHexagonbg:linear(2.5*60/133)
						gmr_unitHexagonbg:zoom(sw)
						gmr_unitHexagonbg:rotationz(180)
						gmr_unitHexagonbg:queuecommand('Hide')
						
						gmr_solidbg:sleep(2.5*60/133)
						gmr_solidbg:queuecommand('Hide')
						
					end)
					
					m2(140,function()
						
						vertColor(4,all,0,0,0,.6,1)
						vertColor(4,all,30/133,0,0,0,1)
						
					end)
					
					m2(140,function()
						
						groove_random_bars:hidden(0)
						groove_random_bars:SetPolygonMode(1)
						groove_random_bars:diffuse(0,0,.6,1)
						groove_random_bars:rotationx(90)
						groove_random_bars:zoom(1000)
						groove_random_bars:zoomz(1000)
						groove_random_bars:x(sw/2)
						groove_random_bars:y(3000)
						groove_random_bars:z(-35600)
						
					end)
					
					m2(141.5,function()
						gmr_gradientbg4:diffuseshift();
						gmr_gradientbg4:effectclock('bgm')
						gmr_gradientbg4:effectperiod(0.5)
						gmr_gradientbg4:effectcolor1(1,1,1,.6)
						gmr_gradientbg4:effectcolor2(1,1,1,.4)
					end)
					m2(143.0,function()
						gmr_gradientbg4:stopeffect()
						gmr_gradientbg4:hidden(1)
						vertColor(4,all,0,0,0,0,1)
						
						gmr_gradientbg3:hidden(0)
						gmr_gradientbg3:diffusealpha(1)
						
					end)
					m2(150.0,function()
						gmr_gradientbg4:hidden(0)
						gmr_gradientbg3:hidden(1)
						gmr_gradientbg3:diffusealpha(1)
					end)
					
					m2(151.75,function()
						
						vertColor(4,all,0,.6,0,0,1)
						vertColor(4,all,30/133,0,0,0,1)
						groove_random_bars:diffuse(0,0,0,0)
						
					end)
					m2(152.25,function()
						
						groove_random_bars:SetPolygonMode(0)
						groove_random_bars:diffuse(0,0,0,1)
						groove_random_bars:linear((60/133)*(161-152.25))
						groove_random_bars:addz(-100*(161-152.25))
						
					end)
					
					m2(159.75,function()
						
						vertColor(4,{0,1,2},0,.6,0,0,1)
						
					end)
					m2(160.25,function()
						
						vertColor(4,{0,1,2},0,0,0,0,1)
						vertColor(4,{6,7,8},0,.6,0,0,1)
						
					end)
					m2(160.75,function()
						
						vertColor(4,{6,7,8},0,0,0,0,1)
						vertColor(4,{3,4,5},0,.6,0,0,1)
						
					end)
					m2(161,function()
						
						groove_random_bars:hidden(1)
						vertColor(4,all,0,.6,0,0,1)
						vertColor(4,all,30/133,0,0,0,1)
						
					end)
					
					m2(142.5,function()
						gmr_ayafill:hidden(0)
						gmr_ayafill:diffuse(0,0,0,1)
						gmr_ayafill:sleep(30/133)
						gmr_ayafill:queuecommand('Hide')
					end)
					m2(149.0,function()
						gmr_ayafill:hidden(0)
						gmr_ayafill:diffuse(0,0,0,1)
						gmr_ayafill:sleep(30/133)
						gmr_ayafill:queuecommand('Hide')
					end)
					m2(161.0,function()
						gmr_ayafill:hidden(0)
						gmr_ayafill:diffuse(0,0,0,1)
						gmr_ayafill:sleep(30/133)
						gmr_ayafill:queuecommand('Hide')
					end)
					
					m2(141.5,function() vertColor(4,{0,3,6},0,0,0,1,1) end)
					m2(142.0,function() vertColor(4,{2,5,8},0,0,0,1,1) vertColor(4,{0,3,6},0,0,0,0,1) end)
					m2(142.5,function() vertColor(4,{1,4,7},0,0,0,1,1) vertColor(4,{2,5,8},0,0,0,0,1) end)
					m2(143.0,function() vertColor(4,{1,4,7},0,0,0,0,1) end)
					
					m2(147.5,function() vertColor(3,{1},0,0,0,1,1) end)
					m2(148.0,function() vertColor(3,{2},0,0,0,1,1) vertColor(3,{1},0,0,0,0,1) end)
					m2(148.5,function() vertColor(3,{0},0,0,0,1,1) vertColor(3,{2},0,0,0,0,1) end)
					m2(149.0,function() vertColor(3,{3},0,0,0,1,1) vertColor(3,{0},0,0,0,0,1) end)
					m2(149.5,function() vertColor(3,{3},0,0,0,0,1) end)
					
					m2(183,function()
						groove_waves:hidden(1)
						groove_orangeglow:hidden(1)
						
						--gmr_trace_worldpos()
						
						groove_gears2:hidden(0)
						groove_gears2:z(-43000)
						groove_gears2:y(-4000)
						groove_gears2:x(500)
						groove_gears2:rotationx(90)
						groove_gears2:rotationz(90)
						groove_sphere:hidden(0)
					end,true)
					
					mpf(183,204,function(beat)
						
						local alp = .5;
						if math.mod(beat*2,2) > 1 then
							alp = 0
						end
						
						if alp > 0 then
							groove_gears2:hidden(0)
						else
							groove_gears2:hidden(1)
						end
						groove_sphere:hidden(0)
						groove_sphere:diffuse(.6,.25,0,alp)
						
					end)
					
					m2(204,function()
						groove_gears2:hidden(1)
						groove_sphere:hidden(1)
						
					end,true)
					
					m2(162,function()
						gmr_gradient2_col0:xyza(0,0,0,1);
						gmr_gradient2_col1:xyza(0,0,0,1);
						gmr_gradient2_col2:xyza(0,0,0,1);
						gmr_gradient2_col3:xyza(0,0,0,1);
						gmr_gradient2_col4:xyza(0,0,0,1);
						gmr_gradient2_col5:xyza(0,0,0,1);
					end)
					
					m2(163,function()
						gmr_gradient2_col2:xyza(.5,0,0,1);
						gmr_gradient2_col2:linear(1.5*60/133);
						gmr_gradient2_col2:xyza(0,0,0,1);
						
						gmr_gradient2_col3:xyza(.5,0,0,1);
						gmr_gradient2_col3:linear(1.5*60/133);
						gmr_gradient2_col3:xyza(0,0,0,1);
						
					end)
					
					m2(165.5,function()
						gmr_gradient2_col2:sleep(0)
						gmr_gradient2_col2:xyza(.6,0,0,1);
						gmr_gradient2_col2:linear(1.5*60/133);
						gmr_gradient2_col2:xyza(0,0,0,1);
						
						gmr_gradient2_col3:sleep(0)
						gmr_gradient2_col3:xyza(.6,0,0,1);
						gmr_gradient2_col3:linear(1.5*60/133);
						gmr_gradient2_col3:xyza(0,0,0,1);
						
					end)
					
					m2(168,function()
						gmr_gradient2_col2:sleep(0)
						gmr_gradient2_col2:xyza(.7,0,0,1);
						gmr_gradient2_col2:linear(1.5*60/133);
						gmr_gradient2_col2:xyza(0,0,0,1);
						
						gmr_gradient2_col3:sleep(0)
						gmr_gradient2_col3:xyza(.7,0,0,1);
						gmr_gradient2_col3:linear(1.5*60/133);
						gmr_gradient2_col3:xyza(0,0,0,1);
						
					end)
					
					m2(170.5,function()
						gmr_gradient2_col2:sleep(0)
						gmr_gradient2_col2:xyza(.8,0,0,1);
						gmr_gradient2_col2:linear(1.5*60/133);
						gmr_gradient2_col2:xyza(0,0,0,0);
						
						gmr_gradient2_col3:sleep(0)
						gmr_gradient2_col3:xyza(.8,0,0,1);
						gmr_gradient2_col3:linear(1.5*60/133);
						gmr_gradient2_col3:xyza(0,0,0,0);
						
						gmr_gradient2_col0:xyza(0,0,0,0);
						gmr_gradient2_col1:xyza(0,0,0,0);
						gmr_gradient2_col1:xyza(0,0,0,0);
						gmr_gradient2_col4:xyza(0,0,0,0);
						gmr_gradient2_col5:xyza(0,0,0,0);
						
					end)
					
					m2(170,function()
						ray_onspeed = 1
						ray_offspeed = 2
					end)
					
					m2(173,'RaysOn')
					m2(178,'RaysOff')
					
					mpf(152,154,function(beat)
					
						local grain = 128
						local pulse = (((beat*2)-math.floor(beat*2)))
					
						groove_waves:hidden(0)
						groove_waves:diffuse( 1,0,0,0.6*(1-pulse) )
						groove_orangeglow:hidden(0)
						groove_orangeglow:diffuse( 1,0,0,0.6*(1-pulse) )
						
						local rings = {64+(64*pulse),52+(72*pulse),40+(64*pulse),28+(64*pulse),16+(64*pulse),4+(64*pulse)}
					
						for j=0,2 do
							for i=0,grain-1,4 do
									
								local r1, r2 = rings[j*2 + 2],rings[j*2 + 1]
						
								local ang1 = (i/(grain))*2*math.pi
								local ang2 = ((i+4)/(grain))*2*math.pi
								
								groove_waves:SetVertexPosition(i+j*grain,r2*math.cos(ang1),r2*math.sin(ang1),0)
								groove_waves:SetVertexColor(i+j*grain,.6,.3,0,1)
								
								groove_waves:SetVertexPosition(i+1+j*grain,r2*math.cos(ang2),r2*math.sin(ang2),0)
								groove_waves:SetVertexColor(i+1+j*grain,.6,.3,0,1)
								
								groove_waves:SetVertexPosition(i+2+j*grain,r1*math.cos(ang2),r1*math.sin(ang2),0)
								groove_waves:SetVertexColor(i+2+j*grain,.6,.3,0,0)
								
								groove_waves:SetVertexPosition(i+3+j*grain,r1*math.cos(ang1),r1*math.sin(ang1),0)
								groove_waves:SetVertexColor(i+3+j*grain,.6,.3,0,0)
								
							end
						end
						
					end)
					
					m2(154,function()
						groove_waves:hidden(1)
						groove_orangeglow:hidden(1)
						
					end,true)
					
					mpf(157.5,159.5,function(beat)
					
						local grain = 128
						local pulse = (((beat*2)-math.floor(beat*2)))
					
						groove_waves:hidden(0)
						groove_waves:diffuse( 1,0,0,0.6*(1-pulse) )
						groove_orangeglow:hidden(0)
						groove_orangeglow:diffuse( 1,0,0,0.6*(1-pulse) )
						
						local rings = {64+(64*pulse),52+(72*pulse),40+(64*pulse),28+(64*pulse),16+(64*pulse),4+(64*pulse)}
					
						for j=0,2 do
							for i=0,grain-1,4 do
									
								local r1, r2 = rings[j*2 + 2],rings[j*2 + 1]
						
								local ang1 = (i/(grain))*2*math.pi
								local ang2 = ((i+4)/(grain))*2*math.pi
								
								groove_waves:SetVertexPosition(i+j*grain,r2*math.cos(ang1),r2*math.sin(ang1),0)
								groove_waves:SetVertexColor(i+j*grain,.6,.3,0,1)
								
								groove_waves:SetVertexPosition(i+1+j*grain,r2*math.cos(ang2),r2*math.sin(ang2),0)
								groove_waves:SetVertexColor(i+1+j*grain,.6,.3,0,1)
								
								groove_waves:SetVertexPosition(i+2+j*grain,r1*math.cos(ang2),r1*math.sin(ang2),0)
								groove_waves:SetVertexColor(i+2+j*grain,.6,.3,0,0)
								
								groove_waves:SetVertexPosition(i+3+j*grain,r1*math.cos(ang1),r1*math.sin(ang1),0)
								groove_waves:SetVertexColor(i+3+j*grain,.6,.3,0,0)
								
							end
						end
						
					end)
					
					m2(159.5,function()
						groove_waves:hidden(1)
						groove_orangeglow:hidden(1)
						
					end,true)
					
					m2(153.75,function()
						
						gmr_gradientbg4:hidden(1)
						gmr_gradientbg3:hidden(0)
						gmr_gradientbg3:diffusealpha(.6)
						vertColor(3,all,0,0,0,0,1)
						vertColor(3,{1,2},0,1,0,0,1)
						vertColor(3,{0,3},30/133,1,0,0,1)
						vertColor(3,{1,2},30/133,0,0,0,1)
						
					end)
					m2(154.25,function()
						
						vertColor(3,{0,3},30/133,0,0,0,1)
						vertColor(3,{1,2},30/133,0,0,0,1)
						
					end)
					m2(154.75,function()
						
						gmr_gradientbg4:hidden(0)
						gmr_gradientbg3:hidden(1)
						gmr_gradientbg3:diffusealpha(1)
						
					end)
					
					gmr_cur_freq = {0,0,0,0,0,0,0,0}
					
					function gmr_check_freq(s,e)
						mpf(s,e,function(beat)
							for i=1,8 do
								gmr_cur_freq[i] = math.pow(freq_getFreqAtBeat(beat, i),1)
							end
						end)
					end
					
					gmr_check_freq(72,80)
					
					m2(73,function()
						
						groove_eq_ray:hidden(0)
						groove_eq_ray:diffuse(0,0,0,.6)
						groove_eq_ray:sleep(45/133)
						groove_eq_ray:diffuse(1,1,1,.6)
						groove_eq_ray:linear(45/133)
						groove_eq_ray:diffusealpha(0)
						groove_eq_ray:sleep(0)
						groove_eq_ray:diffuse(1,1,1,.3)
						groove_eq_ray:linear(45/133)
						groove_eq_ray:diffusealpha(0)
						groove_eq_ray:sleep(0)
						groove_eq_ray:queuecommand('Hide')
						
					end)
					
					function mimi_shuffle(t)
						local n = table.getn(t)
					 
						while n >= 2 do
							local k = math.random(n) -- 1 <= k <= n
							-- Quick swap
							t[n], t[k] = t[k], t[n]
							n = n - 1
						end
					 
						return t
					end
					
					grid_shuffle = {}
					for j=0,3 do
					for i=1,8 do
						table.insert(grid_shuffle,i)
					end
					end
					
					grid_shuffle = mimi_shuffle(grid_shuffle)
					
					mpf(73,78,function()
						
						local a = groove_eq_ray
						
						for i=0,31 do
						
							local ang1 = (i/32)*math.pi*2
							local ang2 = ((i+(2/3))/32)*math.pi*2
							local r1 = 3
							local r2 = 7
							local r3 = r2+1+(40*math.pow(gmr_cur_freq[ grid_shuffle[i+1] ],1))
							local r4 = r3+5
							
							a:SetVertexPosition(i*12 + 0, r2*math.sin(ang1), -r2*math.cos(ang1), 0)
							a:SetVertexPosition(i*12 + 1, r2*math.sin(ang2), -r2*math.cos(ang2), 0)
							a:SetVertexPosition(i*12 + 2, r1*math.sin(ang2), -r1*math.cos(ang2), 0)
							a:SetVertexPosition(i*12 + 3, r1*math.sin(ang1), -r1*math.cos(ang1), 0)
							
							a:SetVertexPosition(i*12 + 4, r3*math.sin(ang1), -r3*math.cos(ang1), 0)
							a:SetVertexPosition(i*12 + 5, r3*math.sin(ang2), -r3*math.cos(ang2), 0)
							a:SetVertexPosition(i*12 + 6, r2*math.sin(ang2), -r2*math.cos(ang2), 0)
							a:SetVertexPosition(i*12 + 7, r2*math.sin(ang1), -r2*math.cos(ang1), 0)
							
							a:SetVertexPosition(i*12 + 8, r4*math.sin(ang1), -r4*math.cos(ang1), 0)
							a:SetVertexPosition(i*12 + 9, r4*math.sin(ang2), -r4*math.cos(ang2), 0)
							a:SetVertexPosition(i*12 + 10, r3*math.sin(ang2), -r3*math.cos(ang2), 0)
							a:SetVertexPosition(i*12 + 11, r3*math.sin(ang1), -r3*math.cos(ang1), 0)
							
							a:SetVertexColor(i*12 + 2, 1, 1, 1, 0 )
							a:SetVertexColor(i*12 + 3, 1, 1, 1, 0 )
							a:SetVertexColor(i*12 + 8, 1, 1, 1, 0 )
							a:SetVertexColor(i*12 + 9, 1, 1, 1, 0 )
							
						end
						
					end)
					
					gmr_check_freq(119,126)
					gmr_check_freq(155,158)
					
					m2(119,function()
					
						groove_eq_bars_af:linear(180/133)
						groove_eq_bars_af:rotationz(45)
						groove_eq_bars_af:linear(180/133)
						groove_eq_bars_af:rotationz(180)
					
						groove_eq_bars:hidden(0)
						groove_eq_bars:diffuse(1,1,1,0)
						groove_eq_bars:sleep(120/133)
						groove_eq_bars:linear(60/133)
						groove_eq_bars:diffuse(1,1,1,.5)
						groove_eq_bars:sleep(60/133)
						groove_eq_bars:linear(120/133)
						groove_eq_bars:diffusealpha(0)
						groove_eq_bars:queuecommand('Hide')
					end)
					
					m2(155,function()
					
						groove_eq_bars_af:rotationz(90)
					
						groove_eq_bars:hidden(0)
						groove_eq_bars:diffuse(1,0,0,0)
						groove_eq_bars:linear(30/133)
						groove_eq_bars:diffusealpha(1)
						groove_eq_bars:sleep(120/133)
						groove_eq_bars:linear(30/133)
						groove_eq_bars:diffusealpha(0)
						groove_eq_bars:queuecommand('Hide')
					end)
					
					local funny_table = {1,2,3,4,5,4,5,3}
					
					mpf(119,126,function(beat)
						
						local b = groove_eq_bars_af
						local a = groove_eq_bars
						
						local barheight = 48
						local yoff = math.mod( (beat-119)*barheight*16, 8*barheight )
						
						for i=0,31 do
						
							local h = (0+320*gmr_cur_freq[ funny_table[math.mod(i,8)+1] ])*(1-0.5*math.pow((beat*2)-math.floor(beat*2),2))
							local ypos = i*barheight - (16*barheight) + yoff
							
							if ypos > 16*barheight then
								ypos = ypos - 32*barheight
							end
							
							a:SetVertexPosition(i*8 + 0, 0, ypos, 0 )
							a:SetVertexPosition(i*8 + 1, h, ypos, 0 )
							a:SetVertexPosition(i*8 + 2, h, ypos+barheight, 0 )
							a:SetVertexPosition(i*8 + 3, 0, ypos+barheight, 0 )
							
							a:SetVertexPosition(i*8 + 4, -h, ypos, 0 )
							a:SetVertexPosition(i*8 + 5, 0, ypos, 0 )
							a:SetVertexPosition(i*8 + 6, 0, ypos+barheight, 0 )
							a:SetVertexPosition(i*8 + 7, -h, ypos+barheight, 0 )
							
							a:SetVertexColor(i*8 + 1, 1, 1, 1, 0 )
							a:SetVertexColor(i*8 + 2, 1, 1, 1, 0 )
							a:SetVertexColor(i*8 + 4, 1, 1, 1, 0 )
							a:SetVertexColor(i*8 + 7, 1, 1, 1, 0 )
							
						end
						
					end)
					mpf(155,158,function(beat)
						
						local b = groove_eq_bars_af
						local a = groove_eq_bars
						
						local barheight = 48
						local yoff = math.mod( (beat-119)*barheight*16, 8*barheight )
						
						for i=0,31 do
						
							local h = (0+320*gmr_cur_freq[ funny_table[math.mod(i,8)+1] ])*(1-0.5*math.pow((beat*2)-math.floor(beat*2),2))
							local ypos = i*barheight - (16*barheight) + yoff
							
							if ypos > 16*barheight then
								ypos = ypos - 32*barheight
							end
							
							a:SetVertexPosition(i*8 + 0, 0, ypos, 0 )
							a:SetVertexPosition(i*8 + 1, h, ypos, 0 )
							a:SetVertexPosition(i*8 + 2, h, ypos+barheight, 0 )
							a:SetVertexPosition(i*8 + 3, 0, ypos+barheight, 0 )
							
							a:SetVertexPosition(i*8 + 4, -h, ypos, 0 )
							a:SetVertexPosition(i*8 + 5, 0, ypos, 0 )
							a:SetVertexPosition(i*8 + 6, 0, ypos+barheight, 0 )
							a:SetVertexPosition(i*8 + 7, -h, ypos+barheight, 0 )
							
							a:SetVertexColor(i*8 + 1, 1, 1, 1, 0 )
							a:SetVertexColor(i*8 + 2, 1, 1, 1, 0 )
							a:SetVertexColor(i*8 + 4, 1, 1, 1, 0 )
							a:SetVertexColor(i*8 + 7, 1, 1, 1, 0 )
							
						end
						
					end)
					
					m2(163,function()
						
						groove_sphere:hidden(0)
						groove_sphere:diffuse(1,1,1,0)
						groove_sphere:linear(300/133)
						groove_sphere:diffusealpha(.05)
						groove_sphere:sleep(300/133)
						groove_sphere:linear(600/133)
						groove_sphere:diffusealpha(0)
						groove_sphere:queuecommand('Hide')
						
					end)
					
					
					--home stretch!!
					
					m2(201.5,function()
						
						gmr_gradientbg4:hidden(1)
						gmr_gradientbg3:hidden(0)
						vertColor(3,all,0,0,0,0,1)
						vertColor(3,{2,3},2.5,.4,.5,0,1)
						
						gmr_treeline:hidden(0)
						gmr_treeline:addx(-300)
						gmr_treeline:y(sh)
						gmr_treeline:linear(2.5*60/133)
						gmr_treeline:y(sh-200)
						gmr_treeline:addx(200)
						gmr_treeline:decelerate(3*50/133)
						gmr_treeline:addx(100)
						
						gmr_skystars:hidden(0)
						gmr_skystars:diffusealpha(0)
						gmr_skystars:addx(60)
						gmr_skystars:linear(2.5*60/133)
						gmr_skystars:diffusealpha(.6)
						gmr_skystars:addx(-40)
						gmr_skystars:decelerate(3*50/133)
						gmr_skystars:addx(-20)
						
					end)
					
					m2(224,function()
						
						gmr_underquad:hidden(0)
						gmr_underquad:y(sh)
						
						for i=0,5 do
							gmr_treeline:decelerate(20/133)
							gmr_treeline:addy(-sh/6)
							gmr_treeline:sleep(10/133)
							gmr_skystars:decelerate(20/133)
							gmr_skystars:addy(-sh/6)
							gmr_skystars:sleep(10/133)
							gmr_underquad:decelerate(20/133)
							gmr_underquad:addy(-sh/6)
							gmr_underquad:sleep(10/133)
						end
						
						gmr_treeline:queuecommand('Hide')
						gmr_skystars:queuecommand('Hide')
						gmr_underquad:queuecommand('Hide')
						
						gmr_gradientbg3:linear(180/133)
						gmr_gradientbg3:diffusealpha(0)
						
					end)
					
					gmr_aurora_dir = 1
					for i=206.75,224,5 do
						
						m2(i,function()
							
							gmr_aurora:texcoordvelocity(.1*gmr_aurora_dir,0)
							gmr_aurora_dir = gmr_aurora_dir*-1
							gmr_aurora:hidden(0)
							gmr_aurora:diffusealpha(0)
							gmr_aurora:linear(30/133)
							gmr_aurora:diffusealpha(.4)
							gmr_aurora:sleep(30/133)
							gmr_aurora:linear(90/133)
							gmr_aurora:diffusealpha(0)
							gmr_aurora:queuecommand('Hide')
							
						end)
						
					end
					
					
					gmr_check_freq(200,224)
					
					m2(204,function()
					
						groove_eq_bars_af:rotationz(45)
					
						groove_eq_bars:hidden(0)
						groove_eq_bars:diffuse(0,0,0,0)
						groove_eq_bars:linear(60/133)
						groove_eq_bars:diffusealpha(.8)
						groove_eq_bars:sleep(60/133)
						groove_eq_bars:linear(120/133)
						groove_eq_bars:diffusealpha(0)
						groove_eq_bars:queuecommand('Hide')
					end)
					
					m2(209,function()
					
						groove_eq_bars_af:rotationz(135)
					
						groove_eq_bars:hidden(0)
						groove_eq_bars:diffuse(0,0,0,0)
						groove_eq_bars:linear(60/133)
						groove_eq_bars:diffusealpha(.8)
						groove_eq_bars:sleep(60/133)
						groove_eq_bars:linear(120/133)
						groove_eq_bars:diffusealpha(0)
						groove_eq_bars:queuecommand('Hide')
					end)
					
					m2(214,function()
					
						groove_eq_bars_af:rotationz(225)
					
						groove_eq_bars:hidden(0)
						groove_eq_bars:diffuse(0,0,0,0)
						groove_eq_bars:linear(60/133)
						groove_eq_bars:diffusealpha(.8)
						groove_eq_bars:sleep(60/133)
						groove_eq_bars:linear(120/133)
						groove_eq_bars:diffusealpha(0)
						groove_eq_bars:queuecommand('Hide')
					end)
					
					m2(219,function()
					
						groove_eq_bars_af:rotationz(315)
					
						groove_eq_bars:hidden(0)
						groove_eq_bars:diffuse(0,0,0,0)
						groove_eq_bars:linear(60/133)
						groove_eq_bars:diffusealpha(.8)
						groove_eq_bars:sleep(60/133)
						groove_eq_bars:linear(120/133)
						groove_eq_bars:diffusealpha(0)
						groove_eq_bars:queuecommand('Hide')
					end)
					
					local funny_table = {1,2,3,4,5,4,5,3}
					
					mpf(200,224,function(beat)
						
						local b = groove_eq_bars_af
						local a = groove_eq_bars
						
						local barheight = 48
						local yoff = math.mod( (beat-119)*barheight*16, 8*barheight )
						
						for i=0,31 do
						
							local h = (0+320*gmr_cur_freq[ funny_table[math.mod(i,8)+1] ])*(1-0.5*math.pow((beat*2)-math.floor(beat*2),2))
							local ypos = i*barheight - (16*barheight) + yoff
							
							if ypos > 16*barheight then
								ypos = ypos - 32*barheight
							end
							
							a:SetVertexPosition(i*8 + 0, 0, ypos, 0 )
							a:SetVertexPosition(i*8 + 1, h, ypos, 0 )
							a:SetVertexPosition(i*8 + 2, h, ypos+barheight, 0 )
							a:SetVertexPosition(i*8 + 3, 0, ypos+barheight, 0 )
							
							a:SetVertexPosition(i*8 + 4, -h, ypos, 0 )
							a:SetVertexPosition(i*8 + 5, 0, ypos, 0 )
							a:SetVertexPosition(i*8 + 6, 0, ypos+barheight, 0 )
							a:SetVertexPosition(i*8 + 7, -h, ypos+barheight, 0 )
							
							a:SetVertexColor(i*8 + 1, 1, 1, 1, 0 )
							a:SetVertexColor(i*8 + 2, 1, 1, 1, 0 )
							a:SetVertexColor(i*8 + 4, 1, 1, 1, 0 )
							a:SetVertexColor(i*8 + 7, 1, 1, 1, 0 )
							
						end
						
					end)
					
					m2(227,function()
						
						gmr_ayafill:hidden(0)
						gmr_ayafill:rotationz(180)
						gmr_ayafill:diffuse(.3,0,.8,0)
						gmr_ayafill:linear(180/133)
						gmr_ayafill:diffusealpha(.5)
						gmr_ayafill:tween(120/133,'outElastic(%f,0,1,1)')
						gmr_ayafill:rotationz(0)
						gmr_ayafill:linear(180/133)
						gmr_ayafill:diffuse(0,0,0,1)
						gmr_ayafill:linear(120/133)
						gmr_ayafill:diffuse(0,0,0,0)
						
					end)
					
					m2(227,function()
						ray_onspeed = 1
						ray_offspeed = 2
					end)
					
					m2(232,'RaysOn')
					m2(234,'RaysOff')
					
					
					m2(237,function()
					
						--gmr_trace_worldpos()
						
						gmr_solidbg:hidden(0)
						gmr_solidbg:diffuse(.4,.4,.4,1)
						gmr_solidbg:x(sw*1.5)
						gmr_solidbg:linear(30/133)
						gmr_solidbg:x(sw/2)
						
					end)
					
					-- -253.76000976563 405 46419.7890625
					
					m2(237,function()
						
						gmr_sdvx:hidden(0)
						gmr_sdvx:x(253 + 360)
						gmr_sdvx:rotationx(-80)
						gmr_sdvx:zoomz(2)
						
					end)
					
					mpf(237,242,function(beat)
						
						local a = (beat-237)/2
						
						if beat > 239 and beat < 240 then
							a = 1
						elseif beat > 240 then
							a = (242-beat)/2
						end
						
						gmr_sdvx:diffusealpha(a*.5)
						gmr_sdvx:z(-46800 + 200*(beat-237) )
						
					end)
					
					m2(242,function()
						
						gmr_sdvx:hidden(1)
						
					end)
					
					-- -253.76000976563 405 47488.38671875
					
					m2(242,function()
						
						gmr_taiko:hidden(0)
						gmr_taiko:x(253 - 360)
						gmr_taiko:rotationx(-80)
						gmr_taiko:zoom(1)
						gmr_taiko:zoomz(1)
						
					end)
					
					mpf(242,247,function(beat)
						
						local a = (beat-242)/2
						
						if beat > 244 and beat < 245 then
							a = 1
						elseif beat > 245 then
							a = (247-beat)/2
						end
						
						gmr_taiko:diffusealpha(a*.5)
						gmr_taiko:z(-47800 + 150*(beat-242) )
						
					end)
					
					m2(247,function()
						
						gmr_taiko:hidden(1)
						
					end)
					
					m2(246,function()
						
						gmr_jubeat:hidden(0)
						
					end)
					
					mpf(246,252,function(beat)
						
						local a = (beat-246)/2
						
						if beat > 248 and beat < 250 then
							a = 1
						elseif beat > 250 then
							a = (252-beat)/2
						end
						
						gmr_jubeat:zoom(4)
						gmr_jubeat:diffusealpha(a*.4)
						gmr_jubeat:rotationx(-80)
						gmr_jubeat:zoomz(4)
						
						gmr_jubeat:z(-49700 + 150*(beat-246) )
						
					end)
					
					local gmr_jubeat_table = {
						{247,4},
						{247,14},
						{247.75,7},
						{247.75,15},
						{248.5,11},
						{248.5,12},
						{249,0},
						{249,3},
						{249.5,1},
						{249.5,15},
						
						{250.25,2},
						{250.50,7},
						{250.75,6},
						{251.00,5},
						{251.25,8},
						{251.50,9},
					}
					
					for i=1,table.getn(gmr_jubeat_table) do
						local n = gmr_jubeat_table[i]
						m2(n[1]-1,'Jubeat'..n[2]+1)
					end
					
					m2(252,function()
						
						gmr_jubeat:hidden(1)
						
					end)
					
					
					
					local gmr_cur_maimai = 1
					local gmr_maimai_table = {
						{255,{-1,0}},
						{255.25,{-1,0}},
						{255.75,{2,5},true},
						
						{256.5,{1,2}},
						{256.75,{1,2}},
						{257.25,{4,7},true},
					}
					
					mpf(253,259,function(beat)
						
						gmr_maimai:hidden(0)
						
						local alpha = 0.3
						
						for i=1,table.getn(gmr_maimai_table) do
							
							local c = gmr_maimai_table[i]
							local a = gmr_maimai_stuff[2][i]
							local b1 = gmr_maimai_stuff[1][(i-1)*2 + 1]
							local b2 = gmr_maimai_stuff[1][(i-1)*2 + 2]
							
							if a and b1 and b2 and c then
								if beat > c[1]-2 and beat < c[1]+0.5 then
									a:hidden(0)
									b1:hidden(0)
									b2:hidden(0)
									b1:animate(0)
									b2:animate(0)
									
									local rad = 80
									local exrad = 160
									local zoom = 0
									local ialpha = 0
									if beat >= c[1]-1 and beat < c[1] then
										rad = 80 + exrad*(beat-(c[1]-1))
									elseif beat >= c[1] then
										rad = 80 + exrad
									end
									if beat >= c[1]-2 and beat < c[1]-1 then
										ialpha = (beat-(c[1]-2))
										zoom = (beat-(c[1]-2))
									elseif beat >= c[1]-1 and beat < c[1] then
										ialpha = 1
										zoom = 1
									elseif beat >= c[1] then
										ialpha = ((c[1]+0.5)-beat)/0.5
										zoom = 1
									end
									
									a:diffusealpha(alpha*ialpha)
									
									b1:diffusealpha(alpha*ialpha)
									b1:zoom(zoom*0.6)
									b2:diffusealpha(alpha*ialpha)
									b2:zoom(zoom*0.6)
									
									local ang1 = ((c[2][1]-0.5)/8)*math.pi*2
									local ang2 = ((c[2][2]-0.5)/8)*math.pi*2
									
									b1:xy( rad*math.sin(ang1), -rad*math.cos(ang1) )
									b2:xy( rad*math.sin(ang2), -rad*math.cos(ang2) )
									
									if c[3] then
										b1:setstate(1)
										b2:setstate(1)
									else
										b1:setstate(0)
										b2:setstate(0)
									end
									
									for i=0,31 do
										
										local ar1 = ((i/32) - 1/16)*2*math.pi
										local ar2 = (((i+1)/32) - 1/16)*2*math.pi
										local r1 = rad+2
										local r2 = rad-2
										a:SetVertexPosition(i*4+0, r1*math.sin(ar1), -r1*math.cos(ar1), 0)
										a:SetVertexPosition(i*4+1, r1*math.sin(ar2), -r1*math.cos(ar2), 0)
										a:SetVertexPosition(i*4+2, r2*math.sin(ar2), -r2*math.cos(ar2), 0)
										a:SetVertexPosition(i*4+3, r2*math.sin(ar1), -r2*math.cos(ar1), 0)
										
										if ar1 >= ang1 and ar2 <= ang2 or ( ang1 < 0 and ( ar1-(math.pi*2) >= ang1 or ar2 <= ang2 )) then
											a:SetVertexColor(i*4+0, 1,1,0,1)
											a:SetVertexColor(i*4+1, 1,1,0,1)
											a:SetVertexColor(i*4+2, 1,1,0,1)
											a:SetVertexColor(i*4+3, 1,1,0,1)
										else
											a:SetVertexColor(i*4+0, 1,1,0,0)
											a:SetVertexColor(i*4+1, 1,1,0,0)
											a:SetVertexColor(i*4+2, 1,1,0,0)
											a:SetVertexColor(i*4+3, 1,1,0,0)
										end
										
									end
									
								else
									a:hidden(1)
									b1:hidden(1)
									b2:hidden(1)
								end
							end
							
						end
						
					end)
					
					m2(259,function()
						
						gmr_maimai:hidden(1)
						
					end)
					
					m2(247,function()
						
						gmr_smashQuads:hidden(1)
						gmr_solidbg:diffuse(.5,.25,0,1)
						
					end)
					m2(248,function()
						
						gmr_solidbg:linear(120/133)
						gmr_solidbg:diffuse(0,.2,0,1)
						
					end)
					m2(255,function()
						
						gmr_solidbg:linear(180/133)
						gmr_solidbg:diffusealpha(0)
						
					end)
					
					m2(243,function()
						
						--gmr_trace_worldpos()
						-- -253.76000976563 165 47703.87109375
						gmr_smashQuads:hidden(0)
						gmr_smashQuads:rotationx(100)
						gmr_smashQuads:xyz(253-300,0,-48300)
						gmr_smashQuads:playcommand('Smash')
						
					end)
					m2(245,function()
						
						gmr_smashQuads:playcommand('Smash2')
						gmr_smashQuads:linear(120/133)
						gmr_smashQuads:rotationz(90)
						gmr_smashQuads:x(sw/2)
						gmr_smashQuads:z(-48800)
						gmr_smashQuads:zoom(10)
						gmr_smashQuads:zoomz(10)
						
					end)
					
					gmr_check_freq(252,272)
					
					m2(252,function()
						
						groove_eq_ray:hidden(0)
						groove_eq_ray:diffuse(1,1,1,0)
						groove_eq_ray:linear(120/133)
						groove_eq_ray:diffusealpha(.2)
						groove_eq_ray:sleep(120/133)
						groove_eq_ray:linear(120/133)
						groove_eq_ray:diffusealpha(0)
						groove_eq_ray:queuecommand('Hide')
						
					end)
					
					m2(258,function()
						gmr_gradientbg4:hidden(1)
						gmr_gradientbg3:hidden(0)
						gmr_gradientbg3:diffusealpha(1)
						
						gmr_gradientbg3:diffuseshift();
						gmr_gradientbg3:effectclock('bgm')
						gmr_gradientbg3:effectperiod(0.5)
						gmr_gradientbg3:effectcolor1(1,1,1,.4)
						gmr_gradientbg3:effectcolor2(1,1,1,.6)
					end)
					
					m2(258,function()
						
						vertColor(3,{0,1},0,0,.3,.6,1)
						vertColor(3,{2,3},0,0,.0,0,1)
						
						gmr_gradientbg3:hidden(0)
						gmr_gradientbg3:sleep(150/133)
						gmr_gradientbg3:queuecommand('Hide')
						
					end)
					
					m2(260.5,function()
						
						groove_eq_ray:hidden(0)
						groove_eq_ray:diffuse(0,.3,.6,.5)
						groove_eq_ray:sleep(150/133)
						groove_eq_ray:queuecommand('Hide')
						
					end)
					
					m2(263,function()
						
						gmr_gradientbg3:hidden(0)
						gmr_gradientbg3:sleep(150/133)
						gmr_gradientbg3:queuecommand('Hide')
						
					end)
					
					m2(265.5,function()
						
						groove_eq_ray:hidden(0)
						groove_eq_ray:diffuse(0,.3,.6,.5)
						groove_eq_ray:sleep(150/133)
						groove_eq_ray:queuecommand('Hide')
						
					end)
					
					m2(268,function()
						
						gmr_gradientbg3:hidden(0)
						gmr_gradientbg3:sleep(150/133)
						gmr_gradientbg3:queuecommand('Hide')
						
					end)
					
					m2(270.5,function()
						
						groove_eq_ray:hidden(0)
						groove_eq_ray:diffuse(0,.3,.6,.5)
						groove_eq_ray:sleep(90/133)
						groove_eq_ray:queuecommand('Hide')
						
					end)
					
					m2(272,function()
						
						gmr_gradientbg3:hidden(0)
						gmr_gradientbg3:sleep(60/133)
						gmr_gradientbg3:queuecommand('Hide')
						
					end)
					
					mpf(252,272,function()
						
						local a = groove_eq_ray
						
						for i=0,31 do
						
							local ang1 = (i/32)*math.pi*2
							local ang2 = ((i+(2/3))/32)*math.pi*2
							local r1 = 3
							local r2 = 7
							local r3 = r2+1+(30*math.pow(gmr_cur_freq[ grid_shuffle[i+1] ],1))
							local r4 = r3+5
							
							a:SetVertexPosition(i*12 + 0, r2*math.sin(ang1), -r2*math.cos(ang1), 0)
							a:SetVertexPosition(i*12 + 1, r2*math.sin(ang2), -r2*math.cos(ang2), 0)
							a:SetVertexPosition(i*12 + 2, r1*math.sin(ang2), -r1*math.cos(ang2), 0)
							a:SetVertexPosition(i*12 + 3, r1*math.sin(ang1), -r1*math.cos(ang1), 0)
							
							a:SetVertexPosition(i*12 + 4, r3*math.sin(ang1), -r3*math.cos(ang1), 0)
							a:SetVertexPosition(i*12 + 5, r3*math.sin(ang2), -r3*math.cos(ang2), 0)
							a:SetVertexPosition(i*12 + 6, r2*math.sin(ang2), -r2*math.cos(ang2), 0)
							a:SetVertexPosition(i*12 + 7, r2*math.sin(ang1), -r2*math.cos(ang1), 0)
							
							a:SetVertexPosition(i*12 + 8, r4*math.sin(ang1), -r4*math.cos(ang1), 0)
							a:SetVertexPosition(i*12 + 9, r4*math.sin(ang2), -r4*math.cos(ang2), 0)
							a:SetVertexPosition(i*12 + 10, r3*math.sin(ang2), -r3*math.cos(ang2), 0)
							a:SetVertexPosition(i*12 + 11, r3*math.sin(ang1), -r3*math.cos(ang1), 0)
							
							a:SetVertexColor(i*12 + 2, 1, 1, 1, 0 )
							a:SetVertexColor(i*12 + 3, 1, 1, 1, 0 )
							a:SetVertexColor(i*12 + 8, 1, 1, 1, 0 )
							a:SetVertexColor(i*12 + 9, 1, 1, 1, 0 )
							
						end
						
					end)
					
					m2(273,'GearFall')
					
					m2(279,function()
						gmr_falling:hidden(1)
					end)
					
					m2(279,function()
						
						groove_sphere:hidden(0)
						groove_sphere:diffuse(.6,.25,0,.6)
						groove_sphere:sleep(30/133)
						groove_sphere:diffuse(.6,.25,0,0)
						groove_sphere:sleep(30/133)
						groove_sphere:diffuse(.6,.25,0,.6)
						groove_sphere:sleep(30/133)
						groove_sphere:diffuse(.6,.25,0,0)
						groove_sphere:sleep(30/133)
						groove_sphere:diffuse(.6,.25,0,.3)
						groove_sphere:sleep(30/133)
						groove_sphere:diffuse(.6,.25,0,0)
						groove_sphere:sleep(30/133)
						
						gmr_gradientbg4:hidden(0)
						gmr_gradientbg4:diffusealpha(1)
						
						vertColor(4,all,0,.6,.25,0,1)
						vertColor(4,all,30/133,0,0,0,1)
						
					end)
					
					local vertflashes_ending = {0,8,2,6,1,7,3,5}
					
					local function flash_the_verts(beat)
						
						for i=1,table.getn(vertflashes_ending) do
							
							local p = i
							m2(beat+(i-1)*0.25,function()
								
								vertColor(4,all,0,0,0,0,1)
								vertColor(4,{vertflashes_ending[p]},0,.5,.2,0,1)
								
							end)
							
						end
						
						m2(beat+(table.getn(vertflashes_ending))*0.25,function()
								
							vertColor(4,all,0,0,0,0,1)
							
						end)
						
					end
					
					
					flash_the_verts(281.75)
					flash_the_verts(284.25)
					m2(286.5-.24,function()
						vertColor(4,{1,4,7},0,.5,.2,0,1)
					end)
					m2(286.75-.24,function()
						vertColor(4,all,0,0,0,0,1)
					end)
					flash_the_verts(287.00)
					flash_the_verts(289.50)
					m2(291.75-.24,function()
						vertColor(4,{3,4,5},0,.5,.2,0,1)
					end)
					m2(292.00-.24,function()
						vertColor(4,all,0,0,0,0,1)
					end)
					flash_the_verts(292.25)
					flash_the_verts(294.75)
					m2(297.00-.24,function()
						vertColor(4,{0,4,8},0,.5,.2,0,1)
					end)
					m2(297.25-.24,function()
						vertColor(4,all,0,0,0,0,1)
					end)
					
					local gmr_final_fill = {0,1,2,5,8,7,6,3}
					
					for i=1,table.getn(gmr_final_fill) do
							
						local p = i
						m2(297.5+(i-1)*0.25,function()
							
							vertColor(4,{gmr_final_fill[p]},0,.5,.2,0,1)
							
						end)
						
					end
					
					m2(292,function()
						--gmr_trace_worldpos()
						
						-- -320 -105 58798.0390625
						
						groove_gears3:z(-60000)
						groove_gears3:y(-410)
						groove_gears3:x(252)
						groove_gears3:rotationx(0)
						groove_gears3:rotationz(90)
						
					end)
					
					mpf(292,299,function(beat)
						
						local alp = .5;
						if math.mod(beat*2,2) > 1 then
							alp = 0
						end
						
						if alp > 0 then
							groove_gears3:hidden(0)
						else
							groove_gears3:hidden(1)
						end
						
					end)
					
					m2(299,function()
						
						groove_gears3:hidden(1)
						
					end)
					
					m2(299.5,function()
							
						vertColor(4,all,0,1,1,1,1)
						
						gmr_gradientbg4:diffusealpha(1)
						gmr_gradientbg4:linear(240/133)
						gmr_gradientbg4:diffusealpha(0)
						
						gmr_ayafill:hidden(0)
						gmr_ayafill:rotationz(0)
						gmr_ayafill:diffuse(1,1,1,1)
						gmr_ayafill:linear(120/133)
						gmr_ayafill:z(130)
						gmr_ayafill:diffuse(0,0,0,1)
						gmr_ayafill:linear(360/133)
						gmr_ayafill:z(390)
						
					end)
					
					local fluct = 1
					--chart2lua fills
					for i=1,table.getn(gmr_c2l_fills) do
						
						local a = gmr_c2l_fills[i]
						local b = a[1]
						local c = a[2]
						
						local mod = 'stealth'
						local amt = 150
						local len = 0.5
						if c == 0 then mod = 'dizzy'; amt = 100*fluct; fluct = fluct*-1 end
						if c == 1 then mod = 'tiny'; amt = -100 end
						if c == 2 then mod = 'tiny'; amt = -200 end
						if c == 3 then mod = 'stealth'; amt = 50; len = 1.5 end
						
						local amp = 1
						local mp = -1
						if mod == 'tiny' or mod == 'stealth' then
							mp = 1
						end
						
						me(b,len,amt*amp,0,mod,'len',linear,1)
						me(b,len,amt*amp*mp,0,mod,'len',linear,2)
						if mod == 'tiny' then
							me(b,len,amt*amp,0,'tinyz','len',linear,1)
							me(b,len,amt*amp*mp,0,'tinyz','len',linear,2)
						end
						
					end
					
					me(162,.5,-500,0,'tiny',l,linear)
					me(162,.5,-500,0,'tinyz',l,linear)
					me(162.5,.5,-500,0,'tiny',l,linear)
					me(162.5,.5,-500,0,'tinyz',l,linear)
					
					m(92,163,'*2 hidemines',e)
					m(232,269,'*2 hidemines',e)
					
					m2(101,'ShowMines')
					m2(137.5,'HideMines')
					m2(234,'ShowMines')
					m2(268,'HideMines')
					
					m(163,173,'50 dizzy, dizzyholds',e)
					
					for i=0,3 do
						me(204+5*i,.75,-300,0,'tiny',l,linear,1)
						me(204.75+5*i,.75,-300,0,'tiny',l,linear,1)
						me(205.25+5*i,.75,-300,0,'tiny',l,linear,1)
						me(205.75+5*i,.75,-300,0,'tiny',l,linear,1)
						me(204+5*i,.75,-300,0,'tinyz',l,linear,1)
						me(204.75+5*i,.75,-300,0,'tinyz',l,linear,1)
						me(205.25+5*i,.75,-300,0,'tinyz',l,linear,1)
						me(205.75+5*i,.75,-300,0,'tinyz',l,linear,1)
						
						me(206.5+5*i,2.5,-100*fluct,0,'dizzy',l,inQuad,1)
					end
					
					
					
					
					
					
		---------------------------------------------------------------------------------------
		----------------------Sort the actions table-------------------------------------------
		---------------------------------------------------------------------------------------
					
					function modtable_compare(a,b)
						return a[1] < b[1]
					end
					
					if table.getn(mod_actions) > 1 then
						table.sort(mod_actions, modtable_compare)
					end
					
					started = true
					
					opt_lastTime = -99
					
					
				else
					
					SCREENMAN:SystemMessage('NotITG version Too Old! Needs v3.2 or newer')
					
				end
				
			end"
			
			UpdateCommand="%function(self)

				
				
			end"
			
		/>
		
		<!--This is for the time based mod reader-->
		<BitmapText
			Font="Common Normal"
			Text="test"
			OnCommand="x,SCREEN_CENTER_X;y,SCREEN_CENTER_Y;effectclock,music;playcommand,SetTime;hidden,1"
			SetTimeCommand="%function(self) self:settext(self:GetSecsIntoEffect()); mod_time = mod_globaloffset+tonumber(self:GetText()); self:sleep(0.02); self:queuecommand('SetTime'); end"
		/>
		
		<Aux Var="groove_fig8" />
		
		<LAER Type="ActorFrame" InitCommand="%function(self) judc = self end"><children>
		<LAER Type="ActorProxy" InitCommand="%function(self) jud1p = self end"
		GetProxyMessageCommand="%function(self) if P1 then self:SetTarget(P1:GetChild('Judgment')) end end"/>
		<LAER Type="ActorProxy" InitCommand="%function(self) jud2p = self end"
		GetProxyMessageCommand="%function(self) if P2 then self:SetTarget(P2:GetChild('Judgment')) end end"/>
		</children></LAER>
		<LAER Type="ActorFrame" InitCommand="%function(self) comc = self end"><children>
		<LAER Type="ActorProxy" InitCommand="%function(self) com1p = self end"
		GetProxyMessageCommand="%function(self) if P1 then self:SetTarget(P1:GetChild('Combo')) end end"/>
		<LAER Type="ActorProxy" InitCommand="%function(self) com2p = self end"
		GetProxyMessageCommand="%function(self) if P2 then self:SetTarget(P2:GetChild('Combo')) end end"/>
		</children></LAER>
		
		<LAER File="adlib" Var="groove_adlib1" OnCommand="zoom,0;x,sw*0.2;y,sh*0.5 - 24;basezoomx,.54;basezoomy,.54;" AdlibP1MessageCommand="finishtweening;zoom,.8;decelerate,.1;zoom,.75;sleep,.6;accelerate,.2;zoom,0;" />
		<LAER File="adlib" Var="groove_adlib2" OnCommand="zoom,0;x,sw*0.8;y,sh*0.5 - 24;basezoomx,.54;basezoomy,.54;" AdlibP2MessageCommand="finishtweening;zoom,.8;decelerate,.1;zoom,.75;sleep,.6;accelerate,.2;zoom,0;" />
		
		<LAER File="title"
			Shader="UVClamp.frag"
			Var="groove_title"
			OnCommand="xy,sw/2,sh/2;diffusealpha,0;aux,-1"
			TitleMessageCommand="diffusealpha,1;linear,1.5;aux,0;sleep,2;linear,1.5;aux,1;"
		/>
		
		<LAER Type="Quad" OnCommand="stretchto,0,0,sw*0.25,sh;diffuse,0,0,0,1;" WideScreenMessageCommand="linear,180/133;addx,sw*-0.25;" WideScreen2MessageCommand="finishtweening;x,sw*-0.125;" />
		<LAER Type="Quad" OnCommand="stretchto,sw*0.75,0,sw+1,sh;diffuse,0,0,0,1;" WideScreenMessageCommand="linear,180/133;addx,sw*0.25;" WideScreen2MessageCommand="finishtweening;x,sw*1.125;" />
		
		<LAER Type="Quad" OnCommand="hidden,1;"
		Fk_P1_W8MessageCommand="%function(self) groove_faketaphit(0,8,1) end"
		Fk_P2_W8MessageCommand="%function(self) groove_faketaphit(0,8,2) end"
		P1_0_MissMessageCommand="%function(self) groove_fc[1] = false end"
		P1_1_MissMessageCommand="%function(self) groove_fc[1] = false end"
		P1_2_MissMessageCommand="%function(self) groove_fc[1] = false end"
		P1_3_MissMessageCommand="%function(self) groove_fc[1] = false end"
		P2_0_MissMessageCommand="%function(self) groove_fc[2] = false end"
		P2_1_MissMessageCommand="%function(self) groove_fc[2] = false end"
		P2_2_MissMessageCommand="%function(self) groove_fc[2] = false end"
		P2_3_MissMessageCommand="%function(self) groove_fc[2] = false end"
		/>
		
		<LAER Type="Quad" OnCommand="x,sw/2;y,sh/2;zoomto,sw,sh;cropright,0.4;faderight,0.5;diffuse,1,0,0,0"
		Fk_P1_W8MessageCommand="finishtweening;diffusealpha,.4;linear,0.3;diffusealpha,0;" />
		
		<LAER Type="Quad" OnCommand="x,sw/2;y,sh/2;zoomto,sw,sh;cropleft,0.4;fadeleft,0.5;diffuse,1,0,0,0"
		Fk_P2_W8MessageCommand="finishtweening;diffusealpha,.4;linear,0.3;diffusealpha,0;" />
		
		<LAER File="_eurostile outline" Text="" Var="groove_finalscore1" OnCommand="horizalign,left;shadowlength,0;diffusealpha,0;x,sw*0.2;y,sh*0.5 - 32" />
		<LAER File="_eurostile outline" Text="" Var="groove_finalscore2" OnCommand="horizalign,left;shadowlength,0;diffusealpha,0;x,sw*0.8;y,sh*0.5 - 32" />
		
		<LAER File="fullchain"
			Shader="UVClamp.frag"
			Var="groove_fcmarker"
			OnCommand="xy,sw/2,sh/2-18;diffusealpha,0;aux,-1"
			FullChainMessageCommand="diffusealpha,0.8;linear,1.5;aux,0;sleep,2;linear,1.5;aux,1;"
		/>
	
	</children></Layer>
	
</children></ActorFrame>