<ActorFrame
    InitCommand="%function(self)
		sw = SCREEN_WIDTH
		sh = SCREEN_HEIGHT
		scx = sw/2
		scy = sh/2
        songName = GAMESTATE:GetCurrentSong():GetSongDir();
    end"
><children>

	<Actor
	Type="Quad" InitCommand="hidden,1" OnCommand="sleep,1000" />
	
	<Layer File="easing" />
	<Layer File="bum" />
	<Layer File="modhelpers" />
	<Layer File="spellcard" />
		
	<Actor
	Type="Quad" InitCommand="hidden,1"
		OnCommand="%function(self)

			debug_show = false;
			spb = 60/220
			dai_cmod = 335
			smod = dai_cmod/220
---------------------------------------------------------------------------------------
----------------------DON'T TOUCH IT KIDDO---------------------------------------------
---------------------------------------------------------------------------------------

			
			checked = false; P1=nil;P2=nil;P3=nil;P4=nil;jud1=nil;com1=nil;jud2=nil;com2=nil;jud3=nil;com3=nil;
			mod_plr = {};
			mod_firstSeenBeat = GAMESTATE:GetSongBeat();
			lfd_parity = 0
			--ldur--ludr--urld--ulrd--dlru--drlu--rudl--rdul
			lfd_flinvert = { {250,-250}, {25,425}, {-150,150}, {75,375}, {250,-150}, {25,-375}, {-150,250}, {75,-425} }
			lfd_flinvsel = {1,3,rot=1}
			lfd_sugar = true
			lfd_quickmaths = {}
			lfd_tickmath = -1
			lfd_cocksetup = true
			local m=mod_insert
			local me=mod_ease
			local mm=mod_message
			
			for i=1,7,1 do
				table.insert(lfd_quickmaths,{math.cos(math.pi*i*2/7),math.sin(math.pi*i*2/7)})
			end
			
			slumpo = false
			for pn=1,2 do
				if GAMESTATE:IsPlayerEnabled(pn-1) then
					if GAMESTATE:GetCurrentSteps(pn-1):GetDifficulty() == 5 then
						slumpo = true
					end
				end
			end
			
---------------------------------------------------------------------------------------
----------------------END DON'T TOUCH IT KIDDO-----------------------------------------
---------------------------------------------------------------------------------------

            --beat based mods
            --{beat_start, beat_end, mods, len_or_end, player_number}
            mods = {
				{0,435,'*100000 -999999 cover, *1000 1x, *1000 C'.. dai_cmod ..', *1000 overhead','end'},
            }
            --m(i,.5,'*1000 '.. valuething ..' reverse, *1000 '.. valuething2 ..' invert','len')
			
			--beat-based ease mods
			--{time_start, time_end, mod_start, mod_end, mod, len_or_end, ease_type, player_number, sustaintime, optional_param1, optional_param2}
			--valid ease types are
				--linear
				--inQuad    outQuad    inOutQuad    outInQuad
				--inCubic   outCubic   inOutCubic   outInCubic
				--inQuart   outQuart   inOutQuart   outInQuart
				--inQuint   outQuint   inOutQuint   outInQuint
				--inSine    outSine    inOutSine    outInSine
				--inExpo    outExpo    inOutExpo    outInExpo
				--inCirc    outCirc    inOutCirc    outInCirc
				--inElastic outElastic inOutElastic outInElastic    --can take 2 optional parameters - amplitude & period
				--inBack    outBack    inOutBack    outInBack       --can take 1 optional parameter  - spring amount
				--inBounce  outBounce  inOutBounce  outInBounce
				
			mods_ease = { }
			--me(beat,len,str1,str2,mod,t,ease,pn,sus,opt1,opt2)
			
            --SCREAMING GUMBALL / timed message broadcaster
            --they no longer have to be in order, because they're sorted now
            curmessage = 1;
            --{beat,message,persists}
            messages = { }

			mm(0,function()
				for i,v in ipairs(mod_plr) do
					if v then
						v:accelerate(spb*5.75)
						v:zoom(0)
						v:x(SCREEN_CENTER_X)
						v:GetChild('Judgment'):accelerate(spb*5.75)
						v:GetChild('Judgment'):x(240*(i*2-3))
						v:GetChild('Combo'):accelerate(spb*5.75)
						v:GetChild('Combo'):x(240*(i*2-3))
						v:sleep(1)
						v:zoom(1)
					end
				end
			
			end)
			
			mm(24,function() SCREENMAN:GetTopScreen():SetDrawByZPosition(true) end)
			mm(168,function() SCREENMAN:GetTopScreen():SetDrawByZPosition(false) end)
			mm(176,function() SCREENMAN:GetTopScreen():SetDrawByZPosition(true) end)
			mm(420,function() SCREENMAN:GetTopScreen():SetDrawByZPosition(false) end)
			
			mm(0,function() MESSAGEMAN:Broadcast('LetterBoxOn') end,true)
			
			mm(5.75,function()
				for i,v in ipairs(mod_plr) do
					if v then
						v:x(sw/2)
						v:GetChild('Judgment'):x(240*(i*2-3))
						v:GetChild('Combo'):x(240*(i*2-3))
					end
				end
			
			end,true)
			m(5.75,48,'*10000 49.9% Reverse,*10000 -2000% Bumpy,*10000 1200% Sudden,*10000 100% Mini, *1000 no flip, *1000 dark','end')
			m(5.75,48,'*10000 -92% SuddenOffset, *10000 C8.43, *1000 -200 brake','end')
			m(42,48,'*10000 49.9% Reverse,*10000 2000% Bumpy','end')
			me(26,30,0,50,'flip','end',inCirc)
			me(30,33,10,50,'flip','end',inCirc)
			me(33,36,10,50,'flip','end',inCirc)
			me(36,39,10,50,'flip','end',inCirc)
			me(39,42,10,50,'flip','end',inCirc)
			me(42,48,0,0,'dark','end',inCirc)
			me(42,48,0,50,'brake','end',outQuad)
			me(42,48,-100,-200,'hallway','end',outQuad)
			me(42,48,0,-50,'mini','end',inQuad)
			me(42,48,25000,20000,'centered','end',inQuad)
			
			me(44,50,-92,-100,'suddenoffset','end',outQuad)
			me(48,51,50,0,'brake','end',outQuad)
			me(48,51,-200,0,'hallway','end',outQuad)
			me(48,51,-50,0,'mini','end',outQuad)
			me(48,51,2000,0,'centered','end',outCirc)
			me(48,51,2000,0,'bumpy','end',outQuad)
			me(48,51,49.9,0,'reverse','end',inCirc)
			me(48,49,1200,0,'sudden','end',outCirc)
			
			mm(30,function() soxvar:aux(50); soxvar:linear(spb); soxvar:aux(0) end)
			mm(33,function() soxvar:aux(50); soxvar:linear(spb); soxvar:aux(0) end)
			mm(36,function() soxvar:aux(50); soxvar:linear(spb); soxvar:aux(0) end)
			mm(39,function() soxvar:aux(50); soxvar:linear(spb); soxvar:aux(0) end)
			
			local lfd_lparity = 1
			me(24,3,0,lfd_lparity*-314.667,'dizzy','len',outCirc)
			for i=27,36,3 do
				local funparity = lfd_lparity
				if i==27 then 
					funparity=0
				else
					me(i,3,100,50,'reverse','len',outQuad)
				end
				me(i,2,lfd_lparity*-314.667,0,'dizzy','len',outCirc)
				mm(i,function()
					for i,v in ipairs(mod_plr) do
						if v then
							v:zoomz(1)
							v:rotationz(180*funparity)
							v:decelerate(spb*2)
							v:rotationz(0)
							v:zoomz(2)
							v:z(800*sw/640)			

							v:GetChild('Judgment'):decelerate(spb*2)
							v:GetChild('Judgment'):z(-800)
							v:GetChild('Combo'):decelerate(spb*2)
							v:GetChild('Combo'):z(-800)
						end
					end
					if LFD_cock then
						LFD_cock:rotationz(180*funparity)
						LFD_cock:decelerate(spb*2)
						LFD_cock:rotationz(0)
					end
				end)
				lfd_lparity = lfd_lparity * -1
			end
			me(42,3,-2000,2000,'bumpy','end',outQuad)
			mm(42,function()
				for i,v in ipairs(mod_plr) do
					if v then
						v:decelerate(spb*1)
						v:z(333)
						v:zoomz(1)
						v:decelerate(spb*6)
						v:z(0)
						
						v:GetChild('Judgment'):decelerate(spb)
						v:GetChild('Judgment'):z(0)
						v:GetChild('Combo'):decelerate(spb)
						v:GetChild('Combo'):z(0)
					end
				end
			end)
			
			mm(51,function()
				for i,v in ipairs(mod_plr) do
					if v then
						v:zoomz(5*sw/640)
					end
				end
			end)
			
			for i=51,53.75,.25 do
				m(i,.25,'*10000 '.. math.random(-300,300) ..' drunk,*10000 '.. math.random(-300,300) ..' tipsy,*10000 '.. math.random(-500,500) ..' bumpy,*10000 '.. math.random(-100,100) ..' hallway,','len',1)
				m(i,.25,'*10000 '.. math.random(-300,300) ..' drunk,*10000 '.. math.random(-300,300) ..' tipsy,*10000 '.. math.random(-500,500) ..' bumpy,*10000 '.. math.random(-100,100) ..' hallway,','len',2)
			end
			
			mm(54,function()
				for i,v in ipairs(mod_plr) do
					if v then
						v:zoomz(1)
						v:x( sw/2 + 320*(i*2-3) )
						v:GetChild('Judgment'):x(-80*(i*2-3))
						v:GetChild('Judgment'):decelerate(spb*3)
						v:GetChild('Judgment'):x(-120*(i*2-3))
						v:GetChild('Combo'):x(-80*(i*2-3))
						v:GetChild('Combo'):decelerate(spb*3)
						v:GetChild('Combo'):x(-120*(i*2-3))
					end
				end
			end,true)
			mm(54,function() fuckaux('decel',spb*1.5,90) end)
			mm(55.5,function() fuckaux('accel',spb*.75,180) end)
			mm(56.25,function() fuckaux('decel',spb*.75,270) end)
			mm(57,function() fuckaux('accel',spb*.75,180) end)
			mm(57.75,function() fuckaux('decel',spb*.75,90) end)
			mm(58.5,function() fuckaux('accel',spb*.75,180) end)
			mm(59.25,function() fuckaux('decel',spb*.75,270) end)
			
			m(54,10,'*10000 no drunk,*10000  no tipsy,*10000  no bumpy,*10000  no hallway','len')
			mm(56.25,function() lfd_flinvsel[1] = 8; end,true)
			
			--me(60,3,0,500,'bumpy','len',linear)
			me(60,3,0,-300,'hallway','len',linear)
			me(63,3,-300,0,'hallway','len',outCirc)
			local mini=0-10.5
			for i=63,65.75,.25 do
				m(i,.25,'*10000 -150 flip, *10000 150 invert, *10000 '.. mini ..' mini, *10000 '.. 500*lfd_lparity ..' bumpy','len')
				lfd_lparity = lfd_lparity * -1
				mini=mini-10.5
			end
			m(66,67,'*10000 -150 flip, *10000 150 invert, *10000 '.. mini ..' mini, *10000 no bumpy','end')
			for i=67,68,1/12 do
				m(i,(1/12),'*10000 -150 flip, *10000 150 invert, *10000 '.. mini ..' mini','len')
				mini=mini+10.5
			end
			m(68,69,'*10000 -150 flip, *10000 150 invert, *10000 '.. mini ..' mini','end')
			--me(63,3,-150,-250,'flip','len',linear)
			--me(63,3,150,250,'invert','len',linear)
			
			
			mm(69,function() fuckaux('decel',spb*2,90); end)
			mm(70,function()lfd_flinvsel[1]=1;lfd_flinvsel[2]=1;end,true)
			for i=71,85,6 do
				mm(i,function() fuckaux('accel',spb*1,180) end)
				mm(i+1,function() fuckaux('decel',spb*2,270) end)
				mm(i+3,function() fuckaux('accel',spb*1,180) end)
				mm(i+4,function() fuckaux('decel',spb*2,90) end)
			end
			
			me(69,6,50,0,'stealth','len',outQuad)
			me(81,6,50,0,'stealth','len',outQuad)
			me(90,3,200,0,'drunk','len',outQuad)
			me(90,3,200,0,'tipsy','len',outQuad)
			me(101,3,200,0,'drunk','len',outQuad)
			me(101,3,200,0,'tipsy','len',outQuad)
			me(104,3,-200,0,'drunk','len',outQuad)
			me(104,3,-200,0,'tipsy','len',outQuad)
			me(93,6,50,0,'stealth','len',outQuad)
			me(81,6,-50,0,'tornado','len',linear)
			
			me(105,1,100,0,'brake','len',outQuad)
			me(106,1,100,0,'brake','len',outQuad)
			me(107,1,100,0,'brake','len',outQuad)
			me(108,1,100,0,'brake','len',outQuad)
			me(109,1,100,0,'brake','len',outQuad)
			me(110,1,100,0,'brake','len',outQuad)
			me(111,1,100,0,'brake','len',outQuad)
			me(111,1,100,0,'brake','len',outQuad)
			me(113,1,100,0,'brake','len',outQuad)
			
			mm(90,function() fuckaux('decel',spb,270); lfd_flinvsel[2]=3; end)
			mm(91,function() fuckaux('decel',spb,90); lfd_flinvsel[1]=5; end,true)
			mm(92,function() fuckaux('decel',spb,270); lfd_flinvsel[2]=7; end,true)
			
			mm(93,function() fuckaux('decel',spb*2,90); end)
			mm(94,function()lfd_flinvsel[1]=1;lfd_flinvsel[2]=1;end,true)
			for i=95,111,6 do
				mm(i,function() fuckaux('accel',spb*1,180) lfd_flinvsel[2]=math.mod(i,8)+1; end)
				mm(i+1,function() fuckaux('decel',spb*2,270) end)
				mm(i+3,function() fuckaux('accel',spb*1,180) lfd_flinvsel[1]=math.mod(i+3,8)+1 end)
				mm(i+4,function() fuckaux('decel',spb*2,90) end)
			end
			
			mm(114,function() fuckaux('decel',spb,270); lfd_flinvsel[2]=1; end,true)
			mm(115,function() fuckaux('decel',spb,90); lfd_flinvsel[1]=7; end)
			mm(116,function() fuckaux('decel',spb,270); end,true)
			mm(117,function() lfd_flinvsel.rot=2;  end,true)

			mm(117,function() fuckaux('decel',spb*3,260); end)
			mm(120,function() fuckaux('decel',spb*3,285); end)
			mm(123,function() fuckaux('decel',spb*3,250); end)
			mm(126,function() fuckaux('decel',spb*2,295); end)
			mm(128,function() fuckaux('linear',spb,100); end)
			
			mm(129,function() fuckaux('decel',spb*3,85); end)
			mm(132,function() fuckaux('decel',spb*3,110); end)
			mm(135,function() fuckaux('decel',spb*3,75); end)
			mm(138,function() fuckaux('decel',spb*2,120); end)
			mm(140,function() fuckaux('linear',spb*1,275); end)
			
			mm(141,function() fuckaux('decel',spb*3,260);lfd_flinvsel.rot=3; end)
			mm(144,function() fuckaux('decel',spb*3,285); end)
			mm(147,function() fuckaux('decel',spb*3,250); end)
			mm(150,function() fuckaux('decel',spb*2,295); end)
			mm(152,function() fuckaux('bend',spb*2,60); end)
			
			mm(154,function() fuckaux('decel',spb*.333,120); lfd_flinvsel.rot=2;
				for i,v in ipairs(mod_plr) do
					if v then
						v:decelerate(spb*.333)
						v:rotationx(0)
					end
				end
			end)
			mm(154.333,function() fuckaux('decel',spb*.333,60); end)
			mm(154.667,function() fuckaux('decel',spb*1.333,240); end)
			
			mm(3+153,function() fuckaux('decel',spb*1,300); lfd_flinvsel.rot=3; end)
			mm(3+154,function() fuckaux('decel',spb*.333,240); end)
			mm(3+154.333,function() fuckaux('decel',spb*.333,300); end)
			mm(3+154.667,function() fuckaux('decel',spb*1.333,70); end)
			
			mm(159,function() fuckaux('decel',spb*2,120); end)
			mm(161,function() fuckaux('decel',spb*1,70);  lfd_flinvsel.rot=2; 
				for i,v in ipairs(mod_plr) do
					if v then
						v:decelerate(spb*1)
						v:rotationx(0)
					end
				end
			end)
			mm(162,function() fuckaux('accel',spb*3,450);  end)

			function fuckaux(twee, tweet, endPos)
				if auxvar then
					auxvar:finishtweening()
					if twee == 'decel' then
						auxvar:decelerate(tweet)
					elseif twee == 'accel' then
						auxvar:accelerate(tweet)
					elseif twee == 'bbegin' then
						auxvar:bouncebegin(tweet)
					elseif twee == 'bend' then
						auxvar:bounceend(tweet)
					else
						auxvar:linear(tweet)
					end
					auxvar:aux(endPos)
				end
			end
			
			mm(165,function()
				for i,v in ipairs(mod_plr) do
					if v then
						v:decelerate(spb*6)
						v:x(SCREEN_CENTER_X)
						v:rotationx(0)
						v:rotationy(0)
						v:GetChild('Judgment'):decelerate(spb*6)
						v:GetChild('Judgment'):x(220*(i*2-3))
						v:GetChild('Judgment'):z(-800)
						v:GetChild('Combo'):decelerate(spb*6)
						v:GetChild('Combo'):x(220*(i*2-3))
						v:GetChild('Combo'):z(-800)
						
					end
				end
			end)
			me(165,6,250,0,'flip','len',outQuad)
			me(165,6,-250,0,'invert','len',outQuad)
			me(165,6,0,-150,'hallway','len',inQuad)
			me(165,6,0,-1500,'bumpy','len',linear)
			me(165,6,0,-150,'tornado','len',linear)
			
			me(165,171,0,200,'mini','end',inQuad)
			mm(171,function()
				for i,v in ipairs(mod_plr) do
					if v then
						v:x(SCREEN_CENTER_X)
						v:GetChild('Judgment'):x(220*(i*2-3))
						v:GetChild('Judgment'):z(-800)
						v:GetChild('Combo'):x(220*(i*2-3))
						v:GetChild('Combo'):z(-800)
					end
				end
			end,true)
			
			m(171,186,'*10000 35 Reverse,*10000 -2000% Bumpy,*10000 1200% Sudden,*10000 100% Mini, *1000 no flip, *1000 dark','end')
			
			me(173,2,0,8.43,'cmod','len',outCirc)
			me(173,2,0,120,'centered','len',outCirc)
			me(173,2,200,0,'tipsy','len',outCirc)
			me(173,2,200,0,'drunk','len',outCirc)
			me(173,2,0,100,'mini','len',outCirc)
			me(171,2,200,100,'mini','len',outQuad)
			me(174,3,0,50,'flip','len',inQuad)
			
			me(177,1,50,100,'mini','len',outQuad)
			me(179,1,50,100,'mini','len',outQuad)
			me(180,1,50,100,'mini','len',outQuad)
			me(182,1,50,100,'mini','len',outQuad)
			me(183,1,50,100,'mini','len',outQuad)
			me(184,1,50,100,'mini','len',outQuad)
			me(185,1,50,100,'mini','len',outQuad)
			me(186,1,50,100,'mini','len',outQuad)
			
			m(171,186,'*10000 -92% SuddenOffset, *10000 C8.43, *1000 -200 brake','end')
			m(171,173,'*10000 C0','end')
			mm(171,function()
				for i,v in ipairs(mod_plr) do
					if v then
						v:z(0)
						v:y(SCREEN_CENTER_Y*1.5)
						v:zoomz(1)
						v:sleep(spb*2)
						v:bouncebegin(spb*4)
						v:zoomz(2)
						v:z(800*sw/640)
					end
				end
				fuckaux('linear',0,270);
			end)
			mm(189,function() fuckaux('accel',spb*1.5,180); end)
			mm(190.5,function() fuckaux('decel',spb*1.5,90); end)
			mm(192,function() fuckaux('accel',spb*1.5,180); end)
			mm(193.5,function() fuckaux('decel',spb*1.5,270); end)
			mm(195,function() fuckaux('accel',spb*1,180); end)
			mm(196,function() fuckaux('decel',spb*1,90); end)
			mm(197,function() fuckaux('accel',spb*1,180); end)
			mm(198,function() fuckaux('decel',spb*1,270); end)
			
			me(186,3,35,0,'reverse','len',linear)
			me(186,3,-2000,0,'bumpy','len',outCirc)
			me(186,3,0,0,'sudden','len',outCirc)
			me(186,3,100,0,'mini','len',linear)
			me(186,3,100,0,'dark','len',linear)
			me(186,1,8.43,dai_cmod,'cmod','len',linear)
			me(186,1,-200,0,'brake','len',linear)
			mm(186,function()
				for i,v in ipairs(mod_plr) do
					if v then
						v:decelerate(spb)
						v:z(0)
						v:y(SCREEN_CENTER_Y)
						v:zoomz(1)
					end
				end
			end)
			
			mm(188,function()
				for i,v in ipairs(mod_plr) do
					if v then
						v:decelerate(spb)
						v:zoomz(1)
						v:x(scx+320*(i*2-3))
						v:GetChild('Judgment'):decelerate(spb)
						v:GetChild('Judgment'):x(-120*((i*2)-3))
						v:GetChild('Judgment'):z(0)
						v:GetChild('Combo'):decelerate(spb)
						v:GetChild('Combo'):x(-120*((i*2)-3))
						v:GetChild('Combo'):z(0)
					end
				end
				lfd_flinvsel.rot=1
				lfd_flinvsel[2]=1
				lfd_flinvsel[1]=2
			end,true)
			me(188,1,0,250,'flip','len',outQuad)
			me(188,1,0,-250,'invert','len',outQuad)
						
			m(200,210,'*10000 49 Reverse,*10000 -2000% Bumpy,*10000 1200% Sudden,*10000 100% Mini, *1000 no flip, *1000 dark','end')
			
			me(200,1,dai_cmod,8.43,'cmod','len',inQuad)
			
			me(199,2,0,45,'reverse','len',linear)
			me(200,1,0,50,'centered','len',inQuad)
			me(199,2,250,0,'flip','len',inQuad)
			me(199,2,-250,0,'invert','len',inQuad)
			me(200,1,0,-2000,'bumpy','len',inQuad)
			me(200,1,0,1200,'sudden','len',inCirc)
			me(200,1,0,100,'mini','len',linear)
			me(200,1,0,100,'dark','len',inCirc)
			me(200,1,0,-200,'brake','len',linear)
			--me(199,2,0,100,'flip','len',inCirc)
			
			m(200,210,'*10000 -92% SuddenOffset, *10000 C8.43, *1000 -200 brake','end')
			mm(199,function()
				for i,v in ipairs(mod_plr) do
					if v then
						v:accelerate(spb*2)
						v:x(SCREEN_WIDTH * .5)
						v:y(SCREEN_CENTER_Y*1.5)
						v:zoomz(2)
						v:z(800*sw/640)
						v:GetChild('Judgment'):accelerate(spb*2)
						v:GetChild('Judgment'):x(SCREEN_CENTER_X*.5*((i*2)-3))
						v:GetChild('Judgment'):z(-800)
						v:GetChild('Combo'):accelerate(spb*2)
						v:GetChild('Combo'):x(SCREEN_CENTER_X*.5*((i*2)-3))
						v:GetChild('Combo'):z(-800)
					end
				end
			end)
			
			me(210,3,35,0,'reverse','len',linear)
			me(210,3,-2000,0,'bumpy','len',outCirc)
			me(210,3,0,0,'sudden','len',outCirc)
			me(210,3,100,0,'mini','len',linear)
			me(210,3,100,0,'dark','len',linear)
			me(210,1,8.43,dai_cmod,'cmod','len',linear)
			me(210,1,-200,0,'brake','len',linear)
			mm(210,function()
				for i,v in ipairs(mod_plr) do
					if v then
						v:decelerate(spb)
						v:z(0)
						v:y(SCREEN_CENTER_Y)
						v:rotationy(0)
						v:zoomz(1)
					end
				end
			end)
			mm(212,function()
				for i,v in ipairs(mod_plr) do
					if v then
						v:decelerate(spb)
						v:zoomz(1)
						v:x(scx+320*(i*2-3))
						v:GetChild('Judgment'):decelerate(spb)
						v:GetChild('Judgment'):x(-120*(i*2-3))
						v:GetChild('Judgment'):z(0)
						v:GetChild('Combo'):decelerate(spb)
						v:GetChild('Combo'):x(-120*(i*2-3))
						v:GetChild('Combo'):z(0)
					end
				end
				lfd_flinvsel.rot=1
				lfd_flinvsel[2]=1
				lfd_flinvsel[1]=8
			end,true)
			me(212,1,0,250,'flip','len',outQuad)
			me(212,1,0,-250,'invert','len',outQuad)
			
			mm(24+189,function() fuckaux('accel',spb*1.5,180); end)
			mm(24+190.5,function() fuckaux('decel',spb*1.5,90); end)
			mm(24+192,function() fuckaux('accel',spb*1.5,180); end)
			mm(24+193.5,function() fuckaux('decel',spb*1.5,270); end)
			mm(24+195,function() fuckaux('accel',spb*1.5,180); end)
			mm(24+196.5,function() fuckaux('decel',spb*1.5,90); end)
			mm(24+198,function() fuckaux('accel',spb*1.5,180); end)
			mm(24+199.5,function() fuckaux('decel',spb*1.5,270); end)
			
			mm(225,function() lfd_flinvsel.rot=4; end)
			mm(225,function() fuckaux('accel',spb*1.25,360); lfd_flinvsel[1]=8; end)
			
			for i=224+12,270,12 do
				mm(i,function() fuckaux('accel',spb*1.25,360); lfd_flinvsel[1]=math.mod(((i+4)/12)+1,8)+1; end)
			end
			
			for i=224,270,12 do
				mm(i+1.25,function() fuckaux('decel',spb*1.25,450); lfd_flinvsel[1]=math.mod(((i+4)/12)+1,8)+1;lfd_flinvsel[2]=math.mod(((i+4)/12)+3,8)+1; end)
				mm(i+3,function() fuckaux('accel',spb*1.25,360); end)
				mm(i+4.25,function() fuckaux('decel',spb*1.25,270); end)
				mm(6+i,function() fuckaux('accel',spb*1.25,180); lfd_flinvsel[1]=1; end)
				mm(6+i+1.25,function() fuckaux('decel',spb*1.25,90); end)
				mm(6+i+3,function() fuckaux('accel',spb*1.25,180); end)
				mm(6+i+4.25,function() fuckaux('decel',spb*1.25,270); lfd_flinvsel[2]=1; end)
			end
			
			mm(272,function()
				for i,v in ipairs(mod_plr) do
					if v then
						v:bouncebegin(spb)
						v:zoomz(1)
						v:x(SCREEN_WIDTH * (.5) )
						v:GetChild('Judgment'):bouncebegin(spb)
						v:GetChild('Judgment'):x(240*(i*2-3))
						v:GetChild('Combo'):bouncebegin(spb)
						v:GetChild('Combo'):x(240*(i*2-3))
					end
				end
			end,true)
			me(272,1,250,0,'flip','len',outQuad)
			me(272,1,-250,0,'invert','len',outQuad)
			me(272,1,0,-300,'mini','len',outQuad)
			me(272,1,0,40,'reverse','len',inQuad)
			me(272,1,0,-600,'centered','len',outQuad)
			me(272,1,0,100,'sudden','len',inQuad,1)
			me(272,1,0,200,'suddenoffset','len',outQuad,1)
			me(273,24,0,50,'stealth','len',inQuad,1)
			me(273,24,100,100,'sudden','len',linear,1)
			me(273,24,200,-150,'suddenoffset','len',linear,1)
			me(273,24,0,-1500,'dizzy','len',inQuad,1)
			me(272,1,0,100,'hidden','len',linear,2)
			me(272,3,0,100,'brake','len',linear,2)
			me(272,1,100,200,'hiddenoffset','len',inQuad,2)
			me(275,22,100,100,'brake','len',linear,2)
			me(273,24,100,100,'hidden','len',linear,2)
			me(273,24,200,-100,'hiddenoffset','len',linear,2)
			me(273,24,-600,50,'centered','len',linear)
			me(273,21,40,0,'reverse','len',linear)
			me(273,24,-300,0,'mini','len',outQuad)
			
			--FOOT
			
			m(297,308,'*10000 49 Reverse,*10000 -2000% Bumpy,*10000 1200% Sudden,*10000 100% Mini, *1000 no flip, *1000 dark, *1000 no hidden, *1000 no stealth, *10000 no dizzy','end')
			m(294,308,'*10000 -92% SuddenOffset, *10000 C8.43, *1000 -200 brake','end')
			
			me(294,3,dai_cmod,8.43,'cmod','len',inQuad)
			me(294,3,0,50,'reverse','len',inQuad)
			
			me(294,3,0,100,'mini','len',linear)
			me(294,3,0,100,'dark','len',inCirc)
			me(294,3,120,-200,'brake','len',linear)
			mm(294,function()
				for i,v in ipairs(mod_plr) do
					if v then
						v:accelerate(spb*3)
						v:x(SCREEN_WIDTH * .5)
						v:y(SCREEN_CENTER_Y*1.5)
						v:zoomz(2)
						v:z(800*sw/640)
					end
				end
			end)
			
			me(26+267,30+267,0,50,'flip','end',inCirc)
			me(30+267,33+267,10,50,'flip','end',inCirc)
			me(33+267,36+267,10,50,'flip','end',inCirc)
			
			mm(30+267,function() soxvar:aux(50); soxvar:linear(spb); soxvar:aux(0) end)
			mm(33+267,function() soxvar:aux(50); soxvar:linear(spb); soxvar:aux(0) end)
			mm(36+267,function() soxvar:aux(50); soxvar:linear(spb); soxvar:aux(0) end)
			
			mm(306,function() soxvar:aux(20); soxvar:linear(spb); soxvar:aux(0) end)
			mm(307,function() soxvar:aux(20); soxvar:linear(spb); soxvar:aux(0) end)
			mm(308,function() soxvar:aux(20); soxvar:linear(spb); soxvar:aux(0) end)
			
			mm(294,function()
				for i,v in ipairs(mod_plr) do
					if v then
						v:GetChild('Judgment'):decelerate(spb*3)
						v:GetChild('Judgment'):z(-800)
						v:GetChild('Combo'):decelerate(spb*3)
						v:GetChild('Combo'):z(-800)
					end
				end
			end)
			
			for i=267+27,267+36,3 do
				local funparity = lfd_lparity
				if i==267+27 then 
					funparity=0
				else
					mm(i,function()
						for i,v in ipairs(mod_plr) do
							if v then
								v:z(800 * sw/640)
								v:y(SCREEN_CENTER_Y*.5)
								v:zoomz(1)
								v:rotationz(180*funparity)
								v:decelerate(spb*2)
								v:rotationz(0)
								v:zoomz(2)
								v:z(800 * sw/640)
								v:y(SCREEN_CENTER_Y)
							end
						end
						if LFD_cock then
							LFD_cock:rotationz(180*funparity)
							LFD_cock:decelerate(spb*2)
							LFD_cock:rotationz(0)
						end
					end)
					me(i,3,100,50,'reverse','len',outQuad)
				end
				me(i,2,lfd_lparity*-314.667,0,'dizzy','len',outCirc)
				
				
				lfd_lparity = lfd_lparity * -1
			end
			
			me(308,1,35,0,'reverse','len',linear)
			me(308,1,-2000,0,'bumpy','len',outCirc)
			me(308,1,0,0,'sudden','len',outCirc)
			me(308,1,100,0,'mini','len',linear)
			me(308,1,100,0,'dark','len',linear)
			me(308,1,8.43,dai_cmod,'cmod','len',linear)
			me(308,1,-200,0,'brake','len',linear)
			mm(308,function()
				for i,v in ipairs(mod_plr) do
					if v then
						v:decelerate(spb)
						v:z(0)
						v:y(SCREEN_CENTER_Y)
						v:rotationy(0)
						v:zoomz(1)
					end
				end
			end)
			
			mm(308,function()
				for i,v in ipairs(mod_plr) do
					if v then
						v:GetChild('Judgment'):decelerate(spb)
						v:GetChild('Judgment'):z(0)
						v:GetChild('Combo'):decelerate(spb)
						v:GetChild('Combo'):z(0)
					end
				end
			end)
			
			me(309,6,0,200,'mini','len',linear)
			me(309,6,0,200,'centered','len',linear)
			me(309,6,0,-150,'hallway','len',linear)
			me(309,6,0,-550,'flip','len',inQuad)
			me(309,6,0,1110,'dizzy','len',inQuad)
			me(309,6,0,-100,'brake','len',linear)
			
			m(320,415,'*10000 -50 flip','len')
			--m(320,440,'*10000 150 beat','len',1)
			--m(320,440,'*10000 -150 beat','len',2)
			me(315,5,-50,-50,'flip','len',linear)
			me(315,5,200,0,'mini','len',linear)
			me(315,5,200,0,'centered','len',linear)
			me(315,5,1100,0,'dizzy','len',linear)
			me(315,5,0,dai_cmod,'cmod','len',inQuint)
			me(315,5,50,0,'reverse','len',inQuint)
			me(320,1,0,dai_cmod,'cmod','len',outQuad)
			me(320,1,50,0,'reverse','len',outCirc)
			me(320,1,200,0,'drunk','len',outQuad)
			me(320,1,200,0,'tipsy','len',outQuad)
			mm(315,function()
				for i,v in ipairs(mod_plr) do
					if v then
						v:rotationx(360)
						v:zoomz(50)
						--v:rotationy(360)
						v:linear(spb*5)
						v:rotationx(0)
						--v:rotationy(0)
						v:zoomz(1)
						v:x(SCREEN_CENTER_X+((i*2-3)*32))
						
					end
				end
			end, true)
			mm(320,function()
				for i,v in ipairs(mod_plr) do
					if v then
						v:zoomz(500)
						v:decelerate(spb)
						v:zoomz(1)
						
						v:GetChild('Judgment'):x(160*(i*2-3))
						v:GetChild('Judgment'):bob()
						v:GetChild('Judgment'):effectmagnitude(0,SCREEN_CENTER_Y*-.75,0)
						v:GetChild('Judgment'):effectperiod(99999)
						v:GetChild('Judgment'):effectoffset(20000)
						
						v:GetChild('Combo'):hidden(1)
					end
				end
			end)
			me(321,369,0,100,'hidden','end',linear)
			me(369,417,100,100,'hidden','end',linear)
			me(369,417,0,85,'brake','end',outInQuad)
			me(393,417,0,25,'hiddenoffset','end',inQuad)
			switcheroo_add(321.5,'dlru',2500,.25,1)
			switcheroo_add(321.75,'urld',2500,.25,1)
			switcheroo_add(322,'rudl',2500,.25,1)
			switcheroo_add(322.25,'urld',2500,.25,1)
			switcheroo_add(322.5,'dlru',2500,.25,1)
			switcheroo_add(322.75,'ldur',2500,.25,1)
			
			switcheroo_add(324.5,'dlru',2500,.25,2)
			switcheroo_add(324.75,'urld',2500,.25,2)
			switcheroo_add(325,'rudl',2500,.25,2)
			switcheroo_add(325.25,'urld',2500,.25,2)
			switcheroo_add(325.5,'dlru',2500,.25,2)
			switcheroo_add(325.75,'ldur',2500,.25,2)
			
			mm(331,function()
				for i,v in ipairs(mod_plr) do
					if v then
						v:rotationx(360)
						v:rotationy(360)
						v:zoomz(1)
						v:accelerate(spb)
						v:rotationx(180)
						v:rotationy(180)
						v:zoomz(10)
						v:decelerate(spb)
						v:zoomz(1)
						v:rotationx(0)
						v:rotationy(0)
					end
				end
			end)
			mm(355,function()
				for i,v in ipairs(mod_plr) do
					if v then
						v:rotationx(-360)
						v:rotationz(-360)
						v:zoomz(1)
						v:accelerate(spb)
						v:rotationx(-180)
						v:rotationz(-180)
						v:zoomz(10)
						v:decelerate(spb)
						v:zoomz(1)
						v:rotationx(0)
						v:rotationz(0)
					end
				end
			end)
			mm(403,function()
				for i,v in ipairs(mod_plr) do
					if v then
						v:rotationx(360)
						v:rotationy(360)
						v:zoomz(1)
						v:accelerate(spb)
						v:rotationx(180)
						v:rotationy(180)
						v:zoomz(10)
						v:decelerate(spb)
						v:zoomz(1)
						v:rotationx(0)
						v:rotationy(0)
					end
				end
			end)
			
						switcheroos = {normal = {0,0}, ldur = {0,0}, reset = {0,0},
				flip = {100,0}, rudl = {100,0}, invert = {0,100}, dlru = {0,100},
				ludr = {25,-75}, rdul = {75,75}, drlu = {25,125}, ulrd = {75,-125}, urld = {100,-100}}
			local swapmods1 = {'ldur', 'rudl', 'drlu', 'ulrd'}
			local swapmods2 = {'dlru', 'ldur', 'rdul', 'urld'}
			local counter1 = 0
			local counter2 = 0
			local lfd_lparity2 = 1
			for i,v in pairs(lfd_bum) do
				if v then
					if v[2]==0 then
						if slumpo then
							--switcheroo_add(v[1],swapmods1[counter1+1],20,3,1)
							--counter1 = math.mod(counter1+1,4)
						end
						me(v[1],2,(i + 50)*lfd_lparity,0,'tipsy','len',outQuad,1)
						me(v[1],2,(i + 50)*lfd_lparity,0,'hallway','len',outQuad,1)
						me(v[1],2,(i + 100)*lfd_lparity,0,'bumpy','len',outQuad,2)
						
						me(v[1],2,i,0,'randomspeed','len',outQuad,1)
						
						lfd_lparity = lfd_lparity * -1
					else
						if slumpo then
							--switcheroo_add(v[1],swapmods2[counter2+1],20,3,2)
							--counter2 = math.mod(counter2+1,4)
						end
						me(v[1],2,(i + 50)*lfd_lparity2,0,'tipsy','len',outQuad,2)
						me(v[1],2,(i + 50)*lfd_lparity2,0,'hallway','len',outQuad,2)
						me(v[1],2,(i + 50)*lfd_lparity2,0,'bumpy','len',outQuad,1)
						
						me(v[1],2,i,0,'randomspeed','len',outQuad,2)
						
						lfd_lparity2 = lfd_lparity2 * -1
					end
					me(v[1],1.5,-50,0,'mini','len',outQuad)
				end
			end
			
			me(331,2,0,100,'reverse','len',inOutQuad)
			me(355,2,100,0,'reverse','len',inOutQuad)
			m(333,355,'*100 100 reverse','end')
			me(346,369,0,100,'bumpy','end',linear)
			
			
			m(344.5,368.5,'*10000 100 beat','end')
			m(416.5,10,'*10000 no beat','len')
			m(368.5,416.5,'*10000 125 beat','end',1)
			m(368.5,416.5,'*10000 -125 beat','end',2)
			me(390,3,0,100,'reverse','len',outCirc)
			me(403,2,100,0,'reverse','len',outCirc)
			m(393,403,'*100 100 reverse','end')
			
			me(366,3,0,-200,'mini','len',linear)
			me(366,3,-50,0,'flip','len',linear)
			
			mm(405,function()
				screen:decelerate(spb)
				condor_screenmotion2(30)
				screen:accelerate(spb*.5)
				condor_screenmotion2(0)
				screen:decelerate(spb*.5)
				condor_screenmotion2(-30)
				screen:accelerate(spb*.5)
				condor_screenmotion2(0)
			end)
			
			local positronflow = 25
			for i=407.5,413,1 do
				local electronflux = positronflow
				mm(i,function()
					screen:decelerate(spb*.5)
					condor_screenmotion2(electronflux)
					screen:accelerate(spb*.5)
					condor_screenmotion2(0)
				end)
				positronflow = positronflow * -.6
			end
			
			me(414,3,1,2,'xmod','len',linear)
			me(415,2,-50,50,'flip','len',linear)
			me(415,2,0,50,'reverse','len',linear)
			me(415,2,0,-500,'mini','len',linear)
			mm(415,function()
				for i,v in ipairs(mod_plr) do
					if v then
						v:linear(spb*2)
						v:x(SCREEN_CENTER_X)
					end
				end
			end)
			mm(417,function()
				for i,v in ipairs(mod_plr) do
					if v then
						v:rotationz(720)
						v:decelerate(spb*3)
						v:rotationz(0)
						v:GetChild('Combo'):hidden(1)
					end
				end
				if LFD_cock then
					LFD_cock:rotationz(720)
					LFD_cock:decelerate(spb*3)
					LFD_cock:rotationz(0)
				end
			end)
			m(417,500,'*100 50 flip, *100 93 centered','end')
			me(417,420,-500,200,'mini','end',inOutQuad)
			me(420,3,200,0,'mini','len',inOutQuad)
			me(417,420,100,100,'stealth','end',inOutQuad)
			--me(417,420,0,100,'dark','end',inOutQuad)
			m(420,500,'*1000 no mini, *1000 100 stealth, *10000 50 flip, *10000 no invert','end')
			mm(421,function()
				for i,v in ipairs(mod_plr) do
					if v then
						v:GetChild('Judgment'):stopeffect()
					end
				end
			end)
			mm(421.5,function()
				if lfd_note25 then
					lfd_note25:hidden(0)
					lfd_note25:zoom(0)
					lfd_note25:x(math.cos(math.pi*5/7)*SCREEN_CENTER_Y + SCREEN_CENTER_X)
					lfd_note25:y(math.sin(math.pi*5/7)*SCREEN_CENTER_Y + SCREEN_CENTER_Y)
					lfd_note25:linear(spb*.3)
					lfd_note25:zoom(1)
					lfd_note25:x(math.cos(math.pi*5/7)*SCREEN_CENTER_Y*.9 + SCREEN_CENTER_X)
					lfd_note25:y(math.sin(math.pi*5/7)*SCREEN_CENTER_Y*.9 + SCREEN_CENTER_Y)
					lfd_note25:linear(spb*2.7)
					lfd_note25:x(SCREEN_CENTER_X)
					lfd_note25:y(SCREEN_CENTER_Y)
					if slumpo then
						lfd_note25:rotationz(100000000)
					end
				end
			end)
			mm(424.5,function()
				if lfd_note25 then
					lfd_note25:hidden(1)
				end
			end)
			--83/17
			mm(430,function()
				condor_screenmotion(1.08)
				screen:sleep(spb)
				condor_screenmotion(1.22)
				screen:sleep(spb)
				condor_screenmotion(1.40)
				screen:sleep(spb)
				condor_screenmotion(1.55)
				screen:sleep(spb)
				condor_screenmotion(1.75)
				screen:sleep(spb)
				condor_screenmotion(2)
				if lfd_note7 then
					lfd_note7:hidden(0)
					lfd_note7:x(SCREEN_CENTER_X)
					lfd_note7:y(SCREEN_CENTER_Y*.17)
					lfd_note7:sleep(spb)
					lfd_note7:x(SCREEN_CENTER_X)
					lfd_note7:y(SCREEN_CENTER_Y*.33)
					lfd_note7:sleep(spb)
					lfd_note7:x(SCREEN_CENTER_X)
					lfd_note7:y(SCREEN_CENTER_Y*.50)
					lfd_note7:sleep(spb)
					lfd_note7:x(SCREEN_CENTER_X)
					lfd_note7:y(SCREEN_CENTER_Y*.67)
					lfd_note7:sleep(spb)
					lfd_note7:diffusealpha(0)
				end
				if lfd_note6 then
					lfd_note6:hidden(0)
					lfd_note6:diffusealpha(0)
					lfd_note6:sleep(spb)
					lfd_note6:diffusealpha(1)
					lfd_note6:x(SCREEN_CENTER_X + SCREEN_CENTER_Y*.67)
					lfd_note6:y(SCREEN_CENTER_Y)
					lfd_note6:sleep(spb)
					lfd_note6:x(SCREEN_CENTER_X + SCREEN_CENTER_Y*.50)
					lfd_note6:y(SCREEN_CENTER_Y)
					lfd_note6:sleep(spb)
					lfd_note6:x(SCREEN_CENTER_X + SCREEN_CENTER_Y*.33)
					lfd_note6:y(SCREEN_CENTER_Y)
					lfd_note6:sleep(spb)
					lfd_note6:diffusealpha(0)
				end
				if lfd_note5 then
					lfd_note5:hidden(0)
					lfd_note5:diffusealpha(0)
					lfd_note5:sleep(spb*2)
					lfd_note5:diffusealpha(1)
					lfd_note5:x(SCREEN_CENTER_X)
					lfd_note5:y(SCREEN_CENTER_Y*1.50)
					lfd_note5:sleep(spb)
					lfd_note5:x(SCREEN_CENTER_X)
					lfd_note5:y(SCREEN_CENTER_Y*1.33)
					lfd_note5:sleep(spb)
					lfd_note5:diffusealpha(0)
				end
				if lfd_note4 then
					lfd_note4:hidden(0)
					lfd_note4:diffusealpha(0)
					lfd_note4:sleep(spb*3)
					lfd_note4:diffusealpha(1)
					lfd_note4:x(SCREEN_CENTER_X - SCREEN_CENTER_Y*.33)
					lfd_note4:y(SCREEN_CENTER_Y)
					lfd_note4:sleep(spb)
					lfd_note4:diffusealpha(0)
				end
			end)
			
			mm(434,function(self)
				if lfd_mine1 then
					lfd_mine1:hidden(0)
					lfd_mine1:x(SCREEN_CENTER_X)
					lfd_mine1:y(SCREEN_CENTER_Y*.83)
				end
				if lfd_mine2 then
					lfd_mine2:hidden(0)
					lfd_mine2:x(SCREEN_CENTER_X + SCREEN_CENTER_Y*.17)
					lfd_mine2:y(SCREEN_CENTER_Y)
				end
				if lfd_mine3 then
					lfd_mine3:hidden(0)
					lfd_mine3:x(SCREEN_CENTER_X)
					lfd_mine3:y(SCREEN_CENTER_Y*1.17)
				end
				if lfd_mine4 then
					lfd_mine4:hidden(0)
					lfd_mine4:x(SCREEN_CENTER_X - SCREEN_CENTER_Y*.17)
					lfd_mine4:y(SCREEN_CENTER_Y)
				end
				if lfd_3y3s and lfd_3y3s2 then
					lfd_3y3s:diffusealpha(1)
					lfd_3y3s:zoom(.75)
					lfd_3y3s2:diffusealpha(1)
					lfd_3y3s2:zoom(.75)
				end
			end)
			
			mm(435,function(self)
				for i=1,4,1 do
					local qcze = _G['lfd_mine'..i]
					if qcze then
						qcze:hidden(1)
					end
				end
				if lfd_3y3s then
					lfd_3y3s:hidden(1)
					lfd_3y3s2:hidden(1)
				end
				condor_screenmotion(1)
				lfd_quad:hidden(0)
			end)
			
			---cock control
			mm(42,function() inCock(6) end)
			mm(173,function() outCock(1) end)
			mm(188,function() inCock(1) end)
			mm(199,function() outCock(2) end)
			mm(212,function() inCock(1) end)
			mm(272,function() outCock(1) end)
			
			mm(320,function() inCock(1) end)
			mm(331,function() outCock(2) end)
			mm(355,function() inCock(2) end)
			mm(403,function() outCock(2) end)
			
			mm(369,function() endCock() end)
			function inCock(len)
				if LFD_cock then
					LFD_cock:accelerate(spb*len/2)
					LFD_cock:zoomx(0)
					LFD_cock:zoomy(.75)
					LFD_cock:decelerate(spb*len/2)
					LFD_cock:zoomy(1)
					LFD_cock:zoomx(-1)
				end
				if LFD_cockTower then
					LFD_cockTower:accelerate(spb*len/2)
					LFD_cockTower:rotationx(90)
					LFD_cockTower:diffuse(.3,.25,.25,1)
					
					LFD_cockTower:decelerate(spb*len/2)
					LFD_cockTower:rotationx(180)
				end
				if LFD_cockface then
					LFD_cockface:effectcolor2(.4,.4,.4,1)
					LFD_cockface:effectcolor1(.2,.1,.1,1)
				end
				if LFD_cockMin then
					LFD_cockMin:diffuse(0,0,0,.5)
				end
				if LFD_cockHr then
					LFD_cockHr:diffuse(0,0,0,.5)
				end
				if LFD_cogIn then
					LFD_cogIn:hidden(0)
					LFD_cogIn:diffuse(0,0,0,0)
					LFD_cogIn:zoom(2)
					LFD_cogIn:decelerate(spb*len)
					LFD_cogIn:diffuse(.3,.21,.21,.75)
					LFD_cogIn:zoom(1)
				end
				for i=1,3 do
					local chain = _G['lfd_chain'..i]
					if chain then
						chain:hidden(0)
						chain:diffuse(0,0,0,0)
						chain:zoom(2)
						chain:decelerate(spb*len)
						chain:diffuse(.3,.21,.21,.75)
						chain:zoom(1)
					end
				end
				for i=1,4 do
					local cog = _G['lfd_cog'..i]
					if cog then
						cog:hidden(0)
						cog:diffuse(0,0,0,0)
						cog:zoom(1.5)
						cog:decelerate(spb*len)
						cog:diffuse(.3,.21,.21,.75)
						cog:zoom(1)
					end
				end
			end
			
			function outCock(len)
				if LFD_cock then
					LFD_cock:accelerate(spb*len/2)
					LFD_cock:zoomx(0)
					LFD_cock:zoomy(0)
					LFD_cock:decelerate(spb*len/2)
					LFD_cock:zoomy(1)
					LFD_cock:zoomx(1)
				end
				if LFD_cockTower then
					LFD_cockTower:accelerate(spb*len/2)
					LFD_cockTower:rotationx(90)
					LFD_cockTower:diffuse(.75,.75,.75,1)
					
					LFD_cockTower:decelerate(spb*len/2)
					LFD_cockTower:rotationx(0)
				end
				if LFD_cockface then
					LFD_cockface:effectcolor1(.48,.48,.48,1)
					LFD_cockface:effectcolor2(.75,.75,.75,1)
				end
				if LFD_cockMin then
					LFD_cockMin:diffuse(.5,.5,.5,1)
				end
				if LFD_cockHr then
					LFD_cockHr:diffuse(.5,.5,.5,1)
				end
				if LFD_cogIn then
					LFD_cogIn:hidden(0)
					LFD_cogIn:diffuse(.3,.21,.21,.75)
					LFD_cogIn:zoom(1)
					LFD_cogIn:decelerate(spb*len)
					LFD_cogIn:diffuse(0,0,0,0)
					LFD_cogIn:zoom(1.5)
				end
				for i=1,3 do
					local chain = _G['lfd_chain'..i]
					if chain then
						chain:hidden(0)
						
						chain:diffuse(.3,.21,.21,.75)
						chain:zoom(1)
						chain:decelerate(spb*len)
						chain:diffuse(0,0,0,0)
						chain:zoom(2)
						
					end
				end
				for i=1,4 do
					local cog = _G['lfd_cog'..i]
					if cog then
						cog:hidden(0)
						cog:diffuse(.3,.21,.21,.75)
						cog:zoom(1)
						cog:decelerate(spb*len)
						cog:diffuse(0,0,0,0)
						cog:zoom(2)
						
						
					end
				end
			end
			
			function endCock()
			
			end
---------------------------------------------------------------------------------------
----------------------DON'T TOUCH IT KIDDO---------------------------------------------
---------------------------------------------------------------------------------------
			
			function message_compare(a,b)
				return a[1] < b[1]
			end
			
			if table.getn(messages) > 1 then
				table.sort(messages, message_compare)
			end
			
			self:queuecommand('Update');
			
		end"
        
		UpdateCommand="%function(self)

        ---------------------------------------------------------------------------------------
        ----------------------DON'T TOUCH IT KIDDO---------------------------------------------
        ---------------------------------------------------------------------------------------
        
            --hide things as needed, and set up aliases if checked is false
			if not checked and GAMESTATE:GetSongBeat()>=0 then
				
                thingsToGrab = {'LifeP1','LifeP2','ScoreP1','ScoreP2','BPMDisplay','LifeFrame','ScoreFrame','Lyrics','SongForeground','SongBackground','Overlay','Underlay'}
                thingsToHide = {'LifeP1','LifeP2','ScoreP1','ScoreP2','BPMDisplay','LifeFrame','ScoreFrame','Overlay','Underlay'}
                
                for i,v in ipairs(thingsToGrab) do
                    _G[v] = SCREENMAN:GetTopScreen():GetChild(v) or nil
                end
                
                for i,v in ipairs(thingsToHide) do
                    if _G[v] then _G[v]:hidden(1) end
                end
				
				table.insert(mod_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP1'));
				table.insert(mod_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP2'));
				
				for i,v in pairs(mod_plr) do
					if SCREENMAN:GetTopScreen():GetChild('PlayerOptionsP'..i) then
						_G['init_modsp'..i] = SCREENMAN:GetTopScreen():GetChild('PlayerOptionsP'..i):GetText();
					end
				end
				
				screen = SCREENMAN:GetTopScreen();
				checked = true;
                
                P1 = SCREENMAN:GetTopScreen():GetChild('PlayerP1');
				P2 = SCREENMAN:GetTopScreen():GetChild('PlayerP2');
				--P1:GetChild('Judgment'):hidden(1)
				--P2:GetChild('Judgment'):hidden(1)
			end
			
			local beat = GAMESTATE:GetSongBeat()
				

            if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --
            
                -----------------------
                -- Player mod resets --
                -----------------------
            
                for i=1,2 do
                    GAMESTATE:ApplyGameCommand('mod,clearall',i)
                    if _G['init_modsp'..i] then 
                        GAMESTATE:ApplyGameCommand('mod,'.._G['init_modsp'..i],i)
                    end
                end
            
                ------------------------------------------------------------------------------
                -- custom mod reader by TaroNuke edited by WinDEU and re-stolen by TaroNuke --
                ------------------------------------------------------------------------------
                for i,v in pairs(mods) do
                    if v and table.getn(v) > 3 and v[1] and v[2] and v[3] and v[4] then
                        if beat >=v[1] then
                            if (v[4] == 'len' and beat <=v[1]+v[2]) or (v[4] == 'end' and beat <=v[2]) then
                                if table.getn(v) == 5 then
                                    GAMESTATE:ApplyGameCommand('mod,'..v[3],v[5]);
                                else
                                    GAMESTATE:ApplyGameCommand('mod,'..v[3]);
                                end						
                            end
                        end
                    else
                        v[1] = 0;
                        v[2] = 0;
                        v[3] = '';
                        v[4] = 'error';
                        SCREENMAN:SystemMessage('Bad mod in beat-based table (line '..i..')');
                    end
                end
                
				---------------------------------------------------
				-- ease mod reader v2                            --
				-- friendship ended with if wall                 --
				-- now functions as parameters is my best friend --
				---------------------------------------------------
				for i,v in pairs(mods_ease) do
					if v and table.getn(v) > 6 and v[1] and v[2] and v[3] and v[4] and v[5] and v[6] and v[7] then
						if beat >=v[1] then
							if (v[6] == 'len' and beat <=v[1]+v[2]) or (v[6] == 'end' and beat <=v[2]) then
								
								local duration = v[2];
								if v[6] == 'end' then duration = v[2] - v[1] end
								local curtime = beat - v[1]
								local diff = v[4] - v[3]
								local startstrength = v[3]
								local curve = v[7]
								local mod = v[5]
								
								local strength = curve(curtime, startstrength, diff, duration, v[10], v[11]) --extra parameters for back and elastic eases :eyes:
								
								if v[5] == 'xmod' then
									if table.getn(v) >= 8 then GAMESTATE:ApplyGameCommand('mod,*10000 '..strength..'x',v[8]);
									else GAMESTATE:ApplyGameCommand('mod,*10000 '..strength..'x'); end
								elseif v[5] == 'cmod' then
									if table.getn(v) >= 8 then GAMESTATE:ApplyGameCommand('mod,*10000 C'..strength,v[8]);
									else GAMESTATE:ApplyGameCommand('mod,*10000 C'..strength); end
								else
									if table.getn(v) >= 8 then GAMESTATE:ApplyGameCommand('mod,*10000 '..strength..' '..mod,v[8]);
									else GAMESTATE:ApplyGameCommand('mod,*10000 '..strength..' '..mod); end
								end
							elseif (v[9] and ((v[6] == 'len' and beat <=v[1]+v[2]+v[9]) or (v[6] == 'end' and beat <=v[9]))) then
								if v[5] == 'xmod' then
									if v[8] then GAMESTATE:ApplyGameCommand('mod,*10000 '..v[4]..'x', v[8]);
									else GAMESTATE:ApplyGameCommand('mod,*10000 '..v[4]..'x'); end
								else
									if v[8] then GAMESTATE:ApplyGameCommand('mod,*10000 '..v[4]..' '..v[5], v[8]);
									else GAMESTATE:ApplyGameCommand('mod,*10000 '..v[4]..' '..v[5]); end
								end
							end
						end
					else
						SCREENMAN:SystemMessage('Bad mod in beat-based ease table (line '..i..')');
					end
				end
				
                ------------------
                -- Actions shit --
                ------------------
                while curmessage<=table.getn(messages) and GAMESTATE:GetSongBeat()>=messages[curmessage][1] do
                    if messages[curmessage][3] or GAMESTATE:GetSongBeat() < messages[curmessage][1]+2 then
                        if type(messages[curmessage][2]) == 'function' then
                            messages[curmessage][2]()
                        elseif type(messages[curmessage][2]) == 'string' then
                            MESSAGEMAN:Broadcast(messages[curmessage][2]);
                        end
                    end
                    curmessage = curmessage+1;
                end

				if (beat > 30 and beat < 42) or
				   (beat > 294 and beat < 310) then
					local sox = soxvar:getaux()
					if screen then
						screen:vibrate()
						screen:effectmagnitude(sox,sox,sox)
					end
					if lfd_3y3s then
						lfd_3y3s:diffusealpha(soxvar:getaux()/50)
					end
					if lfd_3y3s2 then
						lfd_3y3s2:diffusealpha(soxvar:getaux()/50)
					end
				end
				
				if (beat > 54 and beat < 63) or
				   (beat > 69 and beat < 165) or
				   (beat > 188 and beat < 199) or
				   (beat > 213 and beat < 272) or
				   (beat > 320 and beat < 417) then
					local potation = 0;					
					--ldur 250 -250
					--ludr 25 425
					--urld -150 150
					--ulrd 75 375
					--dlru 250 -150
					--drlu 25 -375
					--rudl -150 250
					--rdul 75 -425
					if beat < 320 then
						potation = auxvar:getaux()

						if potation > 180 then
							GAMESTATE:ApplyGameCommand('mod,*10000 '.. lfd_flinvert[lfd_flinvsel[2]][1] ..' flip, *10000 '.. lfd_flinvert[lfd_flinvsel[2]][2] ..' invert');
						else
							GAMESTATE:ApplyGameCommand('mod,*10000 '.. lfd_flinvert[lfd_flinvsel[1]][1] ..' flip, *10000 '.. lfd_flinvert[lfd_flinvsel[1]][2] ..' invert');
						end
						for i,v in ipairs(mod_plr) do
							if v then
								if lfd_flinvsel.rot==1 then
									v:rotationx((math.mod(potation,180)-90)*(i*2-3))
									v:zoomz(math.abs(math.cos(math.pi*potation/180))*7+1)
								elseif lfd_flinvsel.rot==2 then
									v:rotationy((math.mod(potation,180)-90))
									v:zoomz(1)
								elseif lfd_flinvsel.rot==3 then
									v:rotationx((math.mod(potation,180)-90))
									v:rotationy((math.mod(potation,180)-90)*(i*2-3))
								elseif lfd_flinvsel.rot==4 then
									v:rotationx((math.mod(potation,180)-90)*(i*2-3))
									v:rotationz((math.mod(potation,180)-90))
									v:zoomz(.5*math.abs(math.cos(math.pi*potation/180))+1)
									--GAMESTATE:ApplyGameCommand('mod,*10000 '.. 25*math.abs(math.cos(math.pi*potation/180)) ..' stealth');
								end
							end
						end
					else
						potation = (beat-270)*(((math.sin(math.pi*beat/3))))+180
					end
					
					if lfd_chain1 then
						lfd_chain1:y(((potation)/360)*SCREEN_HEIGHT)
					end
					if lfd_chain2 then
						lfd_chain2:y(((potation-360)/-360)*SCREEN_HEIGHT)
					end
					if lfd_chain3 then
						lfd_chain3:y(((potation)/360)*SCREEN_HEIGHT)
					end
					
					if lfd_cog1 then
						lfd_cog1:rotationz(potation)
					end
					if lfd_cog2 then
						lfd_cog2:rotationz(potation*1.1)
					end
					if lfd_cog3 then
						lfd_cog3:rotationz(potation*2)
					end
					if lfd_cog4 then
						lfd_cog4:rotationz(potation*2.1)
					end
					
					if slumpo and beat > 368 and beat < 417 then
						for i,v in ipairs(mod_plr) do
							if v then
								v:rotationz((beat-368)*(i*2-3)/4)
							end
						end
					end
				end
				if lfd_sugar then
					if (beat > 117 and beat < 153) or (beat > 162 and beat < 165) then
						lfd_flinvsel[1] = math.mod(math.ceil((beat+3)*3),4)*2+1
						lfd_flinvsel[2] = lfd_flinvsel[1]+1
					elseif beat > 165 then
						lfd_sugar=false
					end	
				end
				
				if beat > 177 and beat < 186 then
					local iniquit = math.cos(math.pi*(beat+1)/3)
					for i,v in ipairs(mod_plr) do
						if v then
							v:y(SCREEN_HEIGHT*(.5-.5*(iniquit)))
						end
					end
					GAMESTATE:ApplyGameCommand('mod,*10000 '.. 50+15*(iniquit) ..' reverse,*10000 '.. 0 ..' centered');
				elseif beat > 201 and beat < 210 then
					local iniquit = math.cos(math.pi*(beat+1)/3)
					local in2quit = math.sin(math.pi*(beat+1)/3)
					for i,v in ipairs(mod_plr) do
						if v then
							v:y(SCREEN_HEIGHT*(.5-.5*(iniquit)))
							v:rotationy(15*(in2quit))
							v:zoomz(2)
						end
					end
					GAMESTATE:ApplyGameCommand('mod,*10000 '.. 50+15*(iniquit) ..' reverse,*10000 '.. 0 ..' centered');
				elseif beat > 321 and beat < 417 then
					local bhsi = math.pi*beat/3
					local p1mods = (((math.sin(bhsi)+1)*.3)+.4)
					local p2mods = (((math.sin(bhsi+math.pi)+1)*.3)+.4)
					
					if slumpo then
						GAMESTATE:ApplyGameCommand('mod,*10000 '.. 155*(p2mods-.5) ..' stealth,*10000 '.. math.max(0,257*(p2mods-.4)) ..' dizzy,*10000 C'.. dai_cmod*p1mods ,1);
						GAMESTATE:ApplyGameCommand('mod,*10000 '.. 155*(p1mods-.5) ..' stealth,*10000 '.. math.max(0,257*(p1mods-.4)) ..' dizzy,*10000 C'.. dai_cmod*p2mods, 2);
						for i,v in ipairs(mod_plr) do
							if v then
								v:zoomx((i*2-3)*.1*math.sin(beat)+1)
								v:zoomy((i*2-3)*.1*math.cos(beat)+1)
							end
						end
					else
						GAMESTATE:ApplyGameCommand('mod,*10000 '.. 160*(p2mods-.5) ..' stealth,*10000 '.. math.max(0,257*(p2mods-.4)) ..' dizzy,*10000 C'.. dai_cmod*p1mods ..',*10000 '.. math.max(0,160*(p1mods-.4)) ..' hidden' ,1);
						GAMESTATE:ApplyGameCommand('mod,*10000 '.. 160*(p1mods-.5) ..' stealth,*10000 '.. math.max(0,257*(p1mods-.4)) ..' dizzy,*10000 C'.. dai_cmod*p2mods ..',*10000 '.. math.max(0,160*(p2mods-.4)) ..' hidden', 2);
					end
				elseif beat > 417 and slumpo and beat < 420 then
					for i,v in ipairs(mod_plr) do
						if v then
							v:zoomx(1)
							v:zoomy(1)
						end
					end
				elseif beat > 420 and beat < 430 then
					for i=1,math.floor(beat)-419,1 do
						if i<8 then
							local sprit = _G['lfd_note'..i]
							local starttime = i+419
							if starttime+3 < beat then
								sprit:hidden(1)
							elseif starttime < beat then
								sprit:hidden(0)
								local tweentime = (beat-starttime)/3
								sprit:zoom(math.min(tweentime*10,1))
								sprit:x(lfd_quickmaths[i][1]*SCREEN_CENTER_Y*(1-tweentime) + SCREEN_CENTER_X)
								sprit:y(lfd_quickmaths[i][2]*SCREEN_CENTER_Y*(1-tweentime) + SCREEN_CENTER_Y)
								if slumpo then
									sprit:rotationz(beat*150+(math.random()*100-50))
								end
							end
						end
					end
				end
				
				local beat = GAMESTATE:GetSongBeat()
				
				---cocktower 
				if beat < 6 then
					local tick = (beat/6)^2
					if LFD_cockTower then LFD_cockTower:diffuse(tick/2,tick/2,tick/2,1) end
					if LFD_cock then LFD_cock:zoom(tick) end
					
				elseif beat > 6 and beat < 417 then
				
					local tick = (beat-6)*(360/411)
					if lfd_cocksetup then
						if LFD_cock then LFD_cock:zoom(1) end
						if LFD_cockTower then LFD_cockTower:diffuse(.5,.5,.5,1) end
						lfd_cocksetup = false
					end
					if LFD_cockMin then
						if math.floor(tick*2) > lfd_tickmath then
							LFD_cockMin:bounceend(.075)
							LFD_cockMin:rotationz(tick*12)
							lfd_tickmath = math.floor(tick*2)
						end
					end
					if LFD_cockHr then LFD_cockHr:rotationz(tick) end
					if LFD_cogIn then
						LFD_cogIn:rotationz(-2*math.mod(beat/3,1)^2)
					end
				elseif beat > 417 then
					if LFD_cockMin then	LFD_cockMin:rotationz(0) end
					if LFD_cockHr then LFD_cockHr:rotationz(0) end
				end
            end
			
			self:sleep(0.02);
			self:queuecommand('Update');

---------------------------------------------------------------------------------------
----------------------END DON'T TOUCH IT KIDDO-----------------------------------------
---------------------------------------------------------------------------------------
          
        end"
		
	/>
	
	<!-- Aux actor, VERY IMPORTANT -->
	<Layer
	Type="Quad" OnCommand="hidden,1" InitCommand="%function(self)
		auxvar = self
		self:aux(270)
		self:hidden(1)
	end"
	/>
	<Layer
	Type="Quad" OnCommand="hidden,1" InitCommand="%function(self)
		soxvar = self
		self:aux(0)
		self:hidden(1)
	end"
	/>

	<Layer
        File="note/4th.model"
        InitCommand="hidden,1;rotationz,180"
		OnCommand="%function(self)
			lfd_note1 = self
		end"
    />
	<Layer
        File="note/4th.model"
        InitCommand="hidden,1;rotationz,180"
		OnCommand="%function(self)
			lfd_note2 = self
		end"
    />
	<Layer
        File="note/8th.model"
        InitCommand="hidden,1"
		OnCommand="%function(self)
			lfd_note25 = self
		end"
    />
	<Layer
        File="note/4th.model"
        InitCommand="hidden,1;rotationz,180"
		OnCommand="%function(self)
			lfd_note3 = self
		end"
    />
		<Layer
        File="note/4th.model"
        InitCommand="hidden,1;rotationz,-90"
		OnCommand="%function(self)
			lfd_note4 = self
		end"
    />
	<Layer
        File="note/4th.model"
        InitCommand="hidden,1;rotationz,180"
		OnCommand="%function(self)
			lfd_note5 = self
		end"
    />
	<Layer
        File="note/4th.model"
        InitCommand="hidden,1;rotationz,90"
		OnCommand="%function(self)
			lfd_note6 = self
		end"
    />
	<Layer
        File="note/4th.model"
        InitCommand="hidden,1"
		OnCommand="%function(self)
			lfd_note7 = self
		end"
    />
	<Layer
        File="mine/_mine.model"
        InitCommand="hidden,1"
		OnCommand="%function(self)
			lfd_mine1 = self
		end"
    />
	<Layer
        File="mine/_mine.model"
        InitCommand="hidden,1"
		OnCommand="%function(self)
			lfd_mine2 = self
		end"
    />
	<Layer
        File="mine/_mine.model"
        InitCommand="hidden,1"
		OnCommand="%function(self)
			lfd_mine3 = self
		end"
    />
	<Layer
        File="mine/_mine.model"
        InitCommand="hidden,1"
		OnCommand="%function(self)
			lfd_mine4 = self
		end"
    />
	
	<Layer
		File="chain.png"
        InitCommand="hidden,1"
		OnCommand="%function(self)
			lfd_chain1 = self
			self:x(scx+272)
			self:diffuse(.5,.5,.5,1)
			self:shadowlength(5)
		end"
	/>
	<Layer
		File="chain.png"
        InitCommand="hidden,1"
		OnCommand="%function(self)
			lfd_chain2 = self
			self:x(scx+224)
			self:diffuse(.5,.5,.5,1)
			self:shadowlength(5)
		end"
	/>
	<Layer
		File="chain.png"
        InitCommand="hidden,1"
		OnCommand="%function(self)
			lfd_chain3 = self
			self:x(scx-256)
			self:diffuse(.5,.5,.5,1)
			self:shadowlength(5)
		end"
	/>
	<Layer
		File="cog1.png"
        InitCommand="hidden,1"
		OnCommand="%function(self)
			lfd_cog1 = self
			self:x(scx-192)
			self:y(0)
			self:diffuse(.5,.5,.5,1)
			self:shadowlength(5)
		end"
	/>

	<Layer
		File="cog3.png"
        InitCommand="hidden,1"
		OnCommand="%function(self)
			lfd_cog3 = self
			self:x(scx-320)
			self:y(SCREEN_HEIGHT*.1)
			self:diffuse(.5,.5,.5,1)
			self:shadowlength(5)
		end"
	/>
	<Layer
		File="cog4.png"
        InitCommand="hidden,1"
		OnCommand="%function(self)
			lfd_cog4 = self
			self:x(scx+320)
			self:y(SCREEN_HEIGHT*.9)
			self:diffuse(.5,.5,.5,1)
			self:shadowlength(5)
		end"
	/>
		<Layer
		File="cog2.png"
        InitCommand="hidden,1"
		OnCommand="%function(self)
			lfd_cog2 = self
			self:x(scx+192)
			self:y(SCREEN_HEIGHT)
			self:diffuse(.5,.5,.5,1)
			self:shadowlength(5)
		end"
	/>
	
	<Layer
		File="iniquiGuyEyes.png"
        InitCommand="hidden,1"
		OnCommand="%function(self)
			lfd_3y3s = self
			self:x(SCREEN_CENTER_X)
			self:y(SCREEN_CENTER_Y)
			self:diffuse(1,1,1,0)
			self:hidden(0)
			self:blend('add')
			self:zoom(1.25)
		end"
	/>
	<Layer
		File="iniquiGuyEyes.png"
        InitCommand="hidden,1"
		OnCommand="%function(self)
			lfd_3y3s2 = self
			self:x(SCREEN_CENTER_X)
			self:y(SCREEN_CENTER_Y)
			self:diffuse(1,1,1,0)
			self:hidden(0)
			self:blend('add')
		end"
	/>
	<Layer
        Type="Quad"
        InitCommand="hidden,1"
		OnCommand="%function(self)
			self:diffuse(0,0,0,1)
			self:x(SCREEN_CENTER_X)
			self:y(SCREEN_CENTER_Y)
			self:zoomtowidth(SCREEN_WIDTH)
			self:zoomtoheight(SCREEN_HEIGHT)
			lfd_quad = self
		end"
    />
	
	<Layer Type="ActorFrame" Condition="SCREEN_WIDTH>666" ><children>
		<Layer Type="Quad" OnCommand="stretchto,sw/2-320,-100,sw/2-288,sh+100;addx,0;diffuse,0,0,0,0;faderight,1;diffusealpha,0;"
		LetterBoxOnMessageCommand="linear,.5;diffusealpha,1;" LetterBoxOffMessageCommand="linear,.5;diffusealpha,0;" />
		<Layer Type="Quad" OnCommand="stretchto,sw/2+288,-100,sw/2+320,sh+100;addx,0;diffuse,0,0,0,0;fadeleft,1;diffusealpha,0;"
		LetterBoxOnMessageCommand="linear,.5;diffusealpha,1;" LetterBoxOffMessageCommand="linear,.5;diffusealpha,0;" />
		<Layer Type="Quad" OnCommand="stretchto,sw/2-320-sw,-100,sw/2-320,sh+100;addx,0;diffuse,0,0,0,0;diffusealpha,0;"
		LetterBoxOnMessageCommand="linear,.5;diffusealpha,1;" LetterBoxOffMessageCommand="linear,.5;diffusealpha,0;" />
		<Layer Type="Quad" OnCommand="stretchto,sw/2+320,-100,sw/2+320+sw,sh+100;addx,0;diffuse,0,0,0,0;diffusealpha,0;"
		LetterBoxOnMessageCommand="linear,.5;diffusealpha,1;" LetterBoxOffMessageCommand="linear,.5;diffusealpha,0;" />
	</children></Layer>
	
</children></ActorFrame>