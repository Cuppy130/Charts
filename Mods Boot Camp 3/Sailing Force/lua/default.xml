<ActorFrame
    InitCommand="%function(self)

        songName = GAMESTATE:GetCurrentSong():GetSongDir();
    end"
><children>

	<Actor 
	Type="Quad" InitCommand="hidden,1" OnCommand="sleep,1000" />
	
	<Layer File="easing" />
	<Layer File="modhelpers" />
	<Layer File="spellcard" />
	
	<Actor
	Type="Quad" InitCommand="hidden,1" 
		OnCommand="%function(self)

			
		
			debug_show = false;
			spb = 60/159
---------------------------------------------------------------------------------------
----------------------DON'T TOUCH IT KIDDO---------------------------------------------
---------------------------------------------------------------------------------------

			checked = false; P1=nil;P2=nil;P3=nil;P4=nil;jud1=nil;com1=nil;jud2=nil;com2=nil;jud3=nil;com3=nil;
			mod_plr = {};
			fucked_mods = {};
			mod_firstSeenBeat = GAMESTATE:GetSongBeat();
			local m=mod_insert
			local me=mod_ease
			local mm=mod_message
			sf_wavepool = {}
			sf_wavezoomx = {{1.1,1.1},{1.1,1.75},{1.75,2.5},{2.5,3.25},{3.25,4}}
			sf_wavezoomy = {{0,1},{1,1.75},{1.75,2.5},{2.5,3.25},{3.25,4}}
			sf_waveypos = {{1,1},{1,1.15},{1.15,1.4},{1.4,1.75},{1.75,2.25}}
			sf_flicker = 1
			ohmygod = {
						 {0,0,125,-12.5,-31.25},
						 {100,-100,125,12.5,-43.75},
						 {175,-150,50,25,-12.5},
						 {175,-100,-50,25,37.5},
						 {100,0,-125,12.5,81.25},
						 {0,100,-125,-12.5,93.75},
						 {-75,150,-50,-25,62.5},
						 {-75,100,50,-25,12.5},
						 {0,0,125,-12.5,-31.25}
					}
---------------------------------------------------------------------------------------
----------------------END DON'T TOUCH IT KIDDO-----------------------------------------
---------------------------------------------------------------------------------------

            --beat based mods
            --{beat_start, beat_end, mods, len_or_end, player_number}
            mods = {
				{0,300.5,'*100000 -999999 cover, *1000 1x, *1000 C350, *100000 overhead','end'},
            }
            --m(i,.5,'*1000 '.. valuething ..' reverse, *1000 '.. valuething2 ..' invert','len')
			
			--beat-based ease mods
			--{time_start, time_end, mod_start, mod_end, mod, len_or_end, ease_type, player_number, sustaintime, optional_param1, optional_param2}
			--valid ease types are:
				--linear
				--inQuad    outQuad    inOutQuad    outInQuad
				--inCubic   outCubic   inOutCubic   outInCubic
				--inQuart   outQuart   inOutQuart   outInQuart
				--inQuint   outQuint   inOutQuint   outInQuint
				--inSine    outSine    inOutSine    outInSine
				--inExpo    outExpo    inOutExpo    outInExpo
				--inCirc    outCirc    inOutCirc    outInCirc
				--inElastic outElastic inOutElastic outInElastic    --can take 2 optional parameters - amplitude & period
				--inBack    outBack    inOutBack    outInBack       --can take 1 optional parameter  - spring amount
				--inBounce  outBounce  inOutBounce  outInBounce
				
			mods_ease = {
				-- EXAMPLE TWEEN: from beat 0 to 4, make rotationz go from 360 to 0 with the inOutBack tween
				--{32,40,0,1.75,'xmod','end',outInBounce},
			}
			
			--me(beat,len,str1,str2,mod,t,ease,pn,sus,opt1,opt2)
			
            --SCREAMING GUMBALL / timed message broadcaster
            --they no longer have to be in order, because they're sorted now
            curmessage = 1;
            --{beat,message,persists}
            messages = { 
				
            }
			
			me(0,3,0,-2000,'mini','end',inCirc)
			me(3,4,-3000,200,'mini','end',inQuad)
			me(0,3,0,50,'flip','end',inCirc)
			me(3,4,50,50,'flip','end',inQuad)
			me(0,3,0,50,'reverse','end',inCirc)
			me(3,4,50,50,'reverse','end',inQuad)
			me(3,4,100,0,'stealth','end',inQuint)
			me(3,.5,0,100,'dark','len',outQuad)
			
			mm(3,function(self)
				for i,v in pairs(mod_plr) do
					if v then
						v:rotationz(720*((i*2)-3))
						v:bouncebegin(spb)
						v:rotationz(0)
						v:x(SCREEN_CENTER_X)
						v:sleep(0)
						v:y(SCREEN_CENTER_Y*1.25)
						v:GetChild('Judgment'):hidden(0)
						v:GetChild('Judgment'):bouncebegin(spb)
						v:GetChild('Judgment'):x(SCREEN_CENTER_X*.5*((i*2)-3))
						v:GetChild('Judgment'):rotationz(90*((i*2)-3))
						v:GetChild('Combo'):hidden(1)
					end
				end
				if sf_bg0 then
					sf_bg0:diffusealpha(0)
				end
			end,true)
				
			m(4,.5,'*10000 100 dark, *1000 100 stealth','len')
			m(4.1,.5,'*10000 no mini, *1000 no reverse, *1000 no flip','len')
			
			function auxtween(sval, eval, len, ease)
				if auxvar then
					auxvar:aux(sval)
					if ease == 'decel' then
						auxvar:decelerate(spb*len)
					elseif ease == 'accel' then
						auxvar:accelerate(spb*len)
					elseif ease == 'bbegin' then
						auxvar:bouncebegin(spb*len)
					elseif ease == 'bend' then
						auxvar:bounceend(spb*len)
					elseif ease == 'lin' then
						auxvar:linear(spb*len)
					end
					auxvar:aux(eval)
				end
			end
			
			local shiftable = {4.5,4.75,5,5.25,5.75,6,6.75,7.25,7.75,8,8.75,12.5,12.75,13,13.25,13.75,14,14.75,15.25,20.5,20.75,21,21.25,21.75,22,22.75,23.25,23.75,24,24.75}
			local dai_parity = 1
			for i,v in pairs(shiftable) do
				local parity = 100*dai_parity
				me(v,1,-100*dai_parity,0,'hallway','len',outCirc)
				if v > 20 then me(v,.5,100,0,'stealth','len',inQuad) end
				--me(v,.25,parity,0,'tipsy','len',outQuad)
				dai_parity = dai_parity * -1
			end
			mm(4,function()
				if char_daikyi then
					char_daikyi:hidden(0)
				end
			end,true)
			mm(15,function()
				if char_daikyi then
					char_daikyi:playcommand('Cast')
				end
				for i,v in pairs(mod_plr) do
					if v then
						v:decelerate(spb)
						v:y(SCREEN_CENTER_Y)
					end
				end
			end,true)
			
			m(20,59,'*1000 100 drunk','end')
			m(4,19,'*1000 40 reverse,*1000 100 stealth','end')
			me(10,.5,0,150,'mini','len',outCirc)
			me(10.5,1,150,100,'mini','len',inCirc)
			me(11.5,.5,100,0,'mini','len',outCirc)
			me(10.75,.25,0,200,'tipsy','len',outCirc)
			me(11,.25,200,-200,'tipsy','len',outCirc)
			me(11.25,.5,-200,0,'tipsy','len',inCirc)
			me(14.5,.5,0,100,'mini','len',outCirc)
			me(15,.25,100,-100,'mini','len',outCirc)
			me(15.25,.75,-100,0,'mini','len',inCirc)
			me(15,.25,0,200,'tipsy','len',outCirc)
			me(15.25,.75,200,0,'tipsy','len',inCirc)
			me(16,20,0,50,'mini','end',linear)
			me(20,20.5,50,-50,'mini','end',inQuad)
			
			me(19,.5,40,80,'reverse','len',outCirc)
			me(18,19.5,100,50,'stealth','end',outCirc)
			me(19.5,1,80,0,'reverse','len',outCirc)
			me(19.5,.5,50,0,'stealth','len',outCirc)
			
			me(26.5,.5,0,100,'mini','len',outCirc)
			me(27,.25,100,-100,'mini','len',outCirc)
			me(27.25,.75,-100,0,'mini','len',inCirc)
			me(27,.25,0,200,'tipsy','len',outCirc)
			me(27.25,.75,200,0,'tipsy','len',inCirc)
			
			me(20.5,1.5,200,0,'bumpy','len',outCirc)
			
			for i=22,27,1 do
				me(i,1,1500*dai_parity,0,'bumpy','len',outCirc)
				dai_parity = dai_parity * -1
			end
			for i=36.5,47.5,1 do
				me(i,1,1500*dai_parity,0,'bumpy','len',outCirc)
				dai_parity = dai_parity * -1
			end
			for i=54.5,59.5,1 do
				me(i,1,1500*dai_parity,0,'bumpy','len',outCirc)
				dai_parity = dai_parity * -1
			end
			
			me(28,1.5,314,0,'dizzy','len',outQuad)
			me(29.5,1.5,-314,0,'dizzy','len',outQuad)
			me(31,1.5,314,0,'dizzy','len',outQuad)
			me(35,1,-2500,0,'bumpy','len',outQuad)
			me(35,1,-200,0,'mini','len',inQuad)
			me(35,1,-40,0,'reverse','len',inQuad)
			mm(35,function(self) 
				for i,v in pairs(mod_plr) do
					if v then
						v:skewx((i*2-3)*1.55)
						v:bouncebegin(spb)
						v:skewx(0)
					end
				end
			end)

			m(35,58,'*10 -120 wave','end')
			
			me(60.5,.5,314,0,'dizzy','len',outQuad)
			me(61.5,.5,-314,0,'dizzy','len',outQuad)
			me(62.5,.5,314,0,'dizzy','len',outQuad)
			me(63.5,.5,-314,0,'dizzy','len',outQuad)
			me(64.5,2,628,0,'dizzy','len',outQuad)
			
			mm(66,function(self) 
				for i,v in pairs(mod_plr) do
					if v then
						v:rotationz((i*2-3)*-360)
						v:accelerate(spb)
						v:rotationz(0)
					end
				end
			end)
			me(66,1,0,50,'reverse','len',linear)
			me(66,1,0,-1000,'mini','len',inQuart)
			me(66,1,2.2,0,'xmod','len',linear)
			
			me(67,1,50,0,'reverse','len',outQuad)
			me(67,1,0,2.2,'xmod','len',outQuad)
			me(67,1,-1000,0,'mini','len',outQuad)
			
			mm(16,function(self) auxtween(-1,-3,.75,'decel'); end)
			mm(16.75,function(self) auxtween(-3,-5,.75,'decel'); end)
			mm(17.5,function(self) auxtween(-5,-7,.75,'decel'); end)
			mm(18.25,function(self) auxtween(-7,-9,.75,'decel'); end)
			mm(19,function(self) auxtween(-9,-1,1.5,'bbegin'); end)
			mm(28,function(self) auxtween(-1,-3,1.5,'decel'); end)
			mm(29.5,function(self) auxtween(-3,-5,1.5,'decel'); end)
			mm(31,function(self) auxtween(-5,-1,4,'bbegin'); end)
			mm(48,function(self) auxtween(-1,-3,.75,'decel'); end)
			mm(48.75,function(self) auxtween(-1,-3,.75,'decel'); end)
			mm(49.5,function(self) auxtween(-3,-5,.75,'decel'); end)
			mm(50.25,function(self) auxtween(-5,-7,.5,'decel'); end)
			mm(50.75,function(self) auxtween(-7,-9,.5,'decel'); end)
			mm(51.25,function(self) auxtween(-9,-11,.75,'decel'); end)
			mm(52,function(self) auxtween(-11,-1,6,'bbegin'); end)
			mm(60,function(self) auxtween(-1,-3,1,'decel'); end)
			mm(61,function(self) auxtween(-3,-5,1,'decel'); end)
			mm(62,function(self) auxtween(-5,-7,1,'decel'); end)
			mm(63,function(self) auxtween(-7,-9,1,'decel'); end)
			mm(64,function(self) auxtween(-9,-1,3,'bbegin'); end)
			
			--------------QUAD @ 67---------------
			
			mm(67,function(self) 
				for i,v in pairs(mod_plr) do
					if v then
						v:x(SCREEN_CENTER_X)
						v:bounceend(spb)
						v:x((i*2-3)*SCREEN_WIDTH*.2+SCREEN_CENTER_X)
					end
				end
			end,true)
			
			local distabl={0,.5,1.25,2,2.75,3.5}
			for i=68,80,4 do
				for j,v in pairs(distabl) do
					--me(i+v,1,200*dai_parity,0,'tipsy','len',outQuad)
					dai_parity = dai_parity * -1
				end
				
			end
			for i=69,81,2 do
				me(i,2,50,0,'alternate','len',outQuad,1)
				me(i,2,100,0,'split','len',outQuad,1)
				me(i,2,-150,0,'reverse','len',outQuad,1)
				me(i,2,90,0,'dizzy','len',linear,1)
				me(i,2,-90,0,'dizzy','len',linear,2)
				me(i,2,-50,0,'alternate','len',outQuad,2)
				me(i,2,-100,0,'split','len',outQuad,2)
				--me(i,2,0,2.2,'xmod','len',outQuad)
				me(i,2,-100,0,'mini','len',outQuad)
				me(i,2,50,0,'flip','len',outQuad)
				me(i,2,200,0,'brake','len',outQuad)
				me(i-.5,1,2000,0,'beat','len',outQuad)
				mm(i,function(self) 
					for j,v in pairs(mod_plr) do
						if v then
							v:rotationz((j*2-3)*100)
							v:addx((j*2-3)*SCREEN_WIDTH*-.425)
							v:addy(SCREEN_HEIGHT*-.1)
							v:decelerate(spb*2)
							v:rotationz(0)
							v:addx((j*2-3)*SCREEN_WIDTH*.425)
							v:addy(SCREEN_HEIGHT*.1)
						end
					end
				end)
				dai_parity = dai_parity*-1
			end
			
			local dai_sparity = 1
			for i=68,82,.25 do
				m(i,.25,'*10000 '.. dai_parity*25 ..' tipsy,*10000 '.. dai_sparity*40+50 ..' stealth','len',1)
				m(i,.25,'*10000 '.. dai_parity*-25 ..' tipsy,*10000 '.. dai_sparity*-40+50 ..' stealth','len',2)
				dai_parity = dai_parity * -1
				dai_sparity = math.mod(dai_sparity+2,3)-1
			end
			
			me(82,.25,0,100,'reverse','len',outCirc)
			me(82,.25,-300,0,'mini','len',outCirc)
			me(82.25,.5,100,0,'reverse','len',outCirc)
			me(82.25,.5,-300,0,'mini','len',outCirc)
			me(82.75,.5,0,100,'reverse','len',outCirc)
			me(82.75,.5,-300,0,'mini','len',outCirc)
			me(83.25,.5,100,0,'reverse','len',outCirc)
			me(83.25,.5,-300,0,'mini','len',outCirc)
			me(83.75,.5,0,100,'reverse','len',outCirc)
			me(83.75,.5,-300,0,'mini','len',outCirc)
			
			me(84.5,.75,100,50,'reverse','len',outCirc)
			me(85.25,.75,50,0,'reverse','len',outCirc)
			me(85.25,.75,50,0,'reverse','len',outCirc)
			me(85.25,.75,0,50,'flip','len',outCirc)
			me(86,.75,0,100,'reverse','len',outCirc)
			me(86,.75,50,100,'flip','len',outCirc)
			me(86.75,.75,100,0,'flip','len',outCirc)
			m(86.75,87.5,'*10000 100 reverse','end')
			m(87.5,92.25,'*10000 100 reverse','end',2)
			m(92.25,96,'*10000 100 reverse','end',1)
			
			
			me(87.5,.5,100,0,'reverse','len',outCirc,1)
			me(88,.5,0,100,'invert','len',outCirc)
			me(88.5,.5,100,0,'invert','len',outCirc)
			
			me(89.25,.75,0,50,'reverse','len',outCirc,1)
			me(90,.75,50,0,'reverse','len',outCirc,1)
			me(89.25,.75,100,50,'reverse','len',outCirc,2)
			me(90,.75,50,100,'reverse','len',outCirc,2)
			me(90.75,.75,0,100,'dark','len',linear)
			--this is mean lol
			--m(91.5,96,'*1000 100 dark','end')
			m(90,1.5,'*1000 100 centered','len')
			m(91.5,92.5,'*2.34369 10000 centered','end')
			m(92.5,96,'*2.34369 10000 centered','end')
			
			me(90.75,.75,0,100,'invert','len',outCirc)
			me(91.5,.5,100,0,'invert','len',outCirc)
			
			me(92.25,.1,0,100,'reverse','len',linear,1)
			me(92.25,.1,-50,100,'centered','len',linear)
			me(92.25,.1,0,100,'flip','len',linear)
			me(93.75,.1,-50,-108,'centered','len',linear)
			--this is MEAN
				--this is now less mean than it was before tbh
			m(90,98,'*1000 C300','end')
			m(92.25,93.75,'*1000 100 flip','end')
			me(93.75,.25,100,0,'flip','len',outCirc)
			me(95,1,0,50,'flip','len',inCirc)
			me(92.25,.25,100,0,'reverse','len',outCirc,2)
			me(96,2,0,0,'reverse','len',outQuad,1)
			me(96,2,100,0,'centered','len',outQuad,1)
			me(96,2,100,0,'reverse','len',outQuad,2)
			me(96,2,100,0,'centered','len',outQuad,2)
			me(96,2,50,0,'flip','len',inQuad)
			m(96,1,'*1000 no centered','len')
			
			me(98,.25,0,50,'mini','len',outCirc)
			me(98.25,.25,50,100,'mini','len',outCirc)
			me(98.5,.25,100,100,'mini','len',linear)
			me(98.75,.25,100,150,'mini','len',outCirc)
			me(99,.25,150,150,'mini','len',linear)
			me(99.25,.25,150,200,'mini','len',outCirc)
			me(99.5,1,-500,0,'mini','len',outCirc)
			
			
			mm(86.75,function(self) 
					for i,v in pairs(mod_plr) do
						if v then
							v:decelerate(spb*.75)
							v:x(SCREEN_CENTER_X)
						end
					end
				end,true)
				
			----I wish a quad was appropriate here too----
			
			mm(99.5,function(self) 
					for i,v in pairs(mod_plr) do
						if v then
							v:decelerate(spb*.5)
							v:x((i*2-3)*SCREEN_WIDTH*.2+SCREEN_CENTER_X)
						end
					end
				end,true)
			
			m(100,100,'*1000 100 sudden, *1000 90 suddenoffset','len')
			for i=100.5,113.5,1 do
				me(i,1,300*dai_parity,0,'hallway','len',outCirc)
				dai_parity = dai_parity * -1
			end
			
			me(114.25,.25,0,100,'invert','len',outCirc)
			me(114.5,.25,0,75,'flip','len',outCirc)
			me(114.5,.25,100,75,'invert','len',outCirc)
			me(114.75,.25,75,100,'flip','len',outCirc)
			me(114.75,.25,75,0,'invert','len',outCirc)
			
			m(115,115.25,'*1000 100 flip','end')
			
			mm(114,function(self) 
					for i,v in pairs(mod_plr) do
						if v then
							v:bounceend(spb*2)
							v:rotationy(360)
						end
					end
				end)
			mm(116,function(self) 
					for i,v in pairs(mod_plr) do
						if v then
							v:bouncebegin(spb*1.25)
							v:rotationy(0)
						end
					end
				end)
				
			me(115.25,.25,100,75,'flip','len',outCirc)
			me(115.25,.25,0,75,'invert','len',outCirc)
			me(115.5,.25,75,0,'flip','len',outCirc)
			me(115.5,.25,75,100,'invert','len',outCirc)
			me(115.75,.25,100,0,'invert','len',outCirc)
			

			me(120,.75,0,75,'invert','len',outCirc)
			me(120.75,.75,75,0,'invert','len',inCirc)
			
			mm(120.75,function(self) 
					for i,v in pairs(mod_plr) do
						if v then
							v:rotationx(360)
							v:bouncebegin(spb*.75)
							v:rotationx(0)
						end
					end
				end)
				
			for i=116.5,129.5,1 do
				me(i,1,200*dai_parity,0,'hallway','len',outCirc)
				dai_parity = dai_parity * -1
			end
			
			me(130,.25,300,0,'tipsy','len',outQuad)
			me(130.25,.25,-300,0,'tipsy','len',outQuad)
			me(130.75,.25,300,0,'tipsy','len',outQuad)
			me(131.25,.25,-300,0,'tipsy','len',outQuad)
			me(131.5,.75,-500,0,'mini','len',inQuad)
			
			for i=132.5,145.5,1 do
				me(i,1,200*dai_parity,0,'hallway','len',outCirc)
				me(i,1,100*dai_parity,0,'bumpy','len',outQuad)
				dai_parity = dai_parity * -1
			end
			
			me(140.75,.5,0,100,'invert','len',outCirc)
			me(141.25,.5,100,0,'invert','len',outCirc)
			me(141.25,.5,0,100,'flip','len',outCirc)
			me(141.75,.5,100,0,'flip','len',outCirc)
			
			me(146,.25,0,150,'mini','len',outCirc)
			me(146.25,.5,150,0,'mini','len',outCirc)
			me(146.75,.75,0,-400,'mini','len',outCirc)
			me(146.75,.75,0,40,'flip','len',outCirc)
			me(147.5,.5,-400,0,'mini','len',outCirc)
			me(147.5,.5,40,0,'flip','len',outCirc)
			
			me(152.5,.5,314,0,'dizzy','len',inCirc)
			me(153.5,.5,-314,0,'dizzy','len',inCirc)
			me(154.5,.5,314,0,'dizzy','len',inCirc)
			me(155.5,.5,-314,0,'dizzy','len',inCirc)
			
			for i=148.5,153.5,1 do
				me(i,1,200*dai_parity,0,'hallway','len',outCirc)
				me(i,1,200*dai_parity,0,'bumpy','len',outQuad)
				dai_parity = dai_parity * -1
			end

			mm(152,function(self) 
					for i,v in pairs(mod_plr) do
						if v then
							v:accelerate(spb*4)
							v:x(SCREEN_CENTER_X)
						end
					end
				end,true)
			
			mm(154,function(self) auxtween(-1,-3,2,'bbegin'); end)
			mm(156,function(self) auxtween(-141,-111,8,'accel'); end)
			mm(164,function(self) auxtween(-111,-81,8,'bend'); end)
			mm(156.5,function(self) 
					for i,v in pairs(mod_plr) do
						if v then
							v:decelerate(spb)
							v:rotationy(0)
							v:z(0)
						end
					end
				end)
				
			---------- back to falling -----------
			
			for i=157,167,2 do
				me(i,2,200,0,'mini','len',outCirc)
				me(i,2,-50*dai_parity+50,50*dai_parity+50,'reverse','len',outCirc)
				me(i,2,dai_parity*200,0,'bumpy','len',outCirc)
				dai_parity=dai_parity*-1
			end
			

			me(168,.75,0,25,'reverse','len',outCirc)
			me(168.75,.75,25,50,'reverse','len',outCirc)
			me(168.75,.75,25,50,'reverse','len',outCirc)
			me(169.5,1,50,100,'reverse','len',outCirc)
			me(170.5,172,100,0,'reverse','end',inCirc)
			me(172.75,.75,0,-50,'mini','len',outCirc)
			me(173.5,.5,-50,50,'mini','len',outCirc)
			me(174,2,-100,0,'mini','len',inQuad)
			--me(174,2,100,0,'brake','len',inQuad)
			
			me(177,180,0,100,'stealth','end',linear)
			
			local infbl = {{0,50,0,50,0,50,0,-50,0},{0,-50,0,50,0,-50,100,-50,0},{0,50,100,50,0,-50,0,-50,0},{0,0,0,0,100,100,100,100,0}}
			for i=1,7,1 do
				local startbeat = 174.5+(i-1)*.25
				me(startbeat, .25, infbl[1][i], infbl[1][i+1], 'alternate', 'len', linear)
				me(startbeat, .25, infbl[2][i], infbl[2][i+1], 'cross', 'len', linear)
				me(startbeat, .25, infbl[3][i], infbl[3][i+1], 'split', 'len', linear)
				me(startbeat, .25, infbl[4][i], infbl[4][i+1], 'reverse', 'len', linear)
			end
			
			me(176, 1, -50, 0, 'alternate', 'len', inQuad)
			me(176, 1, -50, 0, 'cross', 'len', inQuad)
			me(176, 1, -50, 0, 'split', 'len', inQuad)
			me(176, 1, 100, 50, 'reverse', 'len', inQuad)
			
			--------- soft stuff ---------
			
			me(177,2,100,0,'centered','len',outQuad)
			m(177,208,'*1000 no reverse','end')
			me(177,2,0,100,'tipsy','len',inOutQuad)
			if FUCK_EXE then
				m(177,212,'*1000 100 stealthpastreceptors','end')
			end
			me(177,2,0,90,'stealth','len',inOutQuad)
			me(177,2,0,90,'dark','len',inOutQuad)
			m(180,208,'*1000 100 tipsy, *1000 90 stealth, *1000 90 dark','end')
			me(208,4,90,0,'stealth','len',linear)
			me(208,4,90,0,'dark','len',linear)
			mm(178,function(self) auxtween(-81,-80,2,'accel'); end)
			mm(180,function(self) auxtween(-80,-52,28,'lin'); end)
			mm(208,function(self) auxtween(-52,-51,2,'decel'); end)
			mm(210,function(self) auxtween(-51,-121,14,'accel'); end)
			mm(224,function(self) auxtween(-121,-131,2,'decel'); end)
			mm(226,function(self) auxtween(-3,-1,2,'accel'); end)
			
			mm(211,function(self) 
				for i,v in pairs(mod_plr) do
					if v then
						v:skewx((i*2-3)*1.55)
						v:bouncebegin(spb)
						v:skewx(0)
					end
				end
			end)
			
			for i=214,226,4 do
				me(i,2,dai_parity*628,0,'dizzy','len',outCirc)
				me(i,2,50,0,'reverse','len',inQuad)
				dai_parity=dai_parity*-1
			end
			
			mm(226.75,function(self) 
				for i,v in pairs(mod_plr) do
					if v then
						v:rotationz((i*2-3)*-360)
						v:accelerate(spb*.75)
						v:rotationz(0)
					end
				end
			end)
			
			me(229,1,0,100,'reverse','len',inCubic)
			me(230,1.5,100,0,'reverse','len',inCubic)
			me(232.5,1.5,0,-600,'dizzy','len',outQuad,1)
			me(232.5,1.5,0,600,'dizzy','len',outQuad,2)
			me(232.5,1.5,0,100,'drunk','len',outQuad,1)
			me(232.5,1.5,0,-100,'drunk','len',outQuad,2)
			me(232.5,1.5,0,100,'tipsy','len',outQuad,1)
			me(232.5,1.5,0,-100,'tipsy','len',outQuad,2)
			me(234,2,-600,0,'dizzy','len',inQuad,1)
			me(234,2,600,0,'dizzy','len',inQuad,2)
			me(234,2,100,0,'drunk','len',inQuad,1)
			me(234,2,-100,0,'drunk','len',inQuad,2)
			me(234,2,100,0,'tipsy','len',inQuad,1)
			me(234,2,-100,0,'tipsy','len',inQuad,2)
			
			for i=229,235,2 do
				me(i,1,2000*dai_parity,0,'bumpy','len',outCirc)
				dai_parity = dai_parity * -1
			end
			
			m(227.5,236.5,'*1000 200 beat','end',1)
			m(227.5,236.5,'*1000 -200 beat','end',2)
			m(230.5,232.5,'*1000 no beat','end')
			m(236.5,1,'*1000 no beat','len')
			
			me(227,1,0,120,'wave','len',linear)
			me(235,1,0,120,'drunk','len',linear,1)
			me(235,1,0,-120,'drunk','len',linear,2)
			m(228,248,'*10 120 wave','end')
			m(236,248,'*10 120 drunk','end',1)
			m(236,248,'*10 -120 drunk','end',2)
			me(248,4,120,0,'wave','len',linear)
			me(248,4,120,0,'drunk','len',linear,1)
			me(248,4,-120,0,'drunk','len',linear,2)
			
			local sf_preslowdown = {{236.000,0,1},{236.750,3,1},{237.000,3,1},{237.500,0,1},{238.250,0,1},{238.500,0,1},{239.000,3,1},{239.500,0,1},{240.000,0,1},{240.750,3,1},{241.000,3,1},{241.500,0,1},{242.250,0,1},{242.750,0,1},{243.000,3,1},{243.500,0,1},{244.000,0,1},{244.500,3,1},{244.750,0,1},{245.250,3,1},{245.500,0,1},{246.000,0,1},{246.000,3,1},{246.500,3,1},{246.750,0,1},{247.250,3,1},{247.500,0,1}}
			
			for i,v in pairs(sf_preslowdown) do
				local stime = v[1]
				local col = v[2]
				if col == 0 then
					--me(stime-.25,.25,0,30,'reverse','len',inQuad)
					me(stime,.75,30,0,'reverse','len',outCirc)
					me(stime,1,-300*dai_parity,0,'tipsy','len',outCirc,1)
					me(stime,1,300*dai_parity,0,'tipsy','len',outCirc,2)
				else
					me(stime,.75,1000*dai_parity,0,'bumpy','len',outCirc)
					me(stime,.75,200*dai_parity,0,'hallway','len',outCirc)
					dai_parity = dai_parity * -1
				end
			end
			
			me(246,2,0,200,'mini','len',inQuad)
			
			--------- ritardando ---------
			
			me(248,4,100,0,'stealth','len',linear)
			mm(248,function(self) auxtween(-33,-33,1,'lin'); end)
			mm(252,function(self) auxtween(-33,-31,4.4,'bbegin'); end)
			mm(256,function(self) auxtween(-31,-35,4.05,'bbegin'); end)
			mm(260,function(self) auxtween(-37,-801,23,'accel'); end)
			mm(283,function(self) auxtween(-3,-1,1,'bbegin'); end)
			
			
			infbl = {{0,-50,0,-50,0,50,0,50,0},{0,-50,0,50,0,50,0,-50,0},{0,-50,50,-50,0,50,50,50,0},{0,100,100,100,100,0,0,0,0}}
						
			for i=1,7,1 do
				local startbeat = 258.25+(i-1)*.25
				me(startbeat, .25, infbl[1][i], infbl[1][i+1], 'alternate', 'len', linear)
				me(startbeat, .25, infbl[2][i], infbl[2][i+1], 'cross', 'len', linear)
				me(startbeat, .25, infbl[3][i], infbl[3][i+1], 'split', 'len', linear)
				me(startbeat, .25, infbl[4][i], infbl[4][i+1], 'reverse', 'len', linear)
			end
			
			me(256.5,.5,30,0,'reverse','len',inQuad)
			me(257,.5,30,0,'reverse','len',inQuad)
			me(257.5,.5,30,0,'reverse','len',inQuad)
			
			mm(259,function(self) 
				for i,v in pairs(mod_plr) do
					if v then
						v:skewx((i*2-3)*.5)
						v:bouncebegin(spb)
						v:skewx(0)
					end
				end
			end)
			mm(283,function(self) 
				for i,v in pairs(mod_plr) do
					if v then
						v:skewx((i*2-3)*.5)
						v:bouncebegin(spb)
						v:skewx(0)
					end
				end
			end)
			
			me(276,283,0,50,'stealth','end',inCirc)
			m(283,284,'*1000 no stealth','end')
			
			me(283,.5,100,0,'reverse','len',outCirc)
			me(283,.5,100,0,'cross','len',outCirc)
			me(283,.5,100,0,'alternate','len',outCirc)
			
			
			me(295.1,.9,0,50,'flip','len',outCirc)
			me(295.1,.9,0,-50,'invert','len',outCirc,1)
			me(295.1,.9,0,-50,'invert','len',outCirc,2)
			m(296,299.25,'*1000 50 flip, *1000 -50 invert','end')
			m(299.25,399,'*1000 50 flip, *1000 -60 invert','end')
			m(296,299.25,'*1000 50 flip, *1000 -50 invert','end',1)
			me(299.25,.5,-50,-60,'invert','len',outCirc,1)
			me(299.25,.5,-50,-60,'invert','len',outCirc,2)
			mm(299.25,function(self) 
				for i,v in pairs(mod_plr) do
					if v then
						v:decelerate(spb*.5)
						v:rotationz((i*2-3)*-45)
						v:x(SCREEN_CENTER_X+(i*2-3)*-.02*SCREEN_CENTER_X)
						v:rotationx(0)
					end
				end
			end)
			mm(300.45,function(self) 
				for i,v in pairs(mod_plr) do
					if v then
						v:x(SCREEN_CENTER_X)
						v:GetChild('Judgment'):hidden(1)
					end
				end
			end)
			for i=284.75,290.75,.75 do
				me(i,.75,dai_parity*1000,0,'drunk','len',outCirc)
				me(i,.75,dai_parity*1000,0,'tipsy','len',outCirc)
				me(i,.75,dai_parity*1000,0,'tornado','len',outCirc)
				me(i,.75,dai_parity*1000,0,'wave','len',outCirc)
				me(i,.75,dai_parity*300,0,'dizzy','len',outQuad)
				me(i,.75,dai_parity*50+50,dai_parity*-50+50,'reverse','len',outCirc)
				dai_parity = dai_parity * -1
			end
			
			me(291.5,295,dai_parity*-314,0,'dizzy','end',outQuad)
			me(291.5,295,0,-100,'mini','end',outQuad)
			m(295,299.75,'*1 -100 mini','end')
			
			mm(284,function(self) auxtween(-23,-21,.75,'bend'); end)
			mm(284.75,function(self) auxtween(-21,-19,.75,'bend'); end)
			mm(285.5,function(self) auxtween(-19,-17,.75,'bend'); end)
			mm(286.25,function(self) auxtween(-17,-15,.75,'bend'); end)
			mm(287,function(self) auxtween(-15,-13,.75,'bend'); end)
			mm(287.75,function(self) auxtween(-13,-11,.75,'bend'); end)
			mm(288.5,function(self) auxtween(-11,-9,.75,'bend'); end)
			mm(289.25,function(self) auxtween(-9,-7,.75,'bend'); end)
			mm(290,function(self) auxtween(-7,-5,.75,'bend'); end)
			mm(290.75,function(self) auxtween(-5,-3,.75,'bend'); end)
			mm(291.5,function(self) auxtween(-3,-1,3.5,'bbegin'); end)

			me(296.5,.25,0,100,'reverse','len',outCirc)
			me(296.75,.25,100,0,'reverse','len',outCirc)
			me(297,.25,0,100,'reverse','len',outCirc)
			me(297.25,.25,100,0,'reverse','len',outCirc)
			
			me(297.75,.25,0,100,'reverse','len',outCirc)
			me(298,.25,100,0,'reverse','len',outCirc)
			
			me(298.5,.25,0,100,'reverse','len',outCirc)
			me(298.75,.25,100,0,'reverse','len',outCirc)
			
			me(299.25,.25,0,50,'reverse','len',outCirc)
			me(299.75,.5,-100,200,'mini','len',outCirc)
			
			m(299.55,100,'*100 50 reverse','len')
			m(299.75,100,'*100 200 mini','len')
			
			me(293,3,0,100,'dark','len',linear)
			m(295,30,'*100 100 dark','len')
			
			-------------- BG CONTROL --------------
			
			mm(3,function(self)
				if sf_bgo then
					sf_bgo:queuecommand('Intro')
				end
			end,true)
			mm(4,function(self)
				if sf_bgn then
					sf_bgn:hidden(0)
					sf_bgn:diffusealpha(1)
					sf_bgn:linear(16*spb)
					sf_bgn:diffusealpha(0)
				end
				if sf_bgr then
					sf_bgr:hidden(0)
					sf_bgr:diffusealpha(1)
				end
			end,true)
			mm(20.5,function(self)
				if sf_bgn then
					sf_bgn:hidden(1)
				end
				if sf_bgr then
					sf_bgr:hidden(0)
					sf_bgr:y(SCREEN_CENTER_Y)
					sf_bgr:accelerate(5.5*spb)
					sf_bgr:y(SCREEN_CENTER_Y*.5)
					sf_bgr:decelerate(6*spb)
					sf_bgr:y(0)
				end
			end,true)
			mm(32,function(self)
				if sf_bgr then
					sf_bgr:hidden(0)
					sf_bgr:diffusealpha(1)
					sf_bgr:linear(4*spb)
					sf_bgr:diffusealpha(0)
				end
				if sf_bgd then
					sf_bgd:hidden(0)
					sf_bgd:diffusealpha(1)
				end
			end,true)
			mm(156,function(self)
				if sf_bgr then
					sf_bgr:hidden(1)
				end
				if sf_bgd then
					sf_bgd:hidden(0)
					sf_bgd:y(SCREEN_CENTER_Y)
					sf_bgd:accelerate(10*spb)
					sf_bgd:y(SCREEN_CENTER_Y*.5)
					sf_bgd:decelerate(10*spb)
					sf_bgd:y(0)
				end
			end,true)
			mm(176,function(self)
				if sf_sky then
					sf_sky:accelerate(spb)
					sf_sky:y(SCREEN_HEIGHT*-1)
				end
			end,true)
			
			mm(180,function(self)
				if sf_ocean then
					sf_ocean:hidden(0)
				end
				local effecttable = {sf_stars1,sf_stars2,sf_stars3,sf_bgoc}
				for i,v in pairs(effecttable) do
					if v then
						v:hidden(0)
						v:diffusealpha(0)
						v:linear(spb*4)
						v:diffusealpha(1)
					end
				end
			end,true)
			mm(211,function(self)
				if sf_ocean then
					sf_ocean:hidden(0)
					sf_ocean:bounceend(spb*1)
					sf_ocean:y(SCREEN_HEIGHT*2)
				end
				if sf_sky then
					sf_sky:bounceend(spb)
					sf_sky:y(0)
				end
				if sf_bgr then
					sf_bgr:hidden(0)
					sf_bgr:diffusealpha(1)
					sf_bgr:sleep(spb)
					sf_bgr:linear(spb*32)
					sf_bgr:y(SCREEN_CENTER_Y)
				end
				if sf_bgd then
					sf_bgd:hidden(1)
				end
			end,true)
			mm(248,function(self)
				if sf_ocean then
					sf_ocean:hidden(1)
				end
				if sf_bgr then
					sf_bgr:hidden(0)
					sf_bgr:diffusealpha(1)
				end
				if sf_bgn then
					sf_bgn:diffusealpha(0)
					sf_bgn:y(0)
					sf_bgn:hidden(0)
					sf_bgn:linear(1.919)
					sf_bgn:diffusealpha(1)
				end
			end,true)
			mm(260,function(self)
				if sf_bgr then
					sf_bgr:hidden(1)
				end
				if sf_bgn then
					sf_bgn:y(0)
					sf_bgn:linear(spb*22)
					sf_bgn:y(SCREEN_CENTER_Y)
				end
			end,true)
			
			mm(283,function(self)
				if sf_bgn then
					sf_bgn:diffusealpha(1)
					sf_bgn:decelerate(spb)
					sf_bgn:diffusealpha(0)
					sf_bgn:y(0)
				end
				if sf_bgr then
					sf_bgr:hidden(0)
					sf_bgr:y(0)
					sf_bgr:diffusealpha(1)
				end
			end,true)
			mm(284,function(self)
				if sf_bgn then
					sf_bgn:hidden(1)
				end
				if sf_bgr then
					sf_bgr:hidden(0)
					sf_bgr:linear(spb*2.25)
					sf_bgr:y(SCREEN_CENTER_Y)
					sf_bgr:linear(spb*.75)
					sf_bgr:diffusealpha(0)
				end
			end,true)
			mm(286.250,function(self)
				if sf_bgd then
					sf_bgd:hidden(0)
					sf_bgd:diffusealpha(1)
					sf_bgd:y(0)
					sf_bgd:accelerate(spb*1.5)
					sf_bgd:y(SCREEN_CENTER_Y)
					sf_bgd:decelerate(spb*1.5)
					sf_bgd:y(0)
					sf_bgd:linear(spb*.75)
					sf_bgd:diffusealpha(0)
				end
			end,true)
			mm(289.25,function(self)
				if sf_bgr then
					sf_bgr:diffusealpha(0)
					sf_bgr:y(0)
					sf_bgr:linear(spb*.75)
					sf_bgr:diffusealpha(1)
					sf_bgr:linear(spb*1.5)
					sf_bgr:y(SCREEN_CENTER_Y)
				end
			end,true)
			mm(291.5,function(self)
				if sf_bgn then
					sf_bgn:hidden(0)
					sf_bgn:diffusealpha(0)
					sf_bgn:y(0)
					sf_bgn:linear(spb*3.5)
					sf_bgn:diffusealpha(1)
					sf_bgn:y(SCREEN_CENTER_Y)
				end
			end,true)
			mm(299.25,function(self) if sf_bgo then sf_bgo:queuecommand('Finale'); end; end)
			
			--sun/overlay--
			mm(20,function(self)
				if sf_bgs then
					sf_bgs:linear(spb*16)
					sf_bgs:y(SCREEN_HEIGHT*-.1)
				end
				if sf_bgover then
					sf_bgover:linear(spb*16)
					sf_bgover:y(SCREEN_HEIGHT*1.5)
				end
			end,true)
			mm(67,function(self)
				if sf_bgs then
					sf_bgs:linear(spb*16)
					sf_bgs:y(SCREEN_HEIGHT*-.5)
				end
			end,true)
			mm(211,function(self)
				if sf_bgover then
					sf_bgover:linear(spb*16)
					sf_bgover:y(SCREEN_HEIGHT*.75)
				end
			end,true)
			mm(284,function(self)
				if sf_bgover then
					sf_bgover:decelerate(spb*2)
					sf_bgover:y(SCREEN_HEIGHT*1.5)
				end
			end,true)
			mm(286,function(self)
				if sf_bgs then
					sf_bgs:decelerate(spb*7)
					sf_bgs:y(SCREEN_HEIGHT)
				end
			end,true)
			
			mm(292,function(self)
				if sf_bgover then
					sf_bgover:decelerate(spb*3)
					sf_bgover:y(SCREEN_HEIGHT*.75)
				end
			end,true)
			
			--moon--
			mm(260,function(self)
				if sf_bgm then
					sf_bgm:bounceend(spb*23)
					sf_bgm:y(SCREEN_HEIGHT*.35)
					sf_bgm:sleep(spb*.5)
					sf_bgm:bouncebegin(spb*2.5)
					sf_bgm:y(SCREEN_HEIGHT)
				end
			end,true)
			
			--o7--
			mm(3,'o7')
			mm(35,'o7')
			mm(67,'o7')
			mm(99.5,'o7')
			mm(131.5,'o7')
			mm(211,'o7')
			mm(259,'o7')
			mm(283,'o7')
			
			-----4/30 buff session-----
			mm(52,function(self)
				for i,v in pairs(mod_plr) do
					if v then
						v:rotationy(3600)
						v:decelerate(spb*4)
						v:rotationy(0)
					end
				end
			end)
			m(99.5,155.5,'*1000 50 beat','end')
			m(156,165,'*1000 50 dizzy','end',1)
			m(156,165,'*1000 -50 dizzy','end',2)
			m(275,283,'*1 25 dizzy','end',1)
			m(275,283,'*1 -25 dizzy','end',2)
			
			--5/25 nerf session--
			me(180,1,0,90,'stealth','len',inQuad)
			me(187,1,0,90,'stealth','len',inQuad)
			me(188,1,0,90,'stealth','len',inQuad)
			me(192,1,0,90,'stealth','len',inQuad)
			me(196,1,0,90,'stealth','len',inQuad)
			me(200,1,0,90,'stealth','len',inQuad)
			me(201.5,1,0,90,'stealth','len',inQuad)
			me(203,1,0,90,'stealth','len',inQuad)
			me(204,1,0,90,'stealth','len',inQuad)
			me(205.5,1,0,90,'stealth','len',inQuad)
			me(208,.5,0,90,'stealth','len',inQuad)
			me(208.75,.5,0,90,'stealth','len',inQuad)
			me(209.5,.5,0,90,'stealth','len',inQuad)
		
---------------------------------------------------------------------------------------
----------------------DON'T TOUCH IT KIDDO---------------------------------------------
---------------------------------------------------------------------------------------
			
			function message_compare(a,b)
				return a[1] < b[1]
			end
			
			if table.getn(messages) > 1 then
				table.sort(messages, message_compare)
			end
			
			self:queuecommand('Update');
			
			--fucked_mods = buildMods(mods,2)
			
		end"
        
		UpdateCommand="%function(self)

        ---------------------------------------------------------------------------------------
        ----------------------DON'T TOUCH IT KIDDO---------------------------------------------
        ---------------------------------------------------------------------------------------

            --hide things as needed, and set up aliases if checked is false
			if not checked and GAMESTATE:GetSongBeat()>=0 then
				
                thingsToGrab = {'LifeP1','LifeP2','ScoreP1','ScoreP2','BPMDisplay','LifeFrame','ScoreFrame','Lyrics','SongForeground','SongBackground','Overlay','Underlay'}
                thingsToHide = {'LifeP1','LifeP2','ScoreP1','ScoreP2','BPMDisplay','LifeFrame','ScoreFrame','Overlay','Underlay'}
                
                for i,v in ipairs(thingsToGrab) do
                    _G[v] = SCREENMAN:GetTopScreen():GetChild(v) or nil
                end
                
                for i,v in ipairs(thingsToHide) do
                    if _G[v] then _G[v]:hidden(1) end
                end
				
				table.insert(mod_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP1'));
				table.insert(mod_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP2'));
				
				for i,v in pairs(mod_plr) do
					if SCREENMAN:GetTopScreen():GetChild('PlayerOptionsP'..i) then
						_G['init_modsp'..i] = SCREENMAN:GetTopScreen():GetChild('PlayerOptionsP'..i):GetText();
					end
				end
				
				screen = SCREENMAN:GetTopScreen();
				checked = true;
                
                P1 = SCREENMAN:GetTopScreen():GetChild('PlayerP1');
				P2 = SCREENMAN:GetTopScreen():GetChild('PlayerP2');
			end
			
			local beat = GAMESTATE:GetSongBeat()
				

            if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --
            
                -----------------------
                -- Player mod resets --
                -----------------------
            
                for i=1,2 do
                    GAMESTATE:ApplyGameCommand('mod,clearall',i)
                    if _G['init_modsp'..i] then 
                        GAMESTATE:ApplyGameCommand('mod,'.._G['init_modsp'..i],i)
                    end
                end
            
			
                ------------------------------------------------------------------------------
                -- custom mod reader by TaroNuke edited by WinDEU and re-stolen by TaroNuke --
                ------------------------------------------------------------------------------
                for i,v in pairs(mods) do
                    if v and table.getn(v) > 3 and v[1] and v[2] and v[3] and v[4] then
                        if beat >=v[1] then
                            if (v[4] == 'len' and beat <=v[1]+v[2]) or (v[4] == 'end' and beat <=v[2]) then
                                if table.getn(v) == 5 then
                                    GAMESTATE:ApplyGameCommand('mod,'..v[3],v[5]);
                                else
                                    GAMESTATE:ApplyGameCommand('mod,'..v[3]);
                                end						
                            end
                        end
                    else
                        v[1] = 0;
                        v[2] = 0;
                        v[3] = '';
                        v[4] = 'error';
                        SCREENMAN:SystemMessage('Bad mod in beat-based table (line '..i..')');
                    end
                end
               
			   
			   --modReader(fucked_mods,beat,2)
				---------------------------------------------------
				-- ease mod reader v2                            --
				-- friendship ended with if wall                 --
				-- now functions as parameters is my best friend --
				---------------------------------------------------
				for i,v in pairs(mods_ease) do
					if v and table.getn(v) > 6 and v[1] and v[2] and v[3] and v[4] and v[5] and v[6] and v[7] then
						if beat >=v[1] then
							if (v[6] == 'len' and beat <=v[1]+v[2]) or (v[6] == 'end' and beat <=v[2]) then
								
								local duration = v[2];
								if v[6] == 'end' then duration = v[2] - v[1] end
								local curtime = beat - v[1]
								local diff = v[4] - v[3]
								local startstrength = v[3]
								local curve = v[7]
								local mod = v[5]
								
								local strength = curve(curtime, startstrength, diff, duration, v[10], v[11]) --extra parameters for back and elastic eases :eyes:
								
								if v[5] == 'xmod' then
									if table.getn(v) >= 8 then GAMESTATE:ApplyGameCommand('mod,*10000 '..strength..'x',v[8]);
									else GAMESTATE:ApplyGameCommand('mod,*10000 '..strength..'x'); end
								else
									if table.getn(v) >= 8 then GAMESTATE:ApplyGameCommand('mod,*10000 '..strength..' '..mod,v[8]);
									else GAMESTATE:ApplyGameCommand('mod,*10000 '..strength..' '..mod); end
								end
							elseif (v[9] and ((v[6] == 'len' and beat <=v[1]+v[2]+v[9]) or (v[6] == 'end' and beat <=v[9]))) then
								if v[5] == 'xmod' then
									if v[8] then GAMESTATE:ApplyGameCommand('mod,*10000 '..v[4]..'x', v[8]);
									else GAMESTATE:ApplyGameCommand('mod,*10000 '..v[4]..'x'); end
								else
									if v[8] then GAMESTATE:ApplyGameCommand('mod,*10000 '..v[4]..' '..v[5], v[8]);
									else GAMESTATE:ApplyGameCommand('mod,*10000 '..v[4]..' '..v[5]); end
								end
							end
						end
					else
						SCREENMAN:SystemMessage('Bad mod in beat-based ease table (line '..i..')');
					end
				end
				
                ------------------
                -- Actions shit --
                ------------------
                while curmessage<=table.getn(messages) and GAMESTATE:GetSongBeat()>=messages[curmessage][1] do
                    if messages[curmessage][3] or GAMESTATE:GetSongBeat() < messages[curmessage][1]+2 then
                        if type(messages[curmessage][2]) == 'function' then
                            messages[curmessage][2]()
                        elseif type(messages[curmessage][2]) == 'string' then
                            MESSAGEMAN:Broadcast(messages[curmessage][2]);
                        end
                    end
                    curmessage = curmessage+1;
                end

				if beat > 4 and beat < 67 then
					local zoomval = 1
					local getauxthing = auxvar:getaux()
					for i,v in pairs(mod_plr) do
						
						if getauxthing ~= 0 then
							zoomval = math.abs(math.mod(getauxthing+(i*2-2),4))
						end
						if v then
							v:zoom(zoomval)
						end
						local flipval = 0
						if zoomval > 1 then
							flipval = ((zoomval-1)/3)*60
						end
						if beat > 16 then
							GAMESTATE:ApplyGameCommand('mod,*10000 '.. (flipval*-1) ..' flip, *10000 '.. flipval ..' invert',i)
						elseif beat < 15 then
							--this is the best piece of oitg code i've ever written

							local bowmygod = math.mod(math.floor(beat)+(sf_flicker+(2*i-1)),8)+1

							local flp = linear(beat-math.floor(beat),ohmygod[bowmygod][1],ohmygod[bowmygod+1][1]-ohmygod[bowmygod][1],1)
							local inv = linear(beat-math.floor(beat),ohmygod[bowmygod][2],ohmygod[bowmygod+1][2]-ohmygod[bowmygod][2],1)
							local spl = linear(beat-math.floor(beat),ohmygod[bowmygod][3],ohmygod[bowmygod+1][3]-ohmygod[bowmygod][3],1)
							local alt = linear(beat-math.floor(beat),ohmygod[bowmygod][4],ohmygod[bowmygod+1][4]-ohmygod[bowmygod][4],1)
							local rev = linear(beat-math.floor(beat),ohmygod[bowmygod][5],ohmygod[bowmygod+1][5]-ohmygod[bowmygod][5],1)
							local modstr = 'mod,*10000 '.. alt ..' alternate,*10000 '.. spl ..' split,*10000 '.. rev ..' reverse,*10000 '.. flp ..' flip,*10000 '.. inv ..' invert'
							GAMESTATE:ApplyGameCommand(modstr,i)
							
							sf_flicker = math.mod(sf_flicker+1,4)
						else
							
							local bowmygod = math.mod(math.floor(beat)+(sf_flicker+(2*i-1)),8)+1

							local flp = inQuad(beat-math.floor(beat),ohmygod[bowmygod][1],ohmygod[bowmygod][1]*-1,1)
							local inv = inQuad(beat-math.floor(beat),ohmygod[bowmygod][2],ohmygod[bowmygod][2]*-1,1)
							local spl = inQuad(beat-math.floor(beat),ohmygod[bowmygod][3],ohmygod[bowmygod][3]*-1,1)
							local alt = inQuad(beat-math.floor(beat),ohmygod[bowmygod][4],ohmygod[bowmygod][4]*-1,1)
							local rev = inQuad(beat-math.floor(beat),ohmygod[bowmygod][5],ohmygod[bowmygod][5]*-1+50,1)
							local modstr = 'mod,*10000 '.. alt ..' alternate,*10000 '.. spl ..' split,*10000 '.. rev ..' reverse,*10000 '.. flp ..' flip,*10000 '.. inv ..' invert'
							GAMESTATE:ApplyGameCommand(modstr,i)
							
							sf_flicker = math.mod(sf_flicker+1,4)
						end
					end
				elseif beat > 67 and beat < 68 then
					for i,v in pairs(mod_plr) do
						v:zoom(1)
					end
				elseif beat > 100 and beat < 156 then
					local effector = beat
					if beat > 132 then  effector = beat * -1 end
					for i,v in pairs(mod_plr) do
						local alt = math.sin((effector/2)*math.pi - math.pi*(2/3) - math.pi*(i*.45))*16.66666
						local spl = math.sin((effector/2)*math.pi - math.pi*(2/3) - math.pi*(i*.45))*33.33333
						local rev = math.sin((effector/2)*math.pi - math.pi*(i*.45))*50+50
						
						local modstr = 'mod,*10000 '.. alt ..' alternate,*10000 '.. spl ..' split,*10000 '.. rev ..' reverse'
						
						if beat > 132 then
							v:rotationy(35*math.sin(beat))
							v:z(((i*2)-3)*100*math.sin(beat))
							
							modstr = modstr .. ',*10000 '.. ((i*2)-3)*50+-10*math.sin(beat) ..' dizzy'
							
							if beat > 154 then
								local zoomval = 1
								local getauxthing = auxvar:getaux()
							
								if getauxthing ~= 0 then
									zoomval = math.abs(math.mod(getauxthing+(i*2-2),4))
								end
								if v then
									v:zoom(zoomval)
								end
								local flipval = 0
								if zoomval > 1 then
									flipval = ((zoomval-1)/3)*60
								end
								modstr = modstr .. ',*10000 '.. (flipval*-1) ..' flip, *10000 '.. flipval ..' invert'
								
							end
						end
						
						GAMESTATE:ApplyGameCommand(modstr,i)
					end
				elseif beat > 156 and beat < 295 then
					local zoomval = 1
					local getauxthing = auxvar:getaux()
					for i,v in pairs(mod_plr) do
						
						if getauxthing ~= 0 then
							zoomval = math.abs(math.mod(getauxthing+(i*2-2),4))
						end
						if v then
							v:zoom(zoomval)
						end
						local flipval = 0
						if zoomval > 1 then
							flipval = ((zoomval-1)/3)*60
						end
						
						if beat < 180 or beat > 211 then
							GAMESTATE:ApplyGameCommand('mod,*10000 '.. (flipval*-1) ..' flip, *10000 '.. flipval ..' invert',i)
						else
							GAMESTATE:ApplyGameCommand('mod, *10000 '.. (flipval*.25+85) ..' dark, *10000 '.. flipval ..' invert',i)
						end
						
						
					end
					if beat > 180 and beat < 208 then
						local alt = math.sin(((beat)/6)*math.pi - math.pi*(2/3) - math.pi*(.45))*16.66666
						local spl = math.sin(((beat)/6)*math.pi - math.pi*(2/3) - math.pi*(.45))*33.33333
						local rev = math.sin(((beat)/6)*math.pi - math.pi*(.45))*50+50
						GAMESTATE:ApplyGameCommand('mod,*10000 '.. alt ..' alternate,*10000 '.. spl ..' split,*10000 '.. rev ..' reverse')
					elseif beat > 260 and beat < 283 then
						local alt = math.sin((beat/1.5)*math.pi - math.pi*(2/3) - math.pi*(.45))*16.66666
						local spl = math.sin((beat/1.5)*math.pi - math.pi*(2/3) - math.pi*(.45))*33.33333
						local rev = math.sin((beat/1.5)*math.pi - math.pi*(.45))*50+50
						GAMESTATE:ApplyGameCommand('mod,*10000 '.. alt ..' alternate,*10000 '.. spl ..' split,*10000 '.. rev ..' reverse')
					end
				elseif beat > 295 then
					for i,v in pairs(mod_plr) do
						if v then
							v:zoom(1)
						end
					end
				end
				
				for i,v in pairs(sf_wavepool) do
					local wavei = math.ceil(i/2)
					local beatpos = 0
					if auxvar then
						beatpos = math.mod(auxvar:getaux()*-1-1,2)/2
					end
					local wpos = sf_waveypos[wavei][1]+(sf_waveypos[wavei][2]-sf_waveypos[wavei][1])*beatpos +.075
					local wzoomx = sf_wavezoomx[wavei][1]+(sf_wavezoomx[wavei][2]-sf_wavezoomx[wavei][1])*beatpos
					local wzoomy = sf_wavezoomy[wavei][1]+(sf_wavezoomy[wavei][2]-sf_wavezoomy[wavei][1])*beatpos
					if v then
						v:y(wpos*SCREEN_CENTER_Y)
						v:zoomx(wzoomx)
						v:zoomy(wzoomy)
					end
				end
				
            end
			
			self:sleep(0.02);
			self:queuecommand('Update');

---------------------------------------------------------------------------------------
----------------------END DON'T TOUCH IT KIDDO-----------------------------------------
---------------------------------------------------------------------------------------
          
        end"
		
	/>
    
	<!-- Aux actor, VERY IMPORTANT -->
	<Aux
	Type="Quad" OnCommand="%function(self) auxvar=self end" InitCommand="hidden,1;aux,-1"	/>
	
	<Layer File="o7"
		OnCommand="%function(self)
			self:hidden(0)
			self:diffusealpha(0)
			self:x(SCREEN_WIDTH*.5)
			self:y(SCREEN_HEIGHT*.5)
			self:fadebottom(.1)
			self:blend('add')
		end"
		o7MessageCommand="%function(self)
			self:zoom(2)
			self:diffusealpha(.75)
			self:decelerate(spb)
			self:zoom(3)
			self:diffusealpha(0)
		end"
	/>
	<Layer File="o7"
		OnCommand="%function(self)
			self:hidden(0)
			self:diffusealpha(0)
			self:x(SCREEN_WIDTH*.5)
			self:y(SCREEN_HEIGHT*.5)
			self:fadebottom(.1)
			self:blend('add')
		end"
		o7MessageCommand="%function(self)
			self:zoom(2)
			self:diffusealpha(.25)
			self:decelerate(spb)
			self:zoom(4)
			self:diffusealpha(0)
			
		end"
	/>
	
</children></ActorFrame>