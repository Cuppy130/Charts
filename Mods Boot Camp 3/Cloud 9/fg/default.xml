<ActorFrame
InitCommand="%function(self)

	if FUCK_EXE then

		songName = GAMESTATE:GetCurrentSong():GetSongDir()
		sw,sh = SCREEN_WIDTH,SCREEN_HEIGHT
		dw,dh = DISPLAY:GetDisplayWidth(),DISPLAY:GetDisplayHeight() 
		scx,scy = SCREEN_CENTER_X,SCREEN_CENTER_Y
		pam = 8
		checked = false
		n_fix = 1
		if string.find(string.lower(DISPLAY:GetVendor()),'nvidia') then n_fix = 0.9 end
		function GetSecondsPerBeat() return (60/(GAMESTATE:GetCurBPS()*60)) end
		mod_afts = {}
		function Plr(n) return _G['P'..n] end
		c9_flicker = 1
		c9_playerproxies = {}
		c9_polygrid_size = 6
		
		function poly_npot(val)
			local out = 2
			while out < val do
				out = out*2
			end
			return out
		end
		
		function taro_Sound(str)
			local met = GAMESTATE:GetCurrentSong():GetSongDir();
			SOUND:PlayOnce(met..'fg/'..str..'.ogg');
		end
		
	else
		
		SCREENMAN:SystemMessage('Requires NotITG ver. 3.1!')
		
	end
	
end" ><children>

	<Layer Type="ActorFrame" Condition="FUCK_EXE" ><children>

		<Layer Type="Quad" InitCommand="hidden,1" OnCommand="sleep,9E9"/>
		<Layer File="modhelpers.xml" /> <Layer File="tweens.xml" /> <Layer File="readers.xml" /> <Layer File="c2l.xml"/>

		<Layer
			Type="Quad"
			OnCommand="hidden,1;"
			InitCommand="%function(self)
			
				if tonumber(GAMESTATE:GetVersionDate()) >= 20180800 then
			
					for i = 1,8 do _G['P'..i] = nil _G['jud'..i] = nil _G['com'..i] = nil end
					mod_plr = {}; mod_firstSeenBeat = GAMESTATE:GetSongBeat(); mods, curaction, mod_actions, mods_ease, funcs_ease, mods_taro_perframe = {}, 1, {}, {}, {}, {}, {}
					local m,mm,me,l,e,str = mod_insert,mod_message,mod_ease,'len','end','' 
					local function r(float) return ((math.rad(float)*100)*-1) end
					m(0, 9999, '*-1 sudden,*-1 100 suddenoffset,*-1 400 zoomz,*-1 overhead,*-1 2x,*-1 no beat,*-1 no beaty,*-1 no beatz,*-1 approachtype,*-1 dizzyholds,*-1 100 modtimer,*-1 -10000 cover,*-1 zbuffer,*-1 receptorzbuffer', l, nil)
					
					
					--me(0,9999,100,100,'stealth',l,linear)
					--me(0,9999,100,100,'dark',l,linear)

					m(0, 4, '*-1 dark', l, nil)

					me(4,4,100,0,'dark',l,inOutSine,nil)

					me(7,1,200,0,'mini',l,inQuad,nil,0.2)
					mod_sugar(7,1,0.125,nil,{85,50})
					mod_bounce(8,0.5,0,100,'mini','Circ',false,nil)
					mod_bounce(8,0.5,0,-10,'rotationz','Circ',false,nil)

					me(8.5,1,-1000,0,'tiny',l,outExpo,nil)
					me(8.5,1,5000,0,'drunk',l,outExpo,nil)
					me(8.5,1,5000,0,'tipsy',l,outExpo,nil)

					me(9.25,1,-1000,0,'tiny',l,outExpo,nil)
					me(9.25,1,-5000,0,'drunk',l,outExpo,nil)
					me(9.25,1,-5000,0,'tipsy',l,outExpo,nil)

					me(10,1,-1000,0,'tiny',l,outExpo,nil)
					me(10,1,5000,0,'drunk',l,outExpo,nil)
					me(10,1,5000,0,'tipsy',l,outExpo,nil)

					m(10, 4, '*-1 4000 drunkspeed,*-1 100 drunkperiod,*-1 100 gayholds', l, nil)
					mod_bounce(10,4,-200,200,'bumpyxperiod','Circ',false,nil)
					mod_bounce(10,4,0,50,'bumpyx','Circ',false,nil)
					mod_bounce(10,4,0,50,'drunk','Expo',false,nil)
					mod_bounce(10,4,0,20,'rotationz','Expo',false,nil)
					mod_bounce(10,4,0,-40,'rotationx','Expo',false,nil)
					mod_bounce(10,4,0,100,'flip','Expo',false,nil)
					mod_bounce(10,4,1,2,'xmod','Quad',false,nil)
					mm(10,function(self)
						for pn = 1,2 do
							local a = Plr(pn)
							if a then
								a:tween(GetSecondsPerBeat(),'outExpo(%f,0,1,1)')
								a:x(scx)
							end
						end
					end)

					me(13.5,0.5,r(360),0,'confusionoffset',l,linear,nil,0.2)
					me(14,1,600,100,'zoomx',l,outExpo,nil)
					me(14,1,-1000,0,'tiny',l,outExpo,nil)

					mm(14,function(self)
						for pn = 1,2 do
							local a = Plr(pn)
							if a then
								a:tween(GetSecondsPerBeat(),'outExpo(%f,0,1,1)')
								a:x(scx*(pn-0.5))
							end
						end
					end)

					local pn,col = 1,0
					for i = 0,1.75,0.25 do
						if col == 4 then col = 0 pn = 2 end
						me(14+i,1,0,100,'reverse'..col,l,outExpo,pn,7-i)
						col = col + 1
					end

					mod_bounce(14,2.5,0,2,'xmod','Circ',false,nil)

					m(15.5, 1, '*2 invert', l, nil)
					me(15.5,0.5,200,0,function(t) mod_do('*-1 '.. t*c9_flicker .. ' movex',nil) end,l,linear,nil)

					me(16.5,1,-1000,0,'tiny',l,outExpo,nil)
					me(16.5,1,5000,0,'drunk',l,outExpo,nil)
					me(16.5,1,5000,0,'tipsy',l,outExpo,nil)

					me(17.25,1,-1000,0,'tiny',l,outExpo,nil)
					me(17.25,1,-5000,0,'drunk',l,outExpo,nil)
					me(17.25,1,-5000,0,'tipsy',l,outExpo,nil)

					mm(18,function(self)
						for pn = 1,2 do
							local a = Plr(pn)
							if a then
								a:tween(GetSecondsPerBeat(),'outExpo(%f,0,1,1)')
								a:x(scx)
							end
						end
					end,true)
					mod_bounce(18,4,1,2,'xmod','Quad',false,nil)
					me(18,1,-1000,0,'tiny',l,outExpo,nil)
					me(18,1,5000,0,'drunk',l,outExpo,nil)
					me(18,1,5000,0,'tipsy',l,outExpo,nil)

					m(18, 4, '*-1 4000 drunkyspeed,*-1 100 drunkyperiod,*-1 0 gayholds,*-1 -100 spiralholds', l, nil)
					mod_bounce(18,4,0,50,'drunky','Expo',false,nil)
					mod_bounce(18,4,0,50,'bumpyx','Circ',false,nil)
					mod_bounce(18,4,-200,200,'bumpyxperiod','Circ',false,nil)
					mod_bounce(18,4,0,60,'rotationx','Circ',false,nil)
					mod_bounce(18,4,0,r(60),'confusionxoffset','Circ',false,nil)
					mod_bounce(18,4,0,-10,'rotationz','Circ',false,nil)
					mod_bounce(18,4,0,100,'flip','Expo',false,nil)
					mod_bounce(18,4,0,-100,'tornado','Expo',false,nil)

					me(20,1,1000,0,'drunk',l,outExpo,nil)

					for col = 0,3 do
						m(22, 1, '*-1 no reverse'..col, l, nil)
					end

					me(21.5,0.5,r(360),0,'confusionoffset',l,linear,nil,0.2)
					me(22,0.75,100,(100/3)*2,'reverse',l,outExpo,nil)
					me(22.75,0.75,(100/3)*2,(100/3)*1,'reverse',l,outExpo,nil)
					me(23.5,0.75,(100/3)*1,0,'reverse',l,outExpo,nil)

					m(22, 2, '*-1 400 bumpyperiod', l, nil)

					me(22,0.75,-500,0,'bumpy',l,outExpo,nil)
					me(22.5,0.5,400,0,'drunk',l,outExpo,nil)
					me(22.75,0.75,500,0,'bumpy',l,outExpo,nil)
					me(23.25,0.5,-400,0,'drunk',l,outExpo,nil)
					me(23.5,0.75,-500,0,'bumpy',l,outExpo,nil)

					me(22,0.75,-1000,0,'tiny',l,outExpo,nil)
					me(22.75,0.75,-1000,0,'tiny',l,outExpo,nil)
					me(23.5,0.75,-1000,0,'tiny',l,outExpo,nil)

					mod_bounce(22,0.75,0,-100,'mini','Circ',false,nil)
					mod_bounce(22.75,0.75,0,-50,'mini','Circ',false,nil)
					mod_bounce(23.5,0.5,0,50,'mini','Circ',false,nil)

					mod_bounce(22,0.75,0,10,'rotationz','Circ',false,nil)
					mod_bounce(22.75,0.75,0,-10,'rotationz','Circ',false,nil)
					mod_bounce(23.5,0.5,0,10,'rotationz','Circ',false,nil)

					--m(24-0.5, 8, '*-1 100 beatz,*-1 400 beatzperiod', l, nil)
					--ease_wiggle(24,6,100,0.75,'invert',outExpo,l,nil,true)

					
					mm(24,function(self)
						for pn = 1,2 do
							local a = Plr(pn)
							if a then
								a:tween(GetSecondsPerBeat()*1,'outExpo(%f,0,1,1)')
								a:x(scx*(pn-0.5))
							end
						end
					end,false)

					local f = 1
					for i = 0,7 do
						me(24+i,1,-200,0,'mini',l,outExpo,nil)
						me(24+i,1,400*f,0,'drunk',l,outExpo,nil)
						me(24+i,1,0.5,2,'xmod',l,outSine,nil)
						f=-f
					end

					local f = 1
					for i = 0,6,0.75 do
						me(24+i,0.5,200*f,0,'tipsy',l,outSine,nil)
						f=-f
					end

					mod_bounce(26,1,0,-300,'wave','Circ',false,nil)
					mod_bounce(26,1,0,200,'parabolaz','Circ',false,nil)
					mod_bounce(26,1,0,100,'distant','Circ',false,nil)

					bouncy_wiggle(30,2,1,0,-10,'rotationz',l,'Circ',false,nil)

					mm(31,function(self)
						for pn = 1,2 do
							local a = Plr(pn)
							if a then
								a:tween(GetSecondsPerBeat()*1,'inCirc(%f,0,1,1)')
								a:x(scx)
							end
						end
					end,false)

					me(31,1,0,100,'reverse',l,inCirc,nil,4)
					me(31,1,0,-30,'rotationx',l,inCirc,nil,4)
					me(31,1,0,r(-30),'confusionxoffset',l,inCirc,nil,4)
					me(32,1,200,0,'tiny',l,outExpo,nil)
					m(32.5, 0.5, '*10 invert', l, nil)
					m(33, 0.5, '*10 no invert', l, nil)
					me(33,1,-400,0,'tiny',l,outExpo,nil)

					me(34,2,-30+360,-180,'rotationx',l,inOutSine,nil)
					me(34,2,r(-30+360),-r(180),'confusionxoffset',l,inOutSine,nil)

					me(34.5,1,-1000,0,'tiny',l,outExpo,nil)

					mod_bounce(33,1,0,100,'mini','Circ',false,nil)
					mod_bounce(33,1,0,100,'parabolaz','Circ',false,nil)

					m(36, 1, '*-1 no reverse,*-1 no rotationx,*-1 no confusionxoffset', l, nil)
					mod_quickswaps(36,1,'invert',4,0.5,nil)
					switcheroo_add(37,'flip',4,0.5,nil,1)
					switcheroo_add(37.5,'ludr',8,0.25,nil,1)
					switcheroo_add(37.75,'urld',8,0.25,nil,1)
					switcheroo_add(38,'invert',4,0.5,nil,1)
					switcheroo_add(38.5,'normal',4,0.5,nil,1)

					me(38,2,360*2,0,'rotationz',l,inQuad,nil,0.2)
					me(38,2,r(360*2),0,'confusionoffset',l,inQuad,nil,0.2)

					me(39,1,-1000,0,'tiny',l,outCirc,nil)
					me(39,1,200,100,'zoomx',l,outCirc,nil)

					--mod_bounce(40,1,0,-20,'rotationz','Circ',false,nil)
					m(40, 28, ',*-1 50 wave,*-1 -90 tornadoperiod,*-1 200 gayholds,*-1 100 zigzagz,*-1 zigzagzperiod,*-1 -100 spiralholds', l, nil)
					ease_wiggle(40,28,-100,1,'tornado',inExpo,l,nil,false)
					me(40,1,360,0,'rotationx',l,outInCirc,nil,0.2)
					me(40,1,r(360),0,'confusionxoffset',l,outInCirc,nil,0.2)

					for i = 0,48,16 do
						mod_sugar(44+i,0.125*2,0.125,nil,{85,50})
						mod_sugar(44.5+i,0.125*3,0.125,nil,{85,50})
					end

					for col = 3,0,-1 do
						m(46+col/4, 4+col/4, '*1 99 reverse'..col, l, nil)
						m(50+col/4, 1, '*1 no reverse'..col, l, nil)

						m(62+col/4, 4+col/4, '*1 99 reverse'..col, l, nil)
						m(66+col/4, 1, '*1 no reverse'..col, l, nil)

						m(78+col/4, 4+col/4, '*1 99 reverse'..col, l, nil)
						m(82+col/4, 1, '*1 no reverse'..col, l, nil)

						m(174+col/4, 9+col/4, '*1 99 reverse'..col, l, nil)
						m(183+col/4, 1, '*2 no reverse'..col, l, nil)

						m(190+col/4, 4+col/4, '*1 99 reverse'..col, l, nil)
						m(193+col/4, 1, '*2 no reverse'..col, l, nil)
					end

					

					mod_bounce(54,1,0,150,'zoom','Circ',false,nil)
					me(54,1,360,0,'rotationz',l,outInCirc,nil,0.2)
					mod_bounce(54,1,0,200,'drunk','Circ',false,nil)

					mod_bounce(55,1,0,150,'zoom','Circ',false,nil)
					mod_bounce(55,1,0,60,'skewx','Circ',false,nil)

					mod_bounce(56,1,0,150,'zoom','Circ',false,nil)
					mod_bounce(56,1,0,-50,'rotationx','Circ',false,nil)
					mod_bounce(56,1,0,200,'tipsy','Circ',false,nil)

					mod_bounce(64,1,0,150,'zoom','Circ',false,nil)
					me(64,1,-360,0,'rotationz',l,outInCirc,nil,0.2)
					me(64,1,r(-360),0,'confusionoffset',l,outInCirc,nil,0.2)
					mod_bounce(64,1,0,400,'drunkz','Circ',false,nil)

					mod_bounce(68,1.5,100,150,'zoom','Expo',false,nil)
					mod_bounce(68,1.5,0,75,'skewx','Expo',false,1)
					mod_bounce(68,1.5,0,-75,'skewx','Expo',false,2)
					mod_bounce(68,1.5,0,100,'movex','Expo',false,1)
					mod_bounce(68,1.5,0,-100,'movex','Expo',false,2)
					mod_bounce(69.5,1.5,100,75,'zoom','Expo',false,nil)
					mod_bounce(69.5,1.5,0,20,'rotationz','Expo',false,1)
					mod_bounce(69.5,1.5,0,-20,'rotationz','Expo',false,2)
					mod_bounce(69.5,1.5,0,350,'movex','Expo',false,1)
					mod_bounce(69.5,1.5,0,-350,'movex','Expo',false,2)
					mod_bounce(69.5,1.5,0,-50,'movey','Expo',false,nil)

					me(68,0.5,0,100,'invert',l,outBack,nil)
					me(68.5,0.5,100,0,'invert',l,outBack,nil) me(68.5,0.5,0,100,'flip',l,outBack,nil)
					me(69,0.5,100,0,'flip',l,outBack,nil)

					me(69.5,0.5,0,100,'invert',l,outBack,nil)
					me(70,0.5,100,0,'invert',l,outBack,nil) me(70,0.5,0,100,'flip',l,outBack,nil)
					me(70.5,0.5,100,0,'flip',l,outBack,nil)

					m(73, 28, '*-1 50 bumpyy,*-1 50 bumpyyperiod', l, nil)

					mod_bounce(79.5,0.5,0,200,'z','Circ',false,nil)
					me(79.5,0.5,200,0,'y',l,outElastic,nil,nil,400,0.02)

					mod_bounce(86,1,0,-150,'z','Circ',false,nil)
					me(86,1,-360,0,'rotationz',l,outInCirc,nil,0.2)
					me(86,1,-r(360),0,'confusionoffset',l,outInCirc,nil,0.2)

					mod_bounce(87,1,0,150,'zoom','Circ',false,nil)
					mod_bounce(87,1,0,100,'skewx','Circ',false,nil)
					mod_bounce(87,1,0,-100,'noteskew','Circ',false,nil)


					m(88, 3, '*-1 150 bouncez', l, nil)

					mod_bounce(90,1,2,1,'xmod','Quad',false,nil)
					m(92, 4, '*-1 reverse', l, nil)

					me(95,1,100,0,'reverse',l,outExpo,nil)

					local f = 1
					for i = 0,3,0.25 do
						me(88+i,0.25,-200,0,'tiny',l,outExpo,nil)
						me(92+i,0.25,-200,0,'tiny',l,outExpo,nil)
						f=-f
					end

					local f = 1
					for i = 0,22.5 do
						me(72.5+i,1,100,400,'zoomx',l,inOutCirc,normalize(f,-1,1,1,2))
						if (72.5+i) >= 91.5 then
							me(72.5+i,1,1000,0,'movex',l,inOutCirc,normalize(f,-1,1,1,2),1)
							me(72.5+i,1,0,-1000,'movex',l,inOutCirc,normalize(-f,-1,1,1,2),1)
							if (72.5+i) >= 87.5 then
								me(72.5+i,1,100,0,'stealth',l,inOutCirc,normalize(f,-1,1,1,2),1)
								me(72.5+i,1,0,100,'stealth',l,inOutCirc,normalize(-f,-1,1,1,2),1)
								me(72.5+i,1,-800,0,'movez',l,inOutCirc,normalize(f,-1,1,1,2),1)
								me(72.5+i,1,0,800,'movez',l,inOutCirc,normalize(-f,-1,1,1,2),1)
								me(72.5+i,1,360*f,0,'rotationx',l,inOutCirc,normalize(-f,-1,1,1,2),1)
								me(72.5+i,1,r(360)*f,0,'confusionxoffset',l,inOutCirc,normalize(-f,-1,1,1,2),1)
							end
						else
							me(72.5+i,1,0,-1000,'movex',l,inOutCirc,normalize(f,-1,1,1,2),1)
							me(72.5+i,1,1000,0,'movex',l,inOutCirc,normalize(-f,-1,1,1,2),1)
							if (72.5+i) >= 87.5 then
								me(72.5+i,1,0,100,'stealth',l,inOutCirc,normalize(f,-1,1,1,2),1)
								me(72.5+i,1,100,0,'stealth',l,inOutCirc,normalize(-f,-1,1,1,2),1)
								me(72.5+i,1,0,-800,'movez',l,inOutCirc,normalize(f,-1,1,1,2),1)
								me(72.5+i,1,800,0,'movez',l,inOutCirc,normalize(-f,-1,1,1,2),1)
								me(72.5+i,1,-360*f,0,'rotationx',l,inOutCirc,normalize(-f,-1,1,1,2),1)
								me(72.5+i,1,-r(360)*f,0,'confusionxoffset',l,inOutCirc,normalize(-f,-1,1,1,2),1)
							end
						end
						f=-f
					end

					me(91,0.5,1,4,function(t) for pn = 1,2 do local a = Plr(pn) if a then a:zoomx(t) a:zoomy(normalize(t,1,4,1,0)) end end end,l,outQuad,nil)

					mm(92,function(self)
						for pn = 1,2 do
							local a = Plr(pn)
							if a then
								a:zoomx(1)
								a:zoomy(1)
							end
						end
					end)

					me(95,0.25,r(360),0,'confusionoffset',l,linear,nil,0.2)

					m(96,4,'*-1 dark,*-1 hidenoteflash',l,1)
					m(96,4,'*-1 stealth',l,2)
					mod_bounce(96,3,0,150,'wave','Circ',false,nil)

					me(96,0.25,0,0,'movez',l,linear,nil,4)
					me(96,0.25,0,0,'stealth',l,linear,nil,4)

					me(96,0.25,0,200,'movex',l,outBack,2,0.5)
					me(96.75,0.25,200,-200,'movex',l,outBack,2,0.5)
					me(97.5,0.25,-200,250,'movex',l,outBack,2,0.5)
					me(98.25,0.25,250,-300,'movex',l,outBack,2,0.5)
					me(99,0.25,-300,0,'movex',l,outBack,2,0.5)

					me(96,0.25,0,2*-2,'rotationz',l,outBack,2,0.5)
					me(96.75,0.25,2*-2,-4*-2,'rotationz',l,outBack,2,0.5)
					me(97.5,0.25,-4*-2,6*-2,'rotationz',l,outBack,2,0.5)
					me(98.25,0.25,6*-2,-8*-2,'rotationz',l,outBack,2,0.5)
					me(99,0.25,-8*-2,0,'rotationz',l,outBack,2,0.5)

					me(96,0.25,0,200*-1,'movex',l,outBack,1,0.5)
					me(96.75,0.25,200*-1,-200*-1,'movex',l,outBack,1,0.5)
					me(97.5,0.25,-200*-1,250*-1,'movex',l,outBack,1,0.5)
					me(98.25,0.25,250*-1,-300*-1,'movex',l,outBack,1,0.5)
					me(99,0.25,-300*-1,0,'movex',l,outBack,1,0.5)

					--me(96,0.25,0,2*2,'rotationz',l,outBack,1,0.5)
					me(96.75,0.25,0,-4*2,'rotationz',l,outBack,1,0.5)
					me(97.5,0.25,4*2,6*2,'rotationz',l,outBack,1,0.5)
					me(98.25,0.25,6*2,-8*2,'rotationz',l,outBack,1,0.5)
					me(99,0.25,-8*2,0,'rotationz',l,outBack,1,0.5)

					me(96.5,1,-200,0,'tiny',l,outExpo,nil)
					me(96.5,1,200,0,'tipsy',l,outExpo,nil) me(96.5,1,200,0,'drunk',l,outExpo,nil)
					me(97.25,1,-200,0,'tiny',l,outExpo,nil)
					me(97.25,1,-200,0,'tipsy',l,outExpo,nil) me(97.25,1,-200,0,'drunk',l,outExpo,nil)
					me(98,1,-200,0,'tiny',l,outExpo,nil)
					me(98,1,200,0,'tipsy',l,outExpo,nil) me(98,1,200,0,'drunk',l,outExpo,nil)
					me(98.75,1,-200,0,'tiny',l,outExpo,nil)
					me(98.75,1,-200,0,'tipsy',l,outExpo,nil) me(98.75,1,-200,0,'drunk',l,outExpo,nil)

					me(99,0.25,r(360),0,'confusionoffset',l,linear,nil,0.2)
					mod_bounce(99,1,2,1,'xmod','Expo',false,nil)


					m(99.5,0.25,'*10 invert',l,nil) 
					m(99.75,0.25,'*10 no invert',l,nil)

					m(99.5,4,'*-1 no stealth',l,nil)
					m(100,4,'*-1 hidden,*-1 dark,*-1 hidenoteflash',l,1)
					m(100,4,'*-1 sudden,*-1 no suddenoffset',l,2)

					--mod_quickswaps(100,3,'invert',10,0.25,nil)

					me(100,3,0,100,'flip',l,inOutExpo,nil)
					me(100,3,0,180,'rotationz',l,inOutExpo,nil,1)
					me(100,3,0,r(180),'confusionoffset',l,inOutExpo,nil,1)
					mod_bounce(100,4,2,1.5,'xmod','Circ',false,nil)
					mod_bounce(100,4,100,80,'zoom','Circ',false,nil)

					me(100,0.25,r(360),0,'dizzy',l,linear,nil,0.2)
					me(100,0.25,0,200,'movex',l,outExpo,2,0.25)
					me(100.5,0.25,200,400,'movex',l,outExpo,2,1)
					me(101,0.25,0,100,'reverse',l,outExpo,2,2)
					me(101.5,0.25,400,200,'movex',l,outExpo,2,0.25)
					me(101.5,0.25,-r(360),0,'dizzy',l,linear,nil,0.2)
					me(102,0.25,200,0,'movex',l,outExpo,2,0.25)

					me(100,0.25,0,-200,'movex',l,outExpo,1,0.25)
					me(100.5,0.25,-200,-400,'movex',l,outExpo,1,1)
					me(101,0.25,0,100,'reverse',l,outExpo,nil,4)
					me(101.5,0.25,-400,-200,'movex',l,outExpo,1,0.25)
					me(102,0.25,-200,0,'movex',l,outExpo,1,0.25)

					mod_bounce(102.5,0.25,0,50,'skewx','Circ',false,nil)
					mod_bounce(102.75,0.25,0,-50,'skewx','Circ',false,nil)

					me(103,2,-1000,0,'tiny',l,outExpo,nil,0.2)
					me(103,1,80,100,'zoom',l,outExpo,nil,0.2)
					me(103,1,-180,0,'rotationz',l,inQuad,nil,1)
					me(103,1,r(-180),0,'confusionoffset',l,inQuad,nil,1)
					me(103,1,100,50,'reverse',l,inExpo,nil,4)
					m(103,1,'*-1 no flip',l,nil)

					m(104,32,'*-1 1x,*-1 800 bumpyperiod,*-1 150 wave',l,nil)
					me(104,1,0,200,'bumpy',l,inOutSine,nil,16)
					mm(103,function(self)
						c9_aux:accelerate(GetSecondsPerBeat())
						c9_aux:x(150)
					end,true)

					mm(132,function(self)
						c9_aux:accelerate(GetSecondsPerBeat()*4)
						c9_aux:x(0)
					end,true)
					mod_bounce(135,1,100,200,'zoom','Circ',false,nil)

					mm(136,function(self)
						for pn = 1,2 do
							local a = Plr(pn)
							if a then
								a:decelerate(GetSecondsPerBeat())
								a:xy(scx*(pn-0.5),scy)
								a:rotationz(0)
							end
						end
					end,false)

					--[[ hi cering ]]--

					bouncy_wiggle(136,16,1,0,250,'parabolaz',l,'Circ',false,nil)
					bouncy_wiggle(136,16,1,0,10,'dizzy',l,'Expo',false,nil)
					bouncy_wiggle(136,16,1,0,-50,'movey',l,'Quad',true,nil)
					bouncy_wiggle(136,16,1,0,50,'tipsy',l,'Quad',false,nil)
					bouncy_wiggle(136,16,1,0,50,'drunk',l,'Quad',false,nil)

					for i = 0,32 do
						me(136+i,1,1.5,2,'xmod',l,inQuad,nil)
					end
						
					me(135,1,360,0,'rotationz',l,inCirc,nil,0.2)
					me(136,1,50,0,'reverse',l,outExpo,nil)
					me(136,16,0,200,'shrinklinearz',l,inOutSine,nil,8)
					me(150,8,0,100,'distant',l,inOutSine,nil,8)
					m(136-0.5,164,'*-1 200 beat,*-1 -20 beatperiod,*-1 600 bumpyperiod',e,nil)

					mod_bounce(143,2,0,40,'distant','Circ',false,nil)
					mod_bounce(145,2,0,-40,'distant','Circ',false,nil)
					mod_bounce(145,1,0,10,'rotationz','Circ',false,nil)
					mod_bounce(146,2,0,-10,'rotationz','Circ',false,nil)
					mod_bounce(148,1,0,-20,'skewx','Circ',false,nil)
					mod_bounce(149,1,0,-10,'rotationz','Circ',false,nil)
					mod_bounce(149.5,1.5,0,20,'reverse','Circ',false,nil)

					bouncy_wiggle(152,8,1,-1000,200,'bumpy',l,'Expo',true,nil)
					ease_wiggle(152,8,100,1,'reverse',outExpo,l,nil,true)
					mm(152,function(self)
						for pn = 1,2 do
							local a = Plr(pn)
							if a then
								a:tween(GetSecondsPerBeat()*8,'inOutSine(%f,0,1,1)')
								a:x(scx)
							end
						end
					end,true)
					local f = 1
					for i = 0,8 do
						--me(152+i,1,400,0,'bumpy',l,outCirc,nil)
						me(152+i,1,0.5,2,'xmod',l,outCirc,nil)
						me(152+i,1,-1000,0,'tiny',l,outExpo,nil)
						me(152+i,1,500*f,0,'tipsy',l,outExpo,nil)
						f=-f
					end



					me(160,4,360*10,0,'rotationz',l,inQuad,nil,0.2)
					me(160,4,0,-1500,'tiny',l,inQuad,nil)



					me(164,1,-1500,0,'tiny',l,outExpo,nil)
					me(164,1,100,0,'distant',l,outExpo,nil,11)
					mm(164,function(self)
						for pn = 1,2 do
							local a = Plr(pn)
							if a then
								a:finishtweening()
							end
						end
					end,true)
					me(164,1,0,50,'flip',l,outBack,nil,3)
					me(164.5,1,100,0,'zoom',l,inQuad,nil)
					me(165.5,1.5,100,0,'zoom',l,inQuad,nil)

					me(167,1,50,100,'flip',l,outBack,nil)
					me(167,1,200,100,'zoom',l,inQuad,nil)
					SpawnPlayers(167,3,3,'spawn',true)
					me(168,0.5,100,0,'flip',l,outExpo,nil)

					m(168, 4, '*-1 no bumpy', l, nil)
					mod_bounce(168,1,100,0,'zoom','Expo',false,1)
					mod_bounce(171.5,1.5,100,0,'zoom','Expo',false,1)
					mod_bounce(176,1,100,0,'zoom','Expo',false,1)
					mod_bounce(178,1,100,0,'zoom','Expo',false,1)
					mod_bounce(184,1,100,0,'zoom','Expo',false,1)
					mod_bounce(187.5,1.5,100,0,'zoom','Expo',false,1)

					me(169,1,0,40,'reverse',l,inOutBack,nil,1.5)
					me(169,1,r(360),0,'confusionoffset',l,inOutBack,nil)
					switcheroo_add(170.25,'invert',6,0.5,nil,1)
					switcheroo_add(170.75,'flip',6,0.5,nil,1)
					switcheroo_add(171,'normal',6,0.5,nil,1)
					me(172,1,40,0,'reverse',l,outExpo,nil)
					me(173,1,0,40,'reverse',l,inOutBack,nil)
					me(173,1,r(360),0,'confusionoffset',l,inOutBack,nil)
					me(174,1,40,0,'reverse',l,outExpo,nil)

					mod_bounce(177.25,0.25,0,400,'tipsy','Circ',false,bil)
					bouncy_wiggle(177.25,0.75,0.25,0,400,'tipsy',l,'Circ',false,nil,-200)

					mod_sugar(179.25,0.75,0.25,nil)
					me(183,1,1000,100,'zoom',l,outExpo,nil)
					me(183,2,-1000,0,'tiny',l,outExpo,nil)

					me(185,1,0,40,'reverse',l,inOutBack,nil,1.5)
					switcheroo_add(186.25,'invert',6,0.5,nil,1)
					switcheroo_add(186.75,'flip',6,0.5,nil,1)
					switcheroo_add(187,'normal',6,0.5,nil,1)

					me(185,1,0,40,'reverse',l,inOutBack,nil,1.5)
					me(185,1,-r(360),0,'confusionoffset',l,inOutBack,nil)
					me(188,1,40,0,'reverse',l,outExpo,nil)

					m(196, 4, '*-1 1x', l, nil)
					local c9_ZoomController = {
						{168,1,1,{scx-150,scy}},
						{168.5,1,1,{scx+150,scy}},

						{171.5,1,-1,{scx,scy+100}},
						{172,1,1,{scx+150,scy}},
						{172.5,1,1,{scx-150,scy}},

						{176,1,1,{scx+150,scy-100}},
						{176.5,1,1,{scx-150,scy+100}},

						{178,1,1,{scx-150,scy-100}},
						{178.5,1,1,{scx+150,scy+100}},

						{184,1,-1,{scx+150,scy}},
						{184.5,1,-1,{scx-150,scy}},

						{187.5,1,1,{scx,scy-50}},
						{188,1,-1,{scx-200,scy}},
						{188.5,1,-1,{scx+200,scy}},
					}

					for pn = 2,3 do m(168,189,'*-1 no stealth,*-1 no sudden',e,pn) end

					mod_sugar(183,1,0.167,1,{85,50})

					bouncy_wiggle(180,3,0.75,0,200,'cubicx',l,'Circ',false,1)
					bouncy_wiggle(180,3,0.75,0,-40,'rotationy',l,'Circ',false,1)
					bouncy_wiggle(180,3,0.75,0,75,'skewx',l,'Circ',false,1)
					bouncy_wiggle(180,3,0.75,0,-75,'noteskew',l,'Circ',false,1)
					bouncy_wiggle(180,3,0.75,0,-200,'movex',l,'Circ',false,1)

					mod_bounce(189,1,0,150,'distant','Circ',false,1)
					mod_sugar(189,1,0.125/2,1,{85,50})


					SpawnPlayers(190,3,3,'despawn',true)
					mm(190,function(self)
						local a = Plr(2)
						if a then
							a:zoom(1)
							a:rotationz(0)
							a:xy(scx,scy)
						end
					end,true)

					for i = 0,55 do
						me(200+i,1,200,100,'zoom',l,outExpo,nil)
					end

					m(200-0.5,256-0.5,'*-1 -200 beat',e,1)
					m(200-0.5,256-0.5,'*-1 200 beat',e,2)
					mm(199,function(self)
						local f = 1
						for pn = 1,2 do
							local a = Plr(pn)
							if a then
								a:tween(GetSecondsPerBeat(),'inBack(%f,0,1,1)')
								a:zoom(0)
							end
						end
						for i = 1,table.getn(c9_playerproxies) do
							local proxy = c9_playerproxies[i]
							local a = Plr(normalize(f,-1,1,1,2))
							if a then
								proxy:SetTarget(a:GetChild('NoteField'))
								proxy:hidden(1)
							end
							f=-f
						end
					end,true)

					local p = 1
					local f = 1
					for i = 0,54,1 do
						local fuck = i
						mm(199+i+0.5,function(self)
							if p >= table.getn(c9_playerproxies) then p = 1 end
							local proxy = c9_playerproxies[p]
							if proxy then
								local xrand = math.random(-sw/4,sw/4)
								proxy:hidden(0)
								proxy:finishtweening()
								proxy:rotationz((fuck*2)*f)
								proxy:rotationy(xrand/8)
								proxy:xy(xrand,normalize(f,-1,1,scy-sh*1.5,scy+sh/2))
								proxy:tween(GetSecondsPerBeat()*2,'outInQuad(%f,0,1,1)')
								proxy:y(normalize(-f,-1,1,(scy-sh*1.5)-50,(scy+sh/2)+50))
								proxy:rotationz((-fuck*2)*f)
							end
							p=p+1
							f=-f
						end)
					end

					me(192,4,360*4,0,'rotationz',l,inQuad,nil,0.2)
					me(192,4,r(360*4),0,'confusionoffset',l,inQuad,nil,0.2)
					me(192,4,0,-2000,'tiny',l,inOutSine,nil)
					me(192,4,0,50,'reverse',l,inOutSine,nil)

					me(196,1,50,0,'reverse',l,outExpo,nil)
					me(196,1,-2000,0,'tiny',l,outExpo,nil)

					mod_quickswaps(196,1,'invert',4,0.5,nil)
					switcheroo_add(197,'flip',4,0.5,nil,1)
					switcheroo_add(197.5,'ludr',8,0.25,nil,1)
					switcheroo_add(197.75,'urld',8,0.25,nil,1)
					switcheroo_add(198,'invert',4,0.5,nil,1)
					switcheroo_add(198.5,'normal',4,0.5,nil,1)

					m(200,64,'*-1 wave',l,nil)

					mod_bounce(200,1,0,50,'tornadoz','Circ',false,nil)
					mod_bounce(200,1,0,200,'tipsy','Circ',false,nil)
					mod_bounce(202,1,0,-50,'tornadoz','Circ',false,nil)
					mod_bounce(202,1,0,-200,'tipsy','Circ',false,nil)

					--mod_bounce(203,4,2,1,'xmod','Circ',false,nil)
					me(204,4,-r(360*4),0,'confusionoffset',l,inOutCirc,nil)

					mod_bounce(208,1,0,-200,'drunk','Circ',false,nil)
					mod_bounce(209,1,0,200,'drunk','Circ',false,nil)

					me(211.5,1,-200,0,'tiny',l,outQuad,nil)
					me(212.5,1,-100,0,'tiny',l,outQuad,nil)
					me(213,1,-200,0,'tiny',l,outQuad,nil)

					me(214,1,0,100,'flip',l,outExpo,nil)
					me(215,1,100,0,'flip',l,outExpo,nil) me(215,1,0,100,'invert',l,outExpo,nil)
					me(216,1,100,0,'invert',l,outExpo,nil)

					mod_bounce(216,1,0,50,'tornadoz','Circ',false,nil)
					mod_bounce(216,1,0,200,'tipsy','Circ',false,nil)
					mod_bounce(218,1,0,-50,'tornadoz','Circ',false,nil)
					mod_bounce(218,1,0,-200,'tipsy','Circ',false,nil)

					--mod_bounce(219,4,2,1,'xmod','Circ',false,nil)
					me(220,4,r(360*4),0,'confusionoffset',l,inOutCirc,nil)

					mod_bounce(225,1,0,-200,'drunk','Circ',false,nil)
					mod_bounce(226.5,1,0,200,'drunk','Circ',false,nil)
					bouncy_wiggle(228,2,0.5,0,100,'tipsy',l,'Quad',false,nil)
					bouncy_wiggle(238,2,0.5,0,100,'movez',l,'Circ',false,nil)

					mod_bounce(246,1,0,-50,'distant','Circ',false,nil)
					mod_bounce(247,1,0,50,'distant','Circ',false,nil)

					me(230,1,r(360*2),0,'confusionoffset',l,outCirc,nil)
					local f = 1
					for i = 0,4.5,1.5 do
						mod_bounce(232+i,1.5,0,-25*f,'skewx','Circ',false,nil)
						f=-f
					end

					local f = 1
					for i = 0,3.5,1.5 do
						mod_bounce(240+i,1.5,0,-25*f,'skewx','Circ',false,nil)
						f=-f
					end

					bouncy_wiggle(232,6,1.5,0,100,'invert',l,'Quad',true,nil)
					bouncy_wiggle(232,6,1.5,0,-1000,'tinyz',l,'Quad',true,nil)

					bouncy_wiggle(240,5,1.5,0,100,'invert',l,'Quad',true,nil)
					bouncy_wiggle(232,6,1.5,0,-1000,'tinyz',l,'Quad',true,nil)

					me(244,2,r(360*4),0,'confusionoffset',l,inOutCirc,nil)

					me(248,7,0,45,'rotationx',l,inOutSine,1)
					me(248,7,0,r(45),'confusionxoffset',l,inOutSine,1)
					me(248,7,0,-45,'rotationx',l,inOutSine,2)
					me(248,7,0,r(-45),'confusionxoffset',l,inOutSine,2)

					m(255,1,'*-1 no rotationx,*-1 no confusionxoffset',l,nil)
					mm(255,function(self)
						for pn = 1,2 do
							local a = Plr(pn)
							if a then
								a:tween(GetSecondsPerBeat(),'outBack(%f,0,1,1)')
								a:zoom(1)
							end
						end
					end,true)

					mm(256,function(self)
						for i = 1,table.getn(c9_playerproxies) do
							local proxy = c9_playerproxies[i]
							if proxy then
								proxy:hidden(1)
							end
						end
					end,true)

					me(256,0.5,0,100,'mini',l,outBack,nil,1.5)
					me(256,0.5,0,30,'reverse',l,outBack,nil,1.5)
					mod_quickswaps(256.5,2,'invert',10,0.5,nil)
					me(256.5,0.5,100,0,'bumpyx',l,outExpo,nil)
					me(257,0.5,1000,0,'bumpyx',l,outExpo,nil)
					me(257.5,0.5,1000,0,'bumpyx',l,outExpo,nil)
					me(256.5,0.5,500,0,'movez',l,outExpo,nil)
					me(257,0.5,500,0,'movez',l,outExpo,nil)
					me(257.5,0.5,500,0,'movez',l,outExpo,nil)

					me(257.5,0.5,r(360*2),0,'confusionoffset',l,linear,nil,0.1)
					me(257.25,0.5,100,150,'mini',l,outExpo,nil)
					me(257.5,0.5,150,0,'mini',l,inExpo,nil,0.2)
					me(257.5,0.5,30,0,'reverse',l,inExpo,nil,0.2)
					me(257.5,.5,360,0,'rotationz',l,inExpo,nil)

					mod_bounce(258,1,0,-100,'mini','Circ',false,nil)
					me(258,1,-4000,0,'tiny',l,outExpo,nil)
					me(258,2,-400,0,'tipsy',l,outExpo,nil)
					me(258,2,-400,0,'drunk',l,outExpo,nil)
					me(258,1,50,0,'stealth',l,outSine,nil)
					me(258,1,360,0,'rotationz',l,outExpo,nil)
					me(258,3,0.5,2,'xmod',l,inSine,nil)
					mod_bounce(259,1,0,50,'mini','Circ',false,nil)

					m(260,4,'*-1 400 bumpyxperiod,*-1 no movex,*-1 500 zoomz',l,nil)
					bouncy_wiggle(260,2,0.5,0,30,'cubicz',l,'Circ',false,nil,30)
					--bouncy_wiggle(260,2,0.5,0,-50,'drunk',l,'Circ',false,nil,-50)
					bouncy_wiggle(260,2,0.5,75,100,'zoom',l,'Expo',false,nil,10)
					bouncy_wiggle(260,2,0.5,0,r(5),'confusionoffset',l,'Circ',false,nil,r(5))
					bouncy_wiggle(260,2,0.5,0,50,'drunkz',l,'Circ',false,nil,50)
					mod_sugar(260,0.125*2,0.125,nil,{85,50})
					mod_sugar(260.5,0.125*3,0.125,nil,{85,50})

					local a = 0
					for i = 0,2,0.5 do
						m(260+i,1,'*4 '..a..' reverse',l,nil)
						a=a+(100/5)
					end

					mod_bounce(262,1,100,150,'zoom','Circ',false,nil)
					mod_bounce(262,1,2,1.75,'xmod','Circ',false,nil)
					mod_bounce(262,1,0,50,'tornado','Circ',false,nil)
					mod_bounce(262,1,0,-50,'flip','Circ',false,nil)
					mod_bounce(262,1,0,-40,'rotationx','Circ',false,nil)
					--me(263,1,360,0,'rotationz',l,outQuad,nil,0.2)
					m(263,2,'*-1 no reverse,*-1 100 zoom',l,nil)

					mm(263,function(self)
						for pn = 1,2 do
							local a = Plr(pn)
							if a then
								a:x(scx*(pn-0.5))
							end
						end
					end)

					local fuck_you = {
						{259.000,0,1},
						{259.083,0,1},
						{259.167,0,1},
						{259.250,0,1},
						{259.500,0,1},
						{259.750,0,1},
						--{260.000,0,1},
					}

					local f = 1
					local c = 2
					for i = 1,table.getn(fuck_you) do
						local beat = fuck_you[i][1]
						local s = {'normal','invert','flip'}
						if c > table.getn(s) or beat == 260 then
							c = 1
						end
						switcheroo_add(beat,s[c],-1,0.25,nil,1)
						local string = '*-1 '.. 
						200*(beat-260)*f ..' movex,*-1 '.. 
						100*(beat-260)*f ..' bumpy'
						m(beat,0.5,string,l,nil)
						f=-f
						c=c+1
					end





					me(7+(263-7),1,200,0,'mini',l,inQuad,nil,0.2)
					mod_sugar(7+(263-7),1,0.125,nil,{85,50})
					mod_bounce(8+(263-7),0.5,0,100,'mini','Circ',false,nil)
					mod_bounce(8+(263-7),0.5,0,-10,'rotationz','Circ',false,nil)

					me(8.5+(263-7),1,-1000,0,'tiny',l,outExpo,nil)
					me(8.5+(263-7),1,5000,0,'drunk',l,outExpo,nil)
					me(8.5+(263-7),1,5000,0,'tipsy',l,outExpo,nil)

					me(9.25+(263-7),1,-1000,0,'tiny',l,outExpo,nil)
					me(9.25+(263-7),1,-5000,0,'drunk',l,outExpo,nil)
					me(9.25+(263-7),1,-5000,0,'tipsy',l,outExpo,nil)

					me(10+(263-7),1,-1000,0,'tiny',l,outExpo,nil)
					me(10+(263-7),1,5000,0,'drunk',l,outExpo,nil)
					me(10+(263-7),1,5000,0,'tipsy',l,outExpo,nil)

					m(266, 4, '*-1 4000 drunkspeed,*-1 100 drunkperiod,*-1 100 gayholds', l, nil)
					m(272, 4, '*-1 no drunkspeed,*-1 no drunkperiod', l, nil)
					mod_bounce(10+(263-7),4,-200,200,'bumpyxperiod','Circ',false,nil)
					mod_bounce(10+(263-7),4,0,50,'bumpyx','Circ',false,nil)
					mod_bounce(10+(263-7),4,0,50,'drunk','Expo',false,nil)
					mod_bounce(10+(263-7),4,0,-20,'rotationz','Expo',false,nil)
					mod_bounce(10+(263-7),4,0,-40,'rotationx','Expo',false,nil)
					mod_bounce(10+(263-7),4,0,100,'flip','Expo',false,nil)
					mod_bounce(10+(263-7),4,1,2,'xmod','Quad',false,nil)
					mm(10+(263-7),function(self)
						for pn = 1,2 do
							local a = Plr(pn)
							if a then
								a:tween(GetSecondsPerBeat(),'outExpo(%f,0,1,1)')
								a:x(scx)
							end
						end
					end)

					me(13.5+(263-7),0.5,r(360),0,'confusionoffset',l,linear,nil,0.2)
					me(14+(263-7),1,600,100,'zoomx',l,outExpo,nil)
					me(14+(263-7),1,-1000,0,'tiny',l,outExpo,nil)

					mm(14+(263-7),function(self)
						for pn = 1,2 do
							local a = Plr(pn)
							if a then
								a:tween(GetSecondsPerBeat(),'outExpo(%f,0,1,1)')
								a:x(scx*(pn-0.5))
							end
						end
					end)

					local pn,col = 1,0
					for i = 0,1.75,0.25 do
						if col == 4 then col = 0 pn = 2 end
						me(14+(263-7)+i,1,0,100,'reverse'..col,l,outExpo,pn,7-i)
						col = col + 1
					end

					mod_bounce(14+(263-7),2.5,0,2,'xmod','Circ',false,nil)

					m(15.5+(263-7), 1, '*2 invert', l, nil)
					me(15.5+(263-7),0.5,200,0,function(t) mod_do('*-1 '.. t*c9_flicker .. ' movex',nil) end,l,linear,nil)

					me(16.5+(263-7),1,-1000,0,'tiny',l,outExpo,nil)
					me(16.5+(263-7),1,5000,0,'drunk',l,outExpo,nil)
					me(16.5+(263-7),1,5000,0,'tipsy',l,outExpo,nil)

					me(17.25+(263-7),1,-1000,0,'tiny',l,outExpo,nil)
					me(17.25+(263-7),1,-5000,0,'drunk',l,outExpo,nil)
					me(17.25+(263-7),1,-5000,0,'tipsy',l,outExpo,nil)

					mm(18+(263-7),function(self)
						for pn = 1,2 do
							local a = Plr(pn)
							if a then
								a:tween(GetSecondsPerBeat(),'outExpo(%f,0,1,1)')
								a:x(scx)
							end
						end
					end,true)
					mod_bounce(18+(263-7),4,1,2,'xmod','Quad',false,nil)
					me(18+(263-7),1,-1000,0,'tiny',l,outExpo,nil)
					me(18+(263-7),1,5000,0,'drunk',l,outExpo,nil)
					me(18+(263-7),1,5000,0,'tipsy',l,outExpo,nil)

					m(274, 4, '*-1 4000 drunkyspeed,*-1 100 drunkyperiod,*-1 0 gayholds,*-1 -100 spiralholds', l, nil)
					mod_bounce(18+(263-7),4,0,50,'drunky','Expo',false,nil)
					mod_bounce(18+(263-7),4,0,50,'bumpyx','Circ',false,nil)
					mod_bounce(18+(263-7),4,-200,200,'bumpyxperiod','Circ',false,nil)
					mod_bounce(18+(263-7),4,0,60,'rotationx','Circ',false,nil)
					mod_bounce(18+(263-7),4,0,r(60),'confusionxoffset','Circ',false,nil)
					mod_bounce(18+(263-7),4,0,10,'rotationz','Circ',false,nil)
					mod_bounce(18+(263-7),4,0,100,'flip','Expo',false,nil)
					mod_bounce(18+(263-7),4,0,-100,'tornado','Expo',false,nil)

					me(20+(263-7),1,1000,0,'drunk',l,outExpo,nil)

					for col = 0,3 do
						m(22+(263-7), 1, '*-1 no reverse'..col, l, nil)
					end

					me(21.5+(263-7),0.5,r(360),0,'confusionoffset',l,linear,nil,0.2)
					me(22+(263-7),0.75,100,(100/3)*2,'reverse',l,outExpo,nil)
					me(22.75+(263-7),0.75,(100/3)*2,(100/3)*1,'reverse',l,outExpo,nil)
					me(23.5+(263-7),0.75,(100/3)*1,0,'reverse',l,outExpo,nil)

					m(22+(263-7), 2, '*-1 400 bumpyperiod', l, nil)

					me(22+(263-7),0.75,-500,0,'bumpy',l,outExpo,nil)
					me(22.5+(263-7),0.5,400,0,'drunk',l,outExpo,nil)
					me(22.75+(263-7),0.75,500,0,'bumpy',l,outExpo,nil)
					me(23.25+(263-7),0.5,-400,0,'drunk',l,outExpo,nil)
					me(23.5+(263-7),0.75,-500,0,'bumpy',l,outExpo,nil)

					me(22+(263-7),0.75,-1000,0,'tiny',l,outExpo,nil)
					me(22.75+(263-7),0.75,-1000,0,'tiny',l,outExpo,nil)
					me(23.5+(263-7),0.75,-1000,0,'tiny',l,outExpo,nil)

					mod_bounce(22+(263-7),0.75,0,-100,'mini','Circ',false,nil)
					mod_bounce(22.75+(263-7),0.75,0,-50,'mini','Circ',false,nil)
					mod_bounce(23.5+(263-7),0.5,0,50,'mini','Circ',false,nil)

					mod_bounce(22+(263-7),0.75,0,10,'rotationz','Circ',false,nil)
					mod_bounce(22.75+(263-7),0.75,0,-10,'rotationz','Circ',false,nil)
					mod_bounce(23.5+(263-7),0.5,0,10,'rotationz','Circ',false,nil)

					--m(24-0.5, 8, '*-1 100 beatz,*-1 400 beatzperiod', l, nil)
					--ease_wiggle(24,6,100,0.75,'invert',outExpo,l,nil,true)

					
					mm(24+(263-7),function(self)
						for pn = 1,2 do
							local a = Plr(pn)
							if a then
								a:tween(GetSecondsPerBeat()*1,'outExpo(%f,0,1,1)')
								a:x(scx*(pn-0.5))
							end
						end
					end,false)

					local f = 1
					for i = 0,7 do
						me(24+(263-7)+i,1,-200,0,'mini',l,outExpo,nil)
						me(24+(263-7)+i,1,400*f,0,'drunk',l,outExpo,nil)
						me(24+(263-7)+i,1,0.5,2,'xmod',l,outSine,nil)
						f=-f
					end

					local f = 1
					for i = 0,6,0.75 do
						me(24+(263-7)+i,0.5,200*f,0,'tipsy',l,outSine,nil)
						f=-f
					end

					mod_bounce(26+(263-7),1,0,-300,'wave','Circ',false,nil)
					mod_bounce(26+(263-7),1,0,200,'parabolaz','Circ',false,nil)
					mod_bounce(26+(263-7),1,0,100,'distant','Circ',false,nil)

					bouncy_wiggle(30+(263-7),2,1,0,-10,'rotationz',l,'Circ',false,nil)

					mm(31+(263-7),function(self)
						for pn = 1,2 do
							local a = Plr(pn)
							if a then
								a:tween(GetSecondsPerBeat()*1,'inCirc(%f,0,1,1)')
								a:x(scx)
							end
						end
					end,false)
					me(31+(263-7),1,0,100,'reverse',l,inCirc,nil,4)
					me(31+(263-7),1,0,-30,'rotationx',l,inCirc,nil,4)
					me(31+(263-7),1,0,r(-30),'confusionxoffset',l,inCirc,nil,4)
					me(32+(263-7),1,200,0,'tiny',l,outExpo,nil)
					m(32.5+(263-7), 0.5, '*10 invert', l, nil)
					m(33+(263-7), 0.5, '*10 no invert', l, nil)
					me(33+(263-7),1,-400,0,'tiny',l,outExpo,nil)

					me(34+(263-7),2,-30+360,-180,'rotationx',l,inOutSine,nil)
					me(34+(263-7),2,r(-30+360),-r(180),'confusionxoffset',l,inOutSine,nil)

					me(34.5+(263-7),1,-1000,0,'tiny',l,outExpo,nil)

					mod_bounce(33+(263-7),1,0,100,'mini','Circ',false,nil)
					mod_bounce(33+(263-7),1,0,100,'parabolaz','Circ',false,nil)

					m(36+(263-7), 1, '*-1 no reverse,*-1 no rotationx,*-1 no confusionxoffset', l, nil)
					mod_quickswaps(36+(263-7),1,'invert',4,0.5,nil)
					switcheroo_add(37+(263-7),'flip',4,0.5,nil,1)
					switcheroo_add(37.5+(263-7),'ludr',8,0.25,nil,1)
					switcheroo_add(37.75+(263-7),'urld',8,0.25,nil,1)
					switcheroo_add(38+(263-7),'invert',4,0.5,nil,1)
					switcheroo_add(38.5+(263-7),'normal',4,0.5,nil,1)

					me(38+(263-7),2,360*2,0,'rotationz',l,inQuad,nil,0.2)
					me(38+(263-7),2,r(360*2),0,'confusionoffset',l,inQuad,nil,0.2)

					me(39+(263-7),1,-1000,0,'tiny',l,outCirc,nil)
					me(39+(263-7),1,200,100,'zoomx',l,outCirc,nil)


					me(295,1,0,-5000,'tiny',l,inQuad,nil,99)
					me(295,1,0,100,'dark',l,inQuad,nil,99)






					-- bg
					c9_polygrid_color = {0,255,255}
					mm(189,function()
						for pn = 1,2 do
							local a = Plr(pn)
							if a then
								for col = 0,3 do
									a:SetNumStealthGradientPoints(col,1)
									a:SetStealthGradientPoint(0,col,0)
									a:SetStealthGradientColor(0,col,c9_polygrid_color[1],c9_polygrid_color[2],c9_polygrid_color[3],1)
								end
							end
						end
					end)

					mm(190,function()
						for pn = 1,2 do
							local a = Plr(pn)
							if a then
								for col = 0,3 do
									a:SetNumStealthGradientPoints(col,0)
								end
							end
						end
					end)

					local color = c9_polygrid_color
					for i = 0,6,1 do
						local b = i
						local cur_square1 = (math.random(0,(c9_polygrid_size^2)-1))*4
						local cur_square2 = (math.random(0,(c9_polygrid_size^2)-1))*4
						local rand = math.random(50,100)
						me(7+i/8,2,1,0,function(t)
							for c = 0,3 do
								c9_polygrid:SetVertexColor(cur_square1+c,(color[1]/255)*(rand/100),(color[2]/255)*(rand/100),(color[3]/255)*(rand/100),t)
								c9_polygrid:SetVertexColor(cur_square2+c,(color[1]/255)*(rand/100),(color[2]/255)*(rand/100),(color[3]/255)*(rand/100),t)
							end
						end,l,outExpo,nil)

						me(44+i/8,2,1,0,function(t)
							for c = 0,3 do
								c9_polygrid:SetVertexColor(cur_square1+c,(color[1]/255)*(rand/100),(color[2]/255)*(rand/100),(color[3]/255)*(rand/100),t)
								c9_polygrid:SetVertexColor(cur_square2+c,(color[1]/255)*(rand/100),(color[2]/255)*(rand/100),(color[3]/255)*(rand/100),t)
							end
						end,l,outExpo,nil)

						me(60+i/8,2,1,0,function(t)
							for c = 0,3 do
								c9_polygrid:SetVertexColor(cur_square1+c,(color[1]/255)*(rand/100),(color[2]/255)*(rand/100),(color[3]/255)*(rand/100),t)
								c9_polygrid:SetVertexColor(cur_square2+c,(color[1]/255)*(rand/100),(color[2]/255)*(rand/100),(color[3]/255)*(rand/100),t)
							end
						end,l,outExpo,nil)

						me(76+i/8,2,1,0,function(t)
							for c = 0,3 do
								c9_polygrid:SetVertexColor(cur_square1+c,(color[1]/255)*(rand/100),(color[2]/255)*(rand/100),(color[3]/255)*(rand/100),t)
								c9_polygrid:SetVertexColor(cur_square2+c,(color[1]/255)*(rand/100),(color[2]/255)*(rand/100),(color[3]/255)*(rand/100),t)
							end
						end,l,outExpo,nil)

						me(92+i/8,2,1,0,function(t)
							for c = 0,3 do
								c9_polygrid:SetVertexColor(cur_square1+c,(color[1]/255)*(rand/100),(color[2]/255)*(rand/100),(color[3]/255)*(rand/100),t)
								c9_polygrid:SetVertexColor(cur_square2+c,(color[1]/255)*(rand/100),(color[2]/255)*(rand/100),(color[3]/255)*(rand/100),t)
							end
						end,l,outExpo,nil)
					end

					mm(4,function()
						c9_itg:tween(GetSecondsPerBeat()*3,'inExpo(%f,0,1,1)')
						c9_itg:diffusealpha(0)
						c9_itg:zoom(0)
						c9_itg:rotationz(-20)
					end)
					mm(9,function()
						c9_itg:diffusealpha(0)
						c9_itg:zoom(0)
						c9_itg:rotationz(-20)
					end,true)


					mm(7,function()
						c9_woah:hidden(0)
						c9_woah_frame:hidden(0)
						c9_dither_frame:hidden(0)
					end,true)


					mm(40,function()
						c9_polygrid:SetPolygonMode(1)
						c9_polygrid:SetLineWidth(6)
					end,true)

					mm(71,function()
						c9_polygrid:SetLineWidth(14)
						c9_polygrid:SetPolygonMode(0)
					end,false)

					me(71,2,-4,-0.15,function(t)
						c9_woah:GetShader():uniform1f('amt',t)
					end,l,outExpo,nil)
					me(71,2,1,0,function(t)
						for i = 0,(c9_polygrid_size^2)-1 do
							local cur_square = (i*4)
							for c = 0,3 do
								c9_polygrid:SetVertexColor(cur_square+c,(16/255),1,(225/255),t)
							end
						end
					end,l,outExpo,nil)

					mm(74,function()
						c9_polygrid:SetLineWidth(6)
						c9_polygrid:SetPolygonMode(1)
					end,false)
					
					mm(199,function()
						c9_polygrid:SetLineWidth(14)
						c9_polygrid:SetPolygonMode(0)
					end,false)

					me(199,2,-4,-0.15,function(t)
						c9_woah:GetShader():uniform1f('amt',t)
					end,l,outExpo,nil)
					me(199,2,1,0,function(t)
						for i = 0,(c9_polygrid_size^2)-1 do
							local cur_square = (i*4)
							for c = 0,3 do
								c9_polygrid:SetVertexColor(cur_square+c,(16/255),1,(225/255),t)
							end
						end
					end,l,outExpo,nil)

					mm(202,function()
						c9_polygrid:SetLineWidth(6)
						c9_polygrid:SetPolygonMode(1)
					end,false)


					mm(104,function()
						c9_polygrid:hidden(1)
						c9_woah_frame:hidden(1)
						c9_woah:hidden(1)
						c9_dither_frame:hidden(1)

						c9_firefly_frame:hidden(0)
						c9_firefly:hidden(0)
						c9_firefly:diffusealpha(0)
						c9_firefly:linear(2)
						c9_firefly:diffusealpha(1)
					end,true)

					mm(136,function()
						c9_gradient:hidden(0)
						c9_gradient:diffusealpha(0)
						c9_gradient:linear(GetSecondsPerBeat()*16)
						c9_gradient:diffusealpha(1)
					end)

					mm(164,function()
						c9_gradient:hidden(0)
						c9_gradient:linear(GetSecondsPerBeat()*4)
						c9_gradient:diffusealpha(0)
					end)

					
					mm(255,function()
						
						--taro test
						c9_firefly:linear(GetSecondsPerBeat()*1)
						c9_firefly:diffusealpha(0)
						--c9_firefly:hidden(1)
						
					end)
					
					
					
					
					
					
					--------------------------------------
					--taro
					
					local m2 = mm --this is absolutely necessary
					local function mpf(s,e,f)
						table.insert(mods_taro_perframe,{s,e,f})
					end
					
					spb = 60/153
					
					
					
					
					c9_ligma = {}
					
					function c9_make_ligma(obj)
						
						obj:zoom( .8+math.random()*.4 )
						obj:xyz( -scx + math.random()*sw*2, -scy + math.random()*sh*2, 100-math.random()*1000 )
						
						table.insert(c9_ligma,obj)
						
					end
					
					m2(0,function()
						c9_ligma_scroll:z(1000)
						c9_ligma_alpha:x(0)
					end)
					
					c9_ligma_fade_rangex = 50
					c9_ligma_fade_rangey = 50
					c9_ligma_fade_rangez = 200
					
					function c9_update_ligma(beat,deltatime)
						
						for i=1,table.getn(c9_ligma) do
							local a = c9_ligma[i]
							if a and c9_ligma_alpha:GetX() > 0 then
							
								a:hidden(0)
								a:blend('add')
								
								a:addx(c9_ligma_scroll:GetX()*deltatime)
								a:addy(c9_ligma_scroll:GetY()*deltatime)
								a:addz(c9_ligma_scroll:GetZ()*deltatime)
								
								local alp = 1
								
								if math.abs(a:GetX()-sw*-1) < c9_ligma_fade_rangex then
									alp = alp*(math.abs(a:GetX()-sw*-1))/c9_ligma_fade_rangex
								end
								if math.abs(a:GetX()-sw*1.5) < c9_ligma_fade_rangex then
									alp = alp*(math.abs(a:GetX()-sw*1.5))/c9_ligma_fade_rangex
								end
								if math.abs(a:GetY()-sh*-.5) < c9_ligma_fade_rangey then
									alp = alp*(math.abs(a:GetY()-sh*-.5))/c9_ligma_fade_rangey
								end
								if math.abs(a:GetY()-sh*1.5) < c9_ligma_fade_rangey then
									alp = alp*(math.abs(a:GetY()-sh*1.5))/c9_ligma_fade_rangey
								end
								if math.abs(a:GetZ()-100) < c9_ligma_fade_rangez then
									alp = alp*(math.abs(a:GetZ()-100))/c9_ligma_fade_rangez
								end
								if math.abs(a:GetZ()-(-900)) < c9_ligma_fade_rangez then
									alp = alp*(math.abs(a:GetZ()-(-900)))/c9_ligma_fade_rangez
								end
								
								a:diffusealpha( .6*alp*c9_ligma_alpha:GetX() )
								
								if a:GetX() < sw*-1 then
									a:addx( sw*2 )
								elseif a:GetX() > sw*1.5 then
									a:addx( -sw*2 )
								end
								if a:GetY() < sh*-.5 then
									a:addy( sh*2 )
								elseif a:GetY() > sh*1.5 then
									a:addy( -sh*2 )
								end
								if a:GetZ() > 100 then
									a:addz( -1000 )
								elseif a:GetZ() < -900 then
									a:addz( 1000 )
								end
								
							end
						end
						
						if c9_ligma_alpha:GetX() <= 0 then
							c9_ligma_frame:hidden(1)
						else
							c9_ligma_frame:hidden(0)
						end
						
					end
					
					
					
					m2(10,function()
						
						c9_taro_quad:diffuse(.5,.5,.5,1)
						c9_taro_quad:linear(spb)
						c9_taro_quad:diffusealpha(1)
						c9_taro_quad:tween(spb*4,'inQuart(%f,0,1,1)')
						c9_taro_quad:diffusealpha(0)
						
						c9_kiyo1:linear(spb)
						c9_kiyo1:diffusealpha(1)
						c9_kiyo1:tween(spb*4,'inQuart(%f,0,1,1)')
						c9_kiyo1:diffusealpha(0)
						
						c9_ligma_scroll:z(-1200)
						c9_ligma_alpha:x(0)
						c9_ligma_alpha:linear(spb)
						c9_ligma_alpha:x(1)
						c9_ligma_alpha:tween(spb*4,'inQuart(%f,0,1,1)')
						c9_ligma_alpha:x(0)
						
					end)
					
					m2(18,function()
						
						c9_taro_quad:diffuse(.5,.5,.5,1)
						c9_taro_quad:linear(spb)
						c9_taro_quad:diffusealpha(1)
						c9_taro_quad:tween(spb*4,'inQuart(%f,0,1,1)')
						c9_taro_quad:diffusealpha(0)
						
						c9_kiyo2:linear(spb)
						c9_kiyo2:diffusealpha(1)
						c9_kiyo2:tween(spb*4,'inQuart(%f,0,1,1)')
						c9_kiyo2:diffusealpha(0)
						
						c9_ligma_scroll:z(1200)
						c9_ligma_alpha:x(0)
						c9_ligma_alpha:linear(spb)
						c9_ligma_alpha:x(1)
						c9_ligma_alpha:tween(spb*4,'inQuart(%f,0,1,1)')
						c9_ligma_alpha:x(0)
						
					end)
					
					m2(24,function()
						
						char_kiyo:xy(scx,scy)
						char_kiyo:basezoomx(.75)
						char_kiyo:basezoomy(.75)
						char_kiyo:playcommand('Idle')
						char_kiyo:playcommand('Spawn')
						
					end)
					
					m2(32-.4,function()
					
						taro_Sound('spell')
						
					end)
					
					m2(32-.1,function()
					
						char_kiyo:playcommand('Cast')
						
					end)
					
					m2(36,function()
					
						char_kiyo:playcommand('Hide')
						
					end)

					m2(34,function()
						
						--[[
						for i=0,63 do
							local x = math.mod(i,8)
							local y = math.floor(i/8)
							set_tile_size(c9_taro_polygon1,x,y,.98)
						end
						]]
						
						--[[
						for i=0,7 do
						set_tile_size(c9_taro_polygon1,3,i,.98)
						set_tile_size(c9_taro_polygon2,4,i,.98)
						set_tile_size(c9_taro_polygon3,5,i,.98)
						end
						]]
						
					end)
					
					c9_sky_z = 0
					
					
					
					function c9_doSky(b,which,revx,revy,spd)
						if not spd then spd = 1 end
						
						--unhide new sky and set depth higher than previous ones
						m2(b-.1,function()
							c9_sky_z = c9_sky_z+0.01
							if b > 180 then
								_G['c9_taro_polygon'..which]:stoptweening()
							else
								_G['c9_taro_polygon'..which]:finishtweening()
							end
							_G['c9_taro_polygon'..which]:hidden(0)
							_G['c9_taro_polygon'..which]:diffusealpha(1)
							if b >= 180 then
								_G['c9_taro_polygon'..which]:diffuse(.4,.4,.4,1)
							end
							_G['c9_taro_polygon'..which]:z(c9_sky_z)
							for i=0,63 do
								local x = math.mod(i,8)
								local y = math.floor(i/8)
								set_tile_size(_G['c9_taro_polygon'..which],x,y,0)
							end
							if b > 180 and b < 250 then
								_G['c9_taro_polygon'..which]:sleep(spb*3.9/spd)
								_G['c9_taro_polygon'..which]:queuecommand('Hide')
							end
							
						end)
						--tween the panels
						mpf(b,b+3/spd,function(beat)
							
							--Trace('doing sky '..which)
							
							local a = _G['c9_taro_polygon'..which]
							for i=0,7 do
								for j=0,i do
									if beat >= b+i*0.25/spd and beat < b+1/spd+i*0.25/spd then
										local x1,x2,y1,y2 = j,j,i,i
										if revx then x1,y2 = 7-j, 7-i end
										if revy then x2,y1 = 7-j, 7-i end
										set_tile_size(a,x1,y1,1.01*outCubic(beat-(b+i*0.25/spd),0,1,1/spd),which==4)
										set_tile_size(a,y2,x2,1.01*outCubic(beat-(b+i*0.25/spd),0,1,1/spd),which==4)
									elseif beat < b+i*0.25/spd then
										local x1,x2,y1,y2 = j,j,i,i
										if revx then x1,y2 = 7-j, 7-i end
										if revy then x2,y1 = 7-j, 7-i end
										set_tile_size(a,x1,y1,0,which==4)
										set_tile_size(a,y2,x2,0,which==4)
									elseif beat >= b+1/spd+i*0.25/spd then
										local x1,x2,y1,y2 = j,j,i,i
										if revx then x1,y2 = 7-j, 7-i end
										if revy then x2,y1 = 7-j, 7-i end
										set_tile_size(a,x1,y1,1,which==4)
										set_tile_size(a,y2,x2,1,which==4)
									end
								end
							end
							
						end)
						--unhide hide all previous
						m2(b+3/spd+.1,function()
							for i=1,4 do
								if i~=which and b < 180 then
									_G['c9_taro_polygon'..i]:queuecommand('Hide')
								end
							end
						end)
					end
					
					
					c9_doSky(34,1,false,false)
					c9_doSky(46,2,true,false)
					c9_doSky(50,3,false,true)
					
					c9_doSky(62,2,true,true)
					c9_doSky(66,1,true,false)
					
					--c9_doSky(46,2,true,true)
					--c9_doSky(50,3,true,false)
					
					--c9_doSky(62,1,false,false)
					c9_doSky(78,2,true,false)
					c9_doSky(82,3,false,true)
					
					c9_doSky(94,2,true,false)
					c9_doSky(100,4,false,true,.66)
					
					m2(71,function()
						
						c9_ligma_scroll:z(0)
						c9_ligma_scroll:x(-500)
						c9_ligma_alpha:linear(spb)
						c9_ligma_alpha:x(.6)
						
					end)
					
					m2(87,function()
						
						c9_ligma_scroll:linear(spb)
						c9_ligma_scroll:z(-800)
						c9_ligma_scroll:sleep(spb*4)
						c9_ligma_scroll:z(800)
						c9_ligma_scroll:sleep(spb*3)
						c9_ligma_scroll:linear(spb)
						c9_ligma_scroll:xyz(0,0,100)
						
						c9_ligma_alpha:sleep(spb)
						c9_ligma_alpha:x(.6)
						c9_ligma_alpha:sleep(spb*3)
						c9_ligma_alpha:x(.6)
						c9_ligma_alpha:linear(spb*.5)
						c9_ligma_alpha:x(0)
						c9_ligma_alpha:sleep(spb*.5)
						c9_ligma_alpha:linear(spb*.5)
						c9_ligma_alpha:x(.6)
						
					end)
					
					m2(96,function()
						
						c9_ligma_scroll:sleep(0)
						c9_ligma_scroll:x(800)
						c9_ligma_scroll:linear(spb*.75)
						c9_ligma_scroll:x(0)
						c9_ligma_scroll:sleep(0)
						c9_ligma_scroll:x(-800)
						c9_ligma_scroll:linear(spb*.75)
						c9_ligma_scroll:x(0)
						c9_ligma_scroll:sleep(0)
						c9_ligma_scroll:x(800)
						c9_ligma_scroll:linear(spb*.75)
						c9_ligma_scroll:x(0)
						c9_ligma_scroll:sleep(0)
						c9_ligma_scroll:x(-800)
						c9_ligma_scroll:linear(spb*.75)
						c9_ligma_scroll:x(0)
						
					end)
					
					m2(100,function()
					
						c9_ligma_alpha:linear(spb*4)
						c9_ligma_alpha:x(0)
						
						c9_ligma_frame2:tween(spb*3,'inOutExpo(%f,0,1,1)')
						c9_ligma_frame2:rotationz(360)
						
					end)
					
					m2(99,function()
						c9_night_aft:hidden(0)
						c9_night_stuff:hidden(0)
					end)

					m2(128,function()
						
						c9_taro_polygon4:linear(spb*8)
						c9_taro_polygon4:diffusealpha(0)
						
					end)
					
					m2(137,function()
						c9_night_aft:hidden(1)
						c9_night_stuff:hidden(1)
					end)
					
					m2(136,function()
						
						char_kiyo:xy(scx,scy)
						char_kiyo:basezoomx(.75)
						char_kiyo:basezoomy(.75)
						char_kiyo:playcommand('Idle')
						char_kiyo:playcommand('Spawn')
						
					end)
					
					m2(160-.4,function()
					
						taro_Sound('spell')
						
					end)
					
					m2(160-.1,function()
					
						char_kiyo:playcommand('Cast')
						
					end)
					
					m2(167-.1,function()
					
						char_kiyo:playcommand('Hide')
						
					end)

					local function quickflash(b)
						m2(b-.1,function()
						
							c9_taro_quad:stoptweening()
							c9_taro_quad:diffuse(.5,.5,.5,0)
							c9_taro_quad:decelerate(.1)
							c9_taro_quad:diffusealpha(.4)
							c9_taro_quad:tween(.5,'inCubic(%f,0,1,1)')
							c9_taro_quad:diffusealpha(0)
						
							c9_kiyo1:stoptweening()
							c9_kiyo1:decelerate(.1)
							c9_kiyo1:diffusealpha(.6)
							c9_kiyo1:accelerate(.5)
							c9_kiyo1:diffusealpha(0)
						end)
					end

					local function longflash(b)
						m2(b-.1,function()
						
							c9_taro_quad:stoptweening()
							c9_taro_quad:diffuse(.5,.5,.5,0)
							c9_taro_quad:decelerate(.1)
							c9_taro_quad:diffusealpha(.6)
							c9_taro_quad:tween(1,'inCubic(%f,0,1,1)')
							c9_taro_quad:diffusealpha(0)
							
							c9_kiyo2:stoptweening()
							c9_kiyo2:decelerate(.1)
							c9_kiyo2:diffusealpha(1)
							c9_kiyo2:tween(1,'inCubic(%f,0,1,1)')
							c9_kiyo2:diffusealpha(0)
						end)
					end
					
					quickflash(168)
					quickflash(172)
					quickflash(176)
					quickflash(178)
					longflash(180)
					
					quickflash(184)
					quickflash(188)
					
					
					ending_sky = {1,2,3,5}
					for i=199,255 do
						
						local w = math.mod(i-194,4)+1
						
						local r1 = false
						local r2 = false
						if math.mod(i,4) == 1 then r1 = true r2 = true end
						if math.mod(i,4) == 2 then r1 = true r2 = false end
						if math.mod(i,4) == 3 then r1 = false r2 = true end
						
						c9_doSky(i,ending_sky[w],r1,r2,1.4)
						
					end
					
					m2(256,function()
						
						--taro test
						--[[
						c9_taro_polygon1:linear(spb*8)
						c9_taro_polygon1:diffusealpha(0)
						c9_taro_polygon3:linear(spb*8)
						c9_taro_polygon3:diffusealpha(0)
						
						c9_taro_polygon5:linear(spb*8)
						c9_taro_polygon5:diffusealpha(0)
						]]
						c9_taro_polygon1:hidden(1)
						c9_taro_polygon2:hidden(1)
						--c9_taro_polygon3:hidden(1)
						c9_taro_polygon5:hidden(1)
						
						c9_taro_polygon3:linear(spb*8)
						c9_taro_polygon3:diffusealpha(0)
						
						
						
					end)
					
					m2(266,function()
						
						c9_taro_quad:diffuse(.5,.5,.5,1)
						c9_taro_quad:linear(spb)
						c9_taro_quad:diffusealpha(1)
						c9_taro_quad:tween(spb*4,'inQuart(%f,0,1,1)')
						c9_taro_quad:diffusealpha(0)
						
						c9_kiyo1:linear(spb)
						c9_kiyo1:diffusealpha(1)
						c9_kiyo1:tween(spb*4,'inQuart(%f,0,1,1)')
						c9_kiyo1:diffusealpha(0)
						
						c9_ligma_scroll:z(-1200)
						c9_ligma_alpha:x(0)
						c9_ligma_alpha:linear(spb)
						c9_ligma_alpha:x(1)
						c9_ligma_alpha:tween(spb*4,'inQuart(%f,0,1,1)')
						c9_ligma_alpha:x(0)
						
					end)
					
					m2(274,function()
						
						c9_taro_quad:diffuse(.5,.5,.5,1)
						c9_taro_quad:linear(spb)
						c9_taro_quad:diffusealpha(1)
						c9_taro_quad:tween(spb*4,'inQuart(%f,0,1,1)')
						c9_taro_quad:diffusealpha(0)
						
						c9_kiyo2:linear(spb)
						c9_kiyo2:diffusealpha(1)
						c9_kiyo2:tween(spb*4,'inQuart(%f,0,1,1)')
						c9_kiyo2:diffusealpha(0)
						
						c9_ligma_scroll:z(1200)
						c9_ligma_alpha:x(0)
						c9_ligma_alpha:linear(spb)
						c9_ligma_alpha:x(1)
						c9_ligma_alpha:tween(spb*4,'inQuart(%f,0,1,1)')
						c9_ligma_alpha:x(0)
						
					end)
					
					m2(280,function()
						
						char_kiyo:xy(scx,scy)
						char_kiyo:basezoomx(.75)
						char_kiyo:basezoomy(.75)
						char_kiyo:playcommand('Idle')
						char_kiyo:playcommand('Spawn')
						
					end)
					
					m2(296,function()
					
						char_kiyo:playcommand('HideQ')
						
						MESSAGEMAN:Broadcast('Redout')
						
					end)
					
					
					---------------------------

					local f2,f1,t = 1,1,c9_ZoomController
					for i = 1,table.getn(t) do
						local beat,length,rotation_mult,x_pos,y_pos = t[i][1],t[i][2],t[i][3],t[i][4][1],t[i][4][2]
						for pn = 2,3 do
							me(beat,1,-400,0,'tiny',l,outExpo,pn)
							me(beat,1,500*f2,0,'drunk',l,outExpo,pn)
						end
						mm(beat-(length/4),function(self)
							local rev = math.random(0,1)
							local curp = Plr(normalize(f1,-1,1,2,3))
							local lasp = Plr(normalize(-f1,-1,1,2,3))
							if curp and lasp then
								lasp:zoom(0)
								curp:zoom(0)
								curp:rotationz(90*rotation_mult)
								curp:xy(x_pos,y_pos)
								curp:tween(GetSecondsPerBeat()*(length/2),'outExpo(%f,0,1,1)')
								curp:zoom(1)
								curp:rotationz(math.random(-10,10)+normalize(rev,0,1,0,180))
								curp:tween(GetSecondsPerBeat()*(length/2),'inQuad(%f,0,1,1)')
								curp:zoom(0)
								curp:rotationz(normalize(rev,0,1,0,180)+90*-rotation_mult)
							end
							f1=-f1
						end)
						f2=-f2
					end

					local f,t = 1,c9_percussion
					for i = 1,table.getn(t) do
						local beat,which = t[i][1],t[i][2]
						if which == 0 then
							me(beat,1,200,100,'zoom',l,outExpo,nil)
							me(beat,1,200*f,0,'tipsy',l,outExpo,nil)
							me(beat,1,10*f,0,function(t) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(t) end end end,l,outExpo,nil)
							f=-f
						elseif which == 1 then
							me(beat,0.5,-400,0,'tiny',l,outExpo,nil)
						elseif which == 2 then
							me(beat,1,1000*f,0,'drunk',l,outExpo,nil)
							me(beat,1,-200*f,0,'noteskew',l,outExpo,nil)
							f=-f
						elseif which == 3 then
							me(beat,1,-4000,0,'tinyz',l,outInCirc,nil,0.2)
							me(beat,1,1,2,'xmod',l,inExpo,nil,0.2)
							me(beat,1,50,0,'stealth',l,outSine,nil)
							me(beat,1,30,0,'flip',l,inExpo,nil,0.2)
							me(beat,1,30,0,'reverse',l,inExpo,nil,0.2)
							me(beat,1,-400,0,'mini',l,inExpo,nil,0.2)
						end
					end

					function mod_perframes(beat)
						c9_flicker = -c9_flicker
						local beat = GAMESTATE:GetSongBeat()

						if perframe(104,136) then
							for pn = 1,2 do
								local a = Plr(pn)
								if a then
									local sin,cos = c9_aux:GetX()*math.sin((beat/8)*math.pi+(pn*math.pi)),c9_aux:GetX()*math.cos((beat/8)*math.pi+(pn*math.pi))
									a:xyz(scx,scy+sin,cos)
									a:rotationz(cos/25)
									mod_do('*-1 '.. normalize(sin,-150,150,100,0) .. ' reverse,*-1 '.. cos ..' cubicx,*-1 '.. sin ..' drunk,*-1 '.. normalize(sin,-150,150,0,75) .. ' suddenoffset',pn)
								end
							end
						end
		--[[
						if perframe(204,208) then
							mod_do('*-1 '.. math.sin(beat*math.pi)*20 ..' alternate,*-1 '.. math.sin(beat*math.pi)*-10 ..' reverse,*-1 '.. -math.cos(beat*math.pi)*50+50 ..' invert',nil)
						end

						if perframe(220,224) then
							mod_do('*-1 '.. math.sin(beat*math.pi)*20 ..' alternate,*-1 '.. math.sin(beat*math.pi)*-10 ..' reverse,*-1 '.. -math.cos(beat*math.pi)*50+50 ..' invert',nil)
						end--]]

						--[[if perframe(199,400) then
							local freq = 2
							local plrs = 4
							local sawtooth = 1-((beat/freq)-math.floor(beat/freq))
							for pn = 1,plrs do
								for col = 0,3 do
									--mod_do('*-1 '.. (400*freq/freq)*sawtooth+(pn*(400*freq/freq))-((400*(plrs-1))*freq/freq) ..' movex',pn)
								end
							end
						end --]]

					end
					
					custom_framerate = 75
					mod_lasttime = 0

					---------- PERFRAMES ----------
					function mod_update()
						if GAMESTATE:GetSongBeat()>=0 and not checked then
							local ThingsToGrab = {'BPMDisplay','LifeFrame','ScoreFrame','Lyrics','SongBackground','SongForeground','Overlay','Underlay'}
							local ThingsToHide = {'BPMDisplay','LifeFrame','ScoreFrame','Overlay','Underlay'}
							local prefix_prox = {{'jud', 'Judgment'}, {'com', 'Combo'}}
							for pn=1,pam do
								_G['P'..pn] = SCREENMAN:GetTopScreen():GetChild('PlayerP'..pn) or nil;
								if _G['P'..pn] then
									table.insert(mod_plr, _G['P'..pn])
									_G['P'..pn]:SetFarDist(9999)
									_G['jud'..pn]=_G['P'..pn]:GetChild('Judgment');
									_G['com'..pn]=_G['P'..pn]:GetChild('Combo');
									_G['jud'..pn]:cmd('hidden,1;sleep,9E9;')
									_G['com'..pn]:cmd('hidden,1;sleep,9E9;')
									if pn <= 2 then
										for i,v in pairs(prefix_prox) do
											_G['proxy_'..v[1]..pn]:SetTarget(_G['P'..pn]:GetChild(v[2]))
											_G['proxy_'..v[1]..pn]:zoom(1)
											_G['proxy_jud'..pn]:xy(_G['P'..pn]:GetX(),_G['P'..pn]:GetY())
											_G['proxy_com'..pn]:xy(_G['P'..pn]:GetX(),_G['P'..pn]:GetY())
											_G['proxy_jud'..pn]:zoom(0.75)
											_G['proxy_com'..pn]:zoom(0.75)
										end
									end
								end
								table.insert(ThingsToGrab,'LifeP'..pn); table.insert(ThingsToGrab,'ScoreP'..pn);
								table.insert(ThingsToHide,'LifeP'..pn); table.insert(ThingsToHide,'ScoreP'..pn);
							end	
							for i,v in ipairs(ThingsToGrab) do _G[v] = SCREENMAN:GetTopScreen():GetChild(v) or nil end	
							for i,v in ipairs(ThingsToHide) do if _G[v] then _G[v]:hidden(1) end end
							for i = 1, table.getn(mod_afts) do mod_afts[i]:hidden(0) end
							for i = 1, table.getn(mod_bgafts) do mod_bgafts[i]:hidden(0) end
							if ( _G['P1'] and not _G['P2'] ) or ( _G['P2'] and not _G['P1'] ) then
								SCREENMAN:SystemMessage('play with 2 players >:(')
							end
							if table.getn(mod_actions) > 1 then table.sort(mod_actions, modtable_compare) end
							checked = true;
						end
						
						mod_curtime = GAMESTATE:GetSongTime()
						
						local deltatime = mod_curtime - mod_lasttime
						if deltatime > 1/custom_framerate then
							local beat = GAMESTATE:GetSongBeat()
							if beat > mod_firstSeenBeat+0.1 and checked then
								GAMESTATE:ApplyModifiers('clearall')
								mod_beat_reader(beat)
								mod_ease_reader(beat)
								actions_reader(beat)
								mod_perframes(beat)
								
								if table.getn(mods_taro_perframe)>0 then
									for i=1,table.getn(mods_taro_perframe) do
										local a = mods_taro_perframe[i]
										if beat >= a[1] and beat < a[2] then
											a[3](beat,deltatime);
										end
									end
								end
								
							end
							mod_lasttime = mod_curtime
						end
					end
					self:tween(9E9,'mod_update()')
					
				else
				
					SCREENMAN:SystemMessage('NotITG version Too Old! Needs v3.2')
					
				end
					
			end"
		/>

		<!-- Aux Vars ! :D -->

		<Layer Type="Quad" Var="c9_camera" InitCommand="hidden,1;"/>
		<Layer Type="Quad" Var="c9_aux" InitCommand="hidden,1;"/>
		
		<Aux Var="c9_ligma_scroll" />
		<Aux Var="c9_ligma_alpha" />

		<Layer Type="ActorFrame" Var="c9_proxyEnv" OnCommand="fov,45;xy,scx,scy;"><children>
			<Layer Type="ActorProxy" OnCommand="%function(self) table.insert(c9_playerproxies,self) end"/>
			<Layer Type="ActorProxy" OnCommand="%function(self) table.insert(c9_playerproxies,self) end"/>
			<Layer Type="ActorProxy" OnCommand="%function(self) table.insert(c9_playerproxies,self) end"/>
			<Layer Type="ActorProxy" OnCommand="%function(self) table.insert(c9_playerproxies,self) end"/>
		</children></Layer>


		<Layer Type="ActorFrame"><children>
			<Layer Type="ActorFrame" Var="proxy_jud1_frame"><children> <Layer Type="ActorProxy" Var="proxy_jud1"/> </children></Layer>
			<Layer Type="ActorFrame" Var="proxy_jud2_frame"><children> <Layer Type="ActorProxy" Var="proxy_jud2"/> </children></Layer>
			<Layer Type="ActorFrame" Var="proxy_com1_frame"><children> <Layer Type="ActorProxy" Var="proxy_com1"/> </children></Layer>
			<Layer Type="ActorFrame" Var="proxy_com2_frame"><children> <Layer Type="ActorProxy" Var="proxy_com2"/> </children></Layer>
		</children></Layer>
		
		<Layer Type="Quad" OnCommand="hidden,1;sleep,0.02;queuecommand,Update"
			UpdateCommand="%function(self)
				c9_update_ligma(GAMESTATE:GetSongBeat(),0.02)
				self:sleep(0.02)
				self:queuecommand('Update')
			end"
		/>

		<Layer Type="ActorFrame" Var="c9_ligma_frame2" OnCommand="fov,80;xy,scx,scy;" InitCommand="%function(self) self:SetFarDist(100000) end" ><children> 
		<Layer Type="ActorFrame" Var="c9_ligma_frame" OnCommand="fov,80;zoom,3;zoomz,5;xy,-scx,-scy;" InitCommand="%function(self) self:SetFarDist(100000) end" ><children> 
			
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			<Layer File="kiyo_ligma" OnCommand="hidden,1;queuecommand,Make;" MakeCommand="%function(self) c9_make_ligma(self) end" />
			
		</children></Layer>
		</children></Layer>
		
	</children></Layer>

	<Layer File="spellcard.xml"/>
	

</children></ActorFrame>