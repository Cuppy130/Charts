<ActorFrame
    InitCommand="%function(self)

        songName = GAMESTATE:GetCurrentSong():GetSongDir();
		da_petals = {}
		da_petals2 = {}
    end"
><children>

	<Layer Type="Quad"
		InitCommand="hidden,1" OnCommand="sleep,1000" />
	
	<Layer File="easing" />
	<Layer File="modhelpers" />
	<Layer File="synco" />
	<Layer File="spellcard" />
	
	<Layer
		Type="Quad"
		InitCommand="hidden,1"
		OnCommand="%function(self)

			
		
			debug_show = false;
			spb = 60/156
---------------------------------------------------------------------------------------
----------------------DON'T TOUCH IT KIDDO---------------------------------------------
---------------------------------------------------------------------------------------

			checked = false; P1=nil;P2=nil;P3=nil;P4=nil;jud1=nil;com1=nil;jud2=nil;com2=nil;jud3=nil;com3=nil; czeched = false;
			mod_plr = {};
			mod_firstSeenBeat = GAMESTATE:GetSongBeat();
			local m=mod_insert
			local me=mod_ease
			local mm=mod_message
			
			slumpo = false
			for pn=1,2 do
				if GAMESTATE:IsPlayerEnabled(pn-1) then
					if GAMESTATE:GetCurrentSteps(pn-1):GetDifficulty() == 5 then
						slumpo = true
					end
				end
			end
		
---------------------------------------------------------------------------------------
----------------------END DON'T TOUCH IT KIDDO-----------------------------------------
---------------------------------------------------------------------------------------

            --beat based mods
            --{beat_start, beat_end, mods, len_or_end, player_number}
            mods = {
				--{0,383,'*100000 -100 cover, *1000 1x, *1000 C350, **100000 overhead, *1000 sudden, *10000 90 suddenoffset','end'},
				{0,343,'*100000 -999999 cover, *1000 1x, *1000 C312, *1000 overhead','end'},
            }
            --m(i,.5,'*1000 '.. valuething ..' reverse, *1000 '.. valuething2 ..' invert','len')
			
			--beat-based ease mods
			--{time_start, time_end, mod_start, mod_end, mod, len_or_end, ease_type, player_number, sustaintime, optional_param1, optional_param2}
			--valid ease types are:
				--linear
				--inQuad    outQuad    inOutQuad    outInQuad
				--inCubic   outCubic   inOutCubic   outInCubic
				--inQuart   outQuart   inOutQuart   outInQuart
				--inQuint   outQuint   inOutQuint   outInQuint
				--inSine    outSine    inOutSine    outInSine
				--inExpo    outExpo    inOutExpo    outInExpo
				--inCirc    outCirc    inOutCirc    outInCirc
				--inElastic outElastic inOutElastic outInElastic    --can take 2 optional parameters - amplitude & period
				--inBack    outBack    inOutBack    outInBack       --can take 1 optional parameter  - spring amount
				--inBounce  outBounce  inOutBounce  outInBounce
				
			mods_ease = {
				-- EXAMPLE TWEEN: from beat 0 to 4, make rotationz go from 360 to 0 with the inOutBack tween
				--{32,40,0,1.75,'xmod','end',outInBounce},
			}
			
			--me(beat,len,str1,str2,mod,t,ease,pn,sus,opt1,opt2)
			
            --SCREAMING GUMBALL / timed message broadcaster
            --they no longer have to be in order, because they're sorted now
            curmessage = 1;
            --{beat,message,persists}
            messages = { 
            }
			
			mm(0,function()
				for i,v in ipairs(mod_plr) do
					if v then
						v:GetChild('Combo'):hidden(1)
					end
				end
			end,true)
			
			mm(4,function()
			
				for i,v in ipairs(mod_plr) do
					if v then
						v:decelerate(spb*16)
						v:x(SCREEN_CENTER_X)
					end
				end
			end)
			mm(20,function()
				for i,v in ipairs(mod_plr) do
					if v then
						v:finishtweening()
						v:x(SCREEN_CENTER_X)
						v:GetChild('Judgment'):x(SCREEN_CENTER_X*(i-1.5))
						v:GetChild('Combo'):x(SCREEN_CENTER_X*(i-1.5))
					end
				end
				if P2 then
					P2:rotationz(180)
				end
			end,true)
			
			mm(22,function()
				for i,v in ipairs(mod_plr) do
					if v then
						v:finishtweening()
						v:decelerate(spb*1.75)
						v:rotationz(0)
					end
				end
			end,true)
			me(12,22,0,50,'flip','end',inOutQuad)
			me(12,22,0,-150,'mini','end',inOutQuad)
			me(12,22,0,100,'dark','end',inOutQuad)
			me(12,22,312,117,'cmod','end',inOutQuad)
			me(22,24,50,0,'flip','end',inQuad)
			me(22,24,-150,0,'mini','end',inQuad)
			me(22,24,100,0,'dark','end',inQuad)
			me(22,24,117,312,'cmod','end',inQuad)
			
			m(20,24,'*10000 0 reverse, *10000 -25000 split, *10000 25000 cross, *10000 -25000 alternate','end',1)
			m(20,24,'*10000 -49900 reverse, *10000 25000 split, *10000 25000 cross, *10000 25000 alternate, *1000 15 centered','end',2)
			m(20,24,'*10000 -40 suddenoffset, *10000 5 hiddenoffset, *1000 -200 hidden, *1000 -200 sudden','end')
			
			mm(24,function()
				for i,v in ipairs(mod_plr) do
					if v then
						v:GetChild('Combo'):hidden(0)
					end
				end
			end,true)
			
			m(24,25,'*100000 0 split, *100000 0 cross, *100000 0 alternate, *100000 0 reverse','end')
			
			me(22,23.75,-49900,-50000,'reverse','end',outExpo,2,24)
			me(22,24,15,0,'centered','end',outQuad,2)
			
			me(26,.5,0,100,'mini','len',outCirc)
			me(26.5,1,100,-200,'mini','len',inOutCirc)
			me(27.5,.5,-200,0,'mini','len',inCirc,nil,1)
			
			m(27.5,59.5,'*1000 100 beat','end',1)
			m(27.5,59.5,'*1000 -100 beat','end',2)
			m(59.5,60,'*10000 no beat','end')
			
			m(28,1,'*100000 0 drunk, *10000 no dizzy','len')
			local parity = 1
			for i=27,27.9,.1 do
				m(i,.1,'*100000 '.. parity*30 ..' drunk,*100000 '.. parity*25+25 ..' stealth,*100000 '.. parity*25 ..' dizzy','len')
				parity = parity * -1
			end
			
			function rotate2P(parity)
				if parity == -1 then
					if P1 then
						P1:bouncebegin(spb)
						P1:rotationy(-180)
						P1:GetChild('Combo'):bouncebegin(spb)
						P1:GetChild('Combo'):x(200)
						P1:GetChild('Judgment'):bouncebegin(spb)
						P1:GetChild('Judgment'):x(200)
					end
					if P2 then
						P2:bouncebegin(spb)
						P2:rotationy(0)
						P2:GetChild('Combo'):bouncebegin(spb)
						P2:GetChild('Combo'):x(200)
						P2:GetChild('Judgment'):bouncebegin(spb)
						P2:GetChild('Judgment'):x(200)
					end
				elseif parity == 1 then
					if P1 then
						P1:bouncebegin(spb)
						P1:rotationy(0)
						P1:GetChild('Combo'):bouncebegin(spb)
						P1:GetChild('Combo'):x(-200)
						P1:GetChild('Judgment'):bouncebegin(spb)
						P1:GetChild('Judgment'):x(-200)
					end
					if P2 then
						P2:bouncebegin(spb)
						P2:rotationy(180)
						P2:GetChild('Combo'):bouncebegin(spb)
						P2:GetChild('Combo'):x(-200)
						P2:GetChild('Judgment'):bouncebegin(spb)
						P2:GetChild('Judgment'):x(-200)
					end
				end
			end
			
			function zoom2P(parity)
				if parity == -1 then
					if P1 then
						P1:bouncebegin(spb)
						P1:zoomx(0)
					end
					if P2 then
						P2:bouncebegin(spb)
						P2:zoomx(1)
					end
				elseif parity == 1 then
					if P1 then
						P1:bouncebegin(spb)
						P1:zoomx(1)
					end
					if P2 then
						P2:bouncebegin(spb)
						P2:zoomx(0)
					end
				end
			end
			
			function zoom2P2(parity)
				if parity == -1 then
					if P1 then
						P1:zoomx(1)
						P1:zoomy(1)
						P1:bouncebegin(spb)
						P1:zoomy(0)
					end
					if P2 then
						P2:zoomx(1)
						P2:zoomy(0)
						P2:bouncebegin(spb)
						P2:zoomy(1)
					end
				elseif parity == 1 then
					if P1 then
						P1:zoomx(1)
						P1:zoomy(0)
						P1:bouncebegin(spb)
						P1:zoomy(1)
					end
					if P2 then
						P2:zoomx(1)
						P2:zoomy(1)
						P2:bouncebegin(spb)
						P2:zoomy(0)
					end
				end
			end
			
			mm(27,function()
				if P2 then
					P2:bounceend(spb)
					P2:rotationy(180)
					P2:GetChild('Combo'):bouncebegin(spb)
					P2:GetChild('Combo'):x(-200)
					P2:GetChild('Judgment'):bouncebegin(spb)
					P2:GetChild('Judgment'):x(-200)
				end
				if P1 then
					P1:GetChild('Combo'):bouncebegin(spb)
					P1:GetChild('Combo'):x(-200)
					P1:GetChild('Judgment'):bouncebegin(spb)
					P1:GetChild('Judgment'):x(-200)
				end
			end)
			m(27,35,'*2 100 dark','end',2)
			
			mm(35,function() rotate2P(-1) end)
			m(35,43,'*2 100 dark','end',1)
			
			mm(43,function() rotate2P(1) end)
			m(43,51,'*2 100 dark','end',2)
			
			mm(51,function() rotate2P(-1) end)
			m(51,59,'*2 100 dark','end',1)
			
			mm(59,function()
				if P1 then
					P1:bouncebegin(spb)
					P1:rotationy(0)
					P1:skewx(0)
				end
				if P2 then
					P2:bouncebegin(spb)
					P2:rotationy(180)
					P2:skewx(0)
				end
			end,true)
			
			me(54,60,0,50,'stealth','end',linear)
			me(54,59,0,-400,'mini','end',inQuad)
			me(54,59,0,40,'flip','end',inQuad)
			me(54,59,312,156,'cmod','end',linear)
			
			me(59,1,-400,0,'mini','len',inQuad)
			me(59,1,40,0,'flip','len',inQuad)
			me(59,1,312,156,'cmod','len',linear)
			m(60,1,'*10000 no stealth','len')
			
			me(58.9,.1,0,50,'reverse','len',inCirc)
			me(59,1,50,0,'reverse','len',outCirc)
			me(82.9,.1,0,50,'reverse','len',inCirc)
			me(83,1,50,0,'reverse','len',outCirc)
			
			me(60,67,0,120,'mini','end',linear)
			me(67,68,120,0,'mini','end',inQuad)
			
			me(64,2,0,-624,'dizzy','len',inQuad)
			me(66,2,-624,0,'dizzy','len',inQuad)
			
			me(67.5,.25,200,0,'drunk','len',outCirc)
			me(67.75,.25,-200,0,'drunk','len',outCirc)
			
			me(68,2,0,125,'hallway','len',linear)
			me(70,2,125,0,'hallway','len',linear)
			me(72,2,0,-125,'hallway','len',linear)
			me(74,2,-125,0,'hallway','len',linear)
			
			me(76,83,0,120,'mini','end',linear)
			me(83,84,120,0,'mini','end',inQuad)
			
			me(80,2,0,-624,'dizzy','len',inQuad)
			me(82,2,-624,0,'dizzy','len',inQuad)
			
			me(84,2,0,50,'tornado','len',linear,1)
			me(86,2,50,0,'tornado','len',linear,1)
			me(88,1,0,-50,'tornado','len',linear,1)
			me(89,1,-50,0,'tornado','len',linear,1)
			
			me(84,2,0,-50,'tornado','len',linear,2)
			me(86,2,-50,0,'tornado','len',linear,2)
			me(88,1,0,50,'tornado','len',linear,2)
			me(89,1,50,0,'tornado','len',linear,2)
			
			for i=60,67 do me(i,1,156,312,'cmod','len',outQuad)	end
			for i=76,83 do me(i,1,156,312,'cmod','len',outQuad)	end
			
			me(90,1,0,120,'flip','len',outCirc,nil,0)
			me(91,1,120,0,'flip','len',outBack,nil,0)
			
			m(91,122,'*10000 50 brake, *10000 100 sudden, *10000 100 suddenoffset','end')
			m(91,122,'*10000 -15 dizzy','end',2)
			m(91,122,'*10000 15 dizzy','end',1)
			
			parity = 1
			for j=0,3 do
				for i,v in ipairs(da_synco) do
					if v then
						if i==1 then
							me((j*8)+v[1],v.length,0,250*parity,'drunk','len',outCirc,2)
							me((j*8)+v[1],v.length,0,200*parity,'tipsy','len',outCirc,1)
						elseif i==table.getn(da_synco) then
							me((j*8)+v[1],v.length,-250*parity,0,'drunk','len',outCirc,2)
							me((j*8)+v[1],v.length,-200*parity,0,'tipsy','len',outCirc,1)
						else
							me((j*8)+v[1],v.length,-250*parity,250*parity,'drunk','len',outCirc,2)
							me((j*8)+v[1],v.length,-200*parity,200*parity,'tipsy','len',outCirc,1)
						end
					end
					parity = parity*-1
				end			
			end
			me(122,.25,0,parity*50,'centered','len',outCirc)
			for i=122.25,122.75,.25 do
				me(i,.25,parity*50,parity*-50,'centered','len',outCirc)
				parity=parity*-1
			end
			me(123,.25,parity*50,0,'centered','len',outCirc)
			me(122,1,0,100,'mini','len',inQuad)
			me(123,1,-256,0,'mini','len',inQuad)
			
			mm(91,function() rotate2P(-1) 
				for i,v in ipairs(mod_plr) do
					v:rotationz(20*(i*2-3))
				end			
			end)
			m(91,99,'*2 100 dark','end',1)

			mm(99,function() rotate2P(1) end)
			m(99,107,'*2 100 dark','end',2)
			m(107,130,'*20 no stealth','end')
			me(116,122,0,50,'stealth','end',linear)
			parity = -1
			for i=107,117,2 do
				local wanker = parity
				mm(i,function() rotate2P(wanker) end)
				m(i,2,'*2 100 dark','len',(wanker+3)/2)
				parity = parity * -1
			end
			mm(119,function() 
				if P1 then
					P1:bouncebegin(spb)
					P1:rotationy(-360)
					P1:rotationz(0)
					P1:GetChild('Combo'):bouncebegin(spb)
					P1:GetChild('Combo'):x(-200)
					P1:GetChild('Judgment'):bouncebegin(spb)
					P1:GetChild('Judgment'):x(-200)
				end
				if P2 then
					P2:bouncebegin(spb)
					P2:rotationy(0)
					P2:rotationz(0)
					P2:GetChild('Combo'):bouncebegin(spb)
					P2:GetChild('Combo'):x(200)
					P2:GetChild('Judgment'):bouncebegin(spb)
					P2:GetChild('Judgment'):x(200)
				end
			end, true)
			mm(122,function() 
				if P1 then
					P1:rotationy(0)
					P1:bounceend(spb*2)
					P1:rotationx(-180)
				end
				if P2 then
					P2:bouncebegin(spb)
					P2:rotationx(0)
				end
			end)
			me(122,124,0,100,'reverse','end',outBack,1,139)
			me(122,124,0,15,'centered','end',outBack,1,139)
			me(138,140,100,0,'reverse','end',inOutQuad,1)
			me(138,140,15,0,'centered','end',inOutQuad,1)
			me(138,140,0,100,'reverse','end',inOutQuad,2,155)
			me(138,140,0,15,'centered','end',inOutQuad,2,155)
			me(155,156,100,0,'reverse','end',outQuad,2)
			me(155,156,15,0,'centered','end',outQuad,2)
			mm(155,function() 
				for i,v in ipairs(mod_plr) do
					if v then
						v:bouncebegin(spb)
						v:rotationx(0)
						v:rotationz(30*(i*2-3))
						if i==2 then
							v:zoomx(0)
						end
					end
				end
			end,true)
			
			me(122.9,.1,0,25,'flip','len',inCirc)
			me(123,1,25,0,'flip','len',outCirc)
			me(146.9,.1,0,-50,'flip','len',inCirc)
			me(147,1,-50,0,'flip','len',outCirc)
			
			me(140,8,50,0,'stealth','len',linear)
			
			me(124,131,0,120,'mini','end',linear)
			me(131,132,120,0,'mini','end',inQuad)
			me(128,2,0,-624,'dizzy','len',inQuad)
			me(130,2,-624,0,'dizzy','len',inQuad)
			for i=124,131 do me(i,1,156,312,'cmod','len',outQuad)	end
			for i=140,147 do me(i,1,156,312,'cmod','len',outQuad)	end
			me(140,147,0,120,'mini','end',linear)
			me(147,148,120,0,'mini','end',inQuad)
			me(144,2,0,-624,'dizzy','len',inQuad)
			me(146,2,-624,0,'dizzy','len',inQuad)
			
			me(148,2,0,-150,'drunk','len',linear,1)
			me(150,2,-150,0,'drunk','len',linear,1)
			me(152,2,0,150,'drunk','len',linear,1)
			me(154,2,150,0,'drunk','len',linear,1)
			
			me(148,2,0,150,'drunk','len',linear,2)
			me(150,2,150,0,'drunk','len',linear,2)
			me(152,2,0,-150,'drunk','len',linear,2)
			me(154,2,-150,0,'drunk','len',linear,2)
			
			me(151,4,0,-250,'mini','len',linear)
			me(151,4,0,25,'flip','len',linear)
			me(155,1,-250,0,'mini','len',linear)
			me(155,1,25,0,'flip','len',linear)
			
			m(155,179,'*10000 -25 dizzy','end',2)
			m(155,179,'*10000 25 dizzy','end',1)
			
			m(155.5,179.5,'*1000 100 beat','end',1)
			m(155.5,179.5,'*1000 -100 beat','end',2)
			m(179.5,180,'*10000 no beat','end')

			mm(165,function()
				if P2 then
					P2:bouncebegin(spb)
					P2:rotationz(-30)
				end
			end)
			me(165,1,-25,25,'dizzy','len',inBack,2,4)
			me(170,1,25,-25,'dizzy','len',outBack,2)
			mm(170,function()
				if P2 then
					P2:bounceend(spb)
					P2:rotationz(30)
				end
			end)
			
			mm(157,function() zoom2P(-1) end)
			mm(159,function() zoom2P(1) end)
			mm(161,function() zoom2P(-1) end)
			mm(171,function() zoom2P2(1) end)
			mm(173,function() zoom2P2(-1) end)
			mm(175,function() zoom2P2(1) end)
			
			mm(179,function()
				for i,v in ipairs(mod_plr) do
					if v then
						v:finishtweening()
						v:bouncebegin(spb)
						v:rotationz(0)
						v:skewx(0)
						v:zoom(1)
					end
				end
			end,true)
			
			
			me(180,12,0,70,'tornado','len',linear,1)
			me(180,12,0,-70,'tornado','len',linear,2)
			me(180,12,0,50,'bumpy','len',linear,1)
			me(180,12,0,-50,'bumpy','len',linear,2)
			
			parity = 1
			for i=188,191.75,.25 do
				me(i,.25,parity*-100,parity*100,'drunk','len',outCirc)
				parity = parity * -1
			end
			for i=192,194.875,.125 do
				me(i,.125,parity*-100,parity*100,'drunk','len',outCirc)
				parity = parity * -1
			end
			
			me(180,1,25,0,'space','len',outQuad)
			me(181,1,50,0,'space','len',outQuad)
			me(182,1,75,25,'space','len',outQuad)
			me(183,1,100,50,'space','len',outQuad)
			me(184,.5,115,90,'space','len',outQuad)
			me(184.5,.5,130,105,'space','len',outQuad)
			me(185,.5,145,120,'space','len',outQuad)
			me(185.5,.5,160,135,'space','len',outQuad)
			me(186,.5,175,150,'space','len',outQuad)
			me(186.5,.5,190,165,'space','len',outQuad)
			me(187,.5,205,180,'space','len',outQuad)
			me(187.5,.5,220,195,'space','len',outQuad)
			me(188,4,195,225,'space','len',linear)
			
			me(192,2,0,-400,'mini','len',linear)
			me(194,2,-400,0,'mini','len',outQuad)
			
			mm(192,function()
				for i,v in ipairs(mod_plr) do
					if v then
						v:finishtweening()
						v:accelerate(spb*2)
						v:zoomz(0)
					end
				end
			end,true)
			
			if FUCK_EXE then
				m(192,212,'*10000 -99 drawsizeback','end')			
				m(212,227,'*10000 -95 drawsizeback','end')			
			end
			
			me(194,2,0,0,'drunk','len',linear)
			me(192,2,225,0,'space','len',outQuad)
			me(192,2,312,7.8,'cmod','len',inQuad)
			--me(192,2,0,100000,'bumpy','len',inExpo)
			me(192,2,0,-95,'suddenoffset','len',inQuad)
			me(192,2,0,800,'sudden','len',inQuad)
			me(192,2,0,50,'flip','len',inQuad)
			me(192,2,0,100,'centered','len',inQuad)

			m(194,204,'*100000 -5000000 reverse, *100000 2500000 split, *100000 2500000 cross, *100000 2500000 alternate,*10000 85 dark','end',2)	
			m(194,204,'*100000 0 reverse, *100000 -2500000 split, *100000 2500000 cross, *100000 -2500000 alternate,*10000 85 dark','end',1)
			if slumpo then
			m(203,211,'*1000000 0 reverse, *10000 0 split, *10000 0 cross, *1000000 0 alternate,*10000 85 dark','end',2)	
			m(203,211,'*1000000 100 stealth, *100000 no reverse, *100000 no split, *100000 no cross, *100000 no alternate, *10000 85 dark','end',1)
			m(210,211,'*1000000 no stealth','end',1)
			else
				m(204,211,'*1000000 -1000000 reverse, *10000 0 split, *10000 0 cross, *1000000 1000000 alternate,*10000 85 dark','end',2)	
				m(204,211,'*10000 0 reverse, *10000 0 split, *10000 0 cross, *1000000 -1000000 alternate,*10000 85 dark','end',1)
			end
			
			
			mm(196,function()
				if da_aux then
					da_aux:accelerate(spb*3)
					da_aux:aux(90)
				end
			end)
			mm(200,function()
				if da_aux then
					da_aux:accelerate(spb*3)
					da_aux:aux(180)
				end
			end)
			mm(204,function()
				if da_aux then
					da_aux:accelerate(spb*2)
					da_aux:aux(270)
					da_aux:accelerate(spb*2)
					da_aux:aux(360)
					da_aux:accelerate(spb*2)
					da_aux:aux(450)
				end
			end)
			
			mm(210.5,function()
				for i,v in ipairs(mod_plr) do
					if v then
						v:GetChild('Combo'):hidden(1)
						v:GetChild('Judgment'):hidden(1)
					end
				end
			end)
			mm(227,function()
				for i,v in ipairs(mod_plr) do
					if v then
						v:GetChild('Combo'):hidden(0)
						v:GetChild('Judgment'):hidden(0)
					end
				end
			end)
			
			me(211,1,156,312,'cmod','len',outBack)
			m(211,227,'*1000000 1050 invert','end',1)
			m(211,227,'*1000000 -350 invert','end',2)
			m(211,227,'*10000 100 split, *1000 100 centered, *1000000 -300 flip,*1000000 no sudden, *1000000 no reverse, *1000000 no bumpy, *100000 no alternate,*10000 75 dark','end')
			
			m(216,221.667,'*100000 400 mini','end',1)
			m(221.667,223,'*100000 no mini','end',1)
			m(219,223.667,'*100000 400 mini','end',2)
			m(223.667,225,'*100000 no mini','end',2)
			
			mm(211,function()
				if P1 then P1:rotationz(0) end
				if P2 then P2:rotationz(-90) P2:x(SCREEN_CENTER_X-10) P2:y(SCREEN_CENTER_Y+10)
				end
			end)
			mm(212,function()
				if P1 then P1:accelerate(spb*3) P1:rotationz(90) P1:sleep(0) end
				if P2 then P2:accelerate(spb*3) P2:rotationz(0) P2:x(SCREEN_CENTER_X-10) P2:y(SCREEN_CENTER_Y-10)end
			end)
			mm(216,function()
				if P1 then P1:accelerate(spb*3) P1:rotationz(180) end
				if P2 then P2:accelerate(spb*3) P2:rotationz(90) P2:x(SCREEN_CENTER_X+10) P2:y(SCREEN_CENTER_Y-10)				
				end
			end)
			mm(220,function()
				if P1 then P1:accelerate(spb*2) P1:rotationz(270) 
						   P1:accelerate(spb*2) P1:rotationz(360)
						   P1:accelerate(spb*2) P1:rotationz(450) 
			   end
				if P2 then P2:accelerate(spb*2) P2:rotationz(180) P2:y(SCREEN_CENTER_Y+10)
						   P2:accelerate(spb*2) P2:rotationz(270) P2:x(SCREEN_CENTER_X-10)
						   P2:accelerate(spb*2) P2:rotationz(360) P2:y(SCREEN_CENTER_Y-10)
				end
			end)
			
			--me(212,215,0,-200,'dizzy','end',inQuad,1)
			me(212,215,100,0,'dizzy','end',inQuad,2)
			--me(215,1,-200,0,'dizzy','len',outQuad,1)
			
			--me(216,219,0,-200,'dizzy','end',inQuad,2)
			me(216,219,100,0,'dizzy','end',inQuad,1)
			--me(219,1,-200,0,'dizzy','len',outQuad,2)
			
			--me(220,222,0,-200,'dizzy','end',inQuad,1)
			m(219,220,'*1000 100 dizzy','end',2)
			me(220,222,100,0,'dizzy','end',inQuad,2)
			--me(222,2,-200,0,'dizzy','len',outQuad,1)
			
			--me(222,224,0,-200,'dizzy','end',inQuad,2)
			me(221.667,224,100,0,'dizzy','end',inQuad,1)
			--me(224,2,-200,0,'dizzy','len',outQuad,2)
			
			me(224,227,0,-150,'dizzy','end',linear,1)
			
			mm(227,function()
				for i,v in ipairs(mod_plr) do
					if v then
						--v:spring(spb)
						v:rotationz(0)
						v:x(SCREEN_CENTER_X)
						v:y(SCREEN_CENTER_Y)
						v:zoomz(1)
					end
				end
			end)
			me(227,1,-100,0,'dizzy','len',outElastic,1)
			me(227,1,100,0,'split','len',outElastic)
			me(227,1,100,0,'centered','len',outElastic)
			me(227,1,-300,0,'flip','len',outElastic)
			me(227,1,100,0,'split','len',outElastic)
			me(227,1,1050,0,'invert','len',outElastic,1)
			me(227,1,-350,0,'invert','len',outElastic,2)
			
			function da_weh(beat,len,prev,arf)
				me(beat,len,prev[1],arf[1],'split','len',outCirc)
				me(beat,len,prev[2],arf[2],'cross','len',outCirc)
				me(beat,len,prev[3],arf[3],'alternate','len',outCirc)
				me(beat,len,prev[4],arf[4],'reverse','len',outCirc)
			end
			
			da_weh(228,.333,{0,0,0,0},{-50,-50,-50,100})
			da_weh(228.333,.333,{-50,-50,-50,100},{0,0,-100,100})
			da_weh(228.667,.333,{0,0,-100,100},{50,50,-50,0})
			da_weh(229,1,{50,50,-50,0},{0,0,0,0})
			
			da_weh(230,.333,{0,0,0,0},{-50,50,50,0})
			da_weh(230.333,.333,{-50,50,50,0},{0,0,100,0})
			da_weh(230.667,.333,{0,0,100,0},{50,-50,50,0})
			da_weh(231,1,{50,-50,50,0},{0,0,0,0})
			
			mm(232,function()
				for i,v in ipairs(mod_plr) do
					if v then
						local trustfall = (i*2-3)
						v:accelerate(spb*2)
						v:rotationz(360*trustfall)
						v:sleep(0)
						v:rotationz(0)
					end
				end
			end)
			
			me(232,2,0,100,'mini','len',inQuad,nil,1)
			me(235,1,100,0,'mini','len',outCirc)
			me(234.9,.1,0,50,'reverse','len',inCirc)
			me(235,1,50,0,'reverse','len',outCirc)
			
			mm(235,function() rotate2P(-1)
				for i,v in ipairs(mod_plr) do
					if v then
						v:rotationz(20*(i*2-3))
					end
				end
			end)
			
			m(235,263,'*10000 -25 dizzy','end',2)
			m(235,263,'*10000 25 dizzy','end',1)
			m(235,263,'*10000 100 beat','end')
			
			m(235,243,'*2 100 dark','end',1)
			
			mm(243,function() rotate2P(1) end)
			m(243,251,'*2 100 dark','end',2)
			
			mm(251,function() rotate2P(-1) end)
			m(251,259,'*2 100 dark','end',1)
			
			mm(259,function() rotate2P(1) end)
			m(259,261,'*2 100 dark','end',1)
			
			mm(261,function() rotate2P(-1) end)
			m(261,263,'*2 100 dark','end',1)
			
			mm(263,function()
				for i,v in ipairs(mod_plr) do
					if v then
						v:bouncebegin(spb)
						v:rotationz(0)
						v:rotationy(0)
						v:skewx(0)
						v:GetChild('Combo'):bouncebegin(spb)
						v:GetChild('Combo'):x(200*(i*2-3))
						v:GetChild('Judgment'):bouncebegin(spb)
						v:GetChild('Judgment'):x(200*(i*2-3))
					end
				end
			end)
			
			parity = 1
			for j=0,3 do
				for i,v in ipairs(da_synco) do
					if v then
						if i==1 then
							me(144+(j*8)+v[1],v.length,0,100*parity,'drunk','len',outCirc,2)
							me(144+(j*8)+v[1],v.length,0,100*parity,'tipsy','len',outCirc,1)
						elseif i==table.getn(da_synco) then
							me(144+(j*8)+v[1],v.length,-100*parity,0,'drunk','len',outCirc,2)
							me(144+(j*8)+v[1],v.length,-100*parity,0,'tipsy','len',outCirc,1)
						else
							me(144+(j*8)+v[1],v.length,-100*parity,100*parity,'drunk','len',outCirc,2)
							me(144+(j*8)+v[1],v.length,-100*parity,100*parity,'tipsy','len',outCirc,1)
						end
					end
					parity = parity*-1
				end			
			end
			
			me(264,.25,0,100,'tornado','len',outQuad,1)
			me(264.25,.25,100,-50,'tornado','len',outQuad,1)
			me(264.5,.25,-50,100,'tornado','len',outQuad,1)
			me(264.75,.25,100,-50,'tornado','len',outQuad,1)
			me(265,.5,-50,100,'tornado','len',outQuad,1)
			me(265.5,.5,100,-50,'tornado','len',outQuad,1)
			me(266,.5,-50,100,'tornado','len',outQuad,1)
			me(266.5,.5,100,0,'tornado','len',outQuad,1)
			me(264,.25,0,-50,'tornado','len',outQuad,2)
			me(264.25,.25,-50,100,'tornado','len',outQuad,2)
			me(264.5,.25,100,-50,'tornado','len',outQuad,2)
			me(264.75,.25,-50,100,'tornado','len',outQuad,2)
			me(265,.5,100,-50,'tornado','len',outQuad,2)
			me(265.5,.5,-50,100,'tornado','len',outQuad,2)
			me(266,.5,100,-50,'tornado','len',outQuad,2)
			me(266.5,.5,-50 ,0,'tornado','len',outQuad,2)
			
			me(262,266,0,-200,'mini','end',linear)
			me(266.5,267,-200,-800,'mini','end',outCirc)
			me(267,267.75,-800,200,'mini','end',outCirc,nil,2000)
			me(262,266,0,20,'flip','end',linear)
			me(266.5,267,20,50,'flip','end',outCirc)
			me(267,267.75,50,0,'flip','end',outCirc)
			me(266.5,267,0,50,'reverse','end',outCirc,nil,2000)
			me(262,266,312,156,'cmod','end',linear)
			
			me(266.5,.5,100,0,'drunk','len',outCirc)
			me(266.5,.5,100,0,'tipsy','len',outCirc)
			
			-----
			---great gramphics, great grameplay, 10/10
			-----
			
			mm(4,function()
				da_face2:hidden(0)
				da_face:hidden(0)
				da_face:diffusealpha(0)
				da_face:linear(5*spb)
				da_face:diffusealpha(1)
				da_face2:diffusealpha(1)
				da_face2:linear(5*spb)
				da_face2:diffusealpha(0)
			end,true)
			
			mm(12.5,function()

				da_face:accelerate(9.5*spb)
				da_face:zoom(1.3)
				da_face:bounceend(1.75*spb)
				da_face:diffusealpha(0)
				da_face:zoom(1.75)
				da_face:sleep(0)
				da_face:zoom(1)
			
				da_face2:diffusealpha(0)
				da_face2:accelerate(9.5*spb)
				da_face2:zoom(1.75)
				da_face2:diffusealpha(1)
				da_face2:bounceend(1.75*spb)
				da_face2:zoom(2.5)
				da_face2:diffusealpha(0)
				da_face2:sleep(0)
				da_face2:zoom(1)
			end)
			mm(27,function() 
			
				da_face:finishtweening()
				da_face:zoom(1.3)
				
				da_face2:finishtweening()
				da_face2:zoom(1.3)
				
				for i=1,6 do
					da_face:diffusealpha(1)
					da_face:sleep(spb*.083)
					da_face:diffusealpha(0)
					da_face:sleep(spb*.083)
					da_face2:diffusealpha(1)
					da_face2:sleep(spb*.083)
					da_face2:diffusealpha(0)
					da_face2:sleep(spb*.083)
				end
				
				for i,v in ipairs(da_petals) do
					if v then
						v:linear(spb)
						v:diffusealpha(.6)
					end
				end	
				
				da_bg:accelerate(spb)
				da_bg:diffusealpha(.4)
				
			end,true)
			
			mm(116,function()
				da_auxy:aux(math.mod(da_auxy:getaux(),360))
				da_auxy:accelerate(spb*8)
				da_auxy:aux(0)
			end)
			
			mm(180,function() 
			
				da_face:finishtweening()
				da_face:zoom(.5)
				
				da_face2:finishtweening()
				da_face2:zoom(.5)
				
				da_face:diffusealpha(0)
				da_face:linear(spb*12)
				da_face:diffusealpha(.75)
				da_face:zoom(1.75)
				da_face:bouncebegin(spb*3)
				da_face:zoomx(0)
				
				da_face2:diffusealpha(0)
				da_face2:linear(spb*12)
				da_face2:diffusealpha(.75)
				da_face2:zoom(2)
				da_face2:bouncebegin(spb*3)
				da_face2:zoomx(0)
			end)
			
			function da_petalrand(startb,endb)
				for i=startb,endb,.333 do
					mm(i,function()
						da_auxx:aux(math.random()*360)
						da_auxy:aux(math.random()*360)
						da_auxz:aux(math.random()*360)
					end)
				end
			end
			
			da_petalrand(196,199)
			da_petalrand(200,203)
			da_petalrand(204,210)
			da_petalrand(211,211)
			da_petalrand(212,215)
			da_petalrand(216,219)
			da_petalrand(220,226)
			da_petalrand(228,229)
			da_petalrand(230,231)
			da_petalrand(232,234)
			
			mm(266.5,function()
				da_face:diffusealpha(0)
				da_face:zoom(1.5)
				da_face:bounceend(spb*.5)
				da_face:diffusealpha(1)
				da_face:decelerate(spb*.5)
				da_face:diffusealpha(.05)
				
				da_face2:diffusealpha(0)
				da_face2:zoom(1.5)
				da_face2:bounceend(spb*.5)
				da_face2:diffusealpha(1)
				da_face2:decelerate(spb*.5)
				da_face2:diffusealpha(.075)
			end)
			
			mm(267,function()
				da_petalstorm:decelerate(spb)
				da_petalstorm:zoom(10)
				da_petalstorm:diffusealpha(0)
				da_bg:bounceend(spb)
				da_bg:diffusealpha(0)
				da_whee:bounceend(spb)
				da_whee:diffusealpha(0)
			end)
			mm(267,'hoo')
---------------------------------------------------------------------------------------
----------------------DON'T TOUCH IT KIDDO---------------------------------------------
---------------------------------------------------------------------------------------
			
			function message_compare(a,b)
				return a[1] < b[1]
			end
			
			if table.getn(messages) > 1 then
				table.sort(messages, message_compare)
			end
			
			self:queuecommand('Update');
		
		end"
        
		UpdateCommand="%function(self)
		
        ---------------------------------------------------------------------------------------
        ----------------------DON'T TOUCH IT KIDDO---------------------------------------------
        ---------------------------------------------------------------------------------------
        
            --hide things as needed, and set up aliases if checked is false
			if not checked and GAMESTATE:GetSongBeat()>=0 then
				
                thingsToGrab = {'LifeP1','LifeP2','ScoreP1','ScoreP2','BPMDisplay','LifeFrame','ScoreFrame','Lyrics','SongForeground','SongBackground','Overlay','Underlay'}
                thingsToHide = {'LifeP1','LifeP2','ScoreP1','ScoreP2','BPMDisplay','LifeFrame','ScoreFrame','Overlay','Underlay'}
                
                for i,v in ipairs(thingsToGrab) do
                    _G[v] = SCREENMAN:GetTopScreen():GetChild(v) or nil
                end
                
                for i,v in ipairs(thingsToHide) do
                    if _G[v] then _G[v]:hidden(1) end
                end
				
				table.insert(mod_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP1'));
				table.insert(mod_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP2'));
				
				for i,v in pairs(mod_plr) do
					if SCREENMAN:GetTopScreen():GetChild('PlayerOptionsP'..i) then
						_G['init_modsp'..i] = SCREENMAN:GetTopScreen():GetChild('PlayerOptionsP'..i):GetText();
					end
				end
				
				screen = SCREENMAN:GetTopScreen();
				screen:SetDrawByZPosition(true);
				checked = true;
                
                P1 = SCREENMAN:GetTopScreen():GetChild('PlayerP1');
				P2 = SCREENMAN:GetTopScreen():GetChild('PlayerP2');
			end
			
			if not czeched and GAMESTATE:GetSongBeat()>=0 and table.getn(da_petals)==100 then
				for i,v in ipairs(da_petals) do
					if v then
						v:z(-440) --egoism LOL
						v:hidden(0)
						v:spin()
						v:effectmagnitude(0,0,(math.random()-.5)*100)
						v:zoom(.75)
						v:diffusealpha(0)
					end
				end	
				for i,v in ipairs(da_petals2) do

					v:rotationz(math.random()*360)
					v:rotationy(180*math.asin(math.random()*2-1)/math.pi)
					v:rotationx(math.random()*360)
					v:spin()
					v:effectmagnitude((math.random()-.5)*50,(math.random()-.5)*50,(math.random()-.5)*50)
					--v:x(xPos)
					--v:y(yPos)
					--v:z(zPos)
					v:hidden(0)
				end
				print('donetcheck')
				czeched = true
			end
			
			local beat = GAMESTATE:GetSongBeat()
			
			if da_whee and beat > 28 and beat < 267 then
				da_whee:diffusealpha(math.cos(math.pi*beat/8)*.35+.5)
				da_whee:zoom(math.sin(math.pi*beat/12)/2+1.5)
				--da_whee:rotationz(math.sin(beat/64)*math.cos(beat/48*math.pi)*30)
				da_whee:rotationy(math.cos(beat/32)*math.cos(beat/64*math.pi)*30)
				da_whee:rotationx(math.sin(beat/64)*math.sin(beat/32*math.pi)*30)
			end

            if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --
            
                -----------------------
                -- Player mod resets --
                -----------------------
            
                for i=1,2 do
                    GAMESTATE:ApplyGameCommand('mod,clearall',i)
                    if _G['init_modsp'..i] then 
                        GAMESTATE:ApplyGameCommand('mod,'.._G['init_modsp'..i],i)
                    end
                end
            
                ------------------------------------------------------------------------------
                -- custom mod reader by TaroNuke edited by WinDEU and re-stolen by TaroNuke --
                ------------------------------------------------------------------------------
                for i,v in pairs(mods) do
                    if v and table.getn(v) > 3 and v[1] and v[2] and v[3] and v[4] then
                        if beat >=v[1] then
                            if (v[4] == 'len' and beat <=v[1]+v[2]) or (v[4] == 'end' and beat <=v[2]) then
                                if table.getn(v) == 5 then
                                    GAMESTATE:ApplyGameCommand('mod,'..v[3],v[5]);
                                else
                                    GAMESTATE:ApplyGameCommand('mod,'..v[3]);
                                end						
                            end
                        end
                    else
                        v[1] = 0;
                        v[2] = 0;
                        v[3] = '';
                        v[4] = 'error';
                        SCREENMAN:SystemMessage('Bad mod in beat-based table (line '..i..')');
                    end
                end
                

				-------------------------------------
				-- Ease table (includes func_ease) --
				-------------------------------------
				for i,v in pairs(mods_ease) do
					if v and table.getn(v) > 6 and v[1] and v[2] and v[3] and v[4] and v[5] and v[6] and v[7] then
						if beat >=v[1] then
							if (v[6] == 'len' and beat <=v[1]+v[2]) or (v[6] == 'end' and beat <=v[2]) then
								local strength = v[7](beat - v[1], v[3], v[4] - v[3], v[6] == 'end' and v[2] - v[1] or v[2], v[10], v[11])
								if type(v[5]) == 'string' then
									local modstr = v[5] == 'xmod' and strength..'x' or (v[5] == 'cmod' and 'C'..strength or strength..' '..v[5])
									GAMESTATE:ApplyGameCommand('mod,*9999 '..modstr,v[8]);
								elseif type(v[5]) == 'function' then
									v[5](strength)
								end
							elseif (v[9] and ((v[6] == 'len' and beat <=v[1]+v[2]+v[9]) or (v[6] == 'end' and beat <=v[9]))) then
								if type(v[5]) == 'string' then
									local modstr = v[5] == 'xmod' and v[4]..'x' or (v[5] == 'cmod' and 'C'..v[4] or v[4]..' '..v[5])
									GAMESTATE:ApplyGameCommand('mod,*9999 '..modstr,v[8]);
								elseif type(v[5]) == 'function' then
									v[5](v[4])
								end
							end
						end
					else
						SCREENMAN:SystemMessage('Ease Error! (line '..i..' | beat: '.. v[1] .. ' | mod: '.. v[5] ..')');
					end
				end
				
                ------------------
                -- Actions shit --
                ------------------
                while curmessage<=table.getn(messages) and GAMESTATE:GetSongBeat()>=messages[curmessage][1] do
                    if messages[curmessage][3] or GAMESTATE:GetSongBeat() < messages[curmessage][1]+2 then
                        if type(messages[curmessage][2]) == 'function' then
                            messages[curmessage][2]()
                        elseif type(messages[curmessage][2]) == 'string' then
                            MESSAGEMAN:Broadcast(messages[curmessage][2]);
                        end
                    end
                    curmessage = curmessage+1;
                end
	
				if da_petalstorm then
					--auxx
					if beat > 64 and beat < 68 then
						da_auxx:aux(((beat-64)/4)^2*-90)
					elseif beat > 74 and beat < 76 then
						da_auxx:aux((1-((beat-74)/2)^2)*-90)
					elseif beat > 80 and beat < 84 then
						da_auxx:aux(((beat-80)/4)^2*90)
					elseif beat > 88 and beat < 92 then
						da_auxx:aux((1-((beat-88)/4)^.5)*90)
					elseif beat > 92 and beat < 116 then
						da_auxx:aux(da_auxx:getaux()+.2)
					elseif beat > 116 and beat < 124 then
						da_auxx:aux(da_auxx:getaux() + (beat-116)/2)
					elseif beat > 124 and beat < 148 then
						da_auxx:aux(da_auxx:getaux()+math.pi)
					elseif beat > 148 and beat < 152 then
						da_auxx:aux(da_auxx:getaux()+1.1221+(152-beat)/4*(math.pi-1.1221))
					elseif beat > 152 and beat < 176 then
						da_auxx:aux(da_auxx:getaux()+1.1221)
					elseif beat > 176 and beat < 180 then
						da_auxx:aux(da_auxx:getaux()+1.1221*(180-beat)/4)
					elseif beat > 211 then 
						da_auxx:aux(da_auxx:getaux()+1.1221)
					end
					
					--auxy
					if beat > 52 and beat < 60 then
						da_auxy:aux((beat-52)^2 * 5)
					elseif beat > 60 and beat < 91 then
						da_auxy:aux(da_auxy:getaux()+math.pi)
					elseif beat > 88 and beat < 92 then				
						da_auxy:aux(da_auxy:getaux()+(1-((beat-91)/4)^.85)*math.pi)
					elseif beat > 92 and beat < 112 then
						da_auxy:aux(da_auxy:getaux()-.1)
					elseif beat > 112 and beat < 116 then
						da_auxy:aux(da_auxy:getaux()-(1-((beat-112)/4)^2))
					elseif beat > 148 and beat < 152 then
						da_auxy:aux(da_auxy:getaux()-1.987*(beat-148)/4)
					elseif beat > 152 and beat < 176 then
						da_auxy:aux(da_auxy:getaux()-1.987)
					elseif beat > 176 and beat < 180 then
						da_auxy:aux(da_auxy:getaux()-1.987*(180-beat)/4)
					elseif beat > 211 then
						da_auxy:aux(da_auxy:getaux()-1.987)
					end
					
					--auxz
					if beat > 91 and beat < 124 then
						da_auxz:aux((beat-91) * 23)
					elseif beat > 124 and beat < 132 then
						da_auxz:aux((beat-91) * 23 - ((beat-124)/8*23))
					elseif beat > 148 and beat < 152 then
						da_auxz:aux(da_auxz:getaux()-1.7643*(beat-148)/4)
					elseif beat > 152 and beat < 176 then
						da_auxz:aux(da_auxz:getaux()-1.7643)
					elseif beat > 176 and beat < 180 then
						da_auxz:aux(da_auxz:getaux()-1.7643*(180-beat)/4)
					elseif beat > 211 then
						da_auxz:aux(da_auxz:getaux()-1.7643)
					end
					da_petalstorm:rotationx(da_auxx:getaux())
					da_petalstorm:rotationy(da_auxy:getaux())
					da_petalstorm:rotationz(da_auxz:getaux())
				end
	
				if beat > 28 and beat < 58.9 then
					local testjangle = math.sin(beat*math.pi)
					local wangjangle = testjangle
					if wangjangle < 0 then
						testjangle = (-1*testjangle)^.5*-25
					else
						testjangle = testjangle^.5*-10
					end
					for i,v in ipairs(mod_plr) do
						if v then
							if wangjangle < 0 then
								v:skewx(.5*wangjangle*(i*2-3))
							end
							local modString = 'mod,*10000 '.. testjangle ..' reverse,*10000 '.. wangjangle^.5*100 ..' brake'
							if beat < 58 then modString = modString .. ',*10000 '.. wangjangle^.5*(-123-beat)*(i*2-3) ..' dizzy' end
							
							if beat > 44 then modString = modString .. ',*10000 '.. wangjangle^.9*100 ..' tornado,*10000 '.. wangjangle^.5*50 ..' stealth' end
							GAMESTATE:ApplyGameCommand(modString,i); 
						end
					end
					
					
				elseif beat > 60 and beat < 90 then
					for i,v in ipairs(mod_plr) do
						if v then
							v:rotationy(math.mod(beat*180 + ((i-1)*180) + 180 ,360)-180)
							v:GetChild('Judgment'):x(400*(-.5*math.cos(beat*math.pi)))
							v:GetChild('Combo'):x(400*(-.5*math.cos(beat*math.pi)))
						end
					end
				elseif beat > 124 and beat < 155 then
					local tweenval = 0
					if beat > 132 and beat < 134 then
						tweenval = linear(beat-132,0,30,2)
					elseif beat > 134 and beat < 138 then
						tweenval = linear(beat-134,30,-70,4)
					elseif beat > 138 and beat < 140 then
						tweenval = linear(beat-138,-40,40,2)
					end
					for i,v in ipairs(mod_plr) do
						if v then
							v:rotationx(math.mod(beat*180 + (i*180) + 180 ,360)-180)
							v:rotationy(tweenval)
						end
					end
				elseif beat > 156 and beat < 179 then
					local testjangle = math.sin(beat*math.pi)
					local testjangle2 = math.sin(beat*math.pi*2)
					local wangjangle = testjangle
					if wangjangle < 0 then
						testjangle = (-1*testjangle)^.5*-25
					else
						testjangle = testjangle^.5*-10
					end
					local wangjangle2 = testjangle2
					if wangjangle2 < 0 then
						testjangle2 = -1*(-1*testjangle2)^.9
					else
						testjangle2 = testjangle2^.9
					end
					for i,v in ipairs(mod_plr) do
						if v then
							if wangjangle < 0 then
								v:skewx(.25*testjangle2*(i*2-3))
								if beat < 171 then
									v:zoomy(.25*testjangle/-25+1)
								else
									v:zoomx(.15*testjangle/-25+1)
								end
							else
								if beat < 171 then
									v:zoomy(1-.2*testjangle/-10)
								else
									v:zoomx(.15*testjangle/-25+1)
								end
								v:skewx(.5*wangjangle*(i*2-3))
							end
							local modString = 'mod,*10000 '.. testjangle ..' reverse,*10000 '.. wangjangle^.5*100 ..' brake'
							--if beat < 58 then modString = modString .. ',*10000 '.. wangjangle^.5*(-123-beat)*(i*2-3) ..' dizzy' end
							
							modString = modString .. ',*10000 '.. wangjangle^.9*100 ..' drunk'
							GAMESTATE:ApplyGameCommand(modString,i); 
						end
					end
				elseif beat > 194 and beat < 211 then
				
					--quick yoink from koi hadou
				
					local auxval = 0
					if da_aux then auxval = da_aux:getaux() end

					local angr = math.rad(auxval)
					local mult = 1
					
					if beat < 195 then
						mult = (((beat-194)*2)^.5)*.5
					elseif beat < 196 then
						mult = (((beat-195)*2)^.5)*.5+.5
					end
					
					for pn,a in ipairs(mod_plr) do
							if a then
								a:zoomz(0)
								a:rotationx(mult*math.sin(angr+math.pi*(pn-1)));
								a:rotationy(mult*math.cos(angr+math.pi*(pn-1)));
								a:y( SCREEN_HEIGHT/2 )
							end
							
							GAMESTATE:ApplyGameCommand('mod,*1000 0.05x,*100000 100000 bumpy,*10000 -95 suddenoffset,*1000 800 sudden,*1000 50 flip,*1000 100 centered',pn)
					end
				elseif beat > 236 and beat < 263 then
					local testjangle = math.sin(beat*math.pi)
					local wangjangle = testjangle
					if wangjangle < 0 then
						testjangle = (-1*testjangle)^.5*-25
					else
						testjangle = testjangle^.5*-10
					end
					for i,v in ipairs(mod_plr) do
						if v then
							if wangjangle < 0 then
								v:skewx(.5*wangjangle*(i*2-3))
							end
							local modString = 'mod,*10000 '.. testjangle ..' reverse,*10000 '.. wangjangle^.5*100 ..' brake'
							GAMESTATE:ApplyGameCommand(modString,i); 
						end
					end
				end
				
            end
			
			self:sleep(0.02);
			self:queuecommand('Update');

---------------------------------------------------------------------------------------
----------------------END DON'T TOUCH IT KIDDO-----------------------------------------
---------------------------------------------------------------------------------------
          
        end"
		
	/>
   
	<Layer File="marsface1" InitCommand="%function(self)
			self:hidden(1);
			da_face = self;
			self:x(SCREEN_CENTER_X)
			self:y(SCREEN_CENTER_Y)
		end"
	/>
	<Layer File="marsface2" InitCommand="%function(self)
			self:hidden(1);
			da_face2 = self;
			self:x(SCREEN_CENTER_X)
			self:y(SCREEN_CENTER_Y)
			self:blend('add')
		end"
	/>
	<Layer File="blossoms2" InitCommand="%function(self)
			self:hidden(0);
			self:hibernate(10)
			self:x(SCREEN_CENTER_X)
			self:y(SCREEN_CENTER_Y)
			self:zoomtoheight(SCREEN_HEIGHT*1.3)
			self:zoomtowidth(SCREEN_WIDTH)
			self:blend('add')
			self:sleep(3)
			self:queuecommand('hul')
		end"
		hulCommand="hidden,1"
	/>
	<Layer File="blossoms3" InitCommand="%function(self)
			self:hidden(0);
			self:hibernate(10.47)
			self:x(SCREEN_CENTER_X)
			self:y(SCREEN_CENTER_Y)
			self:zoomtoheight(SCREEN_HEIGHT*1.3)
			self:zoomtowidth(SCREEN_WIDTH)
			self:blend('add')
		end"
		hooMessageCommand="linear,spb;diffusealpha,0"
	/>
	<Layer Type="Quad" InitCommand="%function(self) self:hidden(1); da_aux = self; self:aux(0) end" />
	<Layer Type="Quad" InitCommand="%function(self) self:hidden(1); da_auxx = self; self:aux(0) end" />
	<Layer Type="Quad" InitCommand="%function(self) self:hidden(1); da_auxy = self; self:aux(0) end" />
	<Layer Type="Quad" InitCommand="%function(self) self:hidden(1); da_auxz = self; self:aux(0) end" />
</children></ActorFrame>