<ActorFrame
    InitCommand="%function(self)

        songName = GAMESTATE:GetCurrentSong():GetSongDir();
	
		function mod_do(str,pn)
			if pn then
				GAMESTATE:ApplyGameCommand('mod,'..str,pn)
			else
				GAMESTATE:ApplyGameCommand('mod,'..str)
			end
		end
	
    end"
><children>

	<Actor
	Type="Quad" InitCommand="hidden,1" OnCommand="sleep,1000" />
	
	<Layer File="easing" />
	<Layer File="modhelpers" />
	<Layer File="player_movement" />
	<Layer File="spellcard" />
	
	<Actor
	Type="Quad" InitCommand="hidden,1"
		OnCommand="%function(self)

			slumpo = false
			for pn=1,2 do
				if GAMESTATE:IsPlayerEnabled(pn-1) then
					if GAMESTATE:GetCurrentSteps(pn-1):GetDifficulty() == 5 then
						slumpo = true
					end
				end
			end
		
			debug_show = false;
			spb = 6/19
---------------------------------------------------------------------------------------
----------------------DON'T TOUCH IT KIDDO---------------------------------------------
---------------------------------------------------------------------------------------

			checked = false; P1=nil;P2=nil;P3=nil;P4=nil;jud1=nil;com1=nil;jud2=nil;com2=nil;jud3=nil;com3=nil;
			mod_plr = {};
			mod_firstSeenBeat = GAMESTATE:GetSongBeat();
			bun_czech = 1
			local m=mod_insert
			local me=mod_ease
			local mm=mod_message
			
---------------------------------------------------------------------------------------
----------------------END DON'T TOUCH IT KIDDO-----------------------------------------
---------------------------------------------------------------------------------------

            --beat based mods
            --{beat_start, beat_end, mods, len_or_end, player_number}
            mods = {
				{0,330,'*100000 -999999 cover, *1000 1x, *1000 C300, *100000 overhead','end'},
				{37.5,1,'*1000 50 beat','len'},
				{38,68.5,'*.25 5000 beat','end'},
				{68.5,1,'*10000 no beat','len'},
				
				{70,82.5,'*1000 100 beat','end',2},
				{82,90.5,'*1000 100 drunk','end',1},
				{90,106.5,'*1000 -100 tipsy, *1000 100 sudden, *1000 90 suddenoffset','end',2},
				{106,113.5,'*1000 75 brake, *1000 C250','end',1},
				{115,119.5,'*1000 120 boost','end',1},
				{119,123.5,'*1000 120 wave','end',2},
				{123,129,'*1000 120 dizzy','end',1},
				{128.5,139.5,'*1000 300 bumpy, *1000 20 centered','end',2},
				{139.5,1,'*1000 no bumpy','len',2},
				{139,144,'*1000 25 tornado','end',1},
				{143.5,157,'*1000 100 blink','end',2},
				{156.5,161.5,'*1000 100 reverse','end',1},
				{162,166,'*5 no mini','end'},
				{162,.1,'*1000 -100 mini','len'},
				{163,.1,'*1000 -100 mini','len'},
				{164,.1,'*1000 -100 mini','len'},
				{164.25,.1,'*1000 -100 mini','len'},
				{164.75,.1,'*1000 -100 mini','len'},
				{165,.1,'*1000 -100 mini','len'},
				{161.5,189.5,'*1000 100 beat','end'},
				
				{168,176,'*1000 100 sudden, *1000 100 suddenoffset','end',1},
				
				{194,330,'*1000 100 sudden, *1000 100 suddenoffset','end'},
				{198,294,'*1000 -125 space','end'},
				{290,3,'*1000 125 hallway','len'},
				{294,325,'*1000 125 incoming','end'},
				{197.5,294,'*1000 -100 beat, *1 25 bumpy, *5 50 tipsy','end',1},
				{294,330,'*1000 -200 beat, *1 50 bumpy, *5 100 tipsy, *5 -100 drunk','end',1},
				{197.5,294,'*1000 100 beat, *1 -25 bumpy, *5 -50 tipsy','end',2},
				{294,330,'*1000 200 beat, *1 -50 bumpy, *5 100 tipsy, *5 -100 drunk','end',2},
				{326,20,'*1000 no beat, *10 100000 bumpy, *10 10000 tornado,*10 10000 wave,*100 100 centered','len',1},
				{326,20,'*1000 no beat, *10 -100000 bumpy, *5 -10000 tornado, *20 -100000 wave,*100 100 centered','len',2},
				
				{236.9,.15,'*1000 100 stealth, *1000 100 dark','len',2},
				{245.9,.15,'*1000 100 stealth, *1000 100 dark,*1000 no dizzy,*1000 no tornado,*1000 no flip','len',1},
				{242,.5,'*1000 100 tornado, *1000 35 flip, *1000 699 dizzy','len',1},
				
            }
			
			--beat-based ease mods
			--{time_start, time_end, mod_start, mod_end, mod, len_or_end, ease_type, player_number, sustaintime, optional_param1, optional_param2}
			--valid ease types are:
				--linear
				--inQuad    outQuad    inOutQuad    outInQuad
				--inCubic   outCubic   inOutCubic   outInCubic
				--inQuart   outQuart   inOutQuart   outInQuart
				--inQuint   outQuint   inOutQuint   outInQuint
				--inSine    outSine    inOutSine    outInSine
				--inExpo    outExpo    inOutExpo    outInExpo
				--inCirc    outCirc    inOutCirc    outInCirc
				--inElastic outElastic inOutElastic outInElastic    --can take 2 optional parameters - amplitude & period
				--inBack    outBack    inOutBack    outInBack       --can take 1 optional parameter  - spring amount
				--inBounce  outBounce  inOutBounce  outInBounce
				
			mods_ease = {
				-- EXAMPLE TWEEN: from beat 0 to 4, make rotationz go from 360 to 0 with the inOutBack tween
				--{32,40,0,1.75,'xmod','end',outInBounce},
			}
			
			m(1.5,.25,'*50 -200 tipsy','len')
			m(1.75,.25,'*50 200 tipsy','len')
			m(2,.5,'*50 -200 tipsy','len')
			
			m(2.5,.25,'*50 200 tipsy','len')
			m(2.75,.25,'*50 -200 tipsy','len')
			m(3,1,'*50 200 tipsy','len')
			
			me(3.5,.5,0,-200,'mini','len',outCirc)
			me(4,.5,-200,0,'mini','len',outCirc)
			
			m(4.5,.25,'*50 -200 tipsy','len')
			m(4.75,.25,'*50 200 tipsy','len')
			m(5,.25,'*50 -200 tipsy','len')
			m(5.25,.25,'*50 200 tipsy','len')
			m(5.5,.5,'*50 -200 tipsy','len')
			
			me(5.5,.5,0,100,'mini','len',outQuint)
			me(6,.5,100,200,'mini','len',outQuint)
			me(6.5,66,200,-300,'mini','end',inQuad)
			
			me(0,28,95,95,'stealth','end',linear)
			me(28,36,95,0,'stealth','end',linear)
			
			me(13.5,.25,-100,0,'mini','len',outCirc)
			me(13.75,.25,0,-100,'mini','len',inCirc)
			
			me(20,.5,0,200,'mini','len',inCirc)
			me(21,.5,-100,200,'mini','len',inCirc)
			me(21,.5,10,0,'flip','len',inCirc)
			me(22,.25,-200,200,'mini','len',inCirc)
			me(22,.25,20,0,'flip','len',inCirc)
			me(22.5,.25,0,200,'mini','len',inCirc)
			
			me(28.5,.25,0,200,'mini','len',inCirc)
			me(28.75,.25,0,200,'mini','len',inCirc)
			me(29,.25,0,200,'mini','len',inCirc)
			me(29.5,.25,0,200,'mini','len',inCirc)
			me(30,.25,0,200,'mini','len',inCirc)
			me(30.5,.25,0,200,'mini','len',inCirc)
			me(32,.25,0,200,'mini','len',inCirc)
			me(32.5,.25,0,200,'mini','len',inCirc)
			
			me(34,1,0,25,'reverse','len',outQuart)
			me(35,1,25,50,'reverse','len',outQuart)
			me(36,1,50,100,'reverse','len',outQuart)
			me(37,1,100,0,'reverse','len',inCirc)
			
			me(44,.5,0,-25,'reverse','len',outQuart)
			me(44.5,.5,-25,-50,'reverse','len',outQuart)
			me(45,.25,-50,-100,'reverse','len',outQuad)
			me(45.25,.75,-100,0,'reverse','len',inQuad)
			
			me(52,.5,0,15,'reverse','len',outQuart)
			me(52.5,.5,15,30,'reverse','len',outQuart)
			me(53,.25,30,45,'reverse','len',outQuad)
			me(53.25,.75,45,0,'reverse','len',inQuad)
			
			me(60,.5,0,-25,'reverse','len',outQuart)
			me(60.5,.5,-25,-50,'reverse','len',outQuart)
			me(61,.25,-50,-100,'reverse','len',outQuad)
			me(61.25,.75,-100,0,'reverse','len',inQuad)
			
			me(66,68,-300,0,'mini','end',inBack)
			me(38,66,0,30,'flip','end',linear)
			me(66,68,30,0,'flip','end',inBack)
			me(38,66,1.578,.5,'xmod','end',linear)
			me(66,68,.5,1.578,'xmod','end',inBack)
			
			me(69,69.5,0,-50,'reverse','end',outCirc)
			me(69.5,70,-50,0,'reverse','end',inCirc)
			
			me(194,4,0,-125,'space','len',outQuad)
			
			me(198,1,-50,0,'mini','len',inQuad)
			me(198,1,50,0,'stealth','len',inQuad)
			me(210,1,-50,0,'mini','len',inQuad)
			me(211.5,1,-50,0,'mini','len',inQuad)
			me(213,1,-50,0,'mini','len',inQuad)
			me(214,1,-50,0,'mini','len',inQuad)
			me(210,1,50,0,'stealth','len',inQuad)
			me(211.5,1,50,0,'stealth','len',inQuad)
			me(213,1,50,0,'stealth','len',inQuad)
			me(214,1,50,0,'stealth','len',inQuad)
			
			me(220,1,-50,0,'mini','len',inQuad)
			me(220,1,50,0,'stealth','len',inQuad)
			
			me(222,1,-50,0,'mini','len',inQuad)
			me(222,1,50,0,'stealth','len',inQuad)
			me(228.5,1,-50,0,'mini','len',inQuad)
			me(228.5,1,50,0,'stealth','len',inQuad)
			me(230,1,-50,0,'mini','len',inQuad)
			me(230,1,50,0,'stealth','len',inQuad)
			
			me(242,1,-50,0,'mini','len',inQuad)
			me(243.5,1,-50,0,'mini','len',inQuad)
			me(245,1,-50,0,'mini','len',inQuad)
			me(246,1,-50,0,'mini','len',inQuad)
			me(242,1,50,0,'stealth','len',inQuad)
			me(243.5,1,50,0,'stealth','len',inQuad)
			me(245,1,50,0,'stealth','len',inQuad)
			me(246,1,50,0,'stealth','len',inQuad)
			
			me(252,1,-50,0,'mini','len',inQuad)
			me(252,1,50,0,'stealth','len',inQuad)
			me(254,1,-50,0,'mini','len',inQuad)
			me(254,1,50,0,'stealth','len',inQuad)
			
			me(261,1,-50,0,'mini','len',inQuad)
			me(261,1,50,0,'stealth','len',inQuad)
			me(262,1,-50,0,'mini','len',inQuad)
			me(262,1,50,0,'stealth','len',inQuad)
			
			me(210,.5,314,0,'dizzy','len',linear)
			me(211,.5,-314,0,'dizzy','len',linear)
			me(212,.5,314,0,'dizzy','len',linear)
			me(213,.5,-314,0,'dizzy','len',linear)
			me(214,.5,314,0,'dizzy','len',linear)
			
			me(226,1,0,15,'reverse','len',outCirc)
			me(227,1,15,30,'reverse','len',outCirc)
			me(228,1,30,15,'reverse','len',outCirc)
			me(228,.5,0,150,'drunk','len',outCirc,1)
			me(228.5,.5,150,-150,'drunk','len',outCirc,1)
			me(229,.5,-150,0,'drunk','len',outCirc,1)
			me(228,.5,0,-150,'drunk','len',outCirc,2)
			me(228.5,.5,-150,150,'drunk','len',outCirc,2)
			me(229,.5,150,0,'drunk','len',outCirc,2)
			me(229,.25,15,-25,'reverse','len',outQuad)
			me(229.25,.8,-25,0,'reverse','len',inCirc)
			
			me(210+64,.5,314,0,'dizzy','len',linear)
			me(211+64,.5,-314,0,'dizzy','len',linear)
			me(212+64,.5,314,0,'dizzy','len',linear)
			me(213+64,.5,-314,0,'dizzy','len',linear)
			me(214+64,.5,314,0,'dizzy','len',linear)
			
			me(226+64,1,0,15,'reverse','len',outCirc)
			me(227+64,1,15,30,'reverse','len',outCirc)
			me(228+64,1,30,15,'reverse','len',outCirc)
			me(228+64,.5,0,150,'drunk','len',outCirc,1)
			me(228.5+64,.5,150,-150,'drunk','len',outCirc,1)
			me(229+64,.5,-150,0,'drunk','len',outCirc,1)
			me(228+64,.5,0,-150,'drunk','len',outCirc,2)
			me(228.5+64,.5,-150,150,'drunk','len',outCirc,2)
			me(229+64,.5,150,0,'drunk','len',outCirc,2)
			me(229+64,.25,15,-25,'reverse','len',outQuad)
			me(229.25+64,.8,-25,0,'reverse','len',inCirc)
			
			me(210+96,.5,314,0,'dizzy','len',linear)
			me(211+96,.5,-314,0,'dizzy','len',linear)
			me(212+96,.5,314,0,'dizzy','len',linear)
			me(213+96,.5,-314,0,'dizzy','len',linear)
			me(214+96,.5,314,0,'dizzy','len',linear)
			
			me(274,1,-50,0,'mini','len',inQuad)
			me(275.5,1,-50,0,'mini','len',inQuad)
			me(277,1,-50,0,'mini','len',inQuad)
			me(278,1,-50,0,'mini','len',inQuad)
			me(274,1,50,0,'stealth','len',inQuad)
			me(275.5,1,50,0,'stealth','len',inQuad)
			me(277,1,50,0,'stealth','len',inQuad)
			me(278,1,50,0,'stealth','len',inQuad)
			
			me(284,1,-50,0,'mini','len',inQuad)
			me(284,1,50,0,'stealth','len',inQuad)
			me(286,1,-50,0,'mini','len',inQuad)
			me(286,1,50,0,'stealth','len',inQuad)
			
			me(293,1,-50,0,'mini','len',inQuad)
			me(293,1,50,0,'stealth','len',inQuad)
			me(294,1,-50,0,'mini','len',inQuad)
			me(294,1,50,0,'stealth','len',inQuad)
			
			me(306,1,-50,0,'mini','len',inQuad)
			me(307.5,1,-50,0,'mini','len',inQuad)
			me(309,1,-50,0,'mini','len',inQuad)
			me(310,1,-50,0,'mini','len',inQuad)
			me(306,1,50,0,'stealth','len',inQuad)
			me(307.5,1,50,0,'stealth','len',inQuad)
			me(309,1,50,0,'stealth','len',inQuad)
			me(310,1,50,0,'stealth','len',inQuad)
			
			me(310,16,125,0,'incoming','len',linear)
			
			me(316,1,-50,0,'mini','len',inQuad)
			me(316,1,50,0,'stealth','len',inQuad)
			me(318,1,-50,0,'mini','len',inQuad)
			me(318,1,50,0,'stealth','len',inQuad)
			
			me(322,1,0,-60,'reverse','len',outCirc)
			me(323,1,-60,0,'reverse','len',outCirc)
			me(324,1,0,40,'reverse','len',outCirc)
			me(325,1,40,0,'reverse','len',outCirc)
			me(325,1,0,100,'centered','len',inQuad)
			
			me(318,8,0,-200,'mini','len',inQuad)
			
			me(325,1,125,0,'incoming','len',inQuad)
			
			me(259,262,0,100,'brake','end',linear)
			me(286,293,0,100,'brake','end',linear)
			
			--258 to 262
			if slumpo then
				me(226,230,300,420,'cmod','end',linear,nil,258)
				me(258,262,420,300,'cmod','end',linear)
			end
			
			if FUCK_EXE then
				m(0,330,'*100 -99 drawsizeback, *100 stealthpastreceptors','len')
			end
			
			--me(beat,len,str1,str2,mod,t,ease,pn,sus,opt1,opt2)
			
            --SCREAMING GUMBALL / timed message broadcaster
            --they no longer have to be in order, because they're sorted now
            curmessage = 1;
            --{beat,message,persists}
            messages = { 
				{5.5,'IntroBG',true},
				{37,'RevealBG',true},
				{66,'ResetXRot'},
				{70,'Page11',true},
				{82,'Page12'},
				{90,'Page13'},
				{106,'Page14'},
				{113,'Page15'},
				{115,'Page16'},
				{119,'Page17'},
				
				{123,'Page21'},
				{128.5,'Page22',true},
				{139,'Page23'},
				{143.5,'Page24'},
				{156.5,'Page25'},
				{161,'Page26'},
				
				{168,'Page31'},
				{175.5,'Page32'},
				{180,'Page33'},
				{193.5,'LLOL', true},
				
				{208,'WarningP2'},
				{208+9,'WarningP1'},
				{230,'WarningP2'},
				{238,'WarningP1'},
				{286,'WarningP1'},
				{286,'WarningP2'},
				
				{212,'BallP2'},
				{212+8,'BallP1'},
				
				{230,'bgb',true},
				{246,'bga',true},
				{262,'bgc',true},
				{266,'Cocktower'},
				
				{240,'PanFling'},
				{242,'PanHit'},
				{246,'Unpan'},
				
				{232,'Holey'},
				{237,'Unholey'},
				
				{250.5,'Waah'},
				{253.5,'Waah2'},
				{258,'Waah3'},
				
				{282,'CenterFly'},
				{290,'ByeFly'},
				{287,'Spam'},
				{294,'MergeFly'},
				{306,'FadeDiv'},
				{310,'FinFly'},
				
				{328,'Fin'},
				{333,'YourWishIsMy'},
            }
			
			local textedit = {162,163,164,164.25,164.75,165}
			for i,v in pairs(textedit) do
				mm(v,function(self) if usa_modtext2 then usa_modtext2:settext('100% Beat\n-100% Mini'); usa_modtext2:zoom(2); usa_modtext2:linear(spb*.2); usa_modtext2:zoom(1); end; end)
				mm(v+.2,function(self) if usa_modtext2 then usa_modtext2:settext('100% Beat'); end; end)
			end
						
			local usa_parity = 0
			for i=176,180,1 do
				m(i,1,'*8 '.. 50*usa_parity ..' flip','len',2)
				usa_parity = usa_parity*-1+1
					if usa_parity == 0 then
						mm(i,function(self) if usa_modtext2 then usa_modtext2:settext('100% Beat');usa_modtext2:linear(spb*.5);usa_modtext2:zoomx(1); end; end)
					else
						mm(i,function(self) if usa_modtext2 then usa_modtext2:settext('100% Beat\n50% Flip');usa_modtext2:linear(spb*.5);usa_modtext2:zoomx(0); end; end)
					end
			end
			
			for i=180,193,1 do
				m(i,1,'*8 '.. 100*usa_parity ..' invert','len',1)
				usa_parity = usa_parity*-1+1
				if usa_parity == 0 then
					mm(i,function(self) if usa_modtext1 then usa_modtext1:settext('100% Beat');usa_modtext1:linear(spb*.5);usa_modtext1:zoomy(1); usa_modtext2:zoomx(1); end; end)
				else
					mm(i,function(self) if usa_modtext1 then usa_modtext1:settext('100% Beat\n100% Invert'); usa_modtext1:linear(spb*.5);usa_modtext1:zoomy(-1); usa_modtext2:zoomx(-1);end; end)
				end
			end
						
---------------------------------------------------------------------------------------
----------------------DON'T TOUCH IT KIDDO---------------------------------------------
---------------------------------------------------------------------------------------
			
			function message_compare(a,b)
				return a[1] < b[1]
			end
			
			if table.getn(messages) > 1 then
				table.sort(messages, message_compare)
			end
			
			self:queuecommand('Update');
			
		end"
        
		UpdateCommand="%function(self)

        ---------------------------------------------------------------------------------------
        ----------------------DON'T TOUCH IT KIDDO---------------------------------------------
        ---------------------------------------------------------------------------------------
        
            --hide things as needed, and set up aliases if checked is false
			if not checked and GAMESTATE:GetSongBeat()>=0 then
				
                thingsToGrab = {'LifeP1','LifeP2','ScoreP1','ScoreP2','BPMDisplay','LifeFrame','ScoreFrame','Lyrics','SongForeground','SongBackground','Overlay','Underlay'}
                thingsToHide = {'LifeP1','LifeP2','ScoreP1','ScoreP2','BPMDisplay','LifeFrame','ScoreFrame','Overlay','Underlay'}
                
                for i,v in ipairs(thingsToGrab) do
                    _G[v] = SCREENMAN:GetTopScreen():GetChild(v) or nil
                end
                
                for i,v in ipairs(thingsToHide) do
                    if _G[v] then _G[v]:hidden(1) end
                end
				
				table.insert(mod_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP1'));
				table.insert(mod_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP2'));
				
				for i,v in pairs(mod_plr) do
					if SCREENMAN:GetTopScreen():GetChild('PlayerOptionsP'..i) then
						_G['init_modsp'..i] = SCREENMAN:GetTopScreen():GetChild('PlayerOptionsP'..i):GetText();
					end
				end
				
				screen = SCREENMAN:GetTopScreen();
				checked = true;
                
                P1 = SCREENMAN:GetTopScreen():GetChild('PlayerP1');
				P2 = SCREENMAN:GetTopScreen():GetChild('PlayerP2');
			end
			
			local beat = GAMESTATE:GetSongBeat()
				

            if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --
            
                -----------------------
                -- Player mod resets --
                -----------------------
            
                for i=1,2 do
                    GAMESTATE:ApplyGameCommand('mod,clearall',i)
                    if _G['init_modsp'..i] then 
                        GAMESTATE:ApplyGameCommand('mod,'.._G['init_modsp'..i],i)
                    end
                end
            
                ------------------------------------------------------------------------------
                -- custom mod reader by TaroNuke edited by WinDEU and re-stolen by TaroNuke --
                ------------------------------------------------------------------------------
                for i,v in pairs(mods) do
                    if v and table.getn(v) > 3 and v[1] and v[2] and v[3] and v[4] then
                        if beat >=v[1] then
                            if (v[4] == 'len' and beat <=v[1]+v[2]) or (v[4] == 'end' and beat <=v[2]) then
                                if table.getn(v) == 5 then
                                    GAMESTATE:ApplyGameCommand('mod,'..v[3],v[5]);
                                else
                                    GAMESTATE:ApplyGameCommand('mod,'..v[3]);
                                end						
                            end
                        end
                    else
                        v[1] = 0;
                        v[2] = 0;
                        v[3] = '';
                        v[4] = 'error';
                        SCREENMAN:SystemMessage('Bad mod in beat-based table (line '..i..')');
                    end
                end
                
				--------------------------------------------------------------------------------------
				-- i dont know who this reader is but he looks like he is made out of EASE HAHAHAHA --
				-- original code by exschwasion, bastardized by taro for cmod support and less 'if' --
				--------------------------------------------------------------------------------------
				for i,v in pairs(mods_ease) do
					if v and table.getn(v) > 6 and v[1] and v[2] and v[3] and v[4] and v[5] and v[6] and v[7] then
						if beat >=v[1] then
							if (v[6] == 'len' and beat <=v[1]+v[2]) or (v[6] == 'end' and beat <=v[2]) then
								
								local duration = v[2];
								if v[6] == 'end' then duration = v[2] - v[1] end
								local curtime = beat - v[1]
								local diff = v[4] - v[3]
								local startstrength = v[3]
								local curve = v[7]
								local mod = v[5]
								
								local strength = curve(curtime, startstrength, diff, duration, v[10], v[11]) --extra parameters for back and elastic eases :eyes:
								
								local modstr = v[5] == 'xmod' and strength..'x' or (v[5] == 'cmod' and 'C'..strength or strength..' '..v[5])
								mod_do('*10000 '..modstr,v[8]);
								
							elseif (v[9] and ((v[6] == 'len' and beat <=v[1]+v[2]+v[9]) or (v[6] == 'end' and beat <=v[9]))) then
							
								local strength = v[4]
								
								local modstr = v[5] == 'xmod' and strength..'x' or (v[5] == 'cmod' and 'C'..strength or strength..' '..v[5])
								mod_do('*10000 '..modstr,v[8]);
								
							end
						end
					else
						SCREENMAN:SystemMessage('Bad mod in beat-based ease table (line '..i..')');
					end
				end
				
                ------------------
                -- Actions shit --
                ------------------
                while curmessage<=table.getn(messages) and GAMESTATE:GetSongBeat()>=messages[curmessage][1] do
                    if messages[curmessage][3] or GAMESTATE:GetSongBeat() < messages[curmessage][1]+2 then
                        if type(messages[curmessage][2]) == 'function' then
                            messages[curmessage][2]()
                        elseif type(messages[curmessage][2]) == 'string' then
                            MESSAGEMAN:Broadcast(messages[curmessage][2]);
                        end
                    end
                    curmessage = curmessage+1;
                end
				
				if beat > 6 and beat < 38 then
					if usa_bgw then
						local diffuss = (beat-6)/(38-6)
						usa_bgw:diffuse(diffuss,diffuss,diffuss,1)
					end
				elseif beat > 38 and beat < 66 then
					local wagangle = math.sin(beat*math.pi)
					local ampa = ((beat-38)/28)*30 + 30
					for i,v in pairs(mod_plr) do
						if v then
							v:rotationx(wagangle*(i*2-3) * ampa)
						end
					end
				elseif beat > 71 and beat < 195 then
					local bun_mangaka = {
						{71,1,.75},
						{82,.5,.75},
						{90,1,.77},
						{106,1,1,.75},
						{113,1,.9},
						{115,.5,.9},
						{119,1,.9},
						{123,1,.8},
						{128.5,1,.85},
						{139,1,1},
						{143.5,1,.75},
						{156.5,.5,.8},
						{161,1,1},
						{168,.5,.8},
						{175,.5,.85},
						{180,.5,1.5,.55}
					}
					while bun_czech<=table.getn(bun_mangaka) and GAMESTATE:GetSongBeat()>=bun_mangaka[bun_czech][1] do
						if GAMESTATE:GetSongBeat() < bun_mangaka[bun_czech][1]+2 then
							local pnum = math.mod(bun_czech,2) + 1
							if _G['P'..pnum] then
								if bun_mangaka[bun_czech][4] then
									_G['P'..pnum]:zoomx(bun_mangaka[bun_czech][3])
									_G['P'..pnum]:zoomy(bun_mangaka[bun_czech][4])
								else
									_G['P'..pnum]:zoom(bun_mangaka[bun_czech][3])
								end
							end
						end
						bun_czech = bun_czech+1;
					end
					if beat > 70 and beat < 82 then
						local center = SCREEN_WIDTH*.29
						if usa_modtext2 then
							local addval = math.cos(beat*math.pi)
							if addval > .65  then
								addval = addval-.65
							elseif addval < -.65 then
								addval = addval+.65
							else
								addval=0
							end
							usa_modtext2:x(center + addval*50)
						end
					elseif beat > 82 and beat < 90 then
						local center = SCREEN_WIDTH*.34
						if usa_modtext1 then
							local addval = math.cos(beat/2)
							usa_modtext1:x(center + addval*30)
						end
					elseif beat > 90 and beat < 106 then
						local center = SCREEN_HEIGHT*.7
						if usa_modtext2 then
							usa_modtext2:y(center + math.cos(beat/2)*30)
						end
					elseif beat > 119 and beat < 123 then
						if usa_modtext2 then
							usa_modtext2:zoomy(-1*math.cos(beat*math.pi)+2)
						end
					elseif beat > 123 and beat < 128.5 then
						if usa_modtext1 then
							usa_modtext1:rotationz((beat*-20)+246)
						end
					elseif beat > 128.5 and beat < 139 then
						if usa_modtext2 then
							usa_modtext2:zoom(.5*math.cos(beat*2*math.pi)+1.5)
						end
					elseif beat > 139 and beat < 143.5 then
						local centerx = SCREEN_WIDTH*.4
						local centery = SCREEN_HEIGHT*.6
						if usa_modtext1 then
							usa_modtext1:y(centery + math.cos(beat*6)*30)
							usa_modtext1:x(centerx + math.sin(beat*6)*30)
						end
					elseif beat > 143.5 and beat < 156.5 then
						if usa_modtext2 then
							usa_modtext2:hidden(math.mod(math.floor(beat),2))
						end
					elseif beat > 161 and beat < 168 then
						if usa_modtext2 then
						local center = SCREEN_WIDTH*.3
							local addval = math.cos(beat*math.pi)
							if addval > .65  then
								addval = addval-.65
							elseif addval < -.65 then
								addval = addval+.65
							else
								addval=0
							end
							usa_modtext2:x(center + addval*50)
						end
						
					elseif beat > 168 and beat < 175.5 then
						GAMESTATE:ApplyGameCommand('mod,*1000 '.. math.sin(beat*math.pi)*120 ..' hallway',1)
						if usa_modtext1 then
							usa_modtext1:settext('100% Beat\n'.. math.floor(math.sin(beat*math.pi)*120) ..'% Hallway')
							local center = SCREEN_WIDTH*.3
							local addval = math.cos(beat*math.pi)
							if addval > .65  then
								addval = addval-.65
							elseif addval < -.65 then
								addval = addval+.65
							else
								addval=0
							end
							usa_modtext1:x(center + addval*50)
						end
					elseif beat > 175.5 and beat < 180 then
						if usa_modtext2 then
						local center = SCREEN_WIDTH*.325
							local addval = math.cos(beat*math.pi)
							if addval > .65  then
								addval = addval-.65
							elseif addval < -.65 then
								addval = addval+.65
							else
								addval=0
							end
							usa_modtext2:x(center + addval*50)
						end
					elseif beat > 180 and beat < 193.5 then
						if usa_modtext1 then
							local center = SCREEN_WIDTH*.325
							local addval = math.cos(beat*math.pi)
							if addval > .65  then
								addval = addval-.65
							elseif addval < -.65 then
								addval = addval+.65
							else
								addval=0
							end
							usa_modtext1:x(center + addval*50)
						end
					end
				elseif beat > 198 and beat < 282 then
					local ampconst = 4
					local centerconst = .5
					if beat > 261 and beat < 262 then
						ampconst = ((beat-261)/2)^2+4
						centerconst = inQuad(beat-261,.5,-1.25,1)
					elseif beat >= 262 and beat < 263 then
						ampconst = ((beat-261)/2)^2+4
						centerconst = outQuad(beat-262,2,-1.3,1)
					elseif beat > 263 then
						ampconst = 6;
						centerconst = .7;
					end
					for i,v in pairs(mod_plr) do
						if v then
							v:x(SCREEN_WIDTH*(centerconst+math.sin((beat-2)*math.pi/8)/ampconst*((i*2)-3)) + SCREEN_WIDTH*math.sin(beat-198+math.pi)*.1)
						end
					end
					
					if beat > 234 and beat < 236 and P2 then
						local tweenpos = inQuad(beat-234,0,1,2)
						P2:y(SCREEN_HEIGHT*.825+tweenpos*SCREEN_HEIGHT*.5)
						P2:rotationz(tweenpos*45)
					elseif beat > 242 and beat < 244 and P1 then
						P1:x(SCREEN_WIDTH*(centerconst+math.sin((242-2)*math.pi/8)/ampconst*(-1)) + SCREEN_WIDTH*math.sin(242-198+math.pi)*.1)
					elseif beat >= 244 and beat < 246 and P1 then
						local byedude = (beat-244)/1.5
						P1:x(SCREEN_WIDTH*(centerconst+math.sin((242-2)*math.pi/8)/ampconst*(-1)) + SCREEN_WIDTH*math.sin(242-198+math.pi)*.1 + byedude*SCREEN_CENTER_X)
						P1:y(SCREEN_WIDTH*-.3*byedude + SCREEN_HEIGHT*.325)
						P1:rotationz(byedude*70)					
					end
                end
				
				--air control
				if beat > 262 and beat < 331 then
					local tweenpos = (1400-SCREEN_WIDTH) * (beat-262)/69
					
					if usa_bgc1 and usa_bgc2 then
						if beat > 294 and beat < 310 then
							local innertween = inOutQuad(beat-294, 0, 1, 16)
							usa_bgc2:croptop(innertween*.5)
							usa_bgc2:y(SCREEN_HEIGHT + (1-innertween)*SCREEN_CENTER_Y)
						end
						usa_bgc1:x(SCREEN_WIDTH+tweenpos)
						usa_bgc2:x(SCREEN_WIDTH+tweenpos)
					end
					
						
					
				end
            end
			
			self:sleep(0.02);
			self:queuecommand('Update');

---------------------------------------------------------------------------------------
----------------------END DON'T TOUCH IT KIDDO-----------------------------------------
---------------------------------------------------------------------------------------
          
        end"
		
	/>
    
	<!-- Aux actor, VERY IMPORTANT -->
	<Aux
	Type="Quad" InitCommand="hidden,1" OnCommand="%function(self) auxvar=self end" />

	<Layer Type="Quad" OnCommand="%function(self)
		usa_FinBlack = self
		self:x(SCREEN_CENTER_X)
		self:y(SCREEN_CENTER_Y)
		self:diffuse(0,0,0,1)
		self:zoomto(SCREEN_WIDTH,SCREEN_HEIGHT)
		self:hidden(1)
	end"
	YourWishIsMyMessageCommand="%function(self)
		self:hidden(0)
		SCREENMAN:GetTopScreen():x(0)
	end"
	/>
	
</children></ActorFrame>