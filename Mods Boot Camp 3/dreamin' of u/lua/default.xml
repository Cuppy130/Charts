<ActorFrame
    InitCommand="%function(self)

        songName = GAMESTATE:GetCurrentSong():GetSongDir();
    end"
><children>

	<Layer Type="Quad" OnCommand="hidden,1;sleep,1000" />
	
	<Layer File="easing" />
	<Layer File="modhelpers" />
	<Layer File="notedata/inverstealth" />
	<Layer File="spellcard" />
	
	<Layer Type="Quad"
		OnCommand="%function(self)

			self:hidden(1)
		
			debug_show = false;
			spb = 60/178
---------------------------------------------------------------------------------------
----------------------DON'T TOUCH IT KIDDO---------------------------------------------
---------------------------------------------------------------------------------------

			
			checked = false; P1=nil;P2=nil;P3=nil;P4=nil;jud1=nil;com1=nil;jud2=nil;com2=nil;jud3=nil;com3=nil;
			mod_plr = {};
			mod_firstSeenBeat = GAMESTATE:GetSongBeat();
			drm_parity = 0
			drm_locker = 0
			local m=mod_insert
			local me=mod_ease
			local mm=mod_message
			
---------------------------------------------------------------------------------------
----------------------END DON'T TOUCH IT KIDDO-----------------------------------------
---------------------------------------------------------------------------------------

            --beat based mods
            --{beat_start, beat_end, mods, len_or_end, player_number}
            mods = {
				--{0,383,'*100000 -100 cover, *1000 1x, *1000 C350, **100000 overhead, *1000 sudden, *10000 90 suddenoffset','end'},
				{0,343,'*100000 -999999 cover, *1000 1x, *1000 C275, *1000 overhead','end'},
            }
            --m(i,.5,'*1000 '.. valuething ..' reverse, *1000 '.. valuething2 ..' invert','len')
			
			--beat-based ease mods
			--{time_start, time_end, mod_start, mod_end, mod, len_or_end, ease_type, player_number, sustaintime, optional_param1, optional_param2}
			--valid ease types are:
				--linear
				--inQuad    outQuad    inOutQuad    outInQuad
				--inCubic   outCubic   inOutCubic   outInCubic
				--inQuart   outQuart   inOutQuart   outInQuart
				--inQuint   outQuint   inOutQuint   outInQuint
				--inSine    outSine    inOutSine    outInSine
				--inExpo    outExpo    inOutExpo    outInExpo
				--inCirc    outCirc    inOutCirc    outInCirc
				--inElastic outElastic inOutElastic outInElastic    --can take 2 optional parameters - amplitude & period
				--inBack    outBack    inOutBack    outInBack       --can take 1 optional parameter  - spring amount
				--inBounce  outBounce  inOutBounce  outInBounce
				
			mods_ease = {
				-- EXAMPLE TWEEN: from beat 0 to 4, make rotationz go from 360 to 0 with the inOutBack tween
				--{32,40,0,1.75,'xmod','end',outInBounce},
			}
			
			--me(beat,len,str1,str2,mod,t,ease,pn,sus,opt1,opt2)
			
            --SCREAMING GUMBALL / timed message broadcaster
            --they no longer have to be in order, because they're sorted now
            curmessage = 1;
            --{beat,message,persists}
            messages = { 
			
            }
			
			mm(4,function()
				for i,v in pairs(mod_plr) do
					if v then
						v:accelerate(spb*4)
						v:x(SCREEN_CENTER_X)
						v:GetChild('Judgment'):accelerate(spb*4)
						v:GetChild('Judgment'):x(SCREEN_CENTER_X*.5*((i*2)-3))
						v:GetChild('Combo'):accelerate(spb*4)
						v:GetChild('Combo'):x(SCREEN_CENTER_X*.5*((i*2)-3))
					end
				end
			end,true)
			--m(0,100,'*.33 -25 alternate, *.66 -50 split','len')
			
			--8 to 36 is a full rotation
			--28 beats (27 technically)
			local rotVal = 1/56
			local rotCount = rotVal
			
			me(4,8,0,-300,'mini','end',inCirc)
			me(4,8,0,100,'centered','end',inCirc)
			
			for i=8,35.5,.5 do
				m(i,.5,'*1000 '.. 25*math.sin(2*math.pi*rotCount) ..' alternate, *1000 '.. 50*math.sin(2*math.pi*rotCount) ..' split, *1000 '.. 50-50*math.cos(2*math.pi*rotCount) ..' flip','len')
				rotCount = rotCount + rotVal
				me(i,.5,0,100,'dark','len',outCirc)
				me(i,.5,0,100,'stealth','len',outCirc)
				local cuckCount = rotCount
				mm(i,function()
					for i,v in pairs(mod_plr) do
						if v then
							v:x(SCREEN_CENTER_X + SCREEN_WIDTH*.25*math.sin(2*math.pi*cuckCount))
							v:y(SCREEN_CENTER_Y*1.25 + SCREEN_HEIGHT*.35*(.5-math.cos(2*math.pi*cuckCount-math.pi*.25)))
						end
					end
				end)
			end
			
			me(35.5,2.5,50,0,'stealth','len',linear)
			me(35.5,2.5,100,0,'dark','len',linear)
			mm(35.5,function(self)
				for i,v in pairs(mod_plr) do
					if v then
						v:finishtweening()
						v:decelerate(spb*4.5)
						v:x(SCREEN_CENTER_X)
						v:y(SCREEN_CENTER_Y)
						v:rotationx(0)
					end
				end 
			end,true)
			
			me(36.5,1.5,0,500,'dizzy','len',outCirc)
			me(38,2,500,0,'dizzy','len',inQuad)
			me(36.5,1.5,0,800,'bumpy','len',linear,1)
			me(38,2,800,0,'bumpy','len',linear,1)
			me(36.5,1.5,0,-800,'bumpy','len',linear,2)
			me(38,2,-800,0,'bumpy','len',linear,2)
			me(36.5,1.5,0,300,'drunk','len',inQuad,1)
			me(38,2,300,75,'drunk','len',outQuad,1,28)
			me(36.5,3.5,0,-50,'tipsy','len',outQuad,1,28)
			me(36.5,1.5,0,-300,'drunk','len',inQuad,2)
			me(38,2,-300,-75,'drunk','len',outQuad,2,28)
			me(36.5,3.5,0,50,'tipsy','len',outQuad,2,28)
			me(38,2,0,75,'dark','len',outQuad,nil,28)
			mm(68,function(self)
				for i,v in pairs(mod_plr) do
					if v then
						v:finishtweening()
						v:decelerate(spb)
						v:x(SCREEN_CENTER_X + 320*.1666*(i*2-3))
						v:decelerate(spb)
						v:x(SCREEN_CENTER_X + 320*.3333*(i*2-3))
						v:decelerate(spb)
						v:x(SCREEN_CENTER_X + 320*.5*(i*2-3))
						v:GetChild('Judgment'):linear(spb*3)
						v:GetChild('Judgment'):x(0)
						v:GetChild('Combo'):linear(spb*3)
						v:GetChild('Combo'):x(0)
					end
				end 
			end,true)
			
			mm(71,function()
				
				if SCREEN_WIDTH > 642 then
					MESSAGEMAN:Broadcast('LetterboxOn')
				end
				
			end)
			
			mm(134,function()
				
				if SCREEN_WIDTH > 642 then
					MESSAGEMAN:Broadcast('LetterboxOff')
				end
				
			end)
			
			mm(272,function()
				
				if SCREEN_WIDTH > 642 then
					MESSAGEMAN:Broadcast('LetterboxOn')
				end
				
			end)
			
			mm(335.5,function()
				
				if SCREEN_WIDTH > 642 then
					MESSAGEMAN:Broadcast('LetterboxOff2')
				end
				
			end)
			
			me(70,1,0,-13,'flip','len',outQuad)
			me(71,1,0,60,'tipsy','len',outQuad)
			me(72,8,50,0,'stealth','len',linear)
			m(71,136,'*100 -13 flip','end')
			m(72,136,'*100 60 tipsy,*100 25 dizzy','end',1)
			m(72,136,'*100 60 tipsy,*100 -25 dizzy','end',2)
			
			me(99.25,103.75,0,500,'bumpy','end',linear)
			me(99.25,103.75,25,500,'dizzy','end',linear,1)
			me(99.25,103.75,-25,-500,'dizzy','end',linear,2)
			me(103.75,105,500,0,'bumpy','end',linear)
			me(103.75,105,500,25,'dizzy','end',linear,1)
			me(103.75,105,-500,-25,'dizzy','end',linear,2)
			
			me(103.5,.5,0,50,'reverse','len',outQuad)
			me(104,1,50,100,'reverse','len',inQuad)
			me(103.5,.5,0,-300,'mini','len',outCirc)
			me(103.5,.5,-13,20,'flip','len',outCirc)
			me(104,1,-300,0,'mini','len',inQuad)
			me(104,1,20,-13,'flip','len',inQuad)
			m(105,134.5,'*100 100 reverse','end')
			
			me(131.5,1,100,0,'reverse','len',outCubic)
			me(132.5,1,0,100,'reverse','len',outCubic)
			me(133.5,1,100,0,'reverse','len',outCubic)
			
			me(134.5,1.5,-13,0,'flip','len',inQuad)
			me(134.5,1.5,0,-500,'invert','len',inQuad)
			m(136,192,'*100 0 flip, *100 -500 invert','end')
			
			mm(136,function()
					for i,v in pairs(mod_plr) do
						if v then
							v:x(SCREEN_CENTER_X-320 + 640*(.5*(i*2-3)+.5))
						end
					end
				end,true)			
			mm(135,function()
				for i,v in pairs(mod_plr) do
					if v then
						v:GetChild('Judgment'):accelerate(spb)
						v:GetChild('Judgment'):x(SCREEN_CENTER_X*-.5*((i*2)-3))
						v:GetChild('Combo'):accelerate(spb)
						v:GetChild('Combo'):x(SCREEN_CENTER_X*-.5*((i*2)-3))
					end
				end
			end,true)			
			
			me(134.5,1.4,1.54,.8,'xmod','len',linear)
			m(136,192,'*1000 0.8x','end')
			--m(136,192,'*1000 0.8x, *1000 100 hidden, *1000 100 sudden','end')
			local drm_lparity = 1
			for i,v in pairs(drm_inverstealth) do
				local lengthstorage = v.length
				if v[1] > 181 then
					m(v[1],lengthstorage,'*'.. 8/lengthstorage ..' '.. drm_lparity * 50 + 50 ..' stealth','len',1)
					m(v[1],lengthstorage,'*'.. 8/lengthstorage ..' '.. drm_lparity * -50 + 50 ..' stealth','len',2)
				end
				me(v[1],lengthstorage,drm_lparity*-20,drm_lparity*20,'tipsy','len',outQuad,1)
				me(v[1],lengthstorage,drm_lparity*20,drm_lparity*-20,'tipsy','len',outQuad,2)
				me(v[1],lengthstorage,drm_lparity*-50,drm_lparity*50,'drunk','len',outQuad,1)
				me(v[1],lengthstorage,drm_lparity*50,drm_lparity*-50,'drunk','len',outQuad,2)
				me(v[1],lengthstorage,drm_lparity*-20,drm_lparity*20,'brake','len',outQuad,1)
				me(v[1],lengthstorage,drm_lparity*20,drm_lparity*-20,'brake','len',outQuad,2)
				--me(v[1],lengthstorage,drm_lparity*-100+30,drm_lparity*100+30,'suddenoffset','len',outQuad,1)
				--me(v[1],lengthstorage,drm_lparity*-100-30,drm_lparity*100-30,'hiddenoffset','len',outQuad,1)
				
				--me(v[1],lengthstorage,drm_lparity*100+30,drm_lparity*-100+30,'suddenoffset','len',outQuad,2)
				--me(v[1],lengthstorage,drm_lparity*100-30,drm_lparity*-100-30,'hiddenoffset','len',outQuad,2)
				--me(v[1],lengthstorage,drm_lparity*-50+50,drm_lparity*50+50,'suddenoffset','len',outQuad,2)
				--me(v[1],lengthstorage,drm_lparity*-50+50,drm_lparity*50+50,'hiddenoffset','len',outQuad,2)
				--me(v[1],lengthstorage,drm_lparity*-50,drm_lparity*50,'bumpy','len',outQuad)
				local zoomzthing = (i+30)
				local parityproc = drm_lparity
				local indexproc = -1
				if (math.mod(i,4)) == 2 or (math.mod(i,4)) == 1 then
					indexproc = 1
				end
				mm(v[1],function()
					for i,v in pairs(mod_plr) do
						if v then
							v:bounceend(spb*lengthstorage)
							v:rotationx(zoomzthing/1.4*(parityproc*indexproc)*(.2*lengthstorage))
							v:rotationy((zoomzthing/1.5)*parityproc*(.2*lengthstorage))
						end
					end
				end)
				drm_lparity = drm_lparity * -1
			end
			
			local drm_kick = {136,141,144,149,152,157,160,165}
			local drm_kick2 = {168,169.5,171.5,172.5,173.5,175.5,176,177.5,179.5,180.5,181,183.5}
			for i,v in pairs(drm_kick) do
				if v then
					me(v,1,200*drm_lparity,0,'bumpy','len',outQuad)
				end
				drm_lparity = drm_lparity * -1
			end
			for i,v in pairs(drm_kick2) do
				if v then
					me(v,.5,150*drm_lparity,0,'bumpy','len',outQuad)
					me(v,.5,-20,0,'mini','len',outQuad)
				end
				drm_lparity = drm_lparity * -1
			end
			
			mm(192,function()
					for i,v in pairs(mod_plr) do
						if v then
							v:finishtweening()
							v:decelerate(spb*4)
							v:x(SCREEN_CENTER_X+ 160*(i*2-3))
							v:rotationx(0)
							v:y(SCREEN_CENTER_Y)
							v:rotationy(0)
							v:GetChild('Judgment'):decelerate(spb*4)
							v:GetChild('Judgment'):x(0)
							v:GetChild('Combo'):decelerate(spb*4)
							v:GetChild('Combo'):x(0)
						end
					end
				end,true)
				
			mm(204,function()
				drm_dream:linear(240/178)
				drm_dream:diffusealpha(1)
			end)
				
			mm(264,function()
				drm_dream:linear(480/178)
				drm_dream:diffusealpha(0)
			end)
			
			me(192,4,0,200,'mini','len',inQuad)
			me(192,4,0,800,'bumpy','len',linear)
			me(192,4,0,-200,'space','len',linear)
			me(192,4,-500,0,'invert','len',linear)
			me(192,4,.8,1.54,'xmod','len',linear)
			
			me(196,4,200,-200,'mini','len',linear)
			me(196,4,800,0,'bumpy','len',linear)
			me(196,4,0,20,'flip','len',linear)
			me(200,8,20,0,'flip','len',linear)
			me(200,8,-200,0,'mini','len',linear)
			me(240,4,50,0,'stealth','len',linear)
			
			me(206,2,1.54,.2,'xmod','len',outCirc)
			me(206,2,0,-1000,'bumpy','len',inCirc)
			me(206,2,0,-300,'reverse','len',inCirc)
			me(206,2,0,83,'centered','len',outQuad)
			me(206,2,0,75,'distant','len',inQuad)
			me(206,2,0,-80,'suddenoffset','len',inQuad)
			me(206,2,0,100,'sudden','len',inQuad)
			me(206,2,0,20,'brake','len',inQuad)
			m(208,270,'*100 0.2x, *100 -1000 bumpy, *100 -300 reverse, *100 83 centered, *1000 75 distant, *1000 -75 suddenoffset, *1000 100 sudden, *100 20 brake','end')

			me(235.5,1,-10,0,'flip','len',outQuad)
			me(235.5,1,-120,0,'boost','len',outQuad)
			me(235.5,1,-120,0,'dizzy','len',outQuad)
			me(236.5,1,-10,0,'flip','len',outQuad)
			me(236.5,1,-120,0,'boost','len',outQuad)
			me(236.5,1,120,0,'dizzy','len',outQuad)
			me(237.5,1,-10,0,'flip','len',outQuad)
			me(237.5,1,-120,0,'boost','len',outQuad)
			me(237.5,1,-120,0,'dizzy','len',outQuad)
			
			me(256,1.5,-10,0,'flip','len',outQuad)
			me(256,1.5,-120,0,'boost','len',outQuad)
			me(256,1.5,-120,0,'dizzy','len',outQuad)
			me(257.5,1.5,-10,0,'flip','len',outQuad)
			me(257.5,1.5,-120,0,'boost','len',outQuad)
			me(257.5,1.5,120,0,'dizzy','len',outQuad)
			me(259,1.5,-10,0,'flip','len',outQuad)
			me(259,1.5,-120,0,'boost','len',outQuad)
			me(259,1.5,-120,0,'dizzy','len',outQuad)
			me(260.5,1.5,-10,0,'flip','len',outQuad)
			me(260.5,1.5,-120,0,'boost','len',outQuad)
			me(260.5,1.5,120,0,'dizzy','len',outQuad)

			me(263,1,50,0,'stealth','len',inQuad)
			me(263,6,-350,0,'wave','len',inQuad)
			me(263,6,120,0,'dizzy','len',inQuad)
			me(263,1,83,90,'centered','len',outCirc)
			me(264,5,90,83,'centered','len',inQuad)
			
			me(270,2,.2,1.54,'xmod','len',outCirc)
			me(270,2,-1000,0,'bumpy','len',linear)
			me(270,2,-300,0,'reverse','len',outCirc)
			me(270,2,83,0,'centered','len',outQuad)
			me(270,2,75,0,'distant','len',outCirc)
			me(270,2,100,0,'sudden','len',linear)
			me(270,2,20,0,'brake','len',outCirc)
			
			m(264,.5,'*100 3 flip, *100 3 invert','len')
			m(264.5,.5,'*100 6 flip, *100 6 invert','len')
			m(265,.5,'*100 10 flip, *100 10 invert','len')
			m(265.5,.5,'*100 13 flip, *100 13 invert','len')
			m(266,.5,'*100 16 flip, *100 16 invert','len')
			m(266.5,.5,'*100 20 flip, *100 20 invert','len')
			m(267,.5,'*100 22 flip, *100 22 invert','len')
			m(267.5,2.5,'*100 25 flip, *100 25 invert','len')
			
			mm(268,function()
				for i,v in pairs(mod_plr) do
					if v then
						v:rotationz(-1080)
						v:finishtweening()
						v:accelerate(spb*2)
						v:rotationz(-520)
						v:decelerate(spb*2)
						v:rotationz(0)
					end
				end
			end)
			
			me(270,2,25,-13,'flip','len',linear)
			m(272,331.5,'*100 -13 flip','end')
			me(270,2,25,0,'invert','len',linear)
			me(272,4,100,0,'dizzy','len',outQuad,1)
			me(272,4,-100,0,'dizzy','len',outQuad,2)
			
			me(272,8,100,0,'dizzy','len',outQuad,1)
			me(272,8,-100,0,'dizzy','len',outQuad,2)
						
			--slides
			mm(272,function() condor_screenmotion(1,10,4*spb,'decelerate'); end)
			mm(276,function() condor_screenmotion(1,0,4*spb,'accelerate'); end)
			mm(280,function() condor_screenmotion(1,-10,4*spb,'decelerate'); end)
			
			mm(284,function() condor_screenmotion(1,0,4*spb,'accelerate'); end)
			mm(288,function() condor_screenmotion(1,15,4*spb,'decelerate'); end)
			
			mm(292,function() condor_screenmotion(1,0,4*spb,'accelerate'); end)
			mm(296,function() condor_screenmotion(1,-15,4*spb,'decelerate'); end)
			
			mm(300,function() condor_screenmotion(1,0,4*spb,'accelerate'); end)
			mm(304,function() condor_screenmotion(1,20,4*spb,'decelerate'); end)
			
			mm(308,function() condor_screenmotion(1,0,4*spb,'accelerate'); end)
			mm(312,function() condor_screenmotion(1,-20,4*spb,'decelerate'); end)
			
			mm(316,function() condor_screenmotion(1,0,4*spb,'accelerate'); end)
			mm(320,function() condor_screenmotion(1,25,4*spb,'decelerate'); end)
			
			mm(324,function() condor_screenmotion(1,0,4*spb,'accelerate'); end)
			mm(328,function() condor_screenmotion(1,-15,2*spb,'decelerate'); end)
			mm(330,function() condor_screenmotion(1,0,1.5*spb,'accelerate'); end)
			
			me(303.5,.5,0,50,'reverse','len',outQuad)
			me(304,1,50,100,'reverse','len',inQuad)
			me(303.5,.5,0,-300,'mini','len',outCirc)
			me(304,1,-300,0,'mini','len',inQuad)
			
			m(305,331.5,'*100 100 reverse','end')
			m(335.5,360,'*100 50 reverse, *100 200 mini','end')
			me(331.5,1,-13,0,'flip','len',outQuint)
			me(331.5,1,100,0,'reverse','len',outQuint)
			me(332.5,1,0,100,'reverse','len',outQuint)
			me(333.5,1,100,0,'reverse','len',outQuint)
			me(334.5,1,0,50,'reverse','len',outQuint)
			me(335.5,1,0,200,'mini','len',outQuint,nil,1)
			
			me(332.9,.5,-200,0,'mini','len',outQuad)
			me(334.9,.5,-200,0,'mini','len',outQuad)
			
			mm(68,'Thunk')
			mm(268,'Thunk')
			mm(103.5,'FlipAshe')
			mm(131.5,'FlipAshe2')
			mm(132.5,'FlipAshe3')
			mm(133.5,'FlipAshe2')
			mm(303.5,'FlipAshe')
			mm(335.5,'dimbg')
			
			mm(335.5,function()
				
				screen:SetDrawByZPosition(false)
				
				for i,v in pairs(mod_plr) do
					if v then
						v:sleep(spb)
						v:accelerate(spb)
						v:zoom(0)
					end
				end
				
			end)
			
			----------------------------------------
			--Taro: BG stuff
			
			mm(200.5,function()
				
				drm_bgcover:linear(spb*3.5)
				drm_bgcover:diffusealpha(1)
				
			end)
			
			mm(208,function()
				
				drm_memories:hidden(0)
				
				drm_bgcover:linear(spb*4)
				drm_bgcover:diffuse(0,0,0,.7)
				
			end)
			
			mm(220,function()
			
				drm_bgcover:linear(spb*3.9)
				drm_bgcover:diffuse(0,0,0,1)
				drm_bgcover:sleep(spb*0.2)
				drm_bgcover:linear(spb*3.9)
				drm_bgcover:diffuse(0,0,0,.7)
				
			end)
			
			mm(236,function()
			
				drm_bgcover:linear(spb*3.9)
				drm_bgcover:diffuse(0,0,0,1)
				drm_bgcover:sleep(spb*0.2)
				drm_bgcover:linear(spb*3.9)
				drm_bgcover:diffuse(0,0,0,.7)
				
			end)
			
			mm(252,function()
			
				drm_bgcover:linear(spb*3.9)
				drm_bgcover:diffuse(0,0,0,1)
				drm_bgcover:sleep(spb*0.2)
				drm_bgcover:linear(spb*3.9)
				drm_bgcover:diffuse(0,0,0,.5)
				
			end)
			
			mm(268-4,function()
			
				drm_bgcover:linear(spb*3.9)
				drm_bgcover:diffuse(0,0,0,1)
				drm_bgcover:sleep(spb*0.2)
				drm_bgcover:linear(spb*3.9)
				drm_bgcover:diffuse(0,0,0,0)
				
			end)
			
			mm(224,function()
				
				local a = drm_img1
				a:diffusealpha(1)
				a:addx(-15)
				a:addy(-30)
				a:rotationz(-3)
				a:zoom(.95)
				a:linear(spb*16)
				a:addx(30)
				a:addy(0)
				a:rotationz(3)
				a:zoom(1)
				
			end)
			
			mm(240,function()
				
				local a = drm_img2
				a:diffusealpha(1)
				a:addx(20)
				a:addy(-20)
				a:rotationz(1)
				a:zoom(.95)
				a:linear(spb*16)
				a:addx(-40)
				a:addy(60)
				a:rotationz(-1)
				a:zoom(1)
				
			end)
			
			mm(256,function()
				
				local a = drm_img3
				a:diffusealpha(1)
				a:addx(-10)
				a:zoom(.96)
				a:linear(spb*16)
				a:addx(20)
				a:zoom(1)
				
			end)
			
			mm(272-4,function()
				
				drm_memories:hidden(1)
				
			end)
			
---------------------------------------------------------------------------------------
----------------------DON'T TOUCH IT KIDDO---------------------------------------------
---------------------------------------------------------------------------------------
			
			function message_compare(a,b)
				return a[1] < b[1]
			end
			
			if table.getn(messages) > 1 then
				table.sort(messages, message_compare)
			end
			
			self:queuecommand('Update');
			
		end"
        
		UpdateCommand="%function(self)

        ---------------------------------------------------------------------------------------
        ----------------------DON'T TOUCH IT KIDDO---------------------------------------------
        ---------------------------------------------------------------------------------------
        
            --hide things as needed, and set up aliases if checked is false
			if not checked and GAMESTATE:GetSongBeat()>=0 then
				
                thingsToGrab = {'LifeP1','LifeP2','ScoreP1','ScoreP2','BPMDisplay','LifeFrame','ScoreFrame','Lyrics','SongForeground','SongBackground','Overlay','Underlay'}
                thingsToHide = {'LifeP1','LifeP2','ScoreP1','ScoreP2','BPMDisplay','LifeFrame','ScoreFrame','Overlay','Underlay'}
                
                for i,v in ipairs(thingsToGrab) do
                    _G[v] = SCREENMAN:GetTopScreen():GetChild(v) or nil
                end
                
                for i,v in ipairs(thingsToHide) do
                    if _G[v] then _G[v]:hidden(1) end
                end
				
				table.insert(mod_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP1'));
				table.insert(mod_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP2'));
				
				for i,v in pairs(mod_plr) do
					if SCREENMAN:GetTopScreen():GetChild('PlayerOptionsP'..i) then
						_G['init_modsp'..i] = SCREENMAN:GetTopScreen():GetChild('PlayerOptionsP'..i):GetText();
					end
				end
				
				screen = SCREENMAN:GetTopScreen();
				screen:SetDrawByZPosition(true);
				checked = true;
                
                P1 = SCREENMAN:GetTopScreen():GetChild('PlayerP1') or nil
				if P1 then
					P1:GetChild('Combo'):z(-1)
					P1:GetChild('Judgment'):z(-1)
				end
				
				P2 = SCREENMAN:GetTopScreen():GetChild('PlayerP2') or nil
				if P2 then
					P2:GetChild('Combo'):z(-1)
					P2:GetChild('Judgment'):z(-1)
				end
				
			end
			
			local beat = GAMESTATE:GetSongBeat()
				

            if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --
            
                -----------------------
                -- Player mod resets --
                -----------------------
            
                for i=1,2 do
                    GAMESTATE:ApplyGameCommand('mod,clearall',i)
                    if _G['init_modsp'..i] then 
                        GAMESTATE:ApplyGameCommand('mod,'.._G['init_modsp'..i],i)
                    end
                end
            
                ------------------------------------------------------------------------------
                -- custom mod reader by TaroNuke edited by WinDEU and re-stolen by TaroNuke --
                ------------------------------------------------------------------------------
                for i,v in pairs(mods) do
                    if v and table.getn(v) > 3 and v[1] and v[2] and v[3] and v[4] then
                        if beat >=v[1] then
                            if (v[4] == 'len' and beat <=v[1]+v[2]) or (v[4] == 'end' and beat <=v[2]) then
                                if table.getn(v) == 5 then
                                    GAMESTATE:ApplyGameCommand('mod,'..v[3],v[5]);
                                else
                                    GAMESTATE:ApplyGameCommand('mod,'..v[3]);
                                end						
                            end
                        end
                    else
                        v[1] = 0;
                        v[2] = 0;
                        v[3] = '';
                        v[4] = 'error';
                        SCREENMAN:SystemMessage('Bad mod in beat-based table (line '..i..')');
                    end
                end
                
				---------------------------------------------------
				-- ease mod reader v2                            --
				-- friendship ended with if wall                 --
				-- now functions as parameters is my best friend --
				---------------------------------------------------
				for i,v in pairs(mods_ease) do
					if v and table.getn(v) > 6 and v[1] and v[2] and v[3] and v[4] and v[5] and v[6] and v[7] then
						if beat >=v[1] then
							if (v[6] == 'len' and beat <=v[1]+v[2]) or (v[6] == 'end' and beat <=v[2]) then
								
								local duration = v[2];
								if v[6] == 'end' then duration = v[2] - v[1] end
								local curtime = beat - v[1]
								local diff = v[4] - v[3]
								local startstrength = v[3]
								local curve = v[7]
								local mod = v[5]
								
								local strength = curve(curtime, startstrength, diff, duration, v[10], v[11]) --extra parameters for back and elastic eases :eyes:
								
								if v[5] == 'xmod' then
									if table.getn(v) >= 8 then GAMESTATE:ApplyGameCommand('mod,*10000 '..strength..'x',v[8]);
									else GAMESTATE:ApplyGameCommand('mod,*10000 '..strength..'x'); end
								else
									if table.getn(v) >= 8 then GAMESTATE:ApplyGameCommand('mod,*10000 '..strength..' '..mod,v[8]);
									else GAMESTATE:ApplyGameCommand('mod,*10000 '..strength..' '..mod); end
								end
							elseif (v[9] and ((v[6] == 'len' and beat <=v[1]+v[2]+v[9]) or (v[6] == 'end' and beat <=v[9]))) then
								if v[5] == 'xmod' then
									if v[8] then GAMESTATE:ApplyGameCommand('mod,*10000 '..v[4]..'x', v[8]);
									else GAMESTATE:ApplyGameCommand('mod,*10000 '..v[4]..'x'); end
								else
									if v[8] then GAMESTATE:ApplyGameCommand('mod,*10000 '..v[4]..' '..v[5], v[8]);
									else GAMESTATE:ApplyGameCommand('mod,*10000 '..v[4]..' '..v[5]); end
								end
							end
						end
					else
						SCREENMAN:SystemMessage('Bad mod in beat-based ease table (line '..i..')');
					end
				end
				
                ------------------
                -- Actions shit --
                ------------------
                while curmessage<=table.getn(messages) and GAMESTATE:GetSongBeat()>=messages[curmessage][1] do
                    if messages[curmessage][3] or GAMESTATE:GetSongBeat() < messages[curmessage][1]+2 then
                        if type(messages[curmessage][2]) == 'function' then
                            messages[curmessage][2]()
                        elseif type(messages[curmessage][2]) == 'string' then
                            MESSAGEMAN:Broadcast(messages[curmessage][2]);
                        end
                    end
                    curmessage = curmessage+1;
                end

				if beat > 72 and beat < 136 then
				
					local flick = drm_parity * 640
					local wrassle = 1
					if beat > 134.5 then
						wrassle = ((136-beat)/1.5)^.5
						flick = flick * wrassle
					end
						
					for i,v in pairs(mod_plr) do
						local location = math.mod((beat)/12,1)+(i-1)*.5+(1/4)
						location = (location * wrassle) + ((1-wrassle)*(.5*(i*2-3)+.5))
						
						if v then
							v:x((SCREEN_CENTER_X-320)+(640*location) - flick)
						end
						
						GAMESTATE:ApplyGameCommand('mod,*10000 '.. math.sin(math.pi*(beat/8+i))*10+10 ..' stealth',i);
					end
					
					if drm_ashe then
						drm_ashe:hidden(0)
						drm_ashe:diffusealpha(1)
						if beat > 134.5 then
							drm_ashe:x((SCREEN_CENTER_X-320)+640*((math.mod((beat+3)/12,1)+.25)*wrassle + (1-wrassle)*1.1) - flick)
						else
							drm_ashe:x((SCREEN_CENTER_X-320)+640*(math.mod((beat+3)/12,1)+.25) - flick)
						end
						local asheval = ashevar:getaux()
						drm_ashe:zoomy(.5-asheval)
						drm_ashe:y(.5*SCREEN_CENTER_Y*(1-asheval) + .8*SCREEN_HEIGHT*asheval)
					end
					
					drm_parity = drm_parity*-1 + 1
				elseif beat > 136 and beat < 137 then
					for i,v in pairs(mod_plr) do
						if v then
							v:x((SCREEN_CENTER_X-320)+640*(.5*(i*2-3)+.5))
						end
					end
					if drm_ashe then
						drm_ashe:x(SCREEN_WIDTH*1.5)
					end
				elseif beat > 208 and beat < 264 then
					local asinthing = math.sin(beat*math.pi/8)
					local acosthing = math.cos(beat*math.pi/8)
					local flongle = asinthing
					if beat > 240 then flongle = flongle * -1; end
					for i,v in (mod_plr) do
						if v then
							v:skewx(asinthing*(i*2-3)*.5)
							v:x(acosthing*(i*2-3)*160 + SCREEN_CENTER_X)
							
							v:z(flongle*-1*(i*2-3)+1)
							v:rotationx(flongle*20*(i*2-3)+1)
							GAMESTATE:ApplyGameCommand('mod,*10000 '.. flongle*50*(i*2-3) ..' mini,*10000 '.. flongle*-1000*(i*2-3)-1000 ..' bumpy,*10000 '.. flongle*-50*(i*2-3) ..' tipsy,*10000 '.. flongle*-50*(i*2-3) ..' drunk',i);
						end
					end
				elseif beat > 272 and beat < 331.5 then
				
					drm_locker = math.mod(drm_locker+auxvar:getaux(),1)
					if drm_locker < 0 then
						drm_locker=drm_locker+1
					end
					
					local flick = drm_parity * 640
					local wrassle = 1
					if beat > 330 then
							wrassle = ((331.5-beat)/1.5)^.5
							flick = flick * wrassle
					end
					
					for i,v in pairs(mod_plr) do
						local wonkaround = 3-i
						local location = drm_locker + ((wonkaround-1)*.5)+.25
						location = (location * wrassle) + ((1-wrassle)*(.25*(i*2-3)+.5))
						
						if v then
							v:x((SCREEN_CENTER_X-320)+640*location - flick)
							v:z(0)
						end
						
						if beat > 280 then
							GAMESTATE:ApplyGameCommand('mod,*10000 '.. math.sin(math.pi*(beat/8+wonkaround))*15+15 ..' stealth,*10000 '.. auxvar:getaux()*1000 ..' dizzy',i);
							else
							GAMESTATE:ApplyGameCommand('mod,*10000 '.. math.sin(math.pi*(beat/8+wonkaround))*10+10 ..' stealth',i);
						end
					end
					
					if drm_ashe then
						drm_ashe:hidden(0)
						drm_ashe:diffusealpha(1)
						local asheval = ashevar:getaux()
						drm_ashe:zoomy(.5-asheval)
						if beat > 330 then
							--drm_ashe:y(.8*SCREEN_HEIGHT + (beat-330)*SCREEN_HEIGHT*.25)
							drm_ashe:x((SCREEN_CENTER_X-320)+640*((drm_locker+.5)*wrassle - (1-wrassle)*.25) - flick)
						else
							drm_ashe:y(.5*SCREEN_CENTER_Y*(1-asheval) + .8*SCREEN_HEIGHT*asheval)
							drm_ashe:x((SCREEN_CENTER_X-320)+640*(drm_locker+.5) - flick)
						end
						--drm_ashe:x(SCREEN_WIDTH*(drm_locker+.5) - flick)
						local xfloop = -1
						if auxvar:getaux() < 0 then xfloop = 1 end
						drm_ashe:zoomx(.5*xfloop)
						
						
					end
					
					drm_parity = drm_parity*-1 + 1
				elseif beat > 331.5 then
					for i,v in pairs(mod_plr) do
						if v then
							v:x(SCREEN_CENTER_X + 160*(i*2-3))
						end
					end
					if drm_ashe then
						drm_ashe:x(SCREEN_WIDTH*-.5)
					end
				end
				
				if beat > 268 and beat < 272 then
					
					local zm = 1
					zm = 1 + .1*(beat-268)/4
					drm_bgvar:basezoomx(zm)
					drm_bgvar:basezoomy(zm)
					
				end
				
            end
			
			self:sleep(0.02);
			self:queuecommand('Update');

---------------------------------------------------------------------------------------
----------------------END DON'T TOUCH IT KIDDO-----------------------------------------
---------------------------------------------------------------------------------------
          
        end"
		
	/>

	<!-- Aux actor, VERY IMPORTANT -->
	<Layer 
		Type="Quad" InitCommand="%function(self)
			auxvar = self
			self:hidden(1)
		end"
		
	/>
	<!-- Aux actor, VERY IMPORTANT -->
	<Layer Type="Quad" InitCommand="%function(self)
			ashevar = self
			self:aux(0)
			self:hidden(1)
		end"
		FlipAsheMessageCommand="decelerate,spb*1.5;aux,1"
		FlipAshe2MessageCommand="decelerate,spb;aux,0"
		FlipAshe3MessageCommand="decelerate,spb;aux,1"
	/>
	
	<Layer
		File="run_l.sprite"
		InitCommand="%function(self)
			drm_ashe = self
			self:x(SCREEN_CENTER_X)
			self:y(SCREEN_CENTER_Y*.5)

			self:zoom(.5)
			self:zoomx(-.5)
			self:hidden(1)
			self:diffusealpha(0)
		end"
		ThunkMessageCommand="diffusealpha,0;sleep,spb*4;sleep,0;diffusealpha,1;hidden,0"
		dimbgMessageCommand="%function(self)
			if drm_bgvar then
				drm_bgvar:linear(spb*.5)
				drm_bgvar:diffusealpha(0)
			end
		end"
	/>
	<Layer
		File="idle_l.sprite"
		InitCommand="%function(self)
			--drm_ashe = self
			self:x(SCREEN_CENTER_X)
			self:y(SCREEN_CENTER_Y*.5)
			self:zoom(.5)
			self:hidden(1)
			self:diffusealpha(0)
		end"
		ThunkMessageCommand="zoom,0;diffusealpha,0;linear,spb*4;diffusealpha,1;zoom,.5;hidden,0;sleep,0;diffusealpha,0"
	/>
	
	<Layer Type="ActorFrame" InitCommand="%function(self) drm_letterboxing = self end" OnCommand="x,SCREEN_CENTER_X;y,SCREEN_CENTER_Y" ><children>
	<Layer Type="ActorFrame" OnCommand="x,-SCREEN_CENTER_X;y,-SCREEN_CENTER_Y" ><children>
	
	<Layer Type="Quad" OnCommand="horizalign,right;zoomto,SCREEN_WIDTH,SCREEN_HEIGHT*3;x,SCREEN_CENTER_X-288;y,SCREEN_CENTER_Y;diffusealpha,1;faderight,64/SCREEN_WIDTH;diffusealpha,0;"
	LetterboxOnMessageCommand="linear,spb;diffusealpha,1" LetterboxOffMessageCommand="linear,spb*2;diffusealpha,0" LetterboxOff2MessageCommand="linear,spb*1;diffusealpha,0" />
	<Layer Type="Quad" OnCommand="horizalign,left;zoomto,SCREEN_WIDTH,SCREEN_HEIGHT*3;x,SCREEN_CENTER_X+288;y,SCREEN_CENTER_Y;diffusealpha,1;fadeleft,64/SCREEN_WIDTH;diffusealpha,0;"
	LetterboxOnMessageCommand="linear,spb;diffusealpha,1" LetterboxOffMessageCommand="linear,spb*2;diffusealpha,0" LetterboxOff2MessageCommand="linear,spb*1;diffusealpha,0" />
	
	</children></Layer>
	</children></Layer>
	
	<Layer File="Dream" InitCommand="%function(self) drm_dream = self end" OnCommand="diffusealpha,0;stretchto,0,0,SCREEN_WIDTH,SCREEN_HEIGHT" />
	
</children></ActorFrame>