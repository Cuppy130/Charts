<ActorFrame
    InitCommand="%function(self)
	
		if FUCK_EXE then

			songName = GAMESTATE:GetCurrentSong():GetSongDir();
			sw,sh = SCREEN_WIDTH,SCREEN_HEIGHT
			scx,scy = SCREEN_CENTER_X,SCREEN_CENTER_Y
		
		else
		
			SCREENMAN:SystemMessage('Requires NotITG ver. 3.1!')
			
		end

    end"
><children>

	<Layer Type="ActorFrame" Condition="FUCK_EXE"><children>

		<Actor OnCommand="sleep,1000" />

		<Layer File="easing" />
		<Layer File="modhelpers" />
		<Layer File="mil_c2l" />
		<Layer File="spellcard" />

		<Layer
			OnCommand="%function(self)
			
				if tonumber(GAMESTATE:GetVersionDate()) >= 20180800 then

					debug_show = false;
					spb = 60/88
					spb2 = 60/176 -- uuuuu
		---------------------------------------------------------------------------------------
		----------------------DON'T TOUCH IT KIDDO---------------------------------------------
		---------------------------------------------------------------------------------------

					checked = false; P1=nil;P2=nil;P3=nil;P4=nil;jud1=nil;com1=nil;jud2=nil;com2=nil;jud3=nil;com3=nil;
					mod_plr = {};
					mod_firstSeenBeat = GAMESTATE:GetSongBeat();
					dai_flickerval = 1
					local m=mod_insert
					local me=mod_ease
					local mm=mod_message
					mil_colcheck = 0
		---------------------------------------------------------------------------------------
		----------------------END DON'T TOUCH IT KIDDO-----------------------------------------
		---------------------------------------------------------------------------------------

					--beat based mods
					--{beat_start, beat_end, mods, len_or_end, player_number}
					mods = {
						--{0,383,'*100000 -100 cover, *1000 1x, *1000 C350, **100000 overhead, *1000 sudden, *10000 90 suddenoffset','end'},
						{0,307,'*-1 halgun,*100000 -999999 cover, *1000 1x, *1000 C350, *1000 overhead, *100 stealthtype, *1000 dizzyholds,*-1 modtimer, *-1 -99 drawsizeback','end'},
					}
					--m(i,.5,'*1000 '.. valuething ..' reverse, *1000 '.. valuething2 ..' invert','len')
					--m(96,302,'*1000 C350','end')
					--beat-based ease mods
					--{time_start, time_end, mod_start, mod_end, mod, len_or_end, ease_type, player_number, sustaintime, optional_param1, optional_param2}
					--valid ease types are:
						--linear
						--inQuad    outQuad    inOutQuad    outInQuad
						--inCubic   outCubic   inOutCubic   outInCubic
						--inQuart   outQuart   inOutQuart   outInQuart
						--inQuint   outQuint   inOutQuint   outInQuint
						--inSine    outSine    inOutSine    outInSine
						--inExpo    outExpo    inOutExpo    outInExpo
						--inCirc    outCirc    inOutCirc    outInCirc
						--inElastic outElastic inOutElastic outInElastic    --can take 2 optional parameters - amplitude & period
						--inBack    outBack    inOutBack    outInBack       --can take 1 optional parameter  - spring amount
						--inBounce  outBounce  inOutBounce  outInBounce

					mods_ease = {
						-- EXAMPLE TWEEN: from beat 0 to 4, make rotationz go from 360 to 0 with the inOutBack tween
						--{32,40,0,1.75,'xmod','end',outInBounce},
					}

					--me(beat,len,str1,str2,mod,t,ease,pn,sus,opt1,opt2)

					--SCREAMING GUMBALL / timed message broadcaster
					--they no longer have to be in order, because they're sorted now
					curmessage = 1;
					--{beat,message,persists}
					messages = {
					}

					m(306,308,'*-1 disablemines','end')
					
					if tonumber(GAMESTATE:GetVersionDate()) > 20190000 then
						m(0,36,'*-1 orient','end')
					end
					
					mm(.5,'IntroAftOn')
					mm(1,function()
						if P1 then
							MIL_chart = P1:GetNoteData(0, 302)

							local randFuck = {math.random(1,2),0}
							randFuck[2] = math.mod(randFuck[1],2)+1
							table.insert(MIL_chart,{119.000,randFuck[1],1})
							table.insert(MIL_chart,{119.000,randFuck[2],'M'})

							P1:SetNoteDataFromLua( MIL_chart );
							if P2 then
								P2:SetNoteDataFromLua( MIL_chart );
							end
							for i,v in ipairs(MIL_chart) do
								if v[1] == 76 then
									mil_colcheck = v[2]
								end
								break;
							end
						end

						for pn = 1,2 do
							local j,c = _G['proxy_jud'..pn],_G['proxy_com'..pn]
							if j and c then
								j:addy(-(175+25))
								c:addy(-(210+25))
								j:zoom(0.8)
								c:zoom(0.8)
							end
						end
					end,true)

					mm(2,function() reScore() end, true)
					mm(4,'OpenSesa',true)
					mm(32,'RiseUp',true)
					mm(39,'IntroAftOff',true)
					mm(42,'Hymn',true)
					mm(72,function()
						for i=1,4 do
							local treeline = _G['hymn_treeline'..i]
							treeline:accelerate(spb*4)
							treeline:addy(SCREEN_HEIGHT*.25)
						end
						mil_bgover:accelerate(spb*7)
						mil_bgover:diffusealpha(1)
						mil_bgover:sleep(0)
						mil_bgover:diffuse(0,0,0,1)
					end,true)
					hymn_treeDiff = { {.6*238/255,.6*77/255,.6*135/255,0}, {.6*238/255,.6*77/255,.6*135/255,1}, {.3*238/255,.3*77/255,.3*135/255,1}, {0,0,0,1}, {0,0,0,1} }
					hymn_treeAF = { {345/1364,180},{376/1364,170},{570/1364,190},{709/1364,230},{900/1364,300} }

					mm(136,function()

						love_force:hidden(0)
						sf_stars1:diffusealpha(1)
						sf_stars2:diffusealpha(1)
						sf_stars3:diffusealpha(1)
						sf_bgoc:hidden(0)
						aftZoom(1.05,1.01,.95,.9,2)
						aftZoomBG(1.03,1.00,1,0,2)
					end,true)
					mm(136,'AftOn',true)

					mm(152,function() aftZoom(1.01,1.1,.9,.95,6)
									  aftZoomBG(1.01,1.1,0,.8,6) end)

					mm(164,'AftOff',true)
					mm(164,'Earth',true)
					mm(168,'AftOn',true)
					mm(168,function() aftZoom(1.05,1.02,.9,.5,2)
									  aftZoomBG(1.01,1.01,1,0,1) end)
					mm(200,function() aftZoom(1.05,1.02,.9,.5,2) end)
					mm(220,function() aftZoom(1.05,1.02,.9,.5,1) end)
					mm(222,function() aftZoom(1.05,1.02,.9,.5,1) end)
					mm(224,function() aftZoom(1.07,1.02,.9,0,15.666)
									  aftZoomBG(1.03,1.00,1,0,15.666) end)

					for i=170,198,4 do
						mm(i,function() aftZoomBG(1.025,1.01,1,.5,2) end)
					end
					mm(200,function() aftZoomBG(1.00,1.03,.5,1,12) end)

					for i = 0,24,8 do
						mm(231.333+i,'BlackScreen')
					end
					mm(224,'AftOn3',true)
					mm(224,function() earthZoom(1,.8) end)
					mm(232,function() earthZoom(.4,.3); mil_pixelSprite:GetShader():uniform1f('seed',.167) end)
					mm(240,function() earthZoom(.2,.15); mil_pixelSprite:GetShader():uniform1f('seed',.333)  end)
					mm(248,function() earthZoom(.1,.075); mil_pixelSprite:GetShader():uniform1f('seed',.5)  end)
					mm(255.333,'AftOff',true)
					mm(256,function() love_earth:zoom(.075); MESSAGEMAN:Broadcast('NoBlackScreen'); end)

					function earthZoom(s,e)
						love_earth:finishtweening()
						love_earth:zoom(s)
						love_earth:y(SCREEN_CENTER_Y * (1+s))
						love_earth:accelerate(3.666*spb)
						love_earth:zoom(e)
						MESSAGEMAN:Broadcast('NoBlackScreen');
					end

					function aftZoom(s,e,ds,de,t)
						mil_aftSprite:finishtweening()
						mil_aftSprite:zoom(s)
						mil_aftSprite:diffusealpha(ds)
						mil_aftSprite:linear(t*spb)
						mil_aftSprite:diffusealpha(de)
						mil_aftSprite:zoom(e)
					end
					function aftZoomBG(s,e,ds,de,t)
						mil_bgaftSprite:finishtweening()
						mil_bgaftSprite:zoom(s)
						mil_bgaftSprite:diffusealpha(ds)
						mil_bgaftSprite:linear(t*spb)
						mil_bgaftSprite:diffusealpha(de)
						mil_bgaftSprite:zoom(e)
					end


					mm(272,function(self)
						love_earth:accelerate(spb2*14)
						love_earth:zoom(1.5)
						love_earth:y(SCREEN_CENTER_Y)

						love_overlayQuad:hidden(0)
						love_overlayQuad:diffuse(1,1,1,0)
						love_overlayQuad:linear(spb2*14)
						love_overlayQuad:diffusealpha(1)
					end)

					mm(286,function(self)
						MESSAGEMAN:Broadcast('Nearth');
						love_overlayQuad:linear(0.05)
						love_overlayQuad:diffuse(0,0,0,1)
					end)

					mm(288,function(self)
						love_overlayQuad:diffuse(1,1,1,1)
						love_overlayQuad:linear(4)
						love_overlayQuad:diffusealpha(0)
					end)







					-- bg stuff abuv
					--mods start here

					me(0,8,0,60,'x','end',inOutQuad,1,38)
					me(0,8,0,-60,'x','end',inOutQuad,2,39)
					me(4,8,0,50,'mini','end',inOutQuad,nil,39)
					me(0,4,0,1,'dizzyholds','end',linear,nil,39)
					me(0,4,0,-50,'tornadoz','end',inOutQuad,nil,39)
					me(0,4,0,50,'boost','end',inOutQuad,nil,39)

					me(32,39,0,600,'y','end',inQuad,nil,40)
					me(0,4,3.4,1.85,'xmod','end',linear,nil,39)

					m(39,3,'*10000 100 stealth,*10000 50 reverse, *10000 dark1, *10000 dark2',len,1)
					m(39,3,'*10000 100 stealth,*10000 50 reverse, *10000 dark0, *10000 dark3',len,2)

					mm(39,function()
						for i,v in ipairs(mod_plr) do
							if v then v:x(scx) end
						end
					end,true)
					me(39,1,-500,0,'y','len',outCirc,1)
					me(40,1,500,0,'y','len',outCirc,2)

					mm(41.5,function()

						for i,v in ipairs(mod_plr) do
							if v then

								v:zoomy(2)
								v:zoomx(.75)
								v:rotationz(0)
								v:decelerate(spb*.5)
								v:zoom(1)

							end

						end
					end)

					me(42,1,50,0,'reverse','len',outCirc)
					me(42,1,100,0,'stealth','len',outCirc)

					me(43,44,0,60,'mini','end',inQuad,nil,72)
					me(43,44,0,100,'sudden','end',inQuad,nil,72)
					me(43,44,0,100,'suddenoffset','end',inQuad,nil,72)
					me(43,44,0,50,'drunk','end',inQuad,nil,72)
					m(43,72,'*10000 200 drunkspeed','end')
					me(43,44,0,70,'boost','end',inQuad,nil,72)

					me(42.5,1,-100,0,'tinyy3','len',outQuad)
					me(42.75,1,-100,0,'tinyy2','len',outQuad)
					me(42.875,1,-100,0,'tinyy1','len',outQuad)
					me(43,1,-100,0,'tinyy0','len',outQuad)

					me(42.5,1,100,0,'tinyx3','len',outQuad)
					me(42.75,1,100,0,'tinyx2','len',outQuad)
					me(42.875,1,100,0,'tinyx1','len',outQuad)
					me(43,1,100,0,'tinyx0','len',outQuad)

					me(43.15,.25,0,15,'reverse','len',outCirc)
					me(43.4,.25,15,30,'reverse','len',outCirc)
					me(43.65,.35,30,0,'reverse','len',inCirc)

					function mil_whee(beat, col)
						me(beat,.1,0,150,'tinyx' .. col,'len',outCirc)
						me(beat+.1,.9,150,0,'tinyx' .. col,'len',outCirc)
						me(beat,.1,0,-300,'tinyy' .. col,'len',outCirc)
						me(beat+.1,.9,-300,0,'tinyy' .. col,'len',outCirc)
						me(beat,.1,0,100,'arrowpath' .. col,'len',outCirc)
						me(beat+.1,.9,100,0,'arrowpath' .. col,'len',outCirc)
					end

					mil_whee(49.25,1)
					mil_whee(49.5,2)
					mil_whee(49.75,0)
					mil_whee(50,1)
					mil_whee(50.25,3)
					mil_whee(50.5,2)
					mil_whee(50.75,1)

					mil_whee(51,0)

					mil_whee(56.5,0)
					mil_whee(56.625,1)
					mil_whee(56.75,2)
					mil_whee(56.875,3)
					mil_whee(57,1)
					mil_whee(57.25,2)
					mil_whee(57.5,0)
					mil_whee(57.75,1)
					mil_whee(58,3)
					mil_whee(58.25,2)
					mil_whee(58.5,1)
					mil_whee(58.75,0)

					m(59.5,67.5,'*10000 100 beat,*10000 100 beatz','end')
					m(67.5,70,'*10000 no beat,*10000 no beatz','end')

					me(58,.9,0,150,'flip','len',outCirc)
					me(58.9,1.2,150,-40,'flip','len',outBack,nil,0,3)
					me(59.5,.5,0,-400,'tiny','len',inCirc)
					me(60,4,-400,0,'tiny','len',linear)
					me(60.1,4,-40,0,'flip','len',linear)

					local snareparity = 1
					local kickparity = 1
					for i,v in ipairs(mil_simpl) do
					if v then
					  if v[2] == 3 then
						if v[1] == 61 then
							snareparity = snareparity * 2
						end
						me(v[1],1,snareparity*314,0,'dizzy','len',outQuad)
						me(v[1]-.1,.1,0,snareparity*204,'drunkz','len',inQuad)
						me(v[1],2,snareparity*204,0,'drunkz','len',outQuad)
						me(v[1]-.1,.1,0,snareparity*104,'tipsy','len',inQuad)
						me(v[1],2,snareparity*104,0,'tipsy','len',outQuad)
						snareparity = snareparity * -1
					  else
						me(v[1],.5,snareparity*200,0,'bumpy','len',outQuad)
						me(v[1],.5,50,0,'bumpyperiod','len',linear)
						kickparity = kickparity * -1
					  end
					end
					end

					me(44,2,50,0,'stealth','len',linear)
					me(60,2,50,0,'stealth','len',linear)

					me(65.75,.25,0,-5000,'tinyz','len',inCirc)
					me(66,1,-5000,0,'tinyz','len',linear)
					me(67,1,-4000,0,'tinyz','len',linear)
					me(67,.25,50,-150,'drunk','len',outCirc)
					me(67.25,.25,-150,150,'drunk','len',outCirc)
					me(67.5,.5,150,50,'drunk','len',outCirc)
					
					for i=68,70.5,.5 do
						me(i-.1,.1,0,(i-67)*10,'reverse','len',outQuad)			
						me(i,.4,(i-67)*10,0,'reverse','len',outQuad)			
					end
				  
					me(70.5,.5,314,0,'dizzy','len',inQuad)
					me(71,1,0,50,'reverse','len',inQuad,nil,7)
					me(70.5,1.5,0,50,'flip','len',inQuad,nil,7)
				  
					m(72,76,' *10000 200 drawsize, *1000 100 sudden','end')
					me(72,76,-100,400,'suddenoffset','end',outQuad)
					me(76,79,200,0,'drawsize','end',linear)
					m(72,79,'*1000 201 splinextype, *1000 201 splineytype, *1000 -100 spiralholds, *1000 50 stealth,*1000 50 wave','end')
					me(76,79,50,0,'stealth','end',linear)
					me(76,79,0,-100,'tiny','end',linear)
					me(76,79,0,-1000,'tinyz','end',linear)
					me(76,79,0,-100,'longboy','end',linear)
					me(76,79,0,100,'holdgirth','end',linear)
					me(76,79,0,-200,'gayholds','end',inQuad)
					--spd, x/y, 0-3, path array
					
					spiralSplinex = {}
					spiralSpliney = {}
					spiralSplinex2 = {}
					spiralSpliney2 = {}
					for i=0,1000,50 do
						table.insert(spiralSplinex,{i,i/1.45*math.sin(i/300*math.pi)})
						table.insert(spiralSpliney,{i,i/1.45*math.cos(i/300*math.pi)})
						table.insert(spiralSplinex2,{i,i/-1.45*math.sin(i/300*math.pi)})
						table.insert(spiralSpliney2,{i,i/-1.45*math.cos(i/300*math.pi)})
					end
					
					mod_bounce(72,8,0,-360,'rotationz','Quad',false,nil)
					mod_bounce(72,8,0,((math.rad(-360)*100)*-1),'confusionoffset','Quad',false,nil)

					me(78.5, 0.5, 100, 0, 'zoomy', 'len', inBack,nil,0.5)
					me(78.5, 0.5, 100, 400, 'zoomx', 'len', inBack,nil,0.5)
					m(79.5,0.5,'*-1 100 zoomy,*-1 100 zoomx,*-1 200 mini','len')
					me(79.5, 0.5, 200, 0, 'mini', 'len', inCirc,nil,0.2)

					m(79,2,'*-1 -99.99 squareperiod,*-1 no spiralholds,*-1 no wave,*-1 no stealth','len')
					me(80, 1, 400, 0, 'drunk', 'len', outElastic,nil,nil,4000,0.02)
					me(80, 1, 400, 0, 'zigzag', 'len', outElastic,nil,nil,4000,0.02)
					me(80, 1, 100, 0, 'square', 'len', outElastic,nil,nil,4000,0.02)

					mod_bounce(80,1,0,20,'rotationz','Circ',false,nil)
					mod_bounce(80,1,0,-100,'mini','Circ',false,nil)

					me(81, 0.5, 200, 0, 'movex', 'len', outExpo,nil)
					me(81.5, 0.5, 400, 0, 'tipsy', 'len', outExpo,nil)
					me(81.5, 0.5, 100, 0, 'centered2', 'len', outExpo,nil)
					me(81.5, 0.5, 100, 0, 'skewx', 'len', outExpo,nil)
					me(81.5, 0.5, 100, 0, 'rotationz', 'len', outExpo,nil)
					me(81.5, 0.5, 0, 100, 'reverse', 'len', inCirc,nil,2)

					m(82,0.375,'*20 invert','len')
					m(82.375,0.125,'*20 no invert','len')
					m(82.5,0.25,'*20 flip','len')
					m(82.75,0.25,'*20 no flip','len')

					me(83, 1, 200, 100, 'zoom', 'len', outExpo,nil)
					me(83, 0.25, 0, 200, 'tipsy', 'len', outBack,nil)
					me(83.5, 0.5, 0, 400, 'movex', 'len', inQuad,nil)
					me(83.5, 0.5, 100, 45, 'zoom', 'len', inQuad,nil,0.5)
					me(83.5, 0.5, 0, -20, 'rotationz', 'len', inQuad,nil,0.5)
					me(83.5, 0.5, 628*2, 0, 'confusionoffset', 'len', inQuad,nil,0.5)
					me(83.5, 0.5, 100, 0, 'reverse', 'len', inExpo,nil,1)

					me(84, 0.5, 50, 100, 'stealth', 'len', outExpo,nil)
					me(84, 0.5, 50, 100, 'dark', 'len', outExpo,nil)
					me(84, 0.5, 0, -100, 'flip', 'len', outExpo,nil)
					me(84, 0.5, 0, 200, 'drunk', 'len', outExpo,nil)
					me(84, 0.5, 0, -200, 'tipsy', 'len', outExpo,nil)

					m(84.5,0.5,'*-1 no movex,*-1 no rotationz,*-1 no tipsy,*-1 100 zoom,*10 no dark,*10 no stealth,*-1 no flip','len')
					me(84.5, 0.5, 100, 0, 'invert', 'len', inOutExpo,nil)
					mod_bounce(85,0.5,0,-40,'skewx','Expo',false,nil)
					me(84.5, 1, 628, 0, 'confusionoffset', 'len', inOutExpo,nil)

					me(85.5, 0.5, 250, 100, 'zoomx', 'len', outExpo,nil)
					me(85.5, 0.5, -20, 0, 'rotationz', 'len', outExpo,1)
					me(85.5, 0.5, 20, 0, 'rotationz', 'len', outExpo,2)

					me(86, 0.5, 400, 0, 'tipsy', 'len', outExpo,nil)
					me(86, 0.5, 100, 0, 'centered2', 'len', outExpo,nil)
					me(86, 0.5, -100, 0, 'skewx', 'len', outExpo,nil)
					me(86, 0.5, -100, 0, 'rotationz', 'len', outExpo,nil)

					me(86.25, 0.5, -100, 0, 'tiny', 'len', outExpo,nil)

					local love_movexn = {
						{86.500,2,1},
						{86.625,3,1},
						{86.750,2,1},
						{86.875,1,1},
						{87.000,2,1},
						{87.167,3,1},
						{87.333,0,1},
					}

					local f = 1
					local f1m,f2m = 200,200
					local fuck = 0
					for i = 1,table.getn(love_movexn) do
						local beat = love_movexn[i][1]
						--[[if f == 1 then
							me(beat, 0.25, -f1m+200, -f1m, 'movex1', 'len', outExpo,nil)
							me(beat, 0.25, f1m-200, f1m, 'movex2', 'len', outExpo,nil)
							f1m = f1m + 200
						elseif f == -1 then
							me(beat, 0.25, -f2m+200, -f2m, 'movex0', 'len', outExpo,nil,0.25)
							me(beat, 0.25, f2m-200, f2m, 'movex3', 'len', outExpo,nil,0.25)
							f2m = f2m + 200
						end--]]
						--me(beat, 0.25, (f2m-200)/10, (f2m)/10, 'mini', 'len', outExpo,nil,0.25)
						me(beat, 0.25, fuck, 0, 'mini', 'len', outExpo,nil)
						me(beat, 0.25, 50+fuck*f, 0, 'tipsy', 'len', outExpo,nil)
						fuck = fuck + 50
						f=-f
					end

					me(87.5, 0.25, 0, 50, 'reverse', 'len', outExpo,nil)
					me(87.5, 0.25, 0, 100, 'stealth', 'len', outExpo,nil)
					me(87.5, 0.25, 0, 100, 'dark', 'len', outExpo,nil)

					for col = 0,3 do
						m(87.75,0.5,'*-1 no movex'..col,'len')
					end

					m(87.75,0.5,'*-1 no reverse,*10 no dark','len')
					me(87.75, 3, 50, 0, 'stealth', 'len', outExpo,nil)
					me(87.75, 3, -400, 0, 'tiny', 'len', outExpo,nil)
					--me(87.75, 2, -50, 0, 'rotationx', 'len', outExpo,nil)
					me(87.75, 2, -4000, 0, 'tinyz', 'len', outExpo,nil)
					me(87.75, 1.25, 628, 0, 'confusionoffset', 'len', outExpo,nil)
					me(87.75, 2, 400, 100, 'zoomz', 'len', outExpo,nil)

					me(88.25, 1, 100, 0, 'movex', 'len', outExpo,nil)
					me(88.5, 0.25, 0, 100, 'invert', 'len', outExpo,nil)
					me(88.75, 0.25, 100, 0, 'invert', 'len', outExpo,nil)

					mod_bounce(88.75,0.25,0,40,'reverse','Circ',false,nil)

					me(89, 0.25, 0, 200/3, 'tiny', 'len', outExpo,nil)
					me(89.25, 0.25, 200/3, 200/2, 'tiny', 'len', outExpo,nil)
					me(89.5, 0.25, 200/2, 200, 'tiny', 'len', outExpo,nil,0.5)

					m(87.75,0.5,'*-1 no reverse,*10 no dark,*10 no stealth','len')

					bouncy_wiggle(90,1.75,0.75,0,100,'distant','len','Expo',true,nil)
					ease_wiggle(90,3,100,0.75,'reverse',inExpo,'len',nil,true)

					me(90, 1, 200, 0, 'tiny', 'len', outExpo,nil)
					me(90, 1, -200, 0, 'mini', 'len', outExpo,nil)
					me(90.75, 1, 200, 0, 'tiny', 'len', outExpo,nil)
					me(90.75, 1, -200, 0, 'mini', 'len', outExpo,nil)
					me(91.5, 1, 200, 0, 'tiny', 'len', outExpo,nil)
					me(91.5, 1, -200, 0, 'mini', 'len', outExpo,nil)
					me(92, 2, 0, 0, 'reverse', 'len', linear,nil)

					m(92,4,'*-1 400 bumpyperiod','len')
					bouncy_wiggle(92,3,0.75,0,10,'rotationz','len','Circ',false,nil)
					bouncy_wiggle(92,3,0.75,0,700,'bumpy','len','Circ',false,nil)

					me(92, 1, 200, 0, 'mini', 'len', outExpo,nil)
					me(92.25, 0.5, 628*2, 0, 'confusionoffset', 'len', inCirc,nil,0.2)
					me(92.25, 0.5, 0, 500, 'drunk', 'len', inCirc,nil)
					m(92.25+0.5,0.25,'*-1 no drunk','len')

					me(92.75, 1, 200, 0, 'mini', 'len', outExpo,nil)
					me(93, 0.5, 628*2, 0, 'confusionoffset', 'len', inCirc,nil,0.2)
					me(93, 0.5, 0, -500, 'drunk', 'len', inCirc,nil)
					m(93+0.5,0.25,'*-1 no drunk','len')

					me(93.5, 1, 200, 0, 'mini', 'len', outExpo,nil)
					me(93.75, 0.5, 628*2, 0, 'confusionoffset', 'len', inCirc,nil,0.2)
					me(93.75, 0.5, 0, 500, 'drunk', 'len', inCirc,nil)
					m(93.75+0.5,0.25,'*-1 no drunk','len')

					me(94.25, 1, 200, 0, 'mini', 'len', outExpo,nil)
					me(94.5, 0.5, 628*2, 0, 'confusionoffset', 'len', inCirc,nil,0.2)
					me(94.5, 0.5, 0, -500, 'drunk', 'len', inCirc,nil)
					m(94.5+0.5,0.25,'*-1 no drunk','len')
					me(95, 1, 400, 100, 'zoomx', 'len', outExpo,nil)
					me(95, 0.75, 0, 200, 'movex', 'len', inElastic,nil,nil,4000,0.02)
					mod_bounce(95,0.75,0,200,'wave','Circ',false,nil)
					m(95.75,0.25,'*-1 no movex','len')
					me(95.75, 0.25, 400, 100, 'zoomx', 'len', outExpo,nil)
					me(95.75, 0.25, 400, 0, 'tipsy', 'len', outExpo,nil)
					me(95.75, 0.25, 0, 50, 'reverse', 'len', outExpo,nil)


					mm(96,function(self)
						love_overlayQuad:hidden(0)
						love_overlayQuad:diffuse(1,1,1,1)
						love_overlayQuad:linear(1)
						love_overlayQuad:diffusealpha(0)
					end)

					m(96,112,'*-1 200 beat,*-1 400 beatperiod,*-1 -600 cubicz,*-1 sudden,*-1 100 suddenoffset','end')
					mm(96,function(self) local a = P1 if a then a:x(scx/2) a:rotationz(-10) end end)
					mm(100,function(self) local a = P2 if a then a:x(scx*1.5) a:rotationz(10) end end)
					
					mod_bounce(96,8,1000,0,'movey','Circ',false,1)
					mod_bounce(96,4,-1000,-1000,'movey','Circ',false,2)
					mod_bounce(96,12,100,100,'reverse','Circ',false,2)
					mod_bounce(100,8,-1000,0,'movey','Circ',false,2)

					m(104,8,'*-1 reverse','len',1)
					m(108,4,'*-1 no reverse','len',2)
					mod_bounce(104,8,-1000,0,'movey','Circ',false,1)
					mod_bounce(108,4,1000,0,'movey','Circ',false,2)

					mod_bounce(102,1,0,25,'flip','Circ',false)
					mod_bounce(102,1,0,-75,'invert','Circ',false)
					mod_bounce(102,1,0,157,'confusionoffset1','Circ',false)
					mod_bounce(102,1,0,157,'confusionoffset2','Circ',false)
					mod_bounce(102,1,0,50,'stealth1','Circ',false)
					mod_bounce(102,1,0,50,'stealth2','Circ',false)
					mod_bounce(110,1,0,25,'flip','Circ',false)
					mod_bounce(110,1,0,-75,'invert','Circ',false)
					mod_bounce(110,1,0,-157,'confusionoffset1','Circ',false)
					mod_bounce(110,1,0,-157,'confusionoffset2','Circ',false)
					mod_bounce(110,1,0,50,'stealth1','Circ',false)
					mod_bounce(110,1,0,50,'stealth2','Circ',false)
					
					m(112,1,'*-1 no reverse,*-1 no beat','len')
					mm(112,function(self) for pn = 1,2 do local a = _G['P'..pn] if a then a:x(scx) a:rotationz(0) end end end)
					me(112, 4, 1000, 0, 'movey', 'len', outExpo,nil)

					--the worst 50/50 in the universe
					for i=116,118.5,.5 do
						me(i,.25,0,25,'flip','len',linear)
						me(i,.25,0,-75,'invert','len',linear)
						me(i+.25,.25,25,0,'flip','len',linear)
						me(i+.25,.25,-75,0,'invert','len',linear)
					end
					me(116,119,00,-30000,'tinyz','end',inCirc)
					me(116,119,00,50,'reverse','end',outQuad,nil)
					me(116,119,0,99999,'confusionoffset1','end',linear)
					me(116,119,0,99999,'confusionoffset2','end',linear)
					m(119,1,'*-1 no confusionoffset1, *-1 no confusionoffset2','len')

					m(119,124,'*-1 100 dark, *-1 no tinyz, *-1 100 stealth, *-1 -500 movey','end')
					--m(119,134,'*10000 C150','end')
					me(124,134,1,0,'xmod','end',inCirc)
					me(124,134,100,50,'dark','end',linear)
					me(124,134,100,0,'hallway','end',outBack)
					me(124,134,-200,0,'mini','end',outCirc)
					me(124,134,-500,0,'movey','end',outBack)
					m(134,2,'*-1 100 stealth, *-1 100 dark','len')
					
					for i=124,133 do
						me(i,.75,100-(i-124)*5,100,'stealth','len',inQuad)
						me(i,.75,(i-124)*-800,0,'tinyz','len',inQuad)
					end
					
					local paritg = 1
					for i=136,160,.333 do
						local asdgaeha = (i-136)*paritg/20
						me(i,.333,asdgaeha*-200,asdgaeha*200,'drunkz','len',outQuad)
						me(i,.333,asdgaeha*-100,asdgaeha*100,'drunk','len',outQuad)
						me(i,.333,asdgaeha*-100,asdgaeha*100,'tipsy','len',outQuad)
						paritg = paritg*-1
					end
					me(160,4,-1800,0,'rotationy','len',inQuad,nil,1)
					me(160,4,0,5000,'holdgirth','len',inQuad,nil)
					me(160,4,0,5000,'longboy','len',inQuad,nil)
					m(164,4,'*-1 no holdgirth, *-1 no longboy','len')
					me(160,4,0,-100,'flip','len',inQuad,nil,1)
					
					me(163.9,2.1,200,200,'mini','len',linear)
					me(164,2,0,180,'space','len',linear,nil,1)

					me(166,2,1000,-400,'movey','len',outBack)
					me(166,2,250,250,'movex','len',outBack)
					me(168,2,0,0,'movex','len',linear)
					
					--earff
					m(164,255,'*1000 180 space, *1000 250 bumpy, *1000 1200 bumpyperiod, *1000 50 mini,*10000 -400 movey, *1000 -500 movez, *1000 C400, *10000 -40 flip, *1000 -100 tiny, *1000 -100 tinyz, dizzyholds','end')
					m(168,200,'*10000 500 beatz, *10000 -75 beatzmult, *1000 250 beatzoffset, *1000 300 beatzperiod','end')
					m(200,224,'*100000 no beatz','end')

					
					
					local fangwang = 1
					for i=170,198,4 do
						me(i-.5,.5,0,300,'drunk','len',inQuad)
						me(i,2,300,0,'drunk','len',inQuad)
						me(i,2,624*fangwang,00,'confusionxoffset','len',outQuad,1)
						me(i,2,(624+314)*fangwang,314*fangwang,'confusionxoffset','len',outQuad,2)
						m(i,2,'*10000 dark','len',2)
						m(i+2,2,'*10000 no confusionxoffset','len')
						--me(i-.5,.5,0,300,'digitalz','len',inQuad)
						--me(i,2,300,0,'digitalz','len',inQuad)
						fangwang = fangwang * -1
					end

					local easyadj = 100
					for i=200,214,2 do
						m(i,1,'*1000 '.. easyadj ..' drunk','len')
						me(i+1,.333,easyadj,easyadj*-1,'drunk','len',outCirc)
						me(i+1+.333,.333,easyadj*-1,easyadj,'drunk','len',outCirc)
						me(i+1+.666,.333,easyadj,easyadj*-1,'drunk','len',outCirc)
						me(i+2,1,easyadj*-1,easyadj,'drunk','len',outCirc)
					end

					--going to redo this definitely, i want it to be the playfield/hold wrapping around the earth tbh
					for i=0,24,8 do
						local index=(23-i)/30
						local index2=(30-i)/30
						--me(224+i,231.5+i,250*index2,250*index,'bumpy
						m(223.9+i,231.4+i,'*10000 '.. 250*index ..' bumpy,*10000 '.. 50*index ..' mini ,*10000 '.. -400*index ..' movey ,*10000 '.. 180*index ..' space,*10000 '.. -500*index ..' movez ,*10000 '.. -40*index ..' flip ,*10000 '.. -100*index ..' tiny,*10000 '.. -100*index ..' tinyz ','end')
					end

					m(256,267,'*-1 100 dark,*-1 100 wave,*-1 100 boost, *1000000 C100, *-1 100 flip, *-1 -100 tornado','end')
					m(267,286,'*-1 100 dark','end')
					
					me(267,286,100,50,'flip','end',inQuad)
					me(267,286,-100,0,'tornado','end',inQuad)
					me(272,286,0,50,'reverse','end',inOutBack)
					me(272,286,0,-200,'mini','end',inOutBack)
					me(272,286,1.98863,.2,'xmod','end',outCirc)
					me(272,286,0,100,'brake','end',outCirc)
					m(272,286,'*1 sudden, *1000 100 suddenoffset, *10 no stealth, *-1 no digital','end')
					m(288,99,'*10 100x,*10 sudden, *1000 100 suddenoffset, *10 50 stealth',l)

					for i,v in ipairs(mil_ditdah) do
						--{272.000,3,4,length=0.667},
						--{273.167,3,2,length=0.167},
						if v[3] == 2 then
							m(v[1],v.length,'*-1 100 stealth','len')
						elseif v[3] == 4 then
							bouncy_wiggle(v[1],v.length,0.1,-100,100,'digital','len','Expo',true,nil)
						end
					end
					
					
					mm(288,function() -- bye bye
						for i,v in ipairs(mod_plr) do
							if v then
								v:zoomz(5)
								v:x(sw/2)
								v:rotationy(-360*6)
								v:tween(spb*7,'inOutBack(%f,0,1,1)')
								v:rotationy(0)
								v:zoomz(3)
							end
						end
					end)

					me(288,302,0,200,'bumpy','end',linear,1)
					me(288,302,0,-200,'bumpy','end',linear,2)
					me(288,302,0,-250,'tornado','end',linear)
					me(288,302,0,50,'flip','end',linear)
					me(288,302,50,100,'dark','end',linear,nil,400)

					me(288,295,50,0,'reverse','end',outQuart)
					me(295,302,0,50,'reverse','end',inCubic,nil,1)
					m(288,999,'-100 drawsizeback','end')

					mm(296,function()
						for i=1,2 do
							local v = _G['mil_Note'..i]
							if v then
								v:hidden(0)
								v:zoom(0)
								v:rotationz(180*i)
								v:decelerate(spb*1.5)
								v:rotationz(180*(i-1))
								v:zoom(1)
								v:diffusealpha(1)
								v:tween(spb*1.5,'inExpo(%f,0,1,1)')
								v:y(SCREEN_CENTER_Y)
								v:zoom(20)
								v:rotationx(180)
								v:rotationy(180)
								v:rotationz(180*i)
								v:sleep(0)
								v:diffusealpha(0)
							end
						end
					end)
					
					me(300,2,0,-10000,'tiny','len',inCirc)
					mm(300.1,function()
						for i,v in ipairs(mod_plr) do
							if v then v:accelerate(spb*.25) v:rotationx(0) end
						end
					end)
					mm(302,'BlackScreen')
					mm(302,function(self)
						MESSAGEMAN:Broadcast('I')
						local a,l,g = love_lessthan3All,love_lessthan3,love_lessthan3glow
						a:hidden(0)

						l:zoom(0.8)
						l:tween(1.5,'outCirc(%f,0,1,1)')
						l:diffusealpha(0)
						l:zoom(1)

						g:zoom(5.5)
						g:tween(2,'outCirc(%f,0,1,1)')
						g:diffusealpha(0)
						g:zoom(1)

						love_cat:diffusealpha(0.25)
						love_cat:zoom(4)
						love_cat:tween(2,'outCirc(%f,0,1,1)')
						love_cat:zoom(3)
						love_cat:diffusealpha(0)


						local i,m,o = love_ringInner,love_ringMiddle,love_ringOuter

						i:diffusealpha(4)
						i:zoom(0.4)
						i:tween(1,'outExpo(%f,0,1,1)')
						i:zoom(2)
						i:rotationz(50)
						i:diffusealpha(0)
						--i:rotationx(-40)
						--i:rotationy(20)

						m:diffusealpha(4)
						m:zoom(0.6)
						m:tween(1,'outExpo(%f,0,1,1)')
						m:zoom(2)
						m:rotationz(-40)
						m:diffusealpha(0)
						--m:rotationx(-40)
						--m:rotationy(20)

						o:diffusealpha(4)
						o:zoom(0.8)
						o:tween(1,'outExpo(%f,0,1,1)')
						o:zoom(2)
						o:rotationz(20)
						o:diffusealpha(0)
						--o:rotationx(-40)
						--o:rotationy(20)
					end)
					
					--credits controls--
					mm(4,function()
						mil_cTaro:hidden(0)
						mil_cTaro:diffuse(0,0,0,0)
						mil_cTaro:zoom(.5)
						mil_cTaro:decelerate(spb*2)
						mil_cTaro:zoom(.75)
						mil_cTaro:diffuse(1,1,1,1)
						mil_cTaro:sleep(spb*4)
						mil_cTaro:accelerate(spb*2)
						mil_cTaro:zoom(1)
						mil_cTaro:diffuse(0,0,0,0)
						mil_cTaro:sleep(0)
						mil_cTaro:queuecommand('HideSelf')
					end)
					
					mm(11,function()
						mil_cDai:hidden(0)
						mil_cDai:diffuse(0,0,0,0)
						mil_cDai:zoom(.5)
						mil_cDai:decelerate(spb*2)
						mil_cDai:zoom(.75)
						mil_cDai:diffuse(1,1,1,1)
						mil_cDai:sleep(spb*5)
						mil_cDai:accelerate(spb*2)
						mil_cDai:zoom(1)
						mil_cDai:diffuse(0,0,0,0)
						mil_cDai:sleep(0)
						mil_cDai:queuecommand('HideSelf')
					end)
					
					mm(19,function()
						mil_cHal:hidden(0)
						mil_cHal:diffuse(0,0,0,0)
						mil_cHal:zoom(.5)
						mil_cHal:decelerate(spb*2)
						mil_cHal:zoom(.75)
						mil_cHal:diffuse(1,1,1,1)
						mil_cHal:sleep(spb*5)
						mil_cHal:accelerate(spb*2)
						mil_cHal:zoom(1)
						mil_cHal:diffuse(0,0,0,0)
						mil_cHal:sleep(0)
						mil_cHal:queuecommand('HideSelf')
					end)

					mm(27,function()
						mil_cPuuro:hidden(0)
						mil_cPuuro:diffuse(0,0,0,0)
						mil_cPuuro:zoom(.5)
						mil_cPuuro:decelerate(spb*2)
						mil_cPuuro:zoom(.75)
						mil_cPuuro:diffuse(1,1,1,1)
						mil_cPuuro:sleep(spb*3)
						mil_cPuuro:accelerate(spb*7)
						mil_cPuuro:y(SCREEN_HEIGHT*1.5)
						mil_cPuuro:sleep(0)
						mil_cPuuro:queuecommand('HideSelf')
					end)
					
					mm(43,function()
						mil_cArt:hidden(0)
						mil_cArt:diffuse(0,0,0,0)
						mil_cArt:zoom(.5)
						mil_cArt:decelerate(spb*2)
						mil_cArt:zoom(.9)
						mil_cArt:diffuse(1,1,1,1)
						mil_cArt:sleep(spb*11)
						mil_cArt:accelerate(spb*2)
						mil_cArt:zoom(1.25)
						mil_cArt:diffuse(0,0,0,0)
						mil_cArt:rotationx(-90)
						mil_cArt:y(SCREEN_CENTER_Y*-1.25)
						mil_cArt:sleep(0)
						mil_cArt:queuecommand('HideSelf')
					end)
					
					mm(43,function()
						mil_cArt1:hidden(0)
						mil_cArt1:diffuse(0,0,0,0)
						mil_cArt1:zoom(.5)
						mil_cArt1:decelerate(spb*2)
						mil_cArt1:zoom(.75)
						mil_cArt1:diffuse(1,1,1,1)
						mil_cArt1:sleep(spb*4)
						mil_cArt1:accelerate(spb*2)
						mil_cArt1:zoom(1)
						mil_cArt1:diffuse(0,0,0,0)
						mil_cArt1:rotationx(-90)
						mil_cArt1:y(SCREEN_CENTER_Y*-1)
						mil_cArt1:sleep(0)
						mil_cArt1:queuecommand('HideSelf')
					end)
					
					mm(50,function()
						mil_cArt2:hidden(0)
						mil_cArt2:diffuse(0,0,0,0)
						mil_cArt2:rotationx(60)
						mil_cArt2:y(SCREEN_CENTER_Y*-.7)
						mil_cArt2:zoom(.5)
						mil_cArt2:decelerate(spb*2)
						mil_cArt2:zoom(.75)
						mil_cArt2:diffuse(1,1,1,1)
						mil_cArt2:y(0)
						mil_cArt2:rotationx(0)
						mil_cArt2:sleep(spb*4)
						mil_cArt2:accelerate(spb*2)
						mil_cArt2:zoom(1)
						mil_cArt2:diffuse(0,0,0,0)
						mil_cArt2:rotationx(-90)
						mil_cArt2:y(SCREEN_CENTER_Y*-1.25)
						mil_cArt2:sleep(0)
						mil_cArt2:queuecommand('HideSelf')
					end)
					
					mm(57,function()
						mil_cVoices:hidden(0)
						mil_cVoices:diffuse(0,0,0,0)
						mil_cVoices:zoom(.5)
						mil_cVoices:decelerate(spb*2)
						mil_cVoices:zoom(.9)
						mil_cVoices:diffuse(1,1,1,1)
						mil_cVoices:sleep(spb*11.5)
						mil_cVoices:accelerate(spb*2)
						mil_cVoices:zoom(2.5)
						mil_cVoices:diffuse(0,0,0,0)
						mil_cVoices:rotationz(180)
						mil_cVoices:sleep(0)
						mil_cVoices:queuecommand('HideSelf')
					end)
					
					mm(57,function()
						mil_cVoices1:hidden(0)
						mil_cVoices1:diffuse(0,0,0,0)
						mil_cVoices1:zoom(.5)
						mil_cVoices1:decelerate(spb*2)
						mil_cVoices1:zoom(.85)
						mil_cVoices1:diffuse(1,1,1,1)
						mil_cVoices1:sleep(spb*4)
						mil_cVoices1:accelerate(spb*2)
						mil_cVoices1:zoom(1.1)
						mil_cVoices1:diffuse(0,0,0,0)
						mil_cVoices1:rotationx(-90)
						mil_cVoices1:y(SCREEN_CENTER_Y*-1)
						mil_cVoices1:sleep(0)
						mil_cVoices1:queuecommand('HideSelf')
					end)
					
					mm(64,function()
						mil_cVoices2:hidden(0)
						mil_cVoices2:diffuse(0,0,0,0)
						mil_cVoices2:rotationx(60)
						mil_cVoices2:y(SCREEN_CENTER_Y*-.7)
						mil_cVoices2:zoom(.5)
						mil_cVoices2:decelerate(spb*2)
						mil_cVoices2:zoom(.85)
						mil_cVoices2:diffuse(1,1,1,1)
						mil_cVoices2:y(0)
						mil_cVoices2:rotationx(0)
						mil_cVoices2:sleep(spb*4.5)
						mil_cVoices2:accelerate(spb*2)
						mil_cVoices2:zoom(2)
						mil_cVoices2:diffuse(0,0,0,0)
						mil_cVoices2:rotationz(180)
						mil_cVoices2:sleep(0)
						mil_cVoices2:queuecommand('HideSelf')
					end)
					
					mm(79,function()
						mil_cTier1:hidden(0)
						mil_cTier1:diffuse(0,0,0,0)
						mil_cTier1:zoom(1.5)
						mil_cTier1:decelerate(spb)
						mil_cTier1:zoom(1)
						mil_cTier1:diffuse(1,1,1,1)
						mil_cTier1:sleep(spb*3)
						mil_cTier1:accelerate(spb)
						mil_cTier1:zoom(0)
						mil_cTier1:diffuse(0,0,0,0)
						mil_cTier1:sleep(0)
						mil_cTier1:queuecommand('HideSelf')
					end)
					mm(79,function()
						mil_cTier1a:hidden(0)
						mil_cTier1a:diffuse(0,0,0,0)
						mil_cTier1a:zoom(1.5)
						mil_cTier1a:decelerate(spb)
						mil_cTier1a:zoom(1)
						mil_cTier1a:diffuse(1,1,1,1)
						mil_cTier1a:sleep(spb*3)
						mil_cTier1a:accelerate(spb)
						mil_cTier1a:zoom(0)
						mil_cTier1a:diffuse(0,0,0,0)
						mil_cTier1a:sleep(0)
						mil_cTier1a:queuecommand('HideSelf')
					end)
					
					mm(83,function()
						mil_cTier15:hidden(0)
						mil_cTier15:diffuse(0,0,0,0)
						mil_cTier15:zoom(1.5)
						mil_cTier15:decelerate(spb)
						mil_cTier15:zoom(1)
						mil_cTier15:diffuse(1,1,1,1)
						mil_cTier15:sleep(spb*3)
						mil_cTier15:accelerate(spb)
						mil_cTier15:zoom(0)
						mil_cTier15:diffuse(0,0,0,0)
						mil_cTier15:sleep(0)
						mil_cTier15:queuecommand('HideSelf')
					end)
					mm(83,function()
						mil_cTier15a:hidden(0)
						mil_cTier15a:diffuse(0,0,0,0)
						mil_cTier15a:zoom(1.5)
						mil_cTier15a:decelerate(spb)
						mil_cTier15a:zoom(1)
						mil_cTier15a:diffuse(1,1,1,1)
						mil_cTier15a:sleep(spb*3)
						mil_cTier15a:accelerate(spb)
						mil_cTier15a:zoom(0)
						mil_cTier15a:diffuse(0,0,0,0)
						mil_cTier15a:sleep(0)
						mil_cTier15a:queuecommand('HideSelf')
					end)
					
					mm(87,function()
						mil_cTier2:hidden(0)
						mil_cTier2:diffuse(0,0,0,0)
						mil_cTier2:zoom(1.5)
						mil_cTier2:decelerate(spb)
						mil_cTier2:zoom(1)
						mil_cTier2:diffuse(1,1,1,1)
						mil_cTier2:sleep(spb*3)
						mil_cTier2:accelerate(spb)
						mil_cTier2:zoom(0)
						mil_cTier2:diffuse(0,0,0,0)
						mil_cTier2:sleep(0)
						mil_cTier2:queuecommand('HideSelf')
					end)
					mm(87,function()
						mil_cTier2a:hidden(0)
						mil_cTier2a:diffuse(0,0,0,0)
						mil_cTier2a:zoom(1.5)
						mil_cTier2a:decelerate(spb)
						mil_cTier2a:zoom(1)
						mil_cTier2a:diffuse(1,1,1,1)
						mil_cTier2a:sleep(spb*3)
						mil_cTier2a:accelerate(spb)
						mil_cTier2a:zoom(0)
						mil_cTier2a:diffuse(0,0,0,0)
						mil_cTier2a:sleep(0)
						mil_cTier2a:queuecommand('HideSelf')
					end)
					
					mm(91,function()
						mil_cTier3:hidden(0)
						mil_cTier3:diffuse(0,0,0,0)
						mil_cTier3:zoom(1.5)
						mil_cTier3:decelerate(spb)
						mil_cTier3:zoom(1)
						mil_cTier3:diffuse(1,1,1,1)
						mil_cTier3:sleep(spb*3)
						mil_cTier3:accelerate(spb)
						mil_cTier3:zoom(0)
						mil_cTier3:diffuse(0,0,0,0)
						mil_cTier3:sleep(0)
						mil_cTier3:queuecommand('HideSelf')
					end)
					mm(91,function()
						mil_cTier3a:hidden(0)
						mil_cTier3a:diffuse(0,0,0,0)
						mil_cTier3a:zoom(1.5)
						mil_cTier3a:decelerate(spb)
						mil_cTier3a:zoom(1)
						mil_cTier3a:diffuse(1,1,1,1)
						mil_cTier3a:sleep(spb*3)
						mil_cTier3a:accelerate(spb)
						mil_cTier3a:zoom(0)
						mil_cTier3a:diffuse(0,0,0,0)
						mil_cTier3a:sleep(0)
						mil_cTier3a:queuecommand('HideSelf')
					end)
					
					mm(95,function()
						mil_cTier4:hidden(0)
						mil_cTier4:diffuse(0,0,0,0)
						mil_cTier4:zoom(1.5)
						mil_cTier4:decelerate(spb)
						mil_cTier4:zoom(1)
						mil_cTier4:diffuse(1,1,1,1)
						mil_cTier4:sleep(spb*3)
						mil_cTier4:accelerate(spb)
						mil_cTier4:zoom(0)
						mil_cTier4:diffuse(0,0,0,0)
						mil_cTier4:sleep(0)
						mil_cTier4:queuecommand('HideSelf')
					end)
					mm(95,function()
						mil_cTier4a:hidden(0)
						mil_cTier4a:diffuse(0,0,0,0)
						mil_cTier4a:zoom(1.5)
						mil_cTier4a:decelerate(spb)
						mil_cTier4a:zoom(1)
						mil_cTier4a:diffuse(1,1,1,1)
						mil_cTier4a:sleep(spb*3)
						mil_cTier4a:accelerate(spb)
						mil_cTier4a:zoom(0)
						mil_cTier4a:diffuse(0,0,0,0)
						mil_cTier4a:sleep(0)
						mil_cTier4a:queuecommand('HideSelf')
					end)
					
					mm(102,function()
						mil_cTierE:hidden(0)
						mil_cTierE:diffuse(0,0,0,0)
						mil_cTierE:zoom(1.5)
						mil_cTierE:decelerate(spb)
						mil_cTierE:zoom(1)
						mil_cTierE:diffuse(1,1,1,1)
						mil_cTierE:sleep(spb*3)
						mil_cTierE:accelerate(spb)
						mil_cTierE:zoom(0)
						mil_cTierE:diffuse(0,0,0,0)
						mil_cTierE:sleep(0)
						mil_cTierE:queuecommand('HideSelf')
					end)
					
					mm(102,function()
						mil_cTierEa:hidden(0)
						mil_cTierEa:diffuse(0,0,0,0)
						mil_cTierEa:zoom(1.5)
						mil_cTierEa:decelerate(spb)
						mil_cTierEa:zoom(1)
						mil_cTierEa:diffuse(1,1,1,1)
						mil_cTierEa:sleep(spb*3)
						mil_cTierEa:accelerate(spb)
						mil_cTierEa:zoom(0)
						mil_cTierEa:diffuse(0,0,0,0)
						mil_cTierEa:sleep(0)
						mil_cTierEa:queuecommand('HideSelf')
					end)
					
					mm(110,function()
						mil_cTierB:hidden(0)
						mil_cTierB:diffuse(0,0,0,0)
						mil_cTierB:zoom(1.5)
						mil_cTierB:decelerate(spb)
						mil_cTierB:zoom(1)
						mil_cTierB:diffuse(1,1,1,1)
						mil_cTierB:sleep(spb*2)
						mil_cTierB:accelerate(spb*2)
						mil_cTierB:zoom(2)
						mil_cTierB:diffuse(0,0,0,0)
						mil_cTierB:sleep(0)
						mil_cTierB:queuecommand('HideSelf')
					end)
					
					mm(110,function()
						mil_cTierBa:hidden(0)
						mil_cTierBa:diffuse(0,0,0,0)
						mil_cTierBa:zoom(1.5)
						mil_cTierBa:decelerate(spb)
						mil_cTierBa:zoom(1)
						mil_cTierBa:diffuse(1,1,1,1)
						mil_cTierBa:sleep(spb*2)
						mil_cTierBa:accelerate(spb*2)
						mil_cTierBa:zoom(2)
						mil_cTierBa:diffuse(0,0,0,0)
						mil_cTierBa:sleep(0)
						mil_cTierBa:queuecommand('HideSelf')
					end)
					--in on 80,84,88,92,96,104,112
					
					mm(136,function()
						mil_cThanks:hidden(0)
						mil_cThanks:zoom(1)
						mil_cThanks:diffuse(1,1,1,1)
						mil_cThanks:y(SCREEN_CENTER_Y)
						mil_cThanks:sleep(spb*8)
						mil_cThanks:accelerate(spb*6)
						mil_cThanks:diffuse(0,0,0,0)
						mil_cThanks:zoom(5)
					end)
					
					mm(166,function()
						mil_cThanks:hidden(0)
						mil_cThanks:zoom(1)
						mil_cThanks:diffuse(1,1,1,1)
						mil_cThanks:y(SCREEN_HEIGHT)
						mil_cThanks:decelerate(spb)
						mil_cThanks:rotationx(-50)
						mil_cThanks:y(SCREEN_CENTER_Y*1.25)
					end)
					
					mm(167,function()
						mil_cGiants:hidden(0)
						mil_cGiants:zoom(1)
						mil_cGiants:diffuse(0,0,0,0)
						mil_cGiants:y(SCREEN_CENTER_Y*.5)
						mil_cGiants:decelerate(spb*.5)
						mil_cGiants:diffuse(1,1,1,1)
					end)
					
					mm(200,function()
						mil_cGiants:hidden(1)
					end)
					
					mm(168,function()
						mil_cThanks1:hidden(0)
						mil_cThanks1:zoom(1)
						mil_cThanks1:y(SCREEN_CENTER_Y*.5)
						mil_cThanks1:diffuse(1,1,1,1)
						mil_cThanks1:rotationx(60)
						mil_cThanks1:linear(spb*20)
						mil_cThanks1:diffuse(1,1,1,1)
						mil_cThanks1:y(-1.5*SCREEN_CENTER_Y)
						mil_cThanks1:z(500)
						mil_cThanks1:sleep(0)
						mil_cThanks1:queuecommand('HideSelf')
					end)
					
					mm(198,function()
						mil_cThanks2:hidden(0)
						mil_cThanks2:zoom(1)
						mil_cThanks2:y(SCREEN_CENTER_Y*.5)
						mil_cThanks2:diffuse(1,1,1,1)
						mil_cThanks2:rotationx(60)
						mil_cThanks2:linear(spb*12)
						mil_cThanks2:diffuse(1,1,1,1)
						mil_cThanks2:y(-.5*SCREEN_CENTER_Y)
						mil_cThanks2:z(500)
						mil_cThanks2:sleep(0)
						mil_cThanks2:queuecommand('HideSelf')
					end)
					
					mm(224,function()
						mil_cThanks:hidden(1)
					end)
					
					mm(256,function()
						mil_cThanks:hidden(0)
						mil_cThanks:zoom(1)
						mil_cThanks:y(0)
						mil_cThanks:z(0)
						mil_cThanks:diffuse(0,0,0,0)
						mil_cThanks:rotationx(0)
						mil_cThanks:decelerate(spb)
						mil_cThanks:diffuse(1,1,1,1)
						
						mil_cHomage:hidden(0)
						mil_cHomage:zoom(1)
						mil_cHomage:y(SCREEN_CENTER_Y*.8)
						mil_cHomage:z(0)
						mil_cHomage:diffuse(0,0,0,0)
						mil_cHomage:rotationx(0)
						mil_cHomage:decelerate(spb)
						mil_cHomage:diffuse(1,1,1,1)
						
						mil_cHomage1:hidden(0)
						mil_cHomage1:zoom(1)
						mil_cHomage1:y(SCREEN_CENTER_Y*-.2)
						mil_cHomage1:z(0)
						mil_cHomage1:diffuse(0,0,0,0)
						mil_cHomage1:rotationx(0)
						mil_cHomage1:decelerate(spb)
						mil_cHomage1:diffuse(1,1,1,1)
					end)
					
					mm(270,function()
						mil_cHomage:linear(spb)
						mil_cHomage:diffuse(0,0,0,0)
						mil_cHomage:sleep(0)
						mil_cHomage:queuecommand('HideSelf')
						
						mil_cHomage1:linear(spb)
						mil_cHomage1:diffuse(0,0,0,0)
						mil_cHomage1:sleep(0)
						mil_cHomage1:queuecommand('HideSelf')
					end)
					
					mm(272,function()
						mil_cAnd:hidden(0)				
						mil_cAnd:linear(spb)
						mil_cAnd:diffuse(1,1,1,1)
						mil_cAnd:accelerate(spb*6)
						mil_cAnd:zoom(2)				
						mil_cAnd:sleep(0)
						mil_cAnd:queuecommand('HideSelf')
						
						mil_cThanks:accelerate(spb*7)
						mil_cThanks:zoom(2)
						mil_cThanks:diffuse(0,0,0,0)
						mil_cThanks:sleep(0)
						mil_cThanks:queuecommand('HideSelf')
					end)
					
					mm(288,function()
						mil_cYou:hidden(0)
					end)
		---------------------------------------------------------------------------------------
		----------------------DON'T TOUCH IT KIDDO---------------------------------------------
		---------------------------------------------------------------------------------------

					function message_compare(a,b)
						return a[1] < b[1]
					end

					if table.getn(messages) > 1 then
						table.sort(messages, message_compare)
					end

					self:queuecommand('Update');
					
				else
					
					SCREENMAN:SystemMessage('NotITG version Too Old! Needs v3.2')
					
				end

			end"

			UpdateCommand="%function(self)

			---------------------------------------------------------------------------------------
			----------------------DON'T TOUCH IT KIDDO---------------------------------------------
			---------------------------------------------------------------------------------------

				local beat = GAMESTATE:GetSongBeat()

				--hide things as needed, and set up aliases if checked is false
				if not checked and beat>=0 then

					local ThingsToGrab = {'BPMDisplay','LifeFrame','ScoreFrame','Lyrics','SongBackground','SongForeground','Overlay','Underlay'}
						local ThingsToHide = {'BPMDisplay','LifeFrame','ScoreFrame','Overlay','Underlay'}
						local prefix_prox = {{'jud', 'Judgment'}, {'com', 'Combo'}}
						for pn=1,8 do
							_G['P'..pn] = SCREENMAN:GetTopScreen():GetChild('PlayerP'..pn) or nil;
							if _G['P'..pn] then
								table.insert(mod_plr, _G['P'..pn])
								_G['P'..pn]:SetFarDist(9999)
								_G['jud'..pn]=_G['P'..pn]:GetChild('Judgment');
								_G['com'..pn]=_G['P'..pn]:GetChild('Combo');
								_G['jud'..pn]:cmd('hidden,1;sleep,9E9;')
								_G['com'..pn]:cmd('hidden,1;sleep,9E9;')
								if pn <= 2 then
									for i,v in pairs(prefix_prox) do
										_G['proxy_'..v[1]..pn]:SetTarget(_G['P'..pn]:GetChild(v[2]))
										_G['proxy_'..v[1]..pn]:zoom(1)
										_G['proxy_jud'..pn]:xy(_G['P'..pn]:GetX(),_G['P'..pn]:GetY())
										_G['proxy_com'..pn]:xy(_G['P'..pn]:GetX(),_G['P'..pn]:GetY())
									end
								end
							end
							table.insert(ThingsToGrab,'LifeP'..pn); table.insert(ThingsToGrab,'ScoreP'..pn);
							table.insert(ThingsToHide,'LifeP'..pn); table.insert(ThingsToHide,'ScoreP'..pn);
						end	
						for i,v in ipairs(ThingsToGrab) do _G[v] = SCREENMAN:GetTopScreen():GetChild(v) or nil end	
						for i,v in ipairs(ThingsToHide) do if _G[v] then _G[v]:hidden(1) end end
					for i,v in pairs(mod_plr) do
						if SCREENMAN:GetTopScreen():GetChild('PlayerOptionsP'..i) then
							_G['init_modsp'..i] = SCREENMAN:GetTopScreen():GetChild('PlayerOptionsP'..i):GetText();
						end
					end

					screen = SCREENMAN:GetTopScreen();
					screen:SetDrawByZPosition(false);
					checked = true;

					P1 = SCREENMAN:GetTopScreen():GetChild('PlayerP1');
					P2 = SCREENMAN:GetTopScreen():GetChild('PlayerP2');
				end




				if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --

					-----------------------
					-- Player mod resets --
					-----------------------

					for i=1,2 do
						GAMESTATE:ApplyGameCommand('mod,clearall',i)
						if _G['init_modsp'..i] then
							GAMESTATE:ApplyGameCommand('mod,'.._G['init_modsp'..i],i)
						end
					end

					------------------------------------------------------------------------------
					-- custom mod reader by TaroNuke edited by WinDEU and re-stolen by TaroNuke --
					------------------------------------------------------------------------------
					for i,v in pairs(mods) do
						if v and table.getn(v) > 3 and v[1] and v[2] and v[3] and v[4] then
							if beat >=v[1] then
								if (v[4] == 'len' and beat <=v[1]+v[2]) or (v[4] == 'end' and beat <=v[2]) then
									if table.getn(v) == 5 then
										GAMESTATE:ApplyModifiers(v[3],v[5]);
									else
										GAMESTATE:ApplyModifiers(v[3]);
									end
								end
							end
						else
							v[1] = 0;
							v[2] = 0;
							v[3] = '';
							v[4] = 'error';
							SCREENMAN:SystemMessage('Bad mod in beat-based table (line '..i..')');
						end
					end

					---------------------------------------------------
					-- ease mod reader v2                            --
					-- friendship ended with if wall                 --
					-- now functions as parameters is my best friend --
					---------------------------------------------------
					for i,v in pairs(mods_ease) do
						if v and table.getn(v) > 6 and v[1] and v[2] and v[3] and v[4] and v[5] and v[6] and v[7] then
							if beat >=v[1] then
								if (v[6] == 'len' and beat <=v[1]+v[2]) or (v[6] == 'end' and beat <=v[2]) then

									local duration = v[2];
									if v[6] == 'end' then duration = v[2] - v[1] end
									local curtime = beat - v[1]
									local diff = v[4] - v[3]
									local startstrength = v[3]
									local curve = v[7]
									local mod = v[5]

									local strength = curve(curtime, startstrength, diff, duration, v[10], v[11]) --extra parameters for back and elastic eases :eyes:

									if v[5] == 'xmod' then
										if table.getn(v) >= 8 then GAMESTATE:ApplyGameCommand('mod,*10000 '..strength..'x',v[8]);
										else GAMESTATE:ApplyModifiers('*10000 '..strength..'x'); end
									else
										if table.getn(v) >= 8 then GAMESTATE:ApplyGameCommand('mod,*10000 '..strength..' '..mod,v[8]);
										else GAMESTATE:ApplyModifiers('*10000 '..strength..' '..mod); end
									end
								elseif (v[9] and ((v[6] == 'len' and beat <=v[1]+v[2]+v[9]) or (v[6] == 'end' and beat <=v[9]))) then
									if v[5] == 'xmod' then
										if v[8] then GAMESTATE:ApplyModifiers('*10000 '..v[4]..'x', v[8]);
										else GAMESTATE:ApplyModifiers('*10000 '..v[4]..'x'); end
									else
										if v[8] then GAMESTATE:ApplyModifiers('*10000 '..v[4]..' '..v[5], v[8]);
										else GAMESTATE:ApplyModifiers('*10000 '..v[4]..' '..v[5]); end
									end
								end
							end
						else
							SCREENMAN:SystemMessage('Bad mod in beat-based ease table (line '..i..')');
						end
					end

					------------------
					-- Actions shit --
					------------------
					while curmessage<=table.getn(messages) and GAMESTATE:GetSongBeat()>=messages[curmessage][1] do
						if messages[curmessage][3] or GAMESTATE:GetSongBeat() < messages[curmessage][1]+2 then
							if type(messages[curmessage][2]) == 'function' then
								messages[curmessage][2]()
							elseif type(messages[curmessage][2]) == 'string' then
								MESSAGEMAN:Broadcast(messages[curmessage][2]);
							end
						end
						curmessage = curmessage+1;
					end

					if beat > 4 and beat < 39 then
						local strength = .5
						if beat < 8 then
							strength = math.sin(((beat-4)/8)*math.pi)/2
						elseif beat > 32 then
							strength = math.cos(((beat-32)/14)*math.pi)/2
						end
						for j=1,2 do

							local concatfuc = ''
							for i=0,3 do
								local funconst = (j-1)*4+i
								concatfuc = concatfuc ..'*-1 '.. strength*100*(math.sin((beat/1.5+funconst)*math.pi/4)+math.cos((beat/1.5+funconst)*math.pi/2)/6) ..' movex'.. i ..', *-1 '.. strength*100*(math.cos((beat/1.5+funconst)*math.pi/4)+math.cos((beat/1.5+funconst)*math.pi/1.5)/5) ..' movey'.. i .. ',*-1 '.. strength*50*(math.sin((beat/1.5+funconst)*math.pi/4)+math.cos((beat/1.5+funconst)*math.pi/2)/6) ..' tinyy'.. i ..', *-1 '.. strength*50*(math.cos((beat/1.5+funconst)*math.pi/4)+math.cos((beat/1.5+funconst)*math.pi/1.5)/5) ..' tinyx'.. i .. ',*-1 '.. strength*50*(math.cos((beat/1.5+funconst)*math.pi/4)+math.sin((beat/1.5+funconst)*math.pi/2)/6) ..' confusionoffset'.. i ..','
							end
							GAMESTATE:ApplyModifiers(concatfuc,j)
						end
					elseif beat > 41 and beat < 41.25 then
						local randomval = math.random()/4
						for i,v in ipairs(mod_plr) do
							if v then
								v:zoomy( randomval+1 )
								v:zoomx( 1-randomval )
							end
						end
					elseif beat > 41.25 and beat < 41.5 then
						for i,v in ipairs(mod_plr) do
							if v then
								v:rotationz( dai_flickerval*15 )
								v:zoom( .9-(dai_flickerval/5) )
							end
						end
						dai_flickerval = math.mod(dai_flickerval+1,5)
					elseif beat > 41.5 and beat < 42 then
						for i,v in ipairs(mod_plr) do
							if v then
								v:rotationz(0)
							end
						end
					elseif beat > 42 and beat < 72 then
						local sailingforced = math.mod(beat/8,1)
						local sailingforced2 = math.mod(beat/16,1)
						for i=1,4 do
							local diffuseMid = {0,0,0,1}

							for j=1,4 do
								diffuseMid[j] = linear(sailingforced, hymn_treeDiff[5-i][j], hymn_treeDiff[5-i+1][j] - hymn_treeDiff[5-i][j],1)
							end

							for j=1,4 do
								_G['hymn_treeline'..i..'_'..j]:diffuse(diffuseMid[1],diffuseMid[2],diffuseMid[3],diffuseMid[4])
							end

							_G['hymn_treeline'..i]:zoom( linear(sailingforced, hymn_treeAF[5-i][1], hymn_treeAF[5-i+1][1] - hymn_treeAF[5-i][1],1) )
							_G['hymn_treeline'..i]:y( linear(sailingforced, hymn_treeAF[5-i][2], hymn_treeAF[5-i+1][2] - hymn_treeAF[5-i][2],1) )
						end
						for i=1,3 do
							local forced2 = math.mod(sailingforced2+i/3,1)
							_G['hymn_clouds'..i]:zoom(linear(forced2, 2, 2,1))
							_G['hymn_clouds'..i]:diffuse(1,1,1,math.sin(math.pi*forced2)/4)
						end
						if beat > 44 then
							local ampconst = 5
							local centerconst = .5
							local modconst = 1
							if beat > 71 then
								--end centerconst needs to be .38353295
								centerconst = inQuad(beat-71,.5,.04224347,1)
								modconst = inQuad(beat-71,1,-1,1)
							elseif beat < 48 then
								modconst = inOutQuad(beat-44,0,1,4)
							end
							for i,v in pairs(mod_plr) do
								if v then
									v:x(SCREEN_WIDTH*(centerconst+math.sin(((beat-12)/16)*math.pi)/ampconst) + SCREEN_WIDTH*math.sin(beat/2+math.pi)*.1)
								end
							end

							GAMESTATE:ApplyModifiers(mindf_rotateAndCounter(modconst*30*math.sin(beat/2.432+math.pi), 0, modconst*-15*math.cos(beat/3+math.pi)))
						end
					elseif beat > 72 and beat < 79 then
						for i=0,3 do
							if mil_colcheck == i then
								applySpline(-1,'x',i,spiralSplinex,1)
								applySpline(-1,'y',i,spiralSpliney,1)
								applySpline(-1,'x',i,spiralSplinex2,2)
								applySpline(-1,'y',i,spiralSpliney2,2)
							else
								applySpline(-1,'x',i,spiralSpliney2,1)
								applySpline(-1,'y',i,spiralSplinex2,1)	
								applySpline(-1,'x',i,spiralSpliney,2)
								applySpline(-1,'y',i,spiralSplinex,2)							
							end
						end

					elseif beat > 164 and beat < 168 then
						local alpha = (beat-164)/8
						mil_earth:diffusealpha(alpha)
						mil_cloud:diffusealpha(alpha)
					elseif beat > 168 and beat < 224 then
						for i,v in ipairs(mod_plr) do
							if v then
								v:x((math.sin(math.pi*beat/16)*.5+1)*SCREEN_CENTER_X)
							end
						end
					elseif beat > 256 and beat < 272 then
						
						GAMESTATE:ApplyModifiers('*-1 '.. math.sin(beat/2*math.pi)*25+75 ..' stealth0,*-1 '.. math.sin((beat/2+.5)*math.pi)*25+75 ..' stealth1,*-1 '.. math.sin((beat/2+1)*math.pi)*25+75 ..' stealth2,*-1 '.. math.sin((beat/2+1.5)*math.pi)*25+75 ..' stealth3')
					elseif beat > 288 and beat < 300 then
						local quadTime = inQuad(beat-288,0,100,12)
						for i,v in ipairs(mod_plr) do
							if v then
								v:rotationx(quadTime)
							end
						end
					end

					if mil_pixelSprite then
						mil_pixelSprite:GetShader():uniform1f('RandomValue',math.random())
					end
				end

				self:sleep(0.02);
				self:queuecommand('Update');

	---------------------------------------------------------------------------------------
	----------------------END DON'T TOUCH IT KIDDO-----------------------------------------
	---------------------------------------------------------------------------------------

			end"

		/>

		<Layer
			Var="mil_aftSprite"
			File="blank"
			OnCommand="sleep,.1;queuecommand,Beginfuckyou"
			BeginfuckyouCommand="%function(self) self:hidden(1); self:basezoomx((SCREEN_WIDTH/DISPLAY:GetDisplayWidth())); self:basezoomy(-1*(SCREEN_HEIGHT/DISPLAY:GetDisplayHeight())); self:SetTexture(mil_aft1:GetTexture()); self:SetTextureFiltering(true); self:diffuse(1,1,1,.9); self:blend('normal'); self:x(SCREEN_CENTER_X); self:y(SCREEN_CENTER_Y); self:zoom(1.01) end"

			AftOnMessageCommand="%function(self)
				self:hidden(0);
			end"
			AftOffMessageCommand="%function(self)
				self:hidden(1);
			end"
		/>
		
		<Layer
			Type="ActorFrameTexture"
			Var="mil_aft1"
			InitCommand="%function(self)
				self:SetWidth( DISPLAY:GetDisplayWidth() );
				self:SetHeight( DISPLAY:GetDisplayHeight() );
				self:EnableDepthBuffer( true );
				self:EnableAlphaBuffer( true );
				self:EnableFloat( true );
				self:EnablePreserveTexture( true );
				self:hidden(1);
				self:Create();
			end"
			AftOnMessageCommand="%function(self)
				self:hidden(0);
			end"
			AftOffMessageCommand="%function(self)
				self:hidden(1);
			end"
			IntroAftOnMessageCommand="%function(self)
				self:hidden(0);
			end"
			IntroAftOffMessageCommand="%function(self)
				self:hidden(1);
			end"
		/>
		
		<Layer
			Var="mil_pixelSprite"
			File="blank"
			Shader="grain.frag"
			OnCommand="sleep,.1;queuecommand,Beginfuckyou"
			BeginfuckyouCommand="%function(self) self:hidden(1); self:basezoomx((SCREEN_WIDTH/DISPLAY:GetDisplayWidth())); self:basezoomy(-1*(SCREEN_HEIGHT/DISPLAY:GetDisplayHeight())); self:SetTexture(mil_aft1:GetTexture()); self:SetTextureFiltering(true); self:diffuse(1,1,1,1); self:blend('normal'); self:x(SCREEN_CENTER_X); self:y(SCREEN_CENTER_Y); self:zoom(1); self:GetShader():uniform1f('seed',.0001) end"

			IntroAftOnMessageCommand="%function(self)
				self:hidden(0);
				self:GetShader():uniform1f('seed',-1)
				self:diffusealpha(0)
				self:linear(spb*3)
				self:diffusealpha(1)
			end"
			IntroAftOffMessageCommand="%function(self)
				self:hidden(1);
			end"
			
			AftOn3MessageCommand="%function(self)
				self:hidden(0);
				self:GetShader():uniform1f('seed',.0001)
			end"
			AftOffMessageCommand="%function(self)
				self:hidden(1);
			end"
		/>

		<Layer File="text/credits" />
		<Layer File="note/4th.model" Var="mil_Note1"
			InitCommand="hidden,1;zoom,1;diffusealpha,0;x,SCREEN_CENTER_X;rotationz,0;y,SCREEN_HEIGHT*.1;blend,add"
		/>
		
		<Layer File="note/4th.model" Var="mil_Note2"
			InitCommand="hidden,1;zoom,1;diffusealpha,0;x,SCREEN_CENTER_X;rotationz,180;y,SCREEN_HEIGHT*.9;blend,add"
		/>
		
		<Layer Type="ActorFrame"><children>
			<Layer Type="ActorFrame" Var="proxy_jud1_frame"><children> <Layer Type="ActorProxy" Var="proxy_jud1"/> </children></Layer>
			<Layer Type="ActorFrame" Var="proxy_jud2_frame"><children> <Layer Type="ActorProxy" Var="proxy_jud2"/> </children></Layer>
			<Layer Type="ActorFrame" Var="proxy_com1_frame"><children> <Layer Type="ActorProxy" Var="proxy_com1"/> </children></Layer>
			<Layer Type="ActorFrame" Var="proxy_com2_frame"><children> <Layer Type="ActorProxy" Var="proxy_com2"/> </children></Layer>
		</children></Layer>
		
		<Layer Type="Quad" Var="love_overlayQuad" InitCommand="xy,scx,scy;zoomto,sw,sh;diffuse,0,0,0,1;hidden,1;" 
			BlackScreenMessageCommand="diffuse,0,0,0,1;hidden,0" 
			NoBlackScreenMessageCommand="sleep,.025;queuecommand,lmfao" 
			lmfaoCommand="hidden,1"	
		/>
		
		<Layer File="bye" OnCommand="x,SCREEN_CENTER_X;y,SCREEN_CENTER_Y;zoom,0;" IMessageCommand="zoom,10;decelerate,0.15;zoomx,1.5;zoomy,0;" />

		<Layer Type="ActorFrame" Var="love_lessthan3All" OnCommand="hidden,1;xy,scx,scy;zoom,0.5;" ><children>

			<Layer File="lessthan3/lessthan3.png" Var="love_lessthan3"/>
			<Layer File="lessthan3/lessthan3_glow.png" Var="love_lessthan3glow"/>
			<Layer File="lessthan3/cat.png" Var="love_cat"/>

			<Layer Type="ActorFrame" Var="love_lessthan3Ring" OnCommand="fov,45;"><children>
				<Layer File="lessthan3/ring_inner.png" Var="love_ringInner" />
				<Layer File="lessthan3/ring_middle.png" Var="love_ringMiddle" />
				<Layer File="lessthan3/ring_outer.png" Var="love_ringOuter" />
			</children></Layer>

		</children></Layer>
	
	</children></Layer>



</children></ActorFrame>

