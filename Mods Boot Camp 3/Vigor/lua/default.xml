<ActorFrame
InitCommand="%function(self)
	songName = GAMESTATE:GetCurrentSong():GetSongDir()
	sw,sh = SCREEN_WIDTH,SCREEN_HEIGHT
	scx,scy = SCREEN_CENTER_X,SCREEN_CENTER_Y
	checked = false
	spb = (60/132)

	function GetJud(pn)
        return _G['jud'..pn]
    end
    function GetCom(pn)
        return _G['com'..pn]
    end
	
	function taro_Sound(str)
		local met = GAMESTATE:GetCurrentSong():GetSongDir();
		SOUND:PlayOnce(met..'lua/'..str..'.ogg');
	end
	
	vig_arrows = {}
	vig_aptr = 1
	function vig_make_arrow(obj)
		table.insert(vig_arrows,obj)
	end
	function vig_get_arrow()
		local a = vig_arrows[vig_aptr]
		vig_aptr = vig_aptr+1
		if vig_aptr > table.getn(vig_arrows) then
			vig_aptr = 1
		end
		return a
	end

end"
><children>
	<Layer Type="Quad" InitCommand="hidden,1" OnCommand="sleep,1000"/>
	<ActorFrame OnCommand="%function(self) self:fov(45) end"><children>
	<Layer File="modhelpers.xml" /> <Layer File="tweens.xml" /> <Layer File="readers.xml" /> <Layer File="c2l.xml" />
	<Layer File="beam_haver.xml" /> <Layer File="arrows.xml" /> <Layer File="spellcard.xml" />

	<Layer
		Type="Quad"
		OnCommand="hidden,1;"
		InitCommand="%function(self)
			mod_plr = {}; mod_firstSeenBeat = GAMESTATE:GetSongBeat(); mods, curaction, mod_actions, mods_ease = {}, 1, {}, {}
			local m,mm,me,l,e,str = mod_insert,mod_message,mod_ease,'len','end',''
			local function r(float) return ((math.rad(float)*100)*-1) end
			m(0, 9999, '*999 overhead,*999 2x,*999 -10000 cover,*999 no beat',l,nil)

			bouncy_wiggle(93,0.5,0.25,0,250,'drunk',l,'Circ',false,nil)
			me(95.5, 1.5, -250, 0, 'drunk', l, outExpo,nil)

			function vig_synthWiggle(beat,length)
				bouncy_wiggle(beat,1,0.5,0,150,'tipsy',l,'Circ',false,nil)
				bouncy_wiggle(beat+2,length,0.5,0,150,'tipsy',l,'Circ',false,nil)
				if length ~= 1 then
					mod_bounce(beat+2,1,0,-100,'distant','Circ',nil)
					mod_bounce(beat+3,1,0,100,'distant','Circ',nil)
					mod_quickswaps(beat+2,2,'invert',10,0.5,nil)
				end
			end

			local f = 1
			function vig_backwards(beat)
				bouncy_wiggle(beat,3,1,0,100,'bumpy',l,'Circ',false,nil)

				me(beat,0.5,0,10*f,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(val) end end end,l,outCirc,nil)
				me(beat+1,0.5,10*f,-20*f,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(val) end end end,l,outCirc,nil)
				me(beat+2,0.5,-20*f,30*f,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(val) end end end,l,outCirc,nil)
				me(beat+3,0.5,30*f,0,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(val) end end end,l,outBack,nil)

				me(beat, 1, 0, 33.33, 'distant', l, outCirc,nil)
				me(beat+1, 1, 33.33, 66.66, 'distant', l, outCirc,nil)
				me(beat+2, 1, 66.66, 100, 'distant', l, outCirc,nil)
				me(beat+3, 0.5, 100, 0, 'distant', l, outBack,nil)

				if beat == 37 or beat == 45 then
					switcheroo_add(beat+2,'invert',15,0.5,nil)
					switcheroo_add(beat+2.5,'normal',15,0.5,nil)
				end
				f=-f
			end

			function vig_bwomp(beat)
				me(beat,1,3,1,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:zoomx(val) end end end,l,outExpo,nil)
			end

			function vig_kick(beat)
				me(beat,1,1.5,1,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:zoom(val) end end end,l,outExpo,nil)
			end

			-----

			mm(0,function(self)
				for pn = 1,2 do
					local a = Plr(pn)
					if a then
						a:zoomz(4)
					end
				end
			end,true)

			mod_bounce(2,1,0,100,'mini','Circ',nil)
			me(3, 1, 40, 0, 'flip', l, outInQuad,nil,0.2)
			me(3, 1, -400, 0, 'mini', l, outInQuad,nil,1)
			me(2,1,360,0,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:rotationy(val) end end end,l,outExpo,nil)

			m(3.5, 66.5, '*999 150 beat',e,nil)
			vig_bwomp(4)
			for i = 5,53,8 do
				vig_backwards(i)
			end

			vig_backwards(57)

			local f = 1
			for i = 32,35,1 do
				me(i, 1, 1, 2, 'xmod', l, inQuad,nil,0.1)
				me(i, 1, 314*f, 0, 'dizzy', l, inQuad,nil,0.1)
				mod_bounce(i,1,0,0.5*f,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:skewx(val) end end end,'Circ')
				if i >= 34 then
					mod_bounce(i,1,0,20*f,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(val) end end end,'Circ')
				end
				f=-f
			end

			vig_synthWiggle(8,1)
			vig_synthWiggle(16,2)
			vig_bwomp(20)
			vig_synthWiggle(24,1)

			switcheroo_add(35,'flip',15,1,nil)
			switcheroo_add(36,'normal',15,1,nil)
			me(35, 1, 40, 0, 'flip', l, outInQuad,nil,0.2)
			me(35, 1, -400, 0, 'mini', l, outInQuad,nil,0.2)
			vig_bwomp(36)
			me(37, 16, 0, 150, 'wave', l, inOutSine,nil,4)
			me(37, 27, 2, 1, 'xmod', l, outInSine,nil,18)

			vig_synthWiggle(40,1)
			vig_synthWiggle(48,2)

			--me(37, 40, 0, 40, 'flip', l, inOutSine,nil,0.2)
			me(35,1,sw*0.25,scx,function(val) local a = Plr(1) if a then a:x(val) end end,l,outInQuad,nil)
			me(35,1,sw*0.75,scx,function(val) local a = Plr(2) if a then a:x(val) end end,l,outInQuad,nil)

			mm(35,function(self)
				for pn = 1,2 do
					local a = GetJud(pn)
					local b = GetCom(pn)
					if a and b then
						a:decelerate(spb*0.75)
						b:decelerate(spb*0.75)
						a:x(160*(pn*2-3))
						b:x(160*(pn*2-3))
					end
				end
			end)

			mm(36,function(self)
				for pn = 1,2 do
					local a = Plr(pn)
					if a then
						a:x(scx)
					end
				end
			end)


			vig_bwomp(52)

			me(59.5, 0.5, 628, 0, 'dizzy', l, outExpo,nil)

			bouncy_wiggle(60,4,0.5,0,100,'tipsy',l,'Circ',false,nil)
			bouncy_wiggle(60,4,0.5,0,r(45),'dizzy',l,'Circ',false,nil)
			me(60, 4, 0, -100, 'mini', l, outQuad,nil,3)


			me(60,0.5,-30,10,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(val) end end end,l,outCirc,nil)
			me(61,0.5,10,-20,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(val) end end end,l,outCirc,nil)
			me(62,0.5,-20,30,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(val) end end end,l,outCirc,nil)
			me(63,0.5,30,-40,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(val) end end end,l,outCirc,nil)
			me(64,0.5,-40,0,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(val) end end end,l,outBack,nil)

			me(60, 1, 100, -33.33, 'distant', l, outCirc,nil)
			me(61, 1, -33.33, -66.66, 'distant', l, outCirc,nil)
			me(62, 1, -66.66, -100, 'distant', l, outCirc,nil)
			me(63, 1, -100, -133.33, 'distant', l, outCirc,nil)
			me(64, 3, -133.33, 0, 'distant', l, outBack,nil)


			mod_bounce(64,3,0,-100,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:y(scy+val) end end end,'Circ')

			bouncy_wiggle(64,2,0.25,0,100,'drunk',l,'Circ',false,nil)
			bouncy_wiggle(64,2,0.25,0,100,'tipsy',l,'Circ',false,nil)

			switcheroo_add(66,'invert',15,0.5,nil)
			switcheroo_add(66.5,'normal',15,0.5,nil)


			me(67, 1, 40, 0, 'flip', l, outInQuad,nil,0.2)
			me(67, 1, -400, 50, 'mini', l, outInQuad,nil,8)
			me(67,1,scx,sw*0.25,function(val) local a = Plr(1) if a then a:x(val) end end,l,outInQuad,nil)
			me(67,1,scx,sw*0.75,function(val) local a = Plr(2) if a then a:x(val) end end,l,outInQuad,nil)

			mm(67,function(self)
				for pn = 1,2 do
					local a = GetJud(pn)
					local b = GetCom(pn)
					if a and b then
						a:decelerate(spb*0.75)
						b:decelerate(spb*0.75)
						a:x(0)
						b:x(0)
					end
				end
			end)

			mod_bounce(68,8,0,-100,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:y(scy+val) end end end,'Expo')

			--------------------------------
			m(68, 1, '*999 no wave',l,nil)
			me(68,6,-100,0,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:z(val) end end end,l,outElastic,nil)


			m(68, 7, '*'..(132/128)*0.75 ..' 300 centered',l,nil)
			m(68, 7, '*10 100 drunk,*5 75 stealth',l,nil)

			m(75, 5, '*10 no centered,*10 no stealth',l,nil)
			me(75, 1, 100, 0, 'mini', l, outInQuad,nil,1)
			me(75, 1, 100, 0, 'drunk', l, outInQuad,nil,0.2)
			--me(75, 1, 50, 0, 'tipsy', l, outInQuad,nil,0.2)
			me(75, 1, 1, 2, 'xmod', l, outInQuad,nil,8)
			me(75,1,360,0,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:rotationy(val) end end end,l,outCirc,nil)

			vig_kick(76)
			me(76, 2, 500, 0, 'bumpy', l, outExpo,nil)
			vig_kick(77.5)
			me(77.5, 2, 500, 0, 'drunk', l, outExpo,nil)
			mod_bounce(78.5,1.5,0,100,'wave','Circ',nil)
			vig_kick(80)
			vig_kick(80.75)
			vig_kick(81.5)
			mod_bounce(81.5,1,0,10,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(val) end end end,'Circ')
			vig_kick(82)
			mod_bounce(82,1,0,-10,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(val) end end end,'Circ')
			vig_kick(83)

			me(83, 1, 40, 0, 'flip', l, outInQuad,nil,0.2)
			me(83, 1, -400, 50, 'mini', l, outInQuad,nil,8)
			mod_bounce(83,1,0,100,'brake','Circ',nil)
			me(84,6,-100,0,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:z(val) end end end,l,outElastic,nil)
			me(84, 1, 2, 1, 'xmod', l, outExpo,nil,7)
			m(84, 7, '*'..(132/128)*0.75 ..' 300 centered',l,nil)
			m(84, 7, '*10 100 drunk,*5 75 stealth',l,nil)

			mod_bounce(84,8,0,-100,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:y(scy+val) end end end,'Expo')

			m(91, 5, '*2 no stealth',l,nil)
			me(91, 1, 50, 0, 'mini', l, outInQuad,nil,1)
			me(91, 1, 100, 0, 'drunk', l, outInQuad,nil,0.2)
			--me(91, 1, 50, 0, 'tipsy', l, outInQuad,nil,0.2)
			me(91, 1, 1, 2, 'xmod', l, outInQuad,nil,8)
			mod_bounce(91,1,0,100,'distant','Circ',nil)
			me(91, 1, 250, 0, 'centered', l, inQuad,nil,0.2)

			vig_kick(92)
			me(92, 2, 500, 0, 'bumpy', l, outExpo,nil)
			vig_kick(93.5)
			me(93.5, 2, 500, 0, 'drunk', l, outExpo,nil)
			vig_kick(95.5)
			me(95.5, 2, 300, 0, 'tipsy', l, outExpo,nil)
			mod_bounce(96.5,1,0,100,'wave','Circ',nil)
			vig_kick(97.5)
			vig_kick(99)

			mod_bounce(96.5,1,2,1,'xmod','Sine',nil)
			me(96.5,0.5,0,10,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:skewx(val) end end end,l,inExpo,nil)
			me(97,0.5,-10,0,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:skewx(val) end end end,l,outExpo,nil)

			mod_bounce(97.5,2.5,0,-50,'mini','Circ',nil)


			bouncy_wiggle(100,23,1,0,50,'wave',l,'Quad',false,nil)
			bouncy_wiggle(100,23,4,0,50,'brake',l,'Circ',false,nil)
			me(116, 7, 0, 100, 'distant', l, inOutSine,nil)
			me(116, 7, 0, 100, 'bumpy', l, inOutSine,nil)

			me(123,1,360,0,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:rotationx(val) end end end,l,inOutQuad,nil)
			me(123, 1, 100, 0, 'distant', l, outBack,nil)
			me(123, 1, 100, 0, 'bumpy', l, outBack,nil)

			--me(124,1,1,0.8,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:zoom(val) end end end,l,outExpo,nil)

			me(124, 1, 0, 40, 'mini', l, outCirc,nil,0.5)
			me(124,1,0,-5,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(val) end end end,l,outCirc,nil)

			me(125.5, 1, 40, 80, 'mini', l, outCirc,nil,2)
			me(125.5,1,-5,10,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(val) end end end,l,outCirc,nil)

			me(127.5, 1, 80, 120, 'mini', l, outCirc,nil,2)
			me(127.5,1,10,-15,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(val) end end end,l,outCirc,nil)

			me(128, 0.5, 0, 100, 'drunk', l, inExpo,nil)
			me(128.5, 1, 100, 0, 'drunk', l, outExpo,nil)

			me(130, 1, 120, 0, 'mini', l, inCirc,nil)
			me(130,1,-15,0,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(val) end end end,l,inCirc,nil)



			me(131, 1, 40, 0, 'flip', l, outInQuad,nil,1)
			me(131, 1, -400, 0, 'mini', l, outInQuad,nil,1)
			me(131, 1, 0, 400, 'invert', l, outQuad,nil,48)
			me(131, 1, 2, 2.25, 'xmod', l, outInQuad,nil,61)
			mm(131,function(self)
				for pn = 1,2 do
					local a = Plr(pn)
					if a then
						a:rotationz(0)
						a:decelerate(spb)
						--a:x((sw*normalize(pn,1,2,0.25,0.75))+(98*normalize(pn,1,2,-1,1)))
						a:x( scx + 160*(pn*2-3) + 98*(pn*2-3) )
					end
				end
			end)

			------------------------------

			m(131.5, 180.5, '*999 beat',e,nil)

			local f = 1
			for i = 132,179 do
				me(i, 1,100*f, 0, 'tipsy', l, outExpo,nil)
				f=-f
			end
			
			-- never write code like this

			bouncy_wiggle(132,180,1,0,100,'wave',e,'Quad',false,nil)

			mod_bounce(140.5,1.5,0,8,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(val*(normalize(pn,1,2,-1,1))) end end end,'Circ')
			mod_bounce(140.5,1.5,1,1.5,function(val) local a = Plr(1) if a then a:zoom(val) end end,'Circ')
			mod_bounce(140.5,1.5,1,0.5,function(val) local a = Plr(2) if a then a:zoom(val) end end,'Circ')

			bouncy_wiggle(142,2,0.5,0,25,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:y(scy+val*(normalize(pn,1,2,-1,1))) end end end,l,'Circ',false,nil)
			mod_bounce(144.5,1.5,0,-8,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(val*(normalize(pn,1,2,-1,1))) end end end,'Circ')
			mod_bounce(144.5,1.5,1,1.5,function(val) local a = Plr(2) if a then a:zoom(val) end end,'Circ')
			mod_bounce(144.5,1.5,1,0.5,function(val) local a = Plr(1) if a then a:zoom(val) end end,'Circ')
			bouncy_wiggle(146,2,0.5,0,25,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:y(scy+val*(normalize(pn,1,2,-1,1))) end end end,l,'Circ',false,nil)

			mod_bounce(156.5,1.5,0,8,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(val*(normalize(pn,1,2,-1,1))) end end end,'Circ')
			mod_bounce(156.5,1.5,1,1.5,function(val) local a = Plr(1) if a then a:zoom(val) end end,'Circ')
			mod_bounce(156.5,1.5,1,0.5,function(val) local a = Plr(2) if a then a:zoom(val) end end,'Circ')
			bouncy_wiggle(158,2,0.5,0,25,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:y(scy+val*(normalize(pn,1,2,-1,1))) end end end,l,'Circ',false,nil)

			bouncy_wiggle(160,3,1,0,10,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:rotationy(val) end end end,l,'Circ',false,nil)

			me(163, 1, 0, 100, 'reverse', l, outInQuad,nil,28)
			me(163, 2, 628, 0, 'dizzy', l, outExpo,nil)

			mod_bounce(172.5,1.5,0,-8,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(val*(normalize(pn,1,2,-1,1))) end end end,'Circ')
			mod_bounce(172.5,1.5,1,1.5,function(val) local a = Plr(2) if a then a:zoom(val) end end,'Circ')
			mod_bounce(172.5,1.5,1,0.5,function(val) local a = Plr(1) if a then a:zoom(val) end end,'Circ')
			bouncy_wiggle(174,2,0.5,0,25,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:y(scy+val*(normalize(pn,1,2,-1,1))) end end end,l,'Circ',false,nil)

			mod_bounce(176.5,1.5,0,8,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(val*(normalize(pn,1,2,-1,1))) end end end,'Circ')
			mod_bounce(176.5,1.5,1,1.5,function(val) local a = Plr(1) if a then a:zoom(val) end end,'Circ')
			mod_bounce(176.5,1.5,1,0.5,function(val) local a = Plr(2) if a then a:zoom(val) end end,'Circ')
			bouncy_wiggle(178,1,0.5,0,25,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:y(scy+val*(normalize(pn,1,2,-1,1))) end end end,l,'Circ',false,nil)

			bouncy_wiggle(179,1,0.333,0,0.4,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:skewx(val*(normalize(pn,1,2,-1,1))) end end end,l,'Circ',false,nil)
			
			
			
			local f = 1
			for i  = 180,191 do
				me(i, 1, 100*f, 0, 'bumpy', l, outExpo,nil)
				f=-f
			end
			
			mm(132,function()
				
				vig_beams:hidden(0)
				
			end)
			mm(180,function()
				
				vig_beams:hidden(1)
				
			end)
			
			local f = 1
			for i = 132,179,1 do
			
				--me(i, 1, 0, 300, 'invert', l, outCirc,normalize(f,-1,1,1,2))
				--me(i, 1, 0, -250, 'flip', l, outCirc,normalize(f,-1,1,1,2))
				me(i, 0.5, 100, 0, 'stealth', l, outSine,normalize(-f,-1,1,1,2))
				me(i, 0.5, 100, 0, 'dark', l, outSine,normalize(-f,-1,1,1,2))
				me(i, 1, -50, 0, 'mini', l, outQuad,normalize(-f,-1,1,1,2),0.2)
				m(i+1, 1, '*999 no invert,*999 no flip,*999 no mini',l,normalize(f,-1,1,1,2))
				f=-f
				
				local p = i
				
				mm(i,function()
					_G['size_aux'..(math.mod(p,2)+1)]:x(1.25)
					_G['size_aux'..(math.mod(p,2)+1)]:y(1.25)
					_G['size_aux'..(math.mod(p,2)+1)]:decelerate(60/132)
					_G['size_aux'..(math.mod(p,2)+1)]:x(1)
					_G['size_aux'..(math.mod(p,2)+1)]:y(1)
				end)
				
			end

			me(179, 1, 400, 0, 'invert', l, outInQuad,nil)

			me(180, 12, 0, -100, 'distant', l, inOutSine,nil)
			me(180, 12, 0, 200, 'mini', l, inExpo,nil)
			
			me(179,1,sw*0.25+95,sw*0.25,function(val) local a = Plr(1) if a then a:x(val) end end,l,outBack,nil)
			me(179,1,sw*0.75-95,sw*0.75,function(val) local a = Plr(2) if a then a:x(val) end end,l,outBack,nil)
			mm(180,function(self)
				for pn = 1,2 do
					local a = Plr(pn)
					if a then
						a:rotationz(0)
					end
				end
			end)

			m(192, 1, '*999 no distant,*999 no tornado,*999 no bumpy,*999 no reverse,*999 no invert,*999 no roll',l,nil)
			me(192, 2, 200, 0, 'mini', l, inOutSine,nil)
			bouncy_wiggle(192,2,0.333,0,100,'drunk',l,'Quad',false,nil)

			mod_bounce(194,1,0,40,'flip','Circ',nil)
			mod_bounce(194,1,0,40,'reverse','Circ',nil)

			me(195, 1, 40, 0, 'flip', l, outInQuad,nil,1)
			me(195, 1, -400, 0, 'mini', l, outInQuad,nil,1)


			-------------------------

			m(195.5, 256.5, '*999 150 beat',e,nil)

			vig_bwomp(196)

			for i = 197,197+53,8 do
				vig_backwards(i)
			end


			vig_synthWiggle(200,1)
			me(201,1,360,0,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(val) end end end,l,outQuad,nil)
			me(203,1,-360,0,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(val) end end end,l,outQuad,nil)

			ease_wiggle(208,2,300,0.5,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:z(val) end end end,outExpo,'len',nil,false)

			bouncy_wiggle(209,1,0.5,0,100,'tipsy',l,'Circ',false,nil) -- oh god
			vig_synthWiggle(208,2)

			vig_bwomp(212)

			vig_synthWiggle(216,1)
			me(217,1,360,0,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(val) end end end,l,outQuad,nil)
			me(219,1,-360,0,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(val) end end end,l,outQuad,nil)

			vig_bwomp(228)

			vig_bwomp(244)

			vig_backwards(249)


			local f = 1
			for i = 224,227,1 do
				me(i, 1, 1, 2, 'xmod', l, inQuad,nil,0.1)
				me(i, 1, 314*f, 0, 'dizzy', l, inQuad,nil,0.1)
				mod_bounce(i,1,0,0.5*f,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:skewx(val) end end end,'Circ')
				if i >= 226 then
					mod_bounce(i,1,0,20*f,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(val) end end end,'Circ')
				end
				f=-f
			end

			me(227, 1, 40, 0, 'flip', l, outInQuad,nil,1)
			me(227, 1, -400, 0, 'mini', l, outInQuad,nil,1)

			me(229, 16, 0, 150, 'wave', l, inOutSine,nil,4)
			me(227,1,sw*0.25,scx,function(val) local a = Plr(1) if a then a:x(val) end end,l,outInQuad,nil)
			me(227,1,sw*0.75,scx,function(val) local a = Plr(2) if a then a:x(val) end end,l,outInQuad,nil)

			mm(227,function(self)
				for pn = 1,2 do
					local a = GetJud(pn)
					local b = GetCom(pn)
					if a and b then
						a:decelerate(spb*0.75)
						b:decelerate(spb*0.75)
						a:x(160*(pn*2-3))
						b:x(160*(pn*2-3))
					end
				end
			end)

			mm(228,function(self)
				for pn = 1,2 do
					local a = Plr(pn)
					if a then
						a:x(scx)
					end
				end
			end)

			me(252, 4, 0, -100, 'mini', l, outQuad,nil,3)
			me(229, 27, 2, 1, 'xmod', l, outInSine,nil,18)

			vig_synthWiggle(232,1)

			ease_wiggle(240,2,300,0.5,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:z(val) end end end,outExpo,'len',nil,false)

			bouncy_wiggle(241,1,0.5,0,100,'tipsy',l,'Circ',false,nil) -- oh god
			vig_synthWiggle(240,2)

			me(59.5+192, 0.5, 628, 0, 'dizzy', l, outExpo,nil)

			bouncy_wiggle(60+192,4,0.5,0,100,'tipsy',l,'Circ',false,nil)
			bouncy_wiggle(60+192,4,0.5,0,r(45),'dizzy',l,'Circ',false,nil)


			me(60+192,0.5,-30,10,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(val) end end end,l,outCirc,nil)
			me(61+192,0.5,10,-20,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(val) end end end,l,outCirc,nil)
			me(62+192,0.5,-20,30,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(val) end end end,l,outCirc,nil)
			me(63+192,0.5,30,-40,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(val) end end end,l,outCirc,nil)
			me(64+192,0.5,-40,0,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(val) end end end,l,outBack,nil)

			me(60+192, 1, 100, -33.33, 'distant', l, outCirc,nil)
			me(61+192, 1, -33.33, -66.66, 'distant', l, outCirc,nil)
			me(62+192, 1, -66.66, -100, 'distant', l, outCirc,nil)
			me(63+192, 1, -100, -133.33, 'distant', l, outCirc,nil)
			me(64+192, 3, -133.33, 0, 'distant', l, outBack,nil)


			mod_bounce(64+192,3,0,-100,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:y(scy+val) end end end,'Circ')

			bouncy_wiggle(64+192,2,0.25,0,100,'drunk',l,'Circ',false,nil)
			bouncy_wiggle(64+192,2,0.25,0,100,'tipsy',l,'Circ',false,nil)

			switcheroo_add(66+192,'invert',15,0.5,nil)
			switcheroo_add(66.5+192,'normal',15,0.5,nil)


			me(67+192, 1, 40, 0, 'flip', l, outInQuad,nil,0.2)
			me(67+192, 1, -400, 0, 'mini', l, outInQuad,nil,8)
			me(67+192,1,scx,sw*0.25,function(val) local a = Plr(1) if a then a:x(val) end end,l,outInQuad,nil)
			me(67+192,1,scx,sw*0.75,function(val) local a = Plr(2) if a then a:x(val) end end,l,outInQuad,nil)

			mm(259,function(self)
				for pn = 1,2 do
					local a = GetJud(pn)
					local b = GetCom(pn)
					if a and b then
						a:decelerate(spb*0.75)
						b:decelerate(spb*0.75)
						a:x(0)
						b:x(0)
					end
				end
			end)

			me(259, 2, 0, 50, 'reverse', l, inOutBack,nil,55)
			me(259, 2, 0, 100, 'flip', l, inOutBack,nil,55)
			local f = 1
			mod_bounce(260,1,0,100,function(val) mod_do('*999 '.. val*f ..' drunk,*999 '.. val*f ..' tipsy',nil) f=-f end,'Circ')

			-----------------------
			local f,t = 1,vig_wew
			for i = 1,table.getn(t)-1 do
				if t[i][2] == 0 then
					mod_bounce(t[i][1],t[i+1][1]-t[i][1],0,(t[i+1][1]-t[i][1]*2.5)*f,'tipsy','Circ',nil)
					--mod_bounce(t[i][1],t[i+1][1]-t[i][1],0,(t[i+1][1]-t[i][1]*1.5)*f,'mini','Circ',nil)
					mod_bounce(t[i][1],t[i+1][1]-t[i][1],0,(t[i+1][1]-t[i][1]*3)*f,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:z(val) end end end,'Circ')
				end
				if t[i][3] == 1 then mod_bounce(t[i][1],t[i+1][1]-t[i][1],0,-100*f,'drunk','Circ',nil) end
				f=-f
			end

			local c,t = 1,vig_swapies
			for i = 1,table.getn(t)-1 do
				local str,s = '',{'normal','invert','flip','drlu'}
				if c > table.getn(s) or t[i][2] == 1 then c = 1 end
				str = tostring(s[c])
				switcheroo_add(t[i][1],str,999,t[i+1][1]-t[i][1],nil)
				c=c+1
			end

			local f,t = 1,vig_drunkHits
			for i = 1,table.getn(t) do
				me(t[i][1], 1, 200*f, 0, 'drunk', l, outExpo,nil)
				me(t[i][1], 1, -200*f, 0, 'tipsy', l, outExpo,nil)
				f=-f
			end
			
			
			
			
			--bg stuff by taro
			
			mm(20,function()
				
				char_kaden:basezoomx(.8)
				char_kaden:basezoomy(.8)
				char_kaden:x(sw/2)
				char_kaden:y(sh/2)
				char_kaden:playcommand('Spawn');
				
			end,true)
			
			mm(34.5,function()
				
				char_kaden:playcommand('Hide');
				
			end)
			
			mm(100,function()
				
				char_kaden:playcommand('Idle');
				char_kaden:playcommand('Spawn');
				
			end)
			
			mm(123.5,function()
				taro_Sound('spell')
			end)
			
			mm(124,function()
				
				char_kaden:playcommand('Attack');
				char_kaden:playcommand('Cast');
				
				vig_kadenbg:linear(180/132)
				vig_kadenbg:diffuse(.5,.5,.5,1)
				
			end)
			
			mm(127,function()
				
				vig_kadenbg:diffuse(.5,.5,.5,1)
				
			end,true)
			
			mm(130.5,function()
				
				char_kaden:playcommand('Hide');
				
			end)
			
			mm(180,function()
				
				char_kaden:playcommand('Idle');
				char_kaden:playcommand('Spawn');
				
			end)
			
			mm(188,function()
				
				vig_kadenbg:linear(480/132)
				vig_kadenbg:diffusealpha(0)
				
			end)
			
			mm(192,function()
				
				MESSAGEMAN:Broadcast('RedFlash');
				char_kaden:playcommand('SpawnQ');
				char_kaden:playcommand('Hurt');
				
			end)
			
			mm(195.5,function()
				
				char_kaden:playcommand('Hide');
				
			end)
			
			mm(260,function()
				
				MESSAGEMAN:Broadcast('RedFlash');
				char_kaden:playcommand('SpawnQ');
				char_kaden:playcommand('Hurt');
				
			end)
			
			for i=1,table.getn(beam_haver) do
				local a = beam_haver[i]
				if a then
					local b = a[1]
					local c = a[2]
					mm(b,function()
						
						vig_beams:playcommand('Pulse'..c);
						
					end)
				end
			end
			
			vig_dirs = {90,0,180,-90}
			
			for i=1,table.getn(arrows) do
				local a = arrows[i]
				if a then
					local b = a[1]
					local c = a[2]
					mm(b,function()
						
						local p = vig_get_arrow()
						if p then
							p:finishtweening()
							p:hidden(0)
							p:x( sw/2 + (math.random(0,2)*64 + 64)*(math.random(1,2)*2-3) )
							p:y( sh/2 + math.random(0,5)*64 - 32 - 128 )
							p:rotationz(vig_dirs[c+1])
							p:diffusealpha(.4)
							p:linear(.2)
							p:diffusealpha(0)
							p:queuecommand('Hide')
						end
						
					end)
				end
			end

			---------- PERFRAMES ----------
			function update_loop()
				local beat = GAMESTATE:GetSongBeat()
			
				if beat > 132 and beat < 180 then
					if P1 then
						local rx, ry, rz = P1:getrotation()
						vig_P1_beams:x( P1:GetX() )
						vig_P1_beams:rotationz( rz )
						vig_P1_beams:rotationy( ry )
						vig_P1_beams:rotationx( rx )
						vig_P1_beams:zoomz( P1:GetZoomZ() )
						vig_P1_beams:zoomy( P1:GetZoomY() * size_aux1:GetX() )
						vig_P1_beams:zoomx( P1:GetZoomX() * size_aux1:GetY() )
					end
					if P2 then
						local rx, ry, rz = P2:getrotation()
						vig_P2_beams:x( P2:GetX() )
						vig_P2_beams:rotationz( rz )
						vig_P2_beams:rotationy( ry )
						vig_P2_beams:rotationx( rx )
						vig_P2_beams:zoomz( P2:GetZoomZ() )
						vig_P2_beams:zoomy( P2:GetZoomY() * size_aux2:GetX() )
						vig_P2_beams:zoomx( P2:GetZoomX() * size_aux2:GetY() )
					end
				end

			end -- THIS ENDS THE FUNCTION
			
			---------- SORT ACTIONS ----------
			if table.getn(mod_actions) > 1 then table.sort(mod_actions, modtable_compare) end
			self:queuecommand('Update');
		end"
		
		UpdateCommand="%function(self)
			if GAMESTATE:GetSongBeat()>=0 and not checked then
					local ThingsToGrab = {'BPMDisplay','LifeFrame','ScoreFrame','Lyrics','SongBackground','SongForeground','Overlay','Underlay'}
					local ThingsToHide = {'BPMDisplay','LifeFrame','ScoreFrame','Overlay','Underlay'}
					for pn=1,2 do
						_G['P'..pn] = SCREENMAN:GetTopScreen():GetChild('PlayerP'..pn) or nil;
						if _G['P'..pn] then
							_G['jud'..pn]=_G['P'..pn]:GetChild('Judgment');
							_G['com'..pn]=_G['P'..pn]:GetChild('Combo');
						end
						table.insert(ThingsToGrab,'LifeP'..pn); table.insert(ThingsToGrab,'ScoreP'..pn);
						table.insert(ThingsToHide,'LifeP'..pn); table.insert(ThingsToHide,'ScoreP'..pn);
					end	
					for i,v in ipairs(ThingsToGrab) do _G[v] = SCREENMAN:GetTopScreen():GetChild(v) or nil end	
					for i,v in ipairs(ThingsToHide) do if _G[v] then _G[v]:hidden(1) end end
					checked = true;
			end

			local beat = GAMESTATE:GetSongBeat()
			
			if beat > mod_firstSeenBeat+0.1 and checked then
				mod_do('clearall')
				mod_beat_reader(beat)
				mod_ease_reader(beat)
				actions_reader(beat)
				update_loop(beat)
			end

			self:sleep(1/75);
			self:queuecommand('Update');
		end"
	/>

	<Layer Type="Quad" InitCommand="%function(self) blackness = self end" OnCommand="hidden,1;zoomto,sw,sh;x,scx;y,scy;diffuse,1,1,1,1;" />
	<Layer Type="Quad" InitCommand="%function(self) whiteness = self end" OnCommand="hidden,1;zoomto,sw,sh;x,scx;y,scy;diffuse,0,0,0,1;" />
	<Layer Type="Quad" OnCommand="zoomto,sw,sh;x,scx;y,scy;diffuse,1,0,0,0;" RedFlashMessageCommand="diffusealpha,.5;linear,.3;diffusealpha,0;" />
	
	<Layer Type="Quad" OnCommand="hidden,1;x,1;y,1;" InitCommand="%function(self) size_aux1 = self end" />
	<Layer Type="Quad" OnCommand="hidden,1;x,1;y,1;" InitCommand="%function(self) size_aux2 = self end" />

</children></ActorFrame>