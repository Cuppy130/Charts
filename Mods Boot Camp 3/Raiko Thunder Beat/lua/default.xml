<ActorFrame
InitCommand="%function(self)

	songName = GAMESTATE:GetCurrentSong():GetSongDir();
	
	sw = SCREEN_WIDTH
	sh = SCREEN_HEIGHT --shortcuts
	
	function Plr(pn)
		return _G['P'..pn]
	end
	
	function mod_do(str,pn)
		if pn then
			GAMESTATE:ApplyGameCommand('mod,'..str,pn)
		else
			GAMESTATE:ApplyGameCommand('mod,'..str)
		end
	end
	
end"
><children>

	<Layer
		Type="Quad"
		InitCommand="hidden,1"
		OnCommand="sleep,1000"
	/>
	
	<Layer File="spellcard.xml" />
	<Layer File="modhelpers.xml" />
	<Layer File="chanting.xml" />
	
	<Layer
		Type="Quad"
		OnCommand="hidden,1"
		InitCommand="%function(self)
		
			checked = false; P1=nil;P2=nil;P3=nil;P4=nil;jud1=nil;com1=nil;jud2=nil;com2=nil;jud3=nil;com3=nil;
		
			---------------------------------------------------------
			---------DOCUMENTATION-----------------------------------
			---------------------------------------------------------
			
			--function perframe( beat, endBeat )
				--return true if the current beat is between 'beat' and 'endBeat'
			
			--function mod_shader(beat,key,which)
				--turn on shader key at specified beat (up to 10 keys available, defined by 'which' = 0-9
				
			--function mod_insert(beat,len,mod,len_or_end,pn)
				--insert mod into beat mods table
			--function mod_insert2(time,len,mod,len_or_end,pn)
				--insert mod into time mods table
				
			--function mod_message(beat,msg,persistent)
				--insert something into the actions table.
				--msg can also be a function. If string, a message gets broadcast at that beat
				--if 'persistent' is true, message will run even if editor starts at a beat past it
				
			--function mod_blacklist(t,n)
				--check if number n occurs in table t
				--useful for doing 'every beat EXCEPT the contents of t'
				
			--function simple_m0d(beat,strength,mult,mod)
			--function simple_m0d2(beat,strength,mult,mod,pn)
			--function simple_m0d3(beat,strength,duration,bpm,mod,pn)
				--activate mods at specific beat but also deactivate them
				
			--function mod_wiggle(beat,num,div,amt,speed,mod,pn,first)
				--alternates a mod back and forth before resetting to 0
				
			--function mod_springt(time,strength,dur,mod,pn)
				--time-based per-frame alternating mod that decreases based on how much time is left.
					--think doorstopper
			
			--function mod_springt2(time,strength,dur,mod,pn)
				--time-based per-frame alternating mod
			
			--function mod_onebeat(beat,strength,pn)
				--turns on beat for the beat specified, at the desired strength	
			
			--function switcheroo_add(beat,which,speed,len,pn)
				--adds a column swap at the desired beat
			--[[	switcheroos = {normal = {0,0}, ldur = {0,0}, reset = {0,0},
					flip = {100,0}, rudl = {100,0}, invert = {0,100}, dlru = {0,100},
					ludr = {25,-75}, rdul = {75,75}, drlu = {25,125}, ulrd = {75,-125}, urld = {100,-100}}
			]]
			
			--use a variable called 'switcheroo_width' to change how much space is between each column
			--e.g. switcheroo_width = 2 for ayakashi
			
			--function mod_sugarkiller(beat,duration,speed,minstealth,maxstealth,pn)
				--portable version of the effect from sugarkill X
				
			--function doSpline(spd, axis, path, col)
				--draws spline 'path' in specified axis, for specific col. Offsets are *10000, but positions use *spd
				
			--function doSplineAll(spd, axis, path)
				--same as above, but for all columns
				--(faster performance than using doSpline 4 times due to more efficient concat)
			
			--function mindf_rotateAndCounter(xDegrees, yDegrees, zDegrees, player)
				--counteract euler rotations after rotating player in multiple axes, using a TON of math.
			
			
			---------------------------------------------------------
			--------END DOCUMENTATION--------------------------------
			---------------------------------------------------------
			
			local m = mod_insert
			local m2 = mod_message
			
			
			local l = 'len'
			local e = 'end'
			
			
			
			
			
			
			
			init_modsp1 = '';
			init_modsp2 = '';
			
			mod_plr = {};
			
			mod_firstSeenBeat = GAMESTATE:GetSongBeat(); --necessary to prevent long freezes
			
			
			
			
			
			
			
			
			
			
			
---------------------------------------------------------------------------------------
----------------------Begin tables 'n stuff--------------------------------------------
---------------------------------------------------------------------------------------

			--beat based mods
			--{beat_start, beat_end, mods, len_or_end, player_number}
			mods = {
				{0,9999,'*2 2x, *100000 no beat, *10000 -999999 cover','end'},
			}
			
			--switcheroos = {{0,0},{100,0},{0,100},{25,-75},{75,75},{25,125},{75,-125},{100,-100}}
			
			
			
			
			
			
			
			--time based mods
			mod_time = 0;
			--{time_start, time_end, mods, len_or_end, player_number}
			mods2 = {
				--{0,200.345,'3x','end',1},
			}
			
			
			
			
			--this is both a message broadcaster and a function runner
			--if you put {beat,'String'}, then 'String' is broadcast as a message on that beat
			--if you put {beat,function() somecode end}, then function() is run at that beat
			--see example on beat 32
			
			curaction = 1;
			--{beat,thing,persists}
			mod_actions = {
			
			
				
			}
			
			m2(0,function()
				rb_raiko:pulse()
				rb_raiko:effectmagnitude(1,1,1)
				rb_raiko:effectcolor2(.96,1.05,1,1)
				rb_raiko:effectcolor1(1.05,0.96,1,1)
				rb_raiko:effectclock('timer')
				rb_raiko:effectperiod(3)
			end,true)
			
			m2(4,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:zoom(0)
						a:rotationz(360*(pn*2-3))
						a:linear(3*60/175)
						a:rotationz(0)
						a:zoom(1)
					end
				end
				
				rb_bgquad:linear(240/175)
				rb_bgquad:diffusealpha(1)
				rb_bgquad2:linear(240/175)
				rb_bgquad2:diffusebottomedge(1,0,0,.3);
				
				rb_bg1:linear(240/175)
				rb_bg1:diffusealpha(.5)
				rb_bg2:linear(240/175)
				rb_bg2:diffusealpha(.4)
				
			end)
			
			m2(22,function()
				MESSAGEMAN:Broadcast('WhiteFlash')
				rb_raiko:linear(1)
				rb_raiko:diffusealpha(1)
				rb_raiko:zoom(1)
				rb_thunder:diffusealpha(1)
				rb_thunder:sleep(0.1)
				rb_thunder:diffusealpha(0)
				rb_thunder:sleep(0.1)
				rb_thunder:diffusealpha(1)
				rb_thunder:linear(1.5)
				rb_thunder:diffusealpha(0)
				
				rb_bg3:diffusealpha(1)
				rb_bg3:linear(1.5)
				rb_bg3:diffusealpha(0)
				rb_bg4:diffusealpha(1)
				rb_bg4:linear(1.5)
				rb_bg4:diffusealpha(0)
				
				rb_bgquad2:diffusebottomedge(1,1,0,.6);
				rb_bgquad2:diffusetopedge(1,1,0,.3);
				rb_bgquad2:linear(2)
				rb_bgquad2:diffusetopedge(1,0,0,0);
				rb_bgquad2:diffusebottomedge(1,0,0,.3);
			end)
			
			m(0,38,'1.5x',e)
			
			m(22,38,'*10000 invert',e)
			m(38,2,'*1.458 no invert',l)
			
			m2(72,function()
				MESSAGEMAN:Broadcast('WhiteFlash2')
				rb_bgquad2:diffusebottomedge(0,.6,1,.4);
			end)
			
			m2(100,function()
				rb_bgquad2:linear(1)
				rb_bgquad2:diffusebottomedge(1,0,0,.3);
			end)
			
			m2(71,function()
				rb_raiko:decelerate(0.3)
				rb_raiko:zoomx(3)
				rb_raiko:zoomy(0)
				rb_raiko:sleep(0)
				rb_raiko:diffusealpha(0)
				
				for pn=1,2 do
					local a = _G['jud'..pn]
					if a then
						a:decelerate(60/175)
						a:x(160*(pn*2-3))
					end
					local a = _G['com'..pn]
					if a then
						a:decelerate(60/175)
						a:x(160*(pn*2-3))
					end
				end
				
			end,true)
			
			m(38,72,'1.5x',e)
			
			m2(38,function()
				rb_sinners:linear(120/175)
				rb_sinners:y(SCREEN_BOTTOM+20)
			end)
			
			for i=40,70 do
				if i~=55 then
					m2(i,'Cheer')
				end
			end
			
			m2(40,function()
			
				rb_sinners:sleep(0)
				rb_sinners:zoomx(1)
				rb_sinners:linear(240/175)
				rb_sinners:x(SCREEN_CENTER_X+20)
				rb_sinners:sleep(0)
				rb_sinners:zoomx(-1)
				rb_sinners:linear(240/175)
				rb_sinners:x(SCREEN_CENTER_X-20)
				rb_sinners:sleep(0)
				rb_sinners:zoomx(1)
				rb_sinners:linear(240/175)
				rb_sinners:x(SCREEN_CENTER_X+20)
				rb_sinners:sleep(0)
				rb_sinners:zoomx(-1)
				rb_sinners:linear(180/175)
				rb_sinners:x(SCREEN_CENTER_X-20)
				rb_sinners:sleep(0)
				
			end)
			
			m2(40,function()
				rb_sinners2:sleep(0)
				rb_sinners2:decelerate(30/175)
				rb_sinners2:addy(-20)
				rb_sinners2:accelerate(30/175)
				rb_sinners2:addy(20)
				rb_sinners2:decelerate(30/175)
				rb_sinners2:addy(-20)
				rb_sinners2:accelerate(30/175)
				rb_sinners2:addy(20)
				rb_sinners2:decelerate(30/175)
				rb_sinners2:addy(-20)
				rb_sinners2:accelerate(30/175)
				rb_sinners2:addy(20)
				rb_sinners2:decelerate(30/175)
				rb_sinners2:addy(-20)
				rb_sinners2:accelerate(30/175)
				rb_sinners2:addy(20)
			end)
			m2(44,function()
				rb_sinners2:sleep(0)
				rb_sinners2:decelerate(30/175)
				rb_sinners2:addy(-20)
				rb_sinners2:accelerate(30/175)
				rb_sinners2:addy(20)
				rb_sinners2:decelerate(30/175)
				rb_sinners2:addy(-20)
				rb_sinners2:accelerate(30/175)
				rb_sinners2:addy(20)
				rb_sinners2:decelerate(30/175)
				rb_sinners2:addy(-20)
				rb_sinners2:accelerate(30/175)
				rb_sinners2:addy(20)
				rb_sinners2:decelerate(30/175)
				rb_sinners2:addy(-20)
				rb_sinners2:accelerate(30/175)
				rb_sinners2:addy(20)
			end)
			m2(48,function()
				rb_sinners2:sleep(0)
				rb_sinners2:decelerate(30/175)
				rb_sinners2:addy(-20)
				rb_sinners2:accelerate(30/175)
				rb_sinners2:addy(20)
				rb_sinners2:decelerate(30/175)
				rb_sinners2:addy(-20)
				rb_sinners2:accelerate(30/175)
				rb_sinners2:addy(20)
				rb_sinners2:decelerate(30/175)
				rb_sinners2:addy(-20)
				rb_sinners2:accelerate(30/175)
				rb_sinners2:addy(20)
				rb_sinners2:decelerate(30/175)
				rb_sinners2:addy(-20)
				rb_sinners2:accelerate(30/175)
				rb_sinners2:addy(20)
			end)
			m2(52,function()
				rb_sinners2:sleep(0)
				rb_sinners2:decelerate(30/175)
				rb_sinners2:addy(-20)
				rb_sinners2:accelerate(30/175)
				rb_sinners2:addy(20)
				rb_sinners2:decelerate(30/175)
				rb_sinners2:addy(-20)
				rb_sinners2:accelerate(30/175)
				rb_sinners2:addy(20)
				rb_sinners2:decelerate(30/175)
				rb_sinners2:addy(-20)
				rb_sinners2:accelerate(30/175)
				rb_sinners2:addy(20)
			end)
			
			m2(16+40,function()
			
				rb_sinners:sleep(0)
				rb_sinners:zoomx(1)
				rb_sinners:linear(240/175)
				rb_sinners:x(SCREEN_CENTER_X+20)
				rb_sinners:sleep(0)
				rb_sinners:zoomx(-1)
				rb_sinners:linear(240/175)
				rb_sinners:x(SCREEN_CENTER_X-20)
				rb_sinners:sleep(0)
				rb_sinners:zoomx(1)
				rb_sinners:linear(240/175)
				rb_sinners:x(SCREEN_CENTER_X+20)
				rb_sinners:sleep(0)
				rb_sinners:zoomx(-1)
				rb_sinners:linear(180/175)
				rb_sinners:x(SCREEN_CENTER_X-20)
				rb_sinners:sleep(0)
				
			end)
			
			m2(16+40,function()
				rb_sinners2:sleep(0)
				rb_sinners2:decelerate(30/175)
				rb_sinners2:addy(-20)
				rb_sinners2:accelerate(30/175)
				rb_sinners2:addy(20)
				rb_sinners2:decelerate(30/175)
				rb_sinners2:addy(-20)
				rb_sinners2:accelerate(30/175)
				rb_sinners2:addy(20)
				rb_sinners2:decelerate(30/175)
				rb_sinners2:addy(-20)
				rb_sinners2:accelerate(30/175)
				rb_sinners2:addy(20)
				rb_sinners2:decelerate(30/175)
				rb_sinners2:addy(-20)
				rb_sinners2:accelerate(30/175)
				rb_sinners2:addy(20)
			end)
			m2(16+44,function()
				rb_sinners2:sleep(0)
				rb_sinners2:decelerate(30/175)
				rb_sinners2:addy(-20)
				rb_sinners2:accelerate(30/175)
				rb_sinners2:addy(20)
				rb_sinners2:decelerate(30/175)
				rb_sinners2:addy(-20)
				rb_sinners2:accelerate(30/175)
				rb_sinners2:addy(20)
				rb_sinners2:decelerate(30/175)
				rb_sinners2:addy(-20)
				rb_sinners2:accelerate(30/175)
				rb_sinners2:addy(20)
				rb_sinners2:decelerate(30/175)
				rb_sinners2:addy(-20)
				rb_sinners2:accelerate(30/175)
				rb_sinners2:addy(20)
			end)
			m2(16+48,function()
				rb_sinners2:sleep(0)
				rb_sinners2:decelerate(30/175)
				rb_sinners2:addy(-20)
				rb_sinners2:accelerate(30/175)
				rb_sinners2:addy(20)
				rb_sinners2:decelerate(30/175)
				rb_sinners2:addy(-20)
				rb_sinners2:accelerate(30/175)
				rb_sinners2:addy(20)
				rb_sinners2:decelerate(30/175)
				rb_sinners2:addy(-20)
				rb_sinners2:accelerate(30/175)
				rb_sinners2:addy(20)
				rb_sinners2:decelerate(30/175)
				rb_sinners2:addy(-20)
				rb_sinners2:accelerate(30/175)
				rb_sinners2:addy(20)
			end)
			m2(16+52,function()
				rb_sinners2:sleep(0)
				rb_sinners2:decelerate(30/175)
				rb_sinners2:addy(-20)
				rb_sinners2:accelerate(30/175)
				rb_sinners2:addy(20)
				rb_sinners2:decelerate(30/175)
				rb_sinners2:addy(-20)
				rb_sinners2:accelerate(30/175)
				rb_sinners2:addy(20)
				rb_sinners2:decelerate(30/175)
				rb_sinners2:addy(-20)
				rb_sinners2:accelerate(30/175)
				rb_sinners2:addy(20)
			end)
			
			m2(71,function()
				rb_sinners:linear(60/175)
				rb_sinners:addy(150)
			end)
			
			m(6.5,1,'*10000 1000 beat',l)
			m(8,38,'*3 drunk, *3 tipsy, *4.5 150 wave',e)
			m(38,4,'*1.5 no wave',l)
			
			local fluct = 1;
			for i=40,50 do
				simple_m0d2(i-.1,250*fluct,.4,'drunk')
				simple_m0d2(i-.1,250*fluct,.4,'tipsy')
				fluct = fluct*-1
			end
			simple_m0d2(54-.1,500,.8,'bumpy');
			for i=56,66 do
				simple_m0d2(i-.1,-400*fluct,.4,'drunk')
				simple_m0d2(i-.1,400*fluct,.4,'tipsy')
				fluct = fluct*-1
			end
			
			simple_m0d(52-.1,-100,.1,'mini');
			simple_m0d(52.5-.1,-100,.1,'mini');
			simple_m0d(53-.1,-100,.1,'mini');
			simple_m0d2(54-.1,-100,.8,'mini');
			
			simple_m0d2(70-.1,500,.8,'bumpy');
			
			simple_m0d2(68-.1,150,.3,'brake');
			simple_m0d2(69-.1,150,.3,'brake');
			
			m(51-.1,1,'*15 invert',l)
			m(51.5-.1,1,'*15 no invert',l)
			m(52-.1,1,'*15 invert',l)
			m(52.5-.1,1,'*15 no invert',l)
			m(53-.1,1,'*15 flip',l)
			m(54-.1,1,'*15 no flip',l)
			
			m(67-.1,1,'*15 invert',l)
			m(67.5-.1,1,'*15 no invert',l)
			m(68-.1,1,'*15 invert',l)
			m(68.5-.1,1,'*15 no invert',l)
			m(69-.1,1,'*15 flip',l)
			m(70-.1,1,'*15 no flip',l)
			
			m2(72,function()
				auxvar:x(1)
				auxvar:linear(14*60/175)
				auxvar:x(3)
				auxvar:linear(2*60/175)
				auxvar:x(1)
				auxvar:linear(8*60/175)
				auxvar:x(5)
				auxvar:linear(4*60/175)
				auxvar:x(1)
			end)
			
			m2(71.9,function()
				rb_intense:x(1)
			end)
			
			m2(92,function()
				rb_intense:linear(240/175)
				rb_intense:x(0)
			end)
			
			
			
			rtb_ass = 0;
			
			--mod_sugarkiller(beat,duration,speed,minstealth,maxstealth,pn)
			mod_sugarkiller(104,60,2,80,80,2)
			
			if FUCK_EXE then
				--m(0,999,'stealthpastreceptors',e)
			end
			
			m(104,164,'*10000 100 hidden, *10000 100 sudden, *10000 dark, *10000 200 dizzy',e,2)
			m(104,164,'*10000 -100 hidden, *10000 -100 sudden, *10000 stealth',e,1)
			
			m(160,8,'*2 no dizzy',l);
			
			mod_wiggle(86-.1,4,4,200,1.5,'tipsy',1)
			mod_wiggle(87-.1,4,4,200,1.5,'drunk',1)
			mod_wiggle(86-.1,4,4,-200,1.5,'tipsy',2)
			mod_wiggle(87-.1,4,4,-200,1.5,'drunk',2)
			
			m(88,94,'drunk,tipsy,dizzy',e,1)
			m(88,94,'-100 drunk,-100 tipsy,-100 dizzy',e,2)
			
			switcheroo_width = 2
			switcheroo_add(96-.1,'invert',10,3,1)
			switcheroo_add(96.75-.1,'flip',10,3,2)
			switcheroo_add(97.5-.1,'rdul',10,3,1)
			
			switcheroo_add(98-.1,'rdul',10,3,2)
			switcheroo_add(98.75-.1,'normal',10,3,1)
			switcheroo_add(99.5-.1,'normal',10,3,2)
			
			simple_m0d(100-.1,-100,.2,'mini')
			simple_m0d(100.75-.1,-100,.2,'mini')
			simple_m0d(101.5-.1,-100,.6,'mini')
			
			rb_dirs = {90,0,180,-90}
			rb_pos = {-9,27,-27,9}
			
			rb_curmusic = 1
			rb_music = {
				{107,1},
				{107.5,2},
				{108,1},
				
				{115,3},
				{115.5,0},
				{116,3},
				
				{123,0},
				{123.5,1},
				{124,0},
				
				{139,1},
				{139.5,3},
				{140,1},
				{140,3},
				
				{147,0},
				{147.5,1},
				{148,0},
				{148,1},
				
				{155,2},
				{155.5,1},
				{156,2},
				{156,1},
				
				{244,0},
				{245,2},
				{246,1},
				{247,3},
				
				{260,0},
				{260,2},
				{261.5,3},
				{262,1},
				{262,3},
				
				{296.000,0,1},
				{297.000,3,1},
				{297.500,0,1},
				{298.500,3,1},
				{299.000,0,1},
				{299.500,1,1},
				{300.000,2,1},
				{301.000,1,1},
				{301.500,2,1},
				{302.500,1,1},
				{303.000,2,1},
				{303.500,3,1},
				{304.000,0,2},
			}
			
			m2(4,function()
				
				if FUCK_EXE then
					rb_music = {}
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							
							local stuff = {
								a:GetNoteData(107,108),
								a:GetNoteData(115,116),
								a:GetNoteData(123,124),
								a:GetNoteData(139,140),
								a:GetNoteData(147,148),
								a:GetNoteData(155,156),
								a:GetNoteData(244,247),
								a:GetNoteData(260,262),
								a:GetNoteData(296,304),
							}
							
							for i=1,table.getn(stuff) do
								for j=1,table.getn(stuff[i]) do
									
									if stuff[i][j] and stuff[i][j][3] ~= 'M' and stuff[i][j][3] < 100 then
										--Trace(tostring(stuff[i][j][3]))
										table.insert(rb_music,stuff[i][j])
									end
									
								end
							end
							
							break
						end
					end
				end
				
			end,true)
			
			rb_4ptr = 1
			rb_8ptr = 1
			
			function rb_place(where,howmany,begin,xmod)
				if not begin then begin = -80 end
				if not xmod then xmod = 1 end
				local fst = rb_music[where][1]
				for i=1,howmany do
					
					local b = rb_music[where+(i-1)]
					local a = nil
					
					if b[1] - math.floor(b[1]) == 0 then
						a = _G['rb_arrow4_'..rb_4ptr]
						rb_4ptr = rb_4ptr+1
						if rb_4ptr > 8 then
							rb_4ptr = 1
						end
					else
						a = _G['rb_arrow8_'..rb_8ptr]
						rb_8ptr = rb_8ptr+1
						if rb_8ptr > 8 then
							rb_8ptr = 1
						end
					end
					
					if a then
						
						a:hidden(0)
						a:glow(1,1,1,0)
						a:basezoomx(0.7)
						a:basezoomy(0.7)
						a:zoom(1)
						a:diffusealpha(1)
						a:x( begin + (b[1]-fst)*160*xmod )
						a:y( rb_pos[ b[2]+1 ] )
						a:rotationz( rb_dirs[ b[2]+1 ] )
						a:aux( b[1] )
					end
				end
			end
			
			m2(104,function() rb_place(1,3,nil,.75) end)
			m2(112,function() rb_place(4,3,nil,.75) end)
			m2(120,function() rb_place(7,3,nil,.75) end)
			m2(136,function() rb_place(10,4,nil,.75) end)
			m2(144,function() rb_place(14,4,nil,.75) end)
			m2(152,function() rb_place(18,4,nil,.75) end)
			
			m2(104,'MusicOn')
			m2(108,'MusicOff')
			m2(112,'MusicOn')
			m2(116,'MusicOff')
			m2(120,'MusicOn')
			m2(124,'MusicOff')
			
			m2(136,'Music2On')
			m2(140,'MusicOff')
			m2(144,'Music2On')
			m2(148,'MusicOff')
			m2(152,'Music2On')
			m2(156,'MusicOff')
			
			m2(240,function() rb_place(22,4,-80,0.375) end)
			m2(256,function() rb_place(26,5,-80,0.375) end)
			
			m2(288,function() rb_place(31,13,-120,0.25*(360/320)) end)
			
			m2(240,'Music3On')
			m2(247,'MusicOff')
			m2(256,'Music4On')
			m2(263,'MusicOff')
			m2(288,'Music5On')
			m2(303,'MusicOff')
			
			m2(102,function()
				auxvar:x(128*6)
				auxvar:linear(8*60/175)
				auxvar:x(128*-2)
			end)
			m2(110,function()
				auxvar:x(128*6)
				auxvar:linear(8*60/175)
				auxvar:x(128*-2)
			end)
			m2(118,function()
				auxvar:x(128*6)
				auxvar:linear(8*60/175)
				auxvar:x(128*-2)
			end)
			
			m2(134,function()
				auxvar:x(128*6)
				auxvar:linear(8*60/175)
				auxvar:x(128*-2)
			end)
			m2(142,function()
				auxvar:x(128*6)
				auxvar:linear(8*60/175)
				auxvar:x(128*-2)
			end)
			m2(150,function()
				auxvar:x(128*6)
				auxvar:linear(8*60/175)
				auxvar:x(128*-2)
			end)
			
			
			m(164,232,'*0.729 -50 flip',e)
			m2(164,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:linear(120/175)
						a:vibrate()
						a:effectmagnitude(0,10,0)
					end
				end
			end)
			m2(166,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:linear(120/175)
						a:x(SCREEN_CENTER_X+32*(pn*2-3))
						a:vibrate()
						a:effectmagnitude(0,10,0)
					end
				end
			end)
			m2(168,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:stopeffect()
					end
				end
			end)
			
			for i=1,table.getn(chanting) do
				local a = chanting[i]
				local b = a[1]
				local c = a[2]
				m2(b-.1,function()
					if c == 0 then
						rb_rz1:x(-15)
						rb_rz1:linear(30/175)
						rb_rz1:x(0)
					end
					if c == 1 then
						rb_rz1:x(15)
						rb_rz1:linear(30/175)
						rb_rz1:x(0)
					end
					if c == 2 then
						rb_rz2:x(-15)
						rb_rz2:linear(30/175)
						rb_rz2:x(0)
					end
					if c == 3 then
						rb_rz2:x(15)
						rb_rz2:linear(30/175)
						rb_rz2:x(0)
					end
				end)
			end
			
			m2(246,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:decelerate(30/175)
						a:zoomx(2)
						a:accelerate(30/175)
						a:zoomx(.5)
						a:decelerate(30/175)
						a:zoomx(2)
						a:accelerate(30/175)
						a:zoomx(.5)
						a:decelerate(60/175)
						a:zoomx(1)
					end
				end
			end)
			
			function mod_holdit(beat,len,spd,amt,mod,pn)
				m(beat,len,'*'..spd..' '..amt..' '..mod,l,pn)
				m(beat+len,1,'*'..spd..' no '..mod,l,pn)
			end
			
			--function switcheroo_add(beat,which,speed,len,pn)
			for i=0,3 do
				switcheroo_add((i*16)+168-.1,'flip',10,8,1)
				switcheroo_add((i*16)+169.5-.1,'invert',10,8,2)
				switcheroo_add((i*16)+170.5-.1,'normal',10,8,2)
				
				switcheroo_add((i*16)+172-.1,'normal',10,8,1)
				switcheroo_add((i*16)+173.5-.1,'flip',10,8,2)
				switcheroo_add((i*16)+174.5-.1,'invert',10,8,2)
				
				switcheroo_add((i*16)+176-.1,'flip',10,8,1)
				switcheroo_add((i*16)+177.5-.1,'normal',10,8,2)
				switcheroo_add((i*16)+178.5-.1,'invert',10,8,2)
				
				switcheroo_add((i*16)+180-.1,'normal',10,8,1)
				switcheroo_add((i*16)+181-.1,'normal',10,8,2)
			end
			
			for i=0,1 do
			
				mod_holdit((i*16)+168-.1,1.5,15,150,'bumpy',1)
				mod_holdit((i*16)+168-.1,1.5,15,-150,'bumpy',2)
				mod_holdit((i*16)+169.5-.1,1,30,-150,'bumpy',1)
				mod_holdit((i*16)+169.5-.1,1,30,150,'bumpy',2)
				mod_holdit((i*16)+170.5-.1,2,30,150,'bumpy',1)
				mod_holdit((i*16)+170.5-.1,2,30,-150,'bumpy',2)
			
				mod_holdit((i*16)+4+168-.1,1.5,30,-150,'bumpy',1)
				mod_holdit((i*16)+4+168-.1,1.5,30,150,'bumpy',2)
				mod_holdit((i*16)+4+169.5-.1,1,30,150,'bumpy',1)
				mod_holdit((i*16)+4+169.5-.1,1,30,-150,'bumpy',2)
				mod_holdit((i*16)+4+170.5-.1,2,30,-150,'bumpy',1)
				mod_holdit((i*16)+4+170.5-.1,2,30,150,'bumpy',2)
				
				mod_holdit((i*16)+8+168-.1,1.5,30,150,'bumpy',1)
				mod_holdit((i*16)+8+168-.1,1.5,30,-150,'bumpy',2)
				mod_holdit((i*16)+8+169.5-.1,1,30,-150,'bumpy',1)
				mod_holdit((i*16)+8+169.5-.1,1,30,150,'bumpy',2)
				mod_holdit((i*16)+8+170.5-.1,2,30,150,'bumpy',1)
				mod_holdit((i*16)+8+170.5-.1,2,30,-150,'bumpy',2)
				
				mod_holdit((i*16)+180-.1,2,30,-150,'bumpy',1)
				mod_holdit((i*16)+180-.1,2,30,150,'bumpy',2)
				mod_holdit((i*16)+181-.1,2,15,0,'bumpy',1)
				mod_holdit((i*16)+181-.1,2,15,0,'bumpy',2)
				
			end
			
			local fluct = 1
			for i=0,3 do
				if i < 2 then
					for j=0,2 do
						simple_m0d2((i*16)+(j*4)+168-.1,120*fluct,.4,'drunk',1)
						simple_m0d2((i*16)+(j*4)+168-.1,160*fluct,.4,'tipsy',1)
						simple_m0d2((i*16)+(j*4)+168-.1,120*fluct,.4,'drunk',2)
						simple_m0d2((i*16)+(j*4)+168-.1,160*fluct,.4,'tipsy',2)
						
						simple_m0d2((i*16)+(j*4)+169.5-.1,120*-fluct,.3,'drunk',1)
						simple_m0d2((i*16)+(j*4)+169.5-.1,160*-fluct,.3,'tipsy',1)
						simple_m0d2((i*16)+(j*4)+169.5-.1,120*-fluct,.3,'drunk',2)
						simple_m0d2((i*16)+(j*4)+169.5-.1,160*-fluct,.3,'tipsy',2)
						
						simple_m0d2((i*16)+(j*4)+170.5-.1,120*-fluct,.3,'drunk',1)
						simple_m0d2((i*16)+(j*4)+170.5-.1,160*-fluct,.3,'tipsy',1)
						simple_m0d2((i*16)+(j*4)+170.5-.1,120*-fluct,.3,'drunk',2)
						simple_m0d2((i*16)+(j*4)+170.5-.1,160*-fluct,.3,'tipsy',2)
						
						fluct = fluct*-1
					end
				end
				
				simple_m0d2((i*16)+180-.1,150*-fluct,.3,'drunk',1)
				simple_m0d2((i*16)+180-.1,180*-fluct,.3,'tipsy',1)
				simple_m0d2((i*16)+180-.1,150*-fluct,.3,'drunk',2)
				simple_m0d2((i*16)+180-.1,180*-fluct,.3,'tipsy',2)
				
				simple_m0d2((i*16)+181-.1,150*fluct,.3,'drunk',1)
				simple_m0d2((i*16)+181-.1,180*fluct,.3,'tipsy',1)
				simple_m0d2((i*16)+181-.1,150*fluct,.3,'drunk',2)
				simple_m0d2((i*16)+181-.1,180*fluct,.3,'tipsy',2)
			end
			
			function rb_oowa(beat,dir,last)
				m2(beat,function()
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:decelerate(60/175)
							a:rotationy(360*dir*(pn*2-3))
							if last then
								a:x(SCREEN_CENTER_X+16*(pn*2-3))
							end
							a:decelerate(60/175)
							a:rotationx(360*dir*(pn*2-3))
							if last then
								a:x(SCREEN_CENTER_X)
							end
							a:sleep(0)
							a:rotationx(0)
							a:rotationy(0)
						end
					end
					
					
					
				end,last)
				m2(beat-1,function()
					rb_sinners2:sleep(60/175)
					rb_sinners2:decelerate(30/175)
					rb_sinners2:addy(-20)
					rb_sinners2:accelerate(30/175)
					rb_sinners2:addy(20)
					rb_sinners2:decelerate(30/175)
					rb_sinners2:addy(-20)
					rb_sinners2:accelerate(30/175)
					rb_sinners2:addy(20)
				
					rb_sinners:zoomx(dir)
					rb_sinners:decelerate(60/175)
					rb_sinners:x(SCREEN_CENTER_X)
					rb_sinners:y(SCREEN_BOTTOM+20)
					rb_sinners:sleep(120/175)
					rb_sinners:linear(60/175)
					rb_sinners:y(SCREEN_BOTTOM+150)
				end)
				m2(beat,'Cheer');
				m2(beat+1,'Cheer');
			end
			
			mod_wiggle(32,16,4,100,4,'bumpy')
			mod_wiggle(36,16,4,400,4,'bumpy')
			
			m2(132,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:wag()
						a:effectclock('bgm')
						a:effectmagnitude(0,0,20)
						a:effectperiod(2)
						a:linear(180/175)
						a:zoomx(3)
						a:zoomy(1)
						a:linear(60/175)
						a:zoom(1)
					end
				end
			end)
			
			m2(136,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:stopeffect()
					end
				end
			end)
			
			m(129-.1,3,'*10 invert',l,1)
			m(131-.1,2,'*10 no invert',l,1)
			
			m2(135,function()
				rb_aux2:decelerate(30/175)
				rb_aux2:x(100)
				rb_aux2:accelerate(30/175)
				rb_aux2:x(0)
			end)
			
			--[[
			m(132.5-.1,2,'*10 invert',l,1)
			m(133-.1,2,'*10 no invert',l,1)
			m(133.5-.1,2,'*10 invert',l,1)
			m(134-.1,2,'*10 no invert',l,1)
			m(134.5-.1,2,'*10 invert',l,1)
			m(135-.1,2,'*10 no invert',l,1)
			m(135.5-.1,2,'*10 invert',l,1)
			m(136-.1,2,'*10 no invert',l,1)
			]]
			
			m(161-.1,3,'*10 flip',l,1)
			m(164-.1,2,'*10 no flip',l,1)
			
			m(103.5,163.5,'*1000 beat',e)
			m(131.5,4,'*1000 500 beat',l)
			m(136,163.5,'drunk',e)
			
			m(230,240,'*0.729 no flip',e)
			
			rb_oowa(182,1)
			rb_oowa(16+182,-1)
			rb_oowa(32+182,1)
			rb_oowa(48+182,-1,true)
			
			m2(200,function()
				auxvar:x(0)
				auxvar:y(0)
				auxvar:z(1)
				auxvar:linear(24*60/175)
				auxvar:x(150)
				auxvar:y(50)
				auxvar:z(1.5)
				auxvar:linear(4*60/175)
				auxvar:x(0)
				auxvar:y(0)
				auxvar:z(1)
			end)
			
			simple_m0d2(228,-100,.2,'mini')
			simple_m0d2(229,-100,.4,'mini')
			simple_m0d2(228,300,.2,'bumpy')
			simple_m0d2(229,300,.4,'bumpy')
			
			m(236,292,'-40 expand',e);
			m(276,292,'-20 expand',e);
			
			mod_sugarkiller(232,304-232,2,80,80,2)
			m(232,292,'*10000 100 hidden, *10000 100 sudden, *10000 dark, *10000 200 dizzy',e,2)
			m(232,292,'*10000 -100 hidden, *10000 -100 sudden, *10000 stealth',e,1)
			
			m(292,304,'*10000 stealth, *10000 no hidden, *10000 no sudden',e,1)
			m(292,304,'*10000 no hidden, *10000 no sudden',e,2)
			
			m2(228,function()
				auxvar:x(128*-8)
			end,true)
			m2(236,function()
				auxvar:x(128*8)
				auxvar:linear(16*60/175)
				auxvar:x(128*-8)
			end)
			m2(252,function()
				auxvar:x(128*8)
				auxvar:linear(16*60/175)
				auxvar:x(128*-8)
			end)
			
			m2(248,function()
				rb_aux2:decelerate(120/175)
				rb_aux2:x(100)
			end)
			
			m2(264,function()
				rb_aux2:decelerate(120/175)
				rb_aux2:x(-100)
				rb_aux2:y(100)
			end)
			
			mod_sugarkiller(257,0.5,2,150,150,1)
			mod_sugarkiller(258.5,0.5,2,150,150,1)
			mod_sugarkiller(273.5,0.5,2,150,150,1)
			
			m(231.5,294.5,'*1000 beat',e)
			m(232,308,'*1.5 150 drunk, *2 200 bumpy',e)
			m(264,308,'*3 -150 drunk, *2 200 bumpy',e)
			m(304,999,'*1.5 no drunk, *2 no bumpy',e)
			
			m2(263,function()
				local a = Plr(1)
				if a then
					a:zoom(0)
					a:linear(15/175)
					a:zoom(1)
					a:sleep(0)
					a:zoom(0)
					a:linear(15/175)
					a:zoom(1)
					a:sleep(0)
					a:zoom(0)
					a:linear(15/175)
					a:zoom(1)
					a:sleep(0)
					a:zoom(0)
					a:linear(15/175)
					a:zoom(1)
					a:sleep(0)
				end
			end)
			
			m2(308,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:linear(4*60/175)
						a:zoomz(100)
						a:linear(8*60/175)
						a:zoomz(1)
					end
				end
				
				rb_bg1:linear(12*60/175)
				rb_bg1:diffusealpha(0)
				rb_bg2:linear(12*60/175)
				rb_bg2:diffusealpha(0)
				rb_bgquad2:linear(12*60/175)
				rb_bgquad2:diffusebottomedge(1,0,0,0)
			end)
			
			m(308,999,'*0.5 10000 tornado',e,1)
			m(308,999,'*0.5 -10000 tornado',e,2)
			
			m(319.5,1,'*10000 1000 beat',l,1)
			m(319.5,1,'*10000 -1000 beat',l,2)
			
			m(280-.1,1,'*10 invert',l,1)
			m(281-.1,1,'*10 no invert',l,1)
			m(281.5-.1,1,'*10 invert',l,1)
			m(282.5-.1,1,'*10 no invert',l,1)
			m(283-.1,1,'*10 invert',l,1)
			m(283.5-.1,1,'*10 no invert',l,1)
			
			m(4+280-.1,1,'*10 invert',l,1)
			m(4+281-.1,1,'*10 no invert',l,1)
			m(4+281.5-.1,1,'*10 invert',l,1)
			m(4+282.5-.1,1,'*10 no invert',l,1)
			m(4+283-.1,1,'*10 invert',l,1)
			m(4+283.5-.1,1,'*10 no invert',l,1)
			
			m(288-.1,4,'*10 invert',l,1)
			m(292-.1,4,'*10 no invert',l,1)
			
			m2(292,function()
				rb_sinners:linear(120/175)
				rb_sinners:y(SCREEN_BOTTOM+20)
			end)
			
			m2(296,function()
			
				rb_sinners:sleep(0)
				rb_sinners:zoomx(1)
				rb_sinners:linear(240/175)
				rb_sinners:x(SCREEN_CENTER_X+20)
				rb_sinners:sleep(0)
				rb_sinners:zoomx(-1)
				rb_sinners:linear(240/175)
				rb_sinners:x(SCREEN_CENTER_X-20)
				rb_sinners:sleep(0)
				rb_sinners:zoomx(1)
				rb_sinners:linear(240/175)
				rb_sinners:x(SCREEN_CENTER_X+20)
				rb_sinners:y(SCREEN_BOTTOM+150)
				
			end)
			
			m2(296,function()
				rb_sinners2:sleep(0)
				rb_sinners2:decelerate(45/175)
				rb_sinners2:addy(-20)
				rb_sinners2:accelerate(45/175)
				rb_sinners2:addy(20)
				rb_sinners2:decelerate(45/175)
				rb_sinners2:addy(-20)
				rb_sinners2:accelerate(45/175)
				rb_sinners2:addy(20)
				rb_sinners2:decelerate(30/175)
				rb_sinners2:addy(-20)
				rb_sinners2:accelerate(30/175)
				rb_sinners2:addy(20)
				rb_sinners2:sleep(0)
				rb_sinners2:decelerate(45/175)
				rb_sinners2:addy(-20)
				rb_sinners2:accelerate(45/175)
				rb_sinners2:addy(20)
				rb_sinners2:decelerate(45/175)
				rb_sinners2:addy(-20)
				rb_sinners2:accelerate(45/175)
				rb_sinners2:addy(20)
				rb_sinners2:decelerate(30/175)
				rb_sinners2:addy(-20)
				rb_sinners2:accelerate(30/175)
				rb_sinners2:addy(20)
			end)
			
			m2(296,'Cheer')
			m2(297.5,'Cheer')
			m2(299,'Cheer')
			m2(300,'Cheer')
			m2(301.5,'Cheer')
			m2(303,'Cheer')
			m2(304,'Cheer2')
			
---------------------------------------------------------------------------------------
----------------------Sort the actions table-------------------------------------------
---------------------------------------------------------------------------------------
				
			function modtable_compare(a,b)
				return a[1] < b[1]
			end
			
			if table.getn(mod_actions) > 1 then
				table.sort(mod_actions, modtable_compare)
			end
			
			self:queuecommand('Update');
			
		end"
		
		UpdateCommand="%function(self)

			if GAMESTATE:GetSongBeat()>=0 and not checked then
			
				local ThingsToGrab = {'LifeP1','LifeP2','ScoreP1','ScoreP2','BPMDisplay','LifeFrame','ScoreFrame',
										'Lyrics','SongBackground','SongForeground','Overlay','Underlay'}
				local ThingsToHide = {'LifeP1','LifeP2','ScoreP1','ScoreP2','BPMDisplay','LifeFrame','ScoreFrame','Overlay','Underlay'}
				
				for i,v in ipairs(ThingsToGrab) do
					_G[v] = SCREENMAN:GetTopScreen():GetChild(v) or nil
				end
				
				for i,v in ipairs(ThingsToHide) do
					if _G[v] then _G[v]:hidden(1) end
				end
				
				table.insert(mod_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP1'));
				table.insert(mod_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP2'));
				
				--name players, judgment and combo
				for pn=1,2 do
					_G['P'..pn] = SCREENMAN:GetTopScreen():GetChild('PlayerP'..pn) or nil;
					if _G['P'..pn] then
						_G['jud'..pn] = _G['P'..pn]:GetChild('Judgment');
						_G['com'..pn] = _G['P'..pn]:GetChild('Combo');
					end
				end
				
				screen = SCREENMAN:GetTopScreen();
				checked = true; --let this only run once
				
			end

			local beat = GAMESTATE:GetSongBeat()
			
			
---------------------------------------------------------------------------------------
----------------------Begin table handlers---------------------------------------------
---------------------------------------------------------------------------------------
			
			disable = false;
			if disable ~= true and beat > mod_firstSeenBeat+0.1 and checked then
				
				-----------------------
				-- Player mod resets --
				-----------------------
				if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --
					for i=1,2 do
						mod_do('clearall',i)
					end
				end
				
				------------------------------------------------------------------------------
				-- custom mod reader by TaroNuke edited by WinDEU and re-stolen by TaroNuke --
				------------------------------------------------------------------------------
				if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --
					for i,v in pairs(mods) do
						if v and table.getn(v) > 3 and v[1] and v[2] and v[3] and v[4] then
							if beat >=v[1] then
								if (v[4] == 'len' and beat <=v[1]+v[2]) or (v[4] == 'end' and beat <=v[2]) then
									if table.getn(v) == 5 then
										mod_do(v[3],v[5]);
									else
										mod_do(v[3]);
									end
								end
							end
						else
							v[1] = 0;
							v[2] = 0;
							v[3] = '';
							v[4] = 'error';
							SCREENMAN:SystemMessage('Bad mod in beat-based table (line '..i..')');
						end
					end
				end
				
				-----------------------------------------------------------------------------------------------------
				-- WinDEU's time-based len/end version of the #swag custom mod reader #teamproofofconcept (c) 2015 --
				-----------------------------------------------------------------------------------------------------
				if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --
					for i,v in pairs(mods2) do
						if v and table.getn(v) > 3 and v[1] and v[2] and v[3] and v[4] then
							if mod_time >=v[1] then
								if (v[4] == 'len' and mod_time <=v[1]+v[2]) or (v[4] == 'end' and mod_time <=v[2]) then
									if table.getn(v) == 5 then
										mod_do(v[3],v[5]);
									else
										mod_do(v[3]);
									end
								end
							end
						else
							v[1] = 0;
							v[2] = 0;
							v[3] = 'error';
							v[4] = 'error';
							SCREENMAN:SystemMessage('Bad mod in time-based table (line '..i..')');
						end
					end
				end
				
				--------------------
				-- Perframe stuff --
				--------------------
				
				if beat > 71 and beat < 75 then
					mod_do('*10000 '..(rtb_ass*(-50/360))..' flip')
					rtb_ass = rtb_ass+(360-rtb_ass)/6
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:rotationz(rtb_ass*(pn*2-3))
							a:x(SCREEN_CENTER_X+(160*(pn*2-3))-rtb_ass*(pn*2-3)*((160-32)/360))
						end
					end
				end
				if beat > 71 and beat < 72 then
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:rotationx(30*(beat-71)*(pn*2-3))
						end
					end
				end
				if beat > 75 and beat < 103 then
					rtb_ass = 360
				end
				if beat > 72 and beat < 104 then
					if beat < 96 or beat > 101.5 then
						mod_do('*10000 '..(rtb_ass*(-50/360))..' flip')
					end
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:z(rb_intense:GetX()*300*math.sin(beat*math.pi*0.25)*(pn*2-3))
							a:rotationx(rb_intense:GetX()*30*math.cos(beat*math.pi*0.25)*(pn*2-3))
						end
					end
					
				end
				
				if beat > 103 and beat < 164 then
					mod_do('*10000 '..(0.64*(auxvar:GetX())-150+40)..' suddenoffset, *10000 '..(0.64*(auxvar:GetX())-150-40)..' hiddenoffset')
					--mod_do('*10000 0 suddenoffset, *10000 0 hiddenoffset')
					--Trace(0.3*(auxvar:GetX())-100)
				end
				
				for j=4,8,4 do
					for i=1,8 do
						if beat > _G['rb_arrow'..j..'_'..i]:getaux() then
							_G['rb_arrow'..j..'_'..i]:aux(9999)
							_G['rb_arrow'..j..'_'..i]:glow(1,1,1,1)
							_G['rb_arrow'..j..'_'..i]:diffusealpha(0)
							_G['rb_arrow'..j..'_'..i]:linear(0.2)
							_G['rb_arrow'..j..'_'..i]:zoom(2)
							_G['rb_arrow'..j..'_'..i]:glow(1,1,1,0)
						end
					end
				end
				
				
				if beat > 103 and beat < 110 then
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:rotationx(30*math.max(104-beat,0)*(pn*2-3))
						end
					end
				end
				if beat > 104 and beat < 104.5 then
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:z(0)
						end
					end
				end
				if beat > 103 and beat < 108 then
					rtb_ass = rtb_ass+(0-rtb_ass)/6
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:rotationz(rtb_ass*(pn*2-3))
							a:x(SCREEN_CENTER_X-rtb_ass*(pn*2-3)*((160-32)/360))
						end
					end
				end
				
				if beat > 135 and beat < 137 then
					local a = (-100*math.sin(beat*math.pi))
					mod_do('*10000 '..(rb_aux2:GetX())..' invert')
					mod_do('*10000 '..(rb_aux2:GetX())..' brake')
				end
				
				if beat > 198 and beat < 200 then
					local a = ((beat-198)/2)*40
					mod_do('*10000 '..a..' centered')
				end
				
				if beat > 200 and beat < 216 then
					local a = 40-math.abs(80*math.sin(beat*math.pi))
					mod_do('*10000 '..a..' centered')
				end
				if beat > 216 and beat < 224 then
					local a = 40-math.abs(40*math.sin(beat*2*math.pi))
					mod_do('*10000 '..a..' centered')
				end
				
				if beat > 168 and beat < 200 then
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:rotationz( _G['rb_rz'..pn]:GetX() )
						end
					end
				end
				if beat > 200 and beat < 227 then
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:rotationz( _G['rb_rz'..pn]:GetX()*0.5 )
						end
					end
				elseif beat > 227 and beat < 232 then
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:rotationz( _G['rb_rz'..pn]:GetX()*1.5 )
						end
					end
				end
				
				if beat > 248 and beat < 296 then
					mod_do('*10000 '..rb_aux2:GetX()..' tornado')
					mod_do('*10000 '..(rb_aux2:GetY()*1.5)..' wave, *10000 '..(rb_aux2:GetY())..' flip',1)
				end
				
				if beat > 200 and beat < 228 then
					mod_do('*10000 '..auxvar:GetX()..' incoming')
					mod_do('*10000 '..auxvar:GetY()..' stealth')
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:zoom(auxvar:GetZ())
							a:x(SCREEN_CENTER_X + 32*auxvar:GetZ()*(pn*2-3) )
							a:y(SCREEN_CENTER_Y - auxvar:GetY() )
						end
					end
				end
				
				if beat > 232 and beat < 304 then
					mod_do('*10000 '..(0.64*(auxvar:GetX())+135)..' suddenoffset, *10000 '..(0.64*(auxvar:GetX())-135)..' hiddenoffset')
				end
				
				---------------------------------------
				-- ACTION RPGS AINT GOT SHIT ON THIS --
				---------------------------------------
				if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --
					while curaction<=table.getn(mod_actions) and GAMESTATE:GetSongBeat()>=mod_actions[curaction][1] do
						if mod_actions[curaction][3] or GAMESTATE:GetSongBeat() < mod_actions[curaction][1]+2 then
							if type(mod_actions[curaction][2]) == 'function' then
								mod_actions[curaction][2]()
							elseif type(mod_actions[curaction][2]) == 'string' then
								MESSAGEMAN:Broadcast(mod_actions[curaction][2]);
							end
						end
						curaction = curaction+1;
					end
				end
				
			end
			
			self:sleep(1/60);
			self:queuecommand('Update');

---------------------------------------------------------------------------------------
----------------------END DON'T TOUCH IT KIDDO-----------------------------------------
---------------------------------------------------------------------------------------
			
		end"
		
	/>
	
	<!--Handling messages here is still fun and profitable-->
	<CODE Type="Quad" OnCommand="hidden,1"
	InitCommand="%function(self) auxvar = self end"
	/>
	<CODE Type="Quad" OnCommand="hidden,1"
	InitCommand="%function(self) rb_intense = self end"
	/>
	<CODE Type="Quad" OnCommand="hidden,1"
	InitCommand="%function(self) rb_rz1 = self end"
	/>
	<CODE Type="Quad" OnCommand="hidden,1"
	InitCommand="%function(self) rb_rz2 = self end"
	/>
	<CODE Type="Quad" OnCommand="hidden,1"
	InitCommand="%function(self) rb_aux2 = self end"
	/>
	
	<Layer Type="ActorFrame" OnCommand="basezoomx,1.2;basezoomy,1.2;x,sw/2;y,sh*0.5;zoomy,0;"
	MusicOnMessageCommand="playcommand,Line;bounceend,0.3;zoomy,1;playcommand,NoArt"
	Music3OnMessageCommand="playcommand,Line2;bounceend,0.3;zoomy,1;playcommand,NoArt"
	Music5OnMessageCommand="playcommand,Line3;bounceend,0.3;zoomy,1;playcommand,NoArt"
	Music2OnMessageCommand="playcommand,Line;bounceend,0.3;zoomy,1;playcommand,Art"
	Music4OnMessageCommand="playcommand,Line2;bounceend,0.3;zoomy,1;playcommand,Art"
	MusicOffMessageCommand="sleep,0.3;bouncebegin,0.3;zoomy,0;" ><children>
		<Layer File="music" OnCommand="animate,0;" NoArtCommand="setstate,0;" ArtCommand="setstate,1" />
		
		<Layer File="arrow/4th/4th.model" InitCommand="%function(self) rb_arrow1 = self end" OnCommand="hidden,1" />
		<Layer File="arrow/8th/8th.model" InitCommand="%function(self) rb_arrow2 = self end" OnCommand="hidden,1" />
		<Layer File="arrow/4th/4th.model" InitCommand="%function(self) rb_arrow3 = self end" OnCommand="hidden,1" />
		<Layer File="arrow/4th/4th.model" InitCommand="%function(self) rb_arrow4 = self end" OnCommand="hidden,1" />
		
		<Layer File="arrow/4th/4th.model" InitCommand="%function(self) rb_arrow4_1 = self end" OnCommand="hidden,1" />
		<Layer File="arrow/4th/4th.model" InitCommand="%function(self) rb_arrow4_2 = self end" OnCommand="hidden,1" />
		<Layer File="arrow/4th/4th.model" InitCommand="%function(self) rb_arrow4_3 = self end" OnCommand="hidden,1" />
		<Layer File="arrow/4th/4th.model" InitCommand="%function(self) rb_arrow4_4 = self end" OnCommand="hidden,1" />
		<Layer File="arrow/4th/4th.model" InitCommand="%function(self) rb_arrow4_5 = self end" OnCommand="hidden,1" />
		<Layer File="arrow/4th/4th.model" InitCommand="%function(self) rb_arrow4_6 = self end" OnCommand="hidden,1" />
		<Layer File="arrow/4th/4th.model" InitCommand="%function(self) rb_arrow4_7 = self end" OnCommand="hidden,1" />
		<Layer File="arrow/4th/4th.model" InitCommand="%function(self) rb_arrow4_8 = self end" OnCommand="hidden,1" />
		
		<Layer File="arrow/8th/8th.model" InitCommand="%function(self) rb_arrow8_1 = self end" OnCommand="hidden,1" />
		<Layer File="arrow/8th/8th.model" InitCommand="%function(self) rb_arrow8_2 = self end" OnCommand="hidden,1" />
		<Layer File="arrow/8th/8th.model" InitCommand="%function(self) rb_arrow8_3 = self end" OnCommand="hidden,1" />
		<Layer File="arrow/8th/8th.model" InitCommand="%function(self) rb_arrow8_4 = self end" OnCommand="hidden,1" />
		<Layer File="arrow/8th/8th.model" InitCommand="%function(self) rb_arrow8_5 = self end" OnCommand="hidden,1" />
		<Layer File="arrow/8th/8th.model" InitCommand="%function(self) rb_arrow8_6 = self end" OnCommand="hidden,1" />
		<Layer File="arrow/8th/8th.model" InitCommand="%function(self) rb_arrow8_7 = self end" OnCommand="hidden,1" />
		<Layer File="arrow/8th/8th.model" InitCommand="%function(self) rb_arrow8_8 = self end" OnCommand="hidden,1" />
		
		<Layer Type="Quad" OnCommand="zoomto,6,128;"
		LineCommand="finishtweening;x,-80-300;linear,3*60/175;x,-80;linear,2*60/175;addx,240;"
		Line2Command="finishtweening;x,-80-240;linear,4*60/175;x,-80;linear,4*60/175;addx,240;"
		Line3Command="finishtweening;x,-120-360;linear,8*60/175;x,-120;linear,8*60/175;addx,360;"
		/>
		
	</children></Layer>
	
	<!--This is for the time based mod reader-->
	<BitmapText
		Font="Common Normal"
		Text="test"
		OnCommand="x,SCREEN_CENTER_X;y,SCREEN_CENTER_Y;effectclock,music;playcommand,SetTime;hidden,1"
		SetTimeCommand="%function(self) self:settext(self:GetSecsIntoEffect()); mod_time = tonumber(self:GetText()); self:sleep(0.02); self:queuecommand('SetTime'); end"
	/>
	
	<Layer Type="ActorFrame" InitCommand="%function(self) rb_sinners2 = self end" OnCommand="" ><children>
	<Layer Type="ActorFrame" InitCommand="%function(self) rb_sinners = self end" OnCommand="x,SCREEN_CENTER_X-20;y,SCREEN_BOTTOM+150;zoom,.9" ><children>
		<Layer File="_sinner" OnCommand="vertalign,bottom;x,-240;setstate,4;" CheerMessageCommand="diffusealpha,0.8;setstate,0;zoom,1.2;linear,0.15;zoom,1;"
		Cheer2MessageCommand="diffusealpha,0.8;setstate,5;zoom,1.2;linear,0.15;zoom,1;" />
		<Layer File="_sinner" OnCommand="vertalign,bottom;x,-80;setstate,4;" CheerMessageCommand="diffusealpha,0.8;setstate,0;zoom,1.2;linear,0.15;zoom,1;"
		Cheer2MessageCommand="diffusealpha,0.8;setstate,5;zoom,1.2;linear,0.15;zoom,1;" />
		<Layer File="_sinner" OnCommand="vertalign,bottom;x,240;setstate,4;" CheerMessageCommand="diffusealpha,0.8;setstate,0;zoom,1.2;linear,0.15;zoom,1;"
		Cheer2MessageCommand="diffusealpha,0.8;setstate,5;zoom,1.2;linear,0.15;zoom,1;" />
		<Layer File="_sinner" OnCommand="vertalign,bottom;x,80;setstate,4;" CheerMessageCommand="diffusealpha,0.8;setstate,0;zoom,1.2;linear,0.15;zoom,1;"
		Cheer2MessageCommand="diffusealpha,0.8;setstate,5;zoom,1.2;linear,0.15;zoom,1;" />
	</children></Layer>
	</children></Layer>
	
	<Layer Type="Quad" OnCommand="stretchto,0,0,sw,sh;diffuse,1,1,1,0"
	WhiteFlashMessageCommand="diffusealpha,1;linear,0.4;diffusealpha,0"
	WhiteFlash2MessageCommand="diffusealpha,.6;blend,add;linear,2;diffusealpha,0"
	/>
	
</children></ActorFrame>