<ActorFrame
InitCommand="%function(self)

	if FUCK_EXE then

		slumpo = false
		for pn=1,2 do
			if GAMESTATE:IsPlayerEnabled(pn-1) then
				if GAMESTATE:GetCurrentSteps(pn-1):GetDifficulty() == 5 then
					slumpo = true
				end
			end
		end

		songName = GAMESTATE:GetCurrentSong():GetSongDir();
		
		mod_globaloffset = PREFSMAN:GetPreference('GlobalOffsetSeconds');
		
		dm_loopValue=0
		dm_loopValueb=0
		dm_loopValuec=0
		dm_curNote=1
		dm_quant=1
		dm_dir=0
		dm_nrot=0
		dm_npos=0
		dm_curarr=1
		dm_gravity=0
		dm_xoff=170
		dm_resetOnce=false
		
			sw = SCREEN_WIDTH
		scx = SCREEN_CENTER_X
		scy = SCREEN_CENTER_Y
		sh = SCREEN_HEIGHT --shortcuts
		
		dm_quater=628.318531/4
		dm_full=628.318531
		
		function Plr(pn)
			return _G['P'..pn]
		end
		function GetJud(pn)
			return _G['jud'..pn]
		end
		function GetCom(pn)
			return _G['com'..pn]
		end
		
		function mod_do(str,pn)
			if pn then
				GAMESTATE:ApplyGameCommand('mod,'..str,pn)
			else
				GAMESTATE:ApplyGameCommand('mod,'..str)
			end
		end
		
		function taro_Sound(str)
			local met = GAMESTATE:GetCurrentSong():GetSongDir();
			SOUND:PlayOnce(met..'lua/'..str..'.ogg');
		end
		
	else
		
		SCREENMAN:SystemMessage('Requires NotITG ver. 3.2!')
		
	end

end"
><children>

	<Layer Type="ActorFrame" Condition="FUCK_EXE" ><children>

	<Layer
		Type="Quad"
		InitCommand="hidden,1"
		OnCommand="sleep,1000"
	/>
	
	 <Layer Type="Actor"
    Vert="vert/wall.vert"
   
    OnCommand="%function( self )
      dm_wall = self:GetShader()
      
    end"
  />
  
  <Layer Type="Actor"
    Vert="vert/sine.vert"
   
    OnCommand="%function( self )
      dm_vsine = self:GetShader()
      
    end"
  />
	
	<Layer File="modhelpers.xml" />
	<Layer File="dm_banger.xml" />
	<Layer File="easing.xml" />
	<Layer File="spellcard.xml" />
	
	<Layer
		Type="Quad"
		OnCommand="hidden,1"
		InitCommand="%function(self)
		
			if tonumber(GAMESTATE:GetVersionDate()) > 20190000 then
		
				checked = false; P1=nil;P2=nil;P3=nil;P4=nil;jud1=nil;com1=nil;jud2=nil;com2=nil;jud3=nil;com3=nil;
				
				function dm_faketaphit(col,w,pn)
					local beat = GAMESTATE:GetSongBeat()
					if checked and beat and beat > 4 then
						local a = Plr(1)
						if a then
							a:DidTapNote(col,w) --generate noteflash
						end
					end
				end
				
				function dm_fakeholdhit(col)
					local beat = GAMESTATE:GetSongBeat()
					if checked and beat and beat > 4 then
						local a = Plr(1)
						if a then
							--a:DidHoldNote(col) --generate hold success flash
						end
					end
				end
			
				---------------------------------------------------------
				---------DOCUMENTATION-----------------------------------
				---------------------------------------------------------
				
				--function perframe( beat, endBeat )
					--return true if the current beat is between 'beat' and 'endBeat'
				
				--function mod_shader(beat,key,which)
					--turn on shader key at specified beat (up to 10 keys available, defined by 'which' = 0-9
					
				--function mod_insert(beat,len,mod,len_or_end,pn)
					--insert mod into beat mods table
				--function mod_insert2(time,len,mod,len_or_end,pn)
					--insert mod into time mods table
					
				--function mod_message(beat,msg,persistent)
					--insert something into the actions table.
					--msg can also be a function. If string, a message gets broadcast at that beat
					--if 'persistent' is true, message will run even if editor starts at a beat past it
					
				--function mod_blacklist(t,n)
					--check if number n occurs in table t
					--useful for doing 'every beat EXCEPT the contents of t'
					
				--function simple_m0d(beat,strength,mult,mod)
				--function simple_m0d2(beat,strength,mult,mod,pn)
				--function simple_m0d3(beat,strength,duration,bpm,mod,pn)
					--activate mods at specific beat but also deactivate them
					
				--function mod_wiggle(beat,num,div,amt,speed,mod,pn,first)
					--alternates a mod back and forth before resetting to 0
					
				--function mod_springt(time,strength,dur,mod,pn)
					--time-based per-frame alternating mod that decreases based on how much time is left.
						--think doorstopper
				
				--function mod_springt2(time,strength,dur,mod,pn)
					--time-based per-frame alternating mod
				
				--function mod_onebeat(beat,strength,pn)
					--turns on beat for the beat specified, at the desired strength	
				
				--function switcheroo_add(beat,which,speed,len,pn)
					--adds a column swap at the desired beat
				--[[	switcheroos = {normal = {0,0}, ldur = {0,0}, reset = {0,0},
						flip = {100,0}, rudl = {100,0}, invert = {0,100}, dlru = {0,100},
						ludr = {25,-75}, rdul = {75,75}, drlu = {25,125}, ulrd = {75,-125}, urld = {100,-100}}
				]]
				
				--use a variable called 'switcheroo_width' to change how much space is between each column
				--e.g. switcheroo_width = 2 for ayakashi
				
				--function mod_sugarkiller(beat,duration,speed,minstealth,maxstealth,pn)
					--portable version of the effect from sugarkill X
					
				--function doSpline(spd, axis, path, col)
					--draws spline 'path' in specified axis, for specific col. Offsets are *10000, but positions use *spd
					
				--function doSplineAll(spd, axis, path)
					--same as above, but for all columns
					--(faster performance than using doSpline 4 times due to more efficient concat)
				
				--function mindf_rotateAndCounter(xDegrees, yDegrees, zDegrees, player)
					--counteract euler rotations after rotating player in multiple axes, using a TON of math.
				
				
				---------------------------------------------------------
				--------END DOCUMENTATION--------------------------------
				---------------------------------------------------------
				
				local m = mod_insert
				local m2 = mod_message
				local me = mod_ease
					dm_beat = 0.293
				
				local l = 'len'
				local e = 'end'
				
				
				
				
				
				
				
				init_modsp1 = '';
				init_modsp2 = '';
				
				mod_plr = {};
				
				mod_firstSeenBeat = GAMESTATE:GetSongBeat(); --necessary to prevent long freezes
				
				
				
				
				
				function pvibrate(bt)
				m2(bt,function() dm_prx1:vibrate() end,true)
				m2(bt+1.5,function() dm_prx1:stopeffect() end,true)
				m2(bt+.2,function() screen:vibrate(); screen:effectmagnitude(20,10,0) end,true)
				m2(bt+.8,function() screen:stopeffect() end,true)

				end
				
				function cvibrate(bt)
				m2(bt,function() screen:vibrate(); screen:effectmagnitude(32,0,0) end,true)
				m2(bt+1,function() screen:stopeffect() end,true)

				end
			
				function dm_wrap(beatt,dir)
					m2(beatt,function()
						for i=1,2 do
							local a=_G['dm_masters'..i]
								a:finishtweening()
								if i==1 then
									a:x(scx)
								else
									if dir==0 then
										a:x(scx+sw)
									else
										a:x(scx-sw)
									end

								end
								a:hidden(0)
								a:tween(dm_beat*1,'outQuint(%f, 0, 1, 1)')
																
									if dir==0 then
										a:addx(-sw)
									else
										a:addx(sw)
									end
						end
					end,true)
				end
				
				--]]
				
	---------------------------------------------------------------------------------------
	----------------------Begin tables 'n stuff--------------------------------------------
	---------------------------------------------------------------------------------------

				--beat based mods
				--{beat_start, beat_end, mods, len_or_end, player_number}
				mods = {
					{0,9999,'*2 1.75x, *1000 no beat, *10000 -99999 cover,*-1 dizzyholds,*-1 sudden,*-1 110 suddenoffset','end'},
				}
				
				--switcheroos = {{0,0},{100,0},{0,100},{25,-75},{75,75},{25,125},{75,-125},{100,-100}}
				
				
				
				
				
				
				
				--time based mods
				mod_time = 0;
				--{time_start, time_end, mods, len_or_end, player_number}
				mods2 = {
					--{0,200.345,'3x','end',1},
				}
				
				
				
				
				--this is both a message broadcaster and a function runner
				--if you put {beat,'String'}, then 'String' is broadcast as a message on that beat
				--if you put {beat,function() somecode end}, then function() is run at that beat
				--see example on beat 32
				
				curaction = 1;
				--{beat,thing,persists}
				mod_actions = {
				
				
					
				}
				
				
				
				
				
				
				--beat-based ease mods
				--{time_start, time_end, mod_start, mod_end, mod, len_or_end, ease_type, player_number, sustaintime, optional_param1, optional_param2}
				--valid ease types are:
					--linear
					--inQuad    outQuad    inOutQuad    outInQuad
					--inCubic   outCubic   inOutCubic   outInCubic
					--inQuart   outQuart   inOutQuart   outInQuart
					--inQuint   outQuint   inOutQuint   outInQuint
					--inSine    outSine    inOutSine    outInSine
					--inExpo    outExpo    inOutExpo    outInExpo
					--inCirc    outCirc    inOutCirc    outInCirc
					--inElastic outElastic inOutElastic outInElastic    --can take 2 optional parameters - amplitude & period
					--inBack    outBack    inOutBack    outInBack       --can take 1 optional parameter  - spring amount
					--inBounce  outBounce  inOutBounce  outInBounce
					
				mods_ease = {
					-- EXAMPLE TWEEN: from beat 0 to 4, make rotationz go from 360 to 0 with the inOutBack tween
					--{0,4,360,0,'rotationz','end',inOutBack},
				}
				m(0,900,'*-1 0 beat,*-1 -0 bumpy,*-1 400 bumpysize,*-1 0 bumpyoffset,*-1 0 arrowpath,*-1 no mini,*-1 100 zoom,*-1 modtimer,*-1 no twirl,*-1 0 arrowcull,*-1 -150 drawsizeback','end')
					
				me(0,4,2000,0,'tipsy','len',outSine,nil,4)
				me(0,4,-500,0,'flip','len',outSine,nil,4)
				me(0,4,100,0,'reverse','len',outSine,nil,4)
				me(0,4,0,.1,'xmod','len',outSine,nil,4)
				me(3,20,.1,1.75,'xmod','end',inQuint,nil,4)
				--me(0,4,0,100,'zoomx','len',outSine,nil,4)
				me(0,4,-628.318531*4,0,'confusionoffset','len',outSine,nil,4)
				
				--me(4,52,90,90,'straightholds','len',outSine,nil,2)
				for i=4,52 do
				me(i-.2,.2,0,200,'pulseinner','len',outSine,nil,.2)
				me(i,1,200,0,'pulseinner','len',outQuint,nil,1)
				
				me(i,1,-dm_quater+dm_quater*i,dm_quater*i,'confusionoffset','len',outQuint,nil,1)
				end

				m2(0.2,function()
					for i=1,2 do
						local a=_G['P'..i]
						if a then
						
							a:SetArrowShader(dm_vsine)
							--a:SetHoldShader(dm_vsine)
							a:SetReceptorShader(dm_vsine)
						--]]
							a:rotationz(0)
							a:hidden(1)
						end
					end
					
				end,true);
				
				for i=0,16,16 do
					me(i+10,.5,0,100,'flip','len',outSine,nil,1)
					me(i+11,.5,100,0,'flip','len',outSine,nil,2)
					
					me(i+18,.5,0,100,'invert','len',outSine,nil,1)
					me(i+19,.5,100,0,'invert','len',outSine,nil,2)
					
					me(i+202,.5,0,100,'flip','len',outSine,nil,1)
					me(i+203,.5,100,0,'flip','len',outSine,nil,2)
					
					me(i+210,.5,0,100,'invert','len',outSine,nil,1)
					me(i+211,.5,100,0,'invert','len',outSine,nil,2)
				end
				
				for i=1,2 do
					me(1,1,0,0,'bumpyx','len',outSine,i,10)
				end
				
				for i=1,2 do
					me(52,8,0,-600,'tiny','len',inSine,i,1)
					me(52,8,0,-100,'flip','len',inSine,i,1)
					me(52,8,-628.318531*6,0,'confusionoffset','len',outSine,i,1)
					
					me(60,66,-600,200,'tiny','end',outSine,i,1)
					me(60,66,-100,0,'flip','end',outSine,i,1)
					me(66,67,200,0,'tiny','end',outSine,i,1)
					

				end
				
				m2(60,function()
					dm_faux:tween(dm_beat*4,'outSine(%f, 0, 1, 1)')
					dm_faux:aux(1)
					
				end,true);
				m2(65,function()
					dm_prx1:linear(1)
					dm_prx1:zoomz(0)
					
				end,true);
				
				
				m2(66,function()
				
					for i=1,2 do
						local side='L'
						local sMult=1
						if i==2 then
							side='R'
							sMult=-1
						end
						_G['dm_start'..side]:tween(2,'outSine(%f, 0, 1, 1)')
						_G['dm_start'..side]:rotationz(-90*sMult)
						_G['dm_start'..side]:addy(400)
						_G['dm_start'..side]:addx(200*sMult)
					end
					dm_aux3:aux(2)
					dm_prx2:zoomx(2)
					dm_prx2:zwrite(0)
					dm_prx2:ztest(0)
					--dm_prx2:wag()
					
					for i=1,2 do
						local a=_G['P'..i]
						if a then
							a:ClearArrowShader(dm_vsine)
							a:ClearHoldShader(dm_vsine)
							a:ClearReceptorShader(dm_vsine)
							end
					end
					
					
				end,true);

					m2(67,function()
						dm_aux3:aux(2)
						dm_aux3:tween(dm_beat*12,'inQuad(%f, 0, 1, 1)')
						if not slumpo then
							dm_aux3:aux(60)
						else
							dm_aux3:aux(50)
						end
						
						if not slumpo then
							dm_trsp1:tween(dm_beat*12,'outSine(%f, 0, 1, 1)')
							dm_trsp1:aux(0)
						else
							dm_trsp1:tween(dm_beat*10,'outExpo(%f, 0, 1, 1)')
							dm_trsp1:aux(0)
						end
						

					end,true);
					
					if slumpo then
						me(66,68,1.75,2,'xmod',e,linear,nil,128)
						me(128,132,2,1.75,'xmod',e,linear)
					end
					
					m(67,96,'*1 dark,*.2 20 stealth,*1 0 beat,*1 10 bumpyx,*1 200 orient,*1 50 confusionoffset,*1 0 pulseouter','end')
					m(67,96,'*1 0 bumpyxperiod,*1 -40 pulseperiod,*.5 -50 holdgirth','end')
					
					m(100,124,'*1 no dark,*.2 20 stealth,*1 0 beat,*1 0 bumpyx,*1 0 orient,*1 0 confusionoffset,*1 0 pulseouter','end')
					m(100,124,'*1 0 bumpyxperiod,*1 -40 pulseperiod,*.5 -50 holdgirth','end')
					
					for i=0,28 do
					-- me(i+68-.3,.3,0,-150,'tiny','len',outSine)
					-- me(i+68,.5,-150,0,'tiny','len',outSine)
					 
					 me(i+68-.2,.2,0,200,'pulseinner','len',outSine,nil,.2)
					me(i+68,1,200,0,'pulseinner','len',outQuint,nil,1)
					 
					 if i<24 then
					--  me(i+100-.3,.3,0,-200,'tiny','len',outSine)
					-- me(i+100,.5,-200,0,'tiny','len',outSine)
					
					me(i+100-.2,.2,0,200,'pulseinner','len',outSine,nil,.2)
					me(i+100,1,200,0,'pulseinner','len',outQuint,nil,1)
					 end
					end
					
					m2(70,function()
						dm_aux3b:aux(1)
						dm_aux3b:tween(dm_beat*17,'inQuad(%f, 0, 1, 1)')
						if not slumpo then
							dm_aux3b:aux(60)
						else
							dm_aux3b:aux(50)
						end
						
						dm_trsp2:aux(0)
						dm_trsp2:linear(dm_beat*4)
						dm_trsp2:aux(1)
						if slumpo then
							dm_trsp2:tween(dm_beat*10,'outExpo(%f, 0, 1, 1)')
						else
							dm_trsp2:tween(dm_beat*11,'outSine(%f, 0, 1, 1)')
						end
						dm_trsp2:aux(0)
						
					end,true);
					
					m2(74,function()
						dm_aux3c:aux(1)
						dm_aux3c:tween(dm_beat*17,'inQuad(%f, 0, 1, 1)')
						if not slumpo then
							dm_aux3c:aux(60)
						else
							dm_aux3c:aux(50)
						end
						
						dm_trsp3:aux(0)
						dm_trsp3:linear(dm_beat*4)
						dm_trsp3:aux(1)
						if slumpo then
							dm_trsp3:tween(dm_beat*10,'outExpo(%f, 0, 1, 1)')
						else
							dm_trsp2:tween(dm_beat*11,'outSine(%f, 0, 1, 1)')
						end
						dm_trsp3:aux(0)
						

					end,true);
					
					m2(78,function()
						dm_aux3:finishtweening()
						dm_aux3:aux(1)
						dm_aux3:tween(dm_beat*17,'inQuad(%f, 0, 1, 1)')
						if not slumpo then
							dm_aux3:aux(60)
						else
							dm_aux3:aux(50)
						end
						
						dm_trsp1:finishtweening()
						dm_trsp1:aux(0)
						dm_trsp1:linear(dm_beat*4)
						dm_trsp1:aux(1)
						if slumpo then
							dm_trsp1:tween(dm_beat*10,'outExpo(%f, 0, 1, 1)')
						else
							dm_trsp1:tween(dm_beat*11,'outSine(%f, 0, 1, 1)')
						end
						dm_trsp1:aux(0)
						

					end,true);
					
					m2(79,function()
						dm_faux:tween(dm_beat*2,'outQuint(%f, 0, 1, 1)')
						dm_faux:aux(-1)
					
					end,true);
					
					m2(81,function()
						dm_faux:tween(dm_beat*8,'outBack(%f, 0, 1, 1)')
						dm_faux:aux(.1)
					
					end,true);
					
					m2(82,function()
						dm_aux3b:finishtweening()
						dm_aux3b:aux(1)
						dm_aux3b:tween(dm_beat*17,'inQuad(%f, 0, 1, 1)')
						dm_aux3b:aux(20)
						
						dm_trsp2:finishtweening()
						dm_trsp2:aux(0)
						dm_trsp2:linear(dm_beat*4)
						dm_trsp2:aux(1)
						if slumpo then
							dm_trsp2:tween(dm_beat*10,'outExpo(%f, 0, 1, 1)')
						else
							dm_trsp2:tween(dm_beat*11,'outSine(%f, 0, 1, 1)')
						end
						dm_trsp2:aux(1)
						

					end,true);
					
					m2(84,function()
						dm_tanaux:finishtweening()
						dm_tanaux:aux(0)
						dm_tanaux:tween(dm_beat*8,'inQuad(%f, 0, 1, 1)')
						dm_tanaux:aux(.02)
						

					end,true);
					
					m2(96,function()
						dm_aux3b:stoptweening()
						dm_aux3b:tween(dm_beat*4,'outSine(%f, 0, 1, 1)')
						dm_aux3b:aux(2)
						
						dm_trsp2:stoptweening()
						dm_trsp2:tween(dm_beat*4,'outSine(%f, 0, 1, 1)')
						dm_trsp2:aux(1)
					end,true);
					
					
					m2(100,function()
						dm_faux:stoptweening()
						dm_faux:tween(dm_beat*30,'outSine(%f, 0, 1, 1)')
						dm_faux:aux(-.5)
					
					end,true);
					
					for i=0,28,2 do
							local harzalipsi=1
							local auxdir=1
						if i+101<108 then
							harzalipsi=i;
						else
							harzalipsi=8-i*.5;
							auxdir=-1
						end
						m2(i+101,function()
						
							
							dm_aux4b:aux(0)
							dm_aux4b:tween(dm_beat*1,'outBack(%f, 0, 1, 1)')
							dm_aux4b:aux(auxdir)
							
							dm_aux3b:tween(dm_beat*1,'outSine(%f, 0, 1, 1)')
							dm_aux3b:aux(2+0)
							dm_aux4c:tween(dm_beat*1,'outSine(%f, 0, 1, 1)')
							dm_aux4c:aux(1+0)
						end,true);
					
					end
					
					
					m2(107.5,function()
						dm_tanaux:tween(dm_beat,'inQuad(%f, 0, 1, 1)')
						dm_tanaux:aux(-.02)
						
						if not slumpo then
							dm_sinaux:tween(dm_beat*0.1,'outBack(%f, 0, 1, 1)')
							dm_sinaux:aux(1)
							dm_sinaux:tween(dm_beat*4,'outBack(%f, 0, 1, 1)')
							dm_sinaux:aux(.02)
						else
							dm_sinaux:tween(dm_beat*0.1,'outBack(%f, 0, 1, 1)')
							dm_sinaux:aux(.2)
							dm_sinaux:tween(dm_beat*4,'outBack(%f, 0, 1, 1)')
							dm_sinaux:aux(.01)
						end
						
					end,true);
					--[[
					m2(83,function()
						dm_aux3c:stoptweening()
						dm_aux3c:tween(dm_beat*6,'outBack(%f, 0, 1, 1)')
						dm_aux3c:aux(2)
						
						dm_trsp3:stoptweening()
						dm_trsp3:tween(dm_beat*8,'outSine(%f, 0, 1, 1)')
						dm_trsp3:aux(1)
					end,true);
					--]]

				m2(127,function()
						dm_tanaux:tween(dm_beat*4,'inQuad(%f, 0, 1, 1)')
						dm_tanaux:aux(0)
					end,true);
				m2(124,function()
					dm_prx1:decelerate(2)
					dm_prx1:zoom(.5)
					
				end,true);
				
				m2(130,function()
					dm_prx2:decelerate(2)
					dm_prx2:zoom(.5)
					dm_wallL:xy(scx-900,scy)
					dm_wallL:tween(dm_beat*4,'outBack(%f, 0, 1, 1)')
					dm_wallL:x(scx-500)
					dm_wallL:hidden(0)
					
					dm_wallR:xy(scx+900,scy)
					dm_wallR:tween(dm_beat*4,'outBack(%f, 0, 1, 1)')
					dm_wallR:x(scx+500)
					dm_wallR:hidden(0)
				end,true);
				
				m2(132,function()
					dm_prx2:decelerate(2)
					dm_prx2:zoom(.5)
					dm_flash:diffuse(1,1,1,1)
					dm_flash:xy(scx,scy)
					dm_flash:zoom(sw)
					dm_flash:hidden(0)
					dm_flash:linear(1)
					dm_flash:diffusealpha(0)
					dm_sines:hidden(0)
					
					dm_prx1:zoomz(1)
					dm_faux:stoptweening()
					dm_faux:aux(0)
					dm_loopAft:hidden(1)
					
				end,true);
				
				me(132,1.5,900.1,0,'bumpyx','len',outSine,nil,1)
				me(132,3,-50,-50,'bumpyxsize','len',outSine,nil,4)
				me(132,3,0,900,'bumpyxoffset','len',outSine,nil,4)
				
				
				m2(133-.2,function()
						dm_sinesh:uniform1f('lmult',1.4)
						dm_sinesh:uniform1f('rmult',1.4)
					
				end,true);
				
				for i=1,2 do
					me(130,2,0,-200,'tiny','len',outBounce,i,60)
					me(130,2,628.318531,0,'confusionoffset','len',outSine,i,60)
				end
				
				m2(134-.2,function()
						dm_prx1:tween(dm_beat,'outBack(%f, 0, 1, 1)')
						dm_prx1:x(scx-dm_xoff)
						dm_prx2:hidden(1)
				end,true);
				
				
				
				pvibrate(134-.2)
				
				m2(136-.2,function()
						dm_prx1:stoptweening()
						dm_prx1:tween(dm_beat,'outBack(%f, 0, 1, 1)')
						dm_prx1:x(scx+dm_xoff)
				end,true);
				
				pvibrate(136-.2)
				
				m2(138-.2,function()
						dm_prx1:stoptweening()
						dm_prx1:tween(dm_beat,'outBack(%f, 0, 1, 1)')
						dm_prx1:x(scx-dm_xoff)
				end,true);
				
				pvibrate(138-.2)
				
				m2(139.5-.2,function()
						dm_prx1:stoptweening()
						dm_prx1:tween(dm_beat*2,'inOutSine(%f, 0, 1, 1)')
						dm_prx1:x(scx)
				end,true);
				
				for i=0,2*27,2 do
					--me(133+i,.5,628.318531,0,'confusionoffset','len',outSine)
					if i+133>160 and i+133<164 then
					else
					me(133.00+i,.25,0,800,'tipsy','len',outSine)
					me(133.25+i,4,800,0,'tipsy','len',outElastic,nil,.2)
					end
				end

				for i=1,2 do
					for j=0,1 do
						me(142-.2,1,0,-500,'movex'..j..'','len',outBack,i,4)
						me(142-.2,1,0,500,'movex'..2+j..'','len',outBack,i,4)
						
					end
					
					me(144.5-.2,1,500,0,'movex2','len',outBack,i,4)
					me(145.0-.2,1,-500,0,'movex1','len',outBack,i,4)
					me(145.5-.2,1,500,0,'movex3','len',outBack,i,4)
					me(146.0-.2,1,-500,0,'movex0','len',outBack,i,4)
					me(146.5-.2,.5,0,50,'reverse','len',outBack,i,4)
					me(147.0-.2,5,50,0,'reverse','len',outElastic,i,4)
					
				end
				pvibrate(142-.2)
				pvibrate(174-.2)
				pvibrate(366-.2)
				
				me(148,1.5,900.1,0,'bumpyx','len',outSine,nil,1)
				me(148,3,-50,-50,'bumpyxsize','len',outSine,nil,4)
				me(148,3,0,900,'bumpyxoffset','len',outSine,nil,4)
				
				---
				m2(150-.2,function()
						dm_prx1:tween(dm_beat,'outBack(%f, 0, 1, 1)')
						dm_prx1:x(scx-dm_xoff)
				end,true);
				
				
				pvibrate(150-.2)
				
				m2(152-.2,function()
						dm_prx1:stoptweening()
						dm_prx1:tween(dm_beat,'outBack(%f, 0, 1, 1)')
						dm_prx1:x(scx+dm_xoff)
				end,true);
				
				pvibrate(152-.2)
				
				m2(154-.2,function()
						dm_prx1:stoptweening()
						dm_prx1:tween(dm_beat,'outBack(%f, 0, 1, 1)')
						dm_prx1:x(scx-dm_xoff)
				end,true);
				
				pvibrate(154-.2)
				
				m2(156.5-.2,function()
						dm_prx1:stoptweening()
						dm_prx1:tween(dm_beat*2,'inOutSine(%f, 0, 1, 1)')
						dm_prx1:x(scx)
				end,true);
				
				pvibrate(158-.2)
				
				
				me(164,1.5,900.1,0,'bumpyx','len',outSine,nil,1)
				me(164,3,-50,-50,'bumpyxsize','len',outSine,nil,4)
				me(164,3,0,900,'bumpyxoffset','len',outSine,nil,4)
				
				
				---
				m2(166-.2,function()
						dm_prx1:tween(dm_beat,'outBack(%f, 0, 1, 1)')
						dm_prx1:x(scx-dm_xoff)
				end,true);
				
				pvibrate(166-.2)
				
				m2(168-.2,function()
						dm_prx1:stoptweening()
						dm_prx1:tween(dm_beat,'outBack(%f, 0, 1, 1)')
						dm_prx1:x(scx+dm_xoff)
				end,true);
				
				pvibrate(168-.2)
				
				m2(170-.2,function()
						dm_prx1:stoptweening()
						dm_prx1:tween(dm_beat,'outBack(%f, 0, 1, 1)')
						dm_prx1:x(scx-dm_xoff)
				end,true);
				
				pvibrate(170-.2)
				
				m2(171.5-.2,function()
						dm_prx1:stoptweening()
						dm_prx1:tween(dm_beat*2,'inOutSine(%f, 0, 1, 1)')
						dm_prx1:x(scx)
				end,true);
				

				
				
				for i=1,2 do
					for j=0,1 do
						me(174-.2,1,0,-500,'movex'..j..'','len',outBack,i,4)
						me(174-.2,1,0,500,'movex'..2+j..'','len',outBack,i,4)
						
					end
					
					me(176.5-.2,1,500,0,'movex2','len',outBack,i,4)
					me(177.0-.2,1,-500,0,'movex1','len',outBack,i,4)
					me(177.5-.2,1,500,0,'movex3','len',outBack,i,4)
					me(178.0-.2,1,-500,0,'movex0','len',outBack,i,4)
					me(178.5-.2,.5,0,50,'reverse','len',outBack,i,4)
					me(179.0-.2,5,50,0,'reverse','len',outElastic,i,4)
					
					me(256,5,100,0,'zoom','len',outSine,i,57)
					me(313,5,0,100,'zoom','len',outBounce,i,3)
					
				end
				
				m2(182-.2,function()
						dm_prx1:tween(dm_beat,'outBack(%f, 0, 1, 1)')
						dm_prx1:x(scx-dm_xoff)
				end,true);
				
				pvibrate(182-.2)
				
				m2(184-.2,function()
						dm_prx1:stoptweening()
						dm_prx1:tween(dm_beat,'outBack(%f, 0, 1, 1)')
						dm_prx1:x(scx+dm_xoff)
				end,true);
				
				pvibrate(184-.2)
				
				m2(186-.2,function()
						dm_prx1:stoptweening()
						dm_prx1:tween(dm_beat,'outBack(%f, 0, 1, 1)')
						dm_prx1:x(scx-dm_xoff)
						dm_prx1:sleep(dm_beat)
						dm_prx1:tween(dm_beat*4,'inOutSine(%f, 0, 1, 1)')
						dm_prx1:x(scx)
				end,true);
				
				pvibrate(186-.2)
				
				for pn=1,2 do
					me(188-.2,6,100,0,'zoom','len',outSine,pn,4)
				end
				
				m2(194-.2,function()
						dm_sinesh:uniform1f('lmult',0)
						dm_sinesh:uniform1f('rmult',0)
					
				end,true);
				
				for i=228,244,2 do
					m2(i,function()
						dm_faux:stoptweening()
						dm_faux:tween(dm_beat*.1,'outQuad(%f, 0, 1, 1)')
						dm_faux:aux(-1.0)
						dm_faux:tween(dm_beat*1,'inSine(%f, 0, 1, 1)')
						dm_faux:aux(0)
					
					end,true);
				end
				
				for i=244,255 do
					m2(i,function()
						dm_faux:stoptweening()
						dm_faux:tween(dm_beat*.1,'outQuad(%f, 0, 1, 1)')
						dm_faux:aux(-1.0)
						dm_faux:decelerate(dm_beat*.4)
						dm_faux:aux(0)
					
					end,true);
				end
				

					m2(260,function()
						dm_faux:stoptweening()
						dm_faux:tween(dm_beat*28,'inSine(%f, 0, 1, 1)')
						dm_faux:aux(-.5)
					
					end,true);
					
					m2(289,function()
						--dm_faux:stoptweening()
						dm_faux:tween(dm_beat*4,'outSine(%f, 0, 1, 1)')
						dm_faux:aux(0)
					
					end,true);
				
				for pn=1,2 do
					me(194,4,0,100,'zoom','len',outSine,pn,4)
					me(194,4,0,0,'tiny','len',outSine,pn,4)
				end
				
				m2(194,function()
						dm_prx1:stoptweening()
						dm_prx1:zoom(1)
						
					dm_wallL:tween(dm_beat*4,'outSine(%f, 0, 1, 1)')
					dm_wallL:x(scx-900)
					dm_wallL:hidden(0)
					
					dm_wallR:tween(dm_beat*4,'outSine(%f, 0, 1, 1)')
					dm_wallR:x(scx+900)
					dm_wallR:hidden(0)
						
					for i=1,2 do
						local a=_G['P'..i]
						if a then
						
							a:SetArrowShader(dm_vsine)
							--a:SetHoldShader(dm_vsine)
							a:SetReceptorShader(dm_vsine)
						--]]
							a:rotationz(0)
							a:hidden(1)
						end
					end
				end,true);
				
				for i=293,316,2 do
					m2(i,function()
						for i=1,2 do
							local a=_G['dm_masters'..i]
							if a then
								a:stoptweening()
								a:hidden(0)
								a:decelerate(dm_beat*.5)
								a:addx(-sw)
								a:sleep(0)
								a:addx(sw)
							end
						end
					end,true);
				end
				
				
			--	me(196,.4,0,180,'tiny','len',outSine)
			--	me(196.4,16,180,0,'tiny','len',outSine,nil,4)
				
				
				for i=196,244 do
				me(i-.2,.2,0,200,'pulseinner','len',outSine,nil,.2)
				me(i,1,200,0,'pulseinner','len',outQuint,nil,1)
				
				me(i,1,-dm_quater+dm_quater*i,dm_quater*i,'confusionoffset','len',outQuint,nil,1)
				end
				
				for i=1,2 do
					
					me(244,252,0,150,'tiny','end',outSine,i,1)
					me(244,252,0,-50,'flip','end',outSine,i,1)
					me(244,256,-628.318531*10,0,'confusionoffset','end',outSine,i,1)
					me(252,4,150,0,'tiny','len',outSine,i,1)
					me(252,4,-50,0,'flip','len',outSine,i,1)
					--[[
					me(244+8,8,180,-100,'tiny','len',outSine,i,1)
					me(244+8,8,-50,0,'flip','len',outSine,i,1)
					me(244+14,8,200,-100,'tiny','len',outSine,i,1)
					--]]
				end
				
				for i=1,2 do
					for j=0,1 do
						me(158-.2,1,0,-500,'movex'..j..'','len',outBack,i,4)
						me(158-.2,1,0,500,'movex'..2+j..'','len',outBack,i,4)
						
						me(159.5,5,-500,0,'movex'..j..'','len',outBounce,i,4)
						me(159.5,5,500,0,'movex'..2+j..'','len',outBounce,i,4)
						
						me(159.5,5,-628.318531,0,'confusionoffset'..j..'','len',outBounce)
						me(159.5,5,628.318531,0,'confusionoffset'..2+j..'','len',outBounce)
						
						
					end
					
				
					--[[
					me(144.5-.2,1,500,0,'movex2','len',outBack,i,4)
					me(145.0-.2,1,-500,0,'movex1','len',outBack,i,4)
					me(145.5-.2,1,500,0,'movex3','len',outBack,i,4)
					me(146.0-.2,1,-500,0,'movex0','len',outBack,i,4)
					me(146.5-.2,.5,0,50,'reverse','len',outBack,i,4)
					me(147.0-.2,5,50,0,'reverse','len',outElastic,i,4)
					--]]
					
				end
				
				for i=1,2 do
					me(322,2,0,-200,'tiny','len',outBounce,i,60)
					me(322,2,628.318531,0,'confusionoffset','len',outSine,i,60)
				end
				
				m2(262,function()
					for i=1,2 do
						local a=_G['P'..i]
						if a then
							a:ClearArrowShader()
							a:ClearHoldShader()
							a:ClearReceptorShader()
							end
					end
				end,true);
				
				m2(322,function()
					dm_prx1:decelerate(dm_beat*2)
					dm_prx1:zoom(.5)
					dm_sinesh:uniform1f('lmult',1.4)
					dm_sinesh:uniform1f('rmult',1.4)
					
						dm_wallL:xy(scx-900,scy)
					dm_wallL:tween(dm_beat*4,'outBack(%f, 0, 1, 1)')
					dm_wallL:x(scx-500)
					dm_wallL:hidden(0)
					
					dm_wallR:xy(scx+900,scy)
					dm_wallR:tween(dm_beat*4,'outBack(%f, 0, 1, 1)')
					dm_wallR:x(scx+500)
					dm_wallR:hidden(0)
				end,true);
				
				-------------------------------------------------
				-------------------------------------------------
				-------------------------------------------------
				-------------------------------------------------
				-------------------------------------------------
				-------------------------------------------------
				-------------------------------------------------
				
				m2(192+134-.2,function()
						dm_prx1:tween(dm_beat,'outBack(%f, 0, 1, 1)')
						dm_prx1:x(scx-dm_xoff)
						dm_wall:uniform1f('gravity',2)
						for i=1,5 do
							_G['dm_arrow'..i]:sleep(i*0.01)
							_G['dm_arrow'..i]:tween(dm_beat*4,'inQuad(%f, 0, 1, 1)')
							_G['dm_arrow'..i]:y(400)
							_G['dm_arrows'..i]:sleep(.1+i*0.01)
							_G['dm_arrows'..i]:diffusealpha(.1)
							_G['dm_arrows'..i]:tween(dm_beat*4,'inQuad(%f, 0, 1, 1)')
							_G['dm_arrows'..i]:rotationz(360*4)
							
						end
				end,true);
				
				pvibrate(192+134-.2)
				
				m2(192+136-.2,function()
						dm_prx1:stoptweening()
						dm_prx1:tween(dm_beat,'outBack(%f, 0, 1, 1)')
						dm_prx1:x(scx+dm_xoff)
						
						for i=1,5 do
							_G['dm_arrow'..5+i]:sleep(i*0.01)
							_G['dm_arrow'..5+i]:tween(dm_beat*4,'inQuad(%f, 0, 1, 1)')
							_G['dm_arrow'..5+i]:y(400)
							_G['dm_arrows'..5+i]:sleep(.1+i*0.01)
							_G['dm_arrows'..5+i]:diffusealpha(.1)
							_G['dm_arrows'..5+i]:tween(dm_beat*4,'inQuad(%f, 0, 1, 1)')
							_G['dm_arrows'..5+i]:rotationz(360*4)
							
						end
				end,true);
				
				pvibrate(192+136-.2)
				
				m2(192+138-.2,function()
						dm_prx1:stoptweening()
						dm_prx1:tween(dm_beat,'outBack(%f, 0, 1, 1)')
						dm_prx1:x(scx-dm_xoff)
						
						for i=1,5 do
							_G['dm_arrow'..10+i]:sleep(i*0.01)
							_G['dm_arrow'..10+i]:tween(dm_beat*4,'inQuad(%f, 0, 1, 1)')
							_G['dm_arrow'..10+i]:y(400)
							_G['dm_arrows'..10+i]:sleep(.1+i*0.01)
							_G['dm_arrows'..10+i]:diffusealpha(.1)
							_G['dm_arrows'..10+i]:tween(dm_beat*4,'inQuad(%f, 0, 1, 1)')
							_G['dm_arrows'..10+i]:rotationz(360*4)
							
						end
				end,true);
				
				pvibrate(192+138-.2)
				
				m2(192+139.5-.2,function()
						dm_prx1:stoptweening()
						dm_prx1:tween(dm_beat*2,'inOutSine(%f, 0, 1, 1)')
						dm_prx1:x(scx)
				end,true);
				
				m2(192+142-.2,function()
						
						for i=1,5 do
							_G['dm_arrow'..15+i]:sleep(i*0.01)
							_G['dm_arrow'..15+i]:tween(dm_beat*4,'inQuad(%f, 0, 1, 1)')
							_G['dm_arrow'..15+i]:y(400)
							_G['dm_arrows'..15+i]:sleep(.1+i*0.01)
							_G['dm_arrows'..15+i]:diffusealpha(.1)
							_G['dm_arrows'..15+i]:tween(dm_beat*4,'inQuad(%f, 0, 1, 1)')
							_G['dm_arrows'..15+i]:rotationz(360*4)
							
						end
				end,true);
				
				for i=0,2*27,2 do
					--me(192+133+i,.5,628.318531,0,'confusionoffset','len',outSine)
					if i+133>160 and i+133<164 then
					else
					me(192+133.00+i,.25,0,600,'tipsy','len',outSine)
					me(192+133.25+i,1,600,0,'tipsy','len',outBack,nil,.2)
					end
				end

				for i=1,2 do
					for j=0,1 do
						me(192+142-.2,1,0,-500,'movex'..j..'','len',outBack,i,4)
						me(192+142-.2,1,0,500,'movex'..2+j..'','len',outBack,i,4)
						
					end
					
					me(192+144.5-.2,1,500,0,'movex2','len',outBack,i,4)
					me(192+145.0-.2,1,-500,0,'movex1','len',outBack,i,4)
					me(192+145.5-.2,1,500,0,'movex3','len',outBack,i,4)
					me(192+146.0-.2,1,-500,0,'movex0','len',outBack,i,4)
					me(192+146.5-.2,.5,0,50,'reverse','len',outBack,i,4)
					me(192+147.0-.2,5,50,0,'reverse','len',outElastic,i,4)
					
				end
				pvibrate(192+142-.2)
				
				---
				m2(192+150-.2,function()
						dm_prx1:tween(dm_beat,'outBack(%f, 0, 1, 1)')
						dm_prx1:x(scx-dm_xoff)
						
						for i=1,5 do
							_G['dm_arrow'..20+i]:sleep(i*0.01)
							_G['dm_arrow'..20+i]:tween(dm_beat*4,'inQuad(%f, 0, 1, 1)')
							_G['dm_arrow'..20+i]:y(400)
							_G['dm_arrows'..20+i]:sleep(.1+i*0.01)
							_G['dm_arrows'..20+i]:diffusealpha(.1)
							_G['dm_arrows'..20+i]:tween(dm_beat*4,'inQuad(%f, 0, 1, 1)')
							_G['dm_arrows'..20+i]:rotationz(360*4)
							
						end
				end,true);
				
				pvibrate(192+150-.2)
				
				m2(192+152-.2,function()
						dm_prx1:stoptweening()
						dm_prx1:tween(dm_beat,'outBack(%f, 0, 1, 1)')
						dm_prx1:x(scx+dm_xoff)
						
						for i=1,5 do
							_G['dm_arrow'..25+i]:sleep(i*0.01)
							_G['dm_arrow'..25+i]:tween(dm_beat*4,'inQuad(%f, 0, 1, 1)')
							_G['dm_arrow'..25+i]:y(400)
							_G['dm_arrows'..25+i]:sleep(.1+i*0.01)
							_G['dm_arrows'..25+i]:diffusealpha(.1)
							_G['dm_arrows'..25+i]:tween(dm_beat*4,'inQuad(%f, 0, 1, 1)')
							_G['dm_arrows'..25+i]:rotationz(360*4)
							
						end
				end,true);
				
				pvibrate(192+152-.2)
				
				m2(192+154-.2,function()
						dm_prx1:stoptweening()
						dm_prx1:tween(dm_beat,'outBack(%f, 0, 1, 1)')
						dm_prx1:x(scx-dm_xoff)
						
						for i=1,5 do
							_G['dm_arrow'..30+i]:sleep(i*0.01)
							_G['dm_arrow'..30+i]:tween(dm_beat*4,'inQuad(%f, 0, 1, 1)')
							_G['dm_arrow'..30+i]:y(400)
							_G['dm_arrows'..30+i]:sleep(.1+i*0.01)
							_G['dm_arrows'..30+i]:diffusealpha(.1)
							_G['dm_arrows'..30+i]:tween(dm_beat*4,'inQuad(%f, 0, 1, 1)')
							_G['dm_arrows'..30+i]:rotationz(360*4)
							
						end
				end,true);
				
				pvibrate(192+154-.2)
				
				m2(350-.2,function()
						
						for i=1,5 do
							_G['dm_arrow'..35+i]:sleep(i*0.01)
							_G['dm_arrow'..35+i]:tween(dm_beat*4,'inQuad(%f, 0, 1, 1)')
							_G['dm_arrow'..35+i]:y(400)
							_G['dm_arrows'..35+i]:sleep(.1+i*0.01)
							_G['dm_arrows'..35+i]:diffusealpha(.1)
							_G['dm_arrows'..35+i]:tween(dm_beat*4,'inQuad(%f, 0, 1, 1)')
							_G['dm_arrows'..35+i]:rotationz(360*4)
							
						end
				end,true);
				
				m2(192+156.5-.2,function()
						dm_prx1:stoptweening()
						dm_prx1:tween(dm_beat*2,'inOutSine(%f, 0, 1, 1)')
						dm_prx1:x(scx)
				end,true);
				
				pvibrate(192+158-.2)
				
				---
				m2(192+166-.2,function()
						dm_prx1:tween(dm_beat,'outBack(%f, 0, 1, 1)')
						dm_prx1:x(scx-dm_xoff)
						
						for i=1,5 do
							_G['dm_arrow'..40+i]:sleep(i*0.01)
							_G['dm_arrow'..40+i]:tween(dm_beat*4,'inQuad(%f, 0, 1, 1)')
							_G['dm_arrow'..40+i]:y(400)
							_G['dm_arrows'..40+i]:sleep(.1+i*0.01)
							_G['dm_arrows'..40+i]:diffusealpha(.1)
							_G['dm_arrows'..40+i]:tween(dm_beat*4,'inQuad(%f, 0, 1, 1)')
							_G['dm_arrows'..40+i]:rotationz(360*4)
							
						end
				end,true);
				
				pvibrate(192+166-.2)
				
				m2(192+168-.2,function()
						dm_prx1:stoptweening()
						dm_prx1:tween(dm_beat,'outBack(%f, 0, 1, 1)')
						dm_prx1:x(scx+dm_xoff)
						
						for i=1,5 do
							_G['dm_arrow'..45+i]:sleep(i*0.01)
							_G['dm_arrow'..45+i]:tween(dm_beat*4,'inQuad(%f, 0, 1, 1)')
							_G['dm_arrow'..45+i]:y(400)
							_G['dm_arrows'..45+i]:sleep(.1+i*0.01)
							_G['dm_arrows'..45+i]:diffusealpha(.1)
							_G['dm_arrows'..45+i]:tween(dm_beat*4,'inQuad(%f, 0, 1, 1)')
							_G['dm_arrows'..45+i]:rotationz(360*4)
							
						end
				end,true);
				
				pvibrate(192+168-.2)
				
				m2(192+170-.2,function()
						dm_prx1:stoptweening()
						dm_prx1:tween(dm_beat,'outBack(%f, 0, 1, 1)')
						dm_prx1:x(scx-dm_xoff)
				end,true);
				
				pvibrate(192+170-.2)
				
				m2(192+171.5-.2,function()
						dm_prx1:stoptweening()
						dm_prx1:tween(dm_beat*2,'inOutSine(%f, 0, 1, 1)')
						dm_prx1:x(scx)
				end,true);
				
				
				for i=1,2 do
					for j=0,1 do
						me(192+174-.2,1,0,-500,'movex'..j..'','len',outBack,i,4)
						me(192+174-.2,1,0,500,'movex'..2+j..'','len',outBack,i,4)
						
					end
					
					me(192+176.5-.2,1,500,0,'movex2','len',outBack,i,4)
					me(192+177.0-.2,1,-500,0,'movex1','len',outBack,i,4)
					me(192+177.5-.2,1,500,0,'movex3','len',outBack,i,4)
					me(192+178.0-.2,1,-500,0,'movex0','len',outBack,i,4)
					me(192+178.5-.2,.5,0,50,'reverse','len',outBack,i,4)
					me(192+179.0-.2,5,50,0,'reverse','len',outElastic,i,4)
					
					me(192+256,5,100,0,'zoom','len',outSine,i,57)
					me(192+313,5,0,100,'zoom','len',outBounce,i,3)
					
				end
				
				
				m2(192+188-.2,function()
						dm_sinesh:uniform1f('lmult',0)
						dm_sinesh:uniform1f('rmult',0)
					
				end,true);
				
				
				----
				m2(374-.2,function()
						dm_prx1:tween(dm_beat,'outBack(%f, 0, 1, 1)')
						dm_prx1:x(scx-dm_xoff)
						
						for i=1,5 do
							_G['dm_arrow'..40+i]:sleep(i*0.01)
							_G['dm_arrow'..40+i]:tween(dm_beat*4,'inQuad(%f, 0, 1, 1)')
							_G['dm_arrow'..40+i]:y(400)
							_G['dm_arrows'..40+i]:sleep(.1+i*0.01)
							_G['dm_arrows'..40+i]:diffusealpha(.1)
							_G['dm_arrows'..40+i]:tween(dm_beat*4,'inQuad(%f, 0, 1, 1)')
							_G['dm_arrows'..40+i]:rotationz(360*4)
							
						end
				end,true);
				
				pvibrate(374-.2)
				
				m2(376-.2,function()
						dm_prx1:stoptweening()
						dm_prx1:tween(dm_beat,'outBack(%f, 0, 1, 1)')
						dm_prx1:x(scx+dm_xoff)
						
						for i=1,5 do
							_G['dm_arrow'..45+i]:sleep(i*0.01)
							_G['dm_arrow'..45+i]:tween(dm_beat*4,'inQuad(%f, 0, 1, 1)')
							_G['dm_arrow'..45+i]:y(400)
							_G['dm_arrows'..45+i]:sleep(.1+i*0.01)
							_G['dm_arrows'..45+i]:diffusealpha(.1)
							_G['dm_arrows'..45+i]:tween(dm_beat*4,'inQuad(%f, 0, 1, 1)')
							_G['dm_arrows'..45+i]:rotationz(360*4)
							
						end
				end,true);
				
				pvibrate(376-.2)
				
				m2(378-.2,function()
						dm_prx1:stoptweening()
						dm_prx1:tween(dm_beat,'outBack(%f, 0, 1, 1)')
						dm_prx1:x(scx-dm_xoff)
				end,true);
				
				pvibrate(378-.2)
				
				m2(379-.2,function()
						dm_prx1:stoptweening()
						dm_prx1:tween(dm_beat*2,'inOutSine(%f, 0, 1, 1)')
						dm_prx1:x(scx)
						dm_prx1:zoomz(1)
						dm_prx1:zoom(.5)
						dm_prx1Fov:fov(70)
						
						dm_wallL:tween(dm_beat*4,'outSine(%f, 0, 1, 1)')
						dm_wallL:x(scx-900)
						dm_wallL:hidden(0)
					
						dm_wallR:tween(dm_beat*4,'outSine(%f, 0, 1, 1)')
						dm_wallR:x(scx+900)
						dm_wallR:hidden(0)
						
				end,true);
				
				dm_wrap(326,0)
				dm_wrap(328,1)
				dm_wrap(330,0)
				
				dm_wrap(342,0)
				dm_wrap(344,1)
				dm_wrap(346,0)
				
				dm_wrap(358,0)
				dm_wrap(360,1)
				dm_wrap(362,0)
				
				dm_wrap(374,0)
				dm_wrap(376,1)
				dm_wrap(378,0)
				
				me(324,1.5,900.1,0,'bumpyx','len',outSine,nil,1)
				me(324,3,-50,-50,'bumpyxsize','len',outSine,nil,4)
				me(324,3,0,900,'bumpyxoffset','len',outSine,nil,4)
				
				me(340,1.5,900.1,0,'bumpyx','len',outSine,nil,1)
				me(340,3,-50,-50,'bumpyxsize','len',outSine,nil,4)
				me(340,3,0,900,'bumpyxoffset','len',outSine,nil,4)
				
				me(356,1.5,900.1,0,'bumpyx','len',outSine,nil,1)
				me(356,3,-50,-50,'bumpyxsize','len',outSine,nil,4)
				me(356,3,0,900,'bumpyxoffset','len',outSine,nil,4)
				
				for i=1,2 do
					me(379,2,100,0,'zoom','len',outSine,i,4)
					me(381,1,50,50,'reverse','len',outSine,i,40)
					me(381,1,100,100,'zoom','len',outSine,i,40)
					me(381,4,50,50,'flip','len',outSine,i,40)
					me(381,4,250,250,'arrowcull','len',outSine,i,40)
					me(381,4,0,0,'tiny','len',outSine,i,40)
					me(381,4,10000,10000,'movex1','len',outSine,i,40)
					me(381,4,10000,10000,'movex2','len',outSine,i,40)
					me(381,4,10000,10000,'movex3','len',outSine,i,40)
					me(381,4,100,0,'dark','len',outSine,i,40)
					me(381,20,10000,10000,'bumpy','len',outSine,i,40)
					me(381,140,0.0,0.33,'xmod','len',outBack,i,40)
					me(381,8,10000,10000,'roll','len',outQuint,i,40)
					me(381,8,100,100,'dizzy','len',outQuint,i,40)
					me(382,1,0,80,'stealth','len',outSine,i,40)
					me(381,8,0,-50,'bumpyx','len',outQuart,i,40)
					me(381,8,0,0,'bumpyxoffset','len',outQuart,i,40)
				end
				
				for i=1,2 do
					for j=0,1 do
						me(192+158-.2,1,0,-500,'movex'..j..'','len',outBack,i,4)
						me(192+158-.2,1,0,500,'movex'..2+j..'','len',outBack,i,4)
						
						me(192+159.5,5,-500,0,'movex'..j..'','len',outBounce,i,4)
						me(192+159.5,5,500,0,'movex'..2+j..'','len',outBounce,i,4)
						
						me(192+159.5,5,-628.318531,0,'confusionoffset'..j..'','len',outBounce)
						me(192+159.5,5,628.318531,0,'confusionoffset'..2+j..'','len',outBounce)
						
					end
				end
				mod_perframes = {
					
				}
				
				function mpf(s,e,f)
					table.insert(mod_perframes,{s,e,f})
				end
				
				
				
				
				
				
				
				
				--bg shenanigan
				
				m2(36,function()
					
					char_kar:basezoomx(.8)
					char_kar:basezoomy(.8)
					char_kar:xy(scx,scy)
					char_kar:playcommand('Spawn')
					
				end)
				
				m2(39,function()
					
					char_kar:basezoomx(.8)
					char_kar:basezoomy(.8)
					char_kar:xy(scx,scy)
					char_kar:playcommand('SpawnQ')
					
				end,true)
				
				m2(60,function()
					
					char_kar:playcommand('Cast')
					
				end)
				
				for i=0,3 do
					local f = 1
					m2(132+16*i,function() char_kar:playcommand('Idle') end)
					m2(134+16*i,function() char_kar:playcommand('Punch') char_kar:zoomx(1*f) end)
					m2(136+16*i,function() char_kar:playcommand('Punch') char_kar:zoomx(-1*f) end)
					m2(138+16*i,function() char_kar:playcommand('Punch') char_kar:zoomx(1*f) end)
					if i < 3 then
						m2(139.5+16*i,function() char_kar:playcommand('Idle') char_kar:zoomx(1) end)
						m2(142+16*i,function() char_kar:playcommand('Push') end)
						m2(144+16*i,function() char_kar:playcommand('Cast2') end)
					end
				end
				
				m2(187.5,function()
					
					char_kar:playcommand('Idle')
					char_kar:playcommand('Hide')
					
				end)
				
				m2(252,function()
					
					char_kar:playcommand('Idle3')
					char_kar:playcommand('Spawn')
					
				end)
				
				m2(256,function()
					
					char_kar:playcommand('Cast')
					
				end)
				
				m2(288,function()
					
					char_kar:playcommand('Cast')
					char_kar:playcommand('Raise')
					
				end)
				
				m2(316,function()
					
					char_kar:playcommand('Idle2')
					
				end)
				
				m2(322,function()
					
					char_kar:playcommand('Cast2')
					
				end)
				
				for i=0,3 do
					local f = 1
					m2(192+132+16*i,function() char_kar:playcommand('Idle') end)
					m2(192+134+16*i,function() char_kar:playcommand('Punch') char_kar:zoomx(1*f) end)
					m2(192+136+16*i,function() char_kar:playcommand('Punch') char_kar:zoomx(-1*f) end)
					m2(192+138+16*i,function() char_kar:playcommand('Punch') char_kar:zoomx(1*f) end)
					if i < 3 then
						m2(192+139.5+16*i,function() char_kar:playcommand('Idle') char_kar:zoomx(1) end)
						m2(192+142+16*i,function() char_kar:playcommand('Push') end)
						m2(192+144+16*i,function() char_kar:playcommand('Cast2') end)
					end
				end
				
				m2(379.5,function()
					
					char_kar:playcommand('Idle')
					char_kar:playcommand('Hide')
					
				end)
				
				m2(70,'KillBG',true)
				m2(196,'DamnSon',true)
				m2(256,'DamnOff',true)
				m2(379.5,'Damn2',true)
				m2(388,'Damn2Off',true)
				
				m(379,999,'*10000 hidemines, *10000 disablemines',e)
				
				--me(388,2,0,200,'tinyy0',l,inExpo,nil,99)
				--me(388,2,0,-100,'tinyx0',l,inExpo,nil,99)
				
				me(388,2,0,-200,'tiny0',l,outCubic,nil,99)
				
				dark_flicker = 1
				mpf(388,400,function(beat)
					
					local amp = 0
					if beat >= 388 and beat < 390 then
						amp = outCubic(beat-388,0,1,2)
					elseif beat >= 390 then
						amp = 1
					end
					
					local co = 90*dark_flicker*amp
					local movey = 100*amp*dark_flicker
					
					mod_do('*10000 '..(100*math.rad(co))..' confusionoffset0, *10000 '..movey..' movey0')
					
					dark_flicker = dark_flicker*-1
					
				end)
				
				m2(389,function()
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:zoom(0)
						end
					end
				end,true)
				
				
				m2(0,function()
					
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							dm_banger = a:GetNoteData(260,316)
							break;
						end
					end
					
				end,true)
				
				
				
	---------------------------------------------------------------------------------------
	----------------------Sort the actions table-------------------------------------------
	---------------------------------------------------------------------------------------
				
				function modtable_compare(a,b)
					return a[1] < b[1]
				end
				
				if table.getn(mod_actions) > 1 then
					table.sort(mod_actions, modtable_compare)
				end
				
				
				self:queuecommand('Update');
				
			else
				
				SCREENMAN:SystemMessage('NotITG version Too Old! Needs v3.2')
			
			end
			
		end"
		
		UpdateCommand="%function(self)

			if GAMESTATE:GetSongBeat()>=0 and not checked then
			
				local ThingsToGrab = {'LifeP1','LifeP2','ScoreP1','ScoreP2','BPMDisplay','LifeFrame','ScoreFrame',
										'Lyrics','SongBackground','SongForeground','Overlay','Underlay'}
				local ThingsToHide = {'LifeP1','LifeP2','BPMDisplay','LifeFrame','ScoreFrame','Overlay','Underlay'}
				
				for i,v in ipairs(ThingsToGrab) do
					_G[v] = SCREENMAN:GetTopScreen():GetChild(v) or nil
				end
				
				for i,v in ipairs(ThingsToHide) do
					if _G[v] then _G[v]:hidden(1) end
				end
				
				table.insert(mod_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP1'));
				table.insert(mod_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP2'));
				
				--name players, judgment and combo
				for pn=1,2 do
					_G['P'..pn] = SCREENMAN:GetTopScreen():GetChild('PlayerP'..pn) or nil;
					if _G['P'..pn] then
						_G['jud'..pn] = _G['P'..pn]:GetChild('Judgment');
						_G['com'..pn] = _G['P'..pn]:GetChild('Combo');
					end
					
					if _G['ScoreP'..pn] then 
						_G['ScoreP'..pn]:zoom(0)
					end
				end
				
				screen = SCREENMAN:GetTopScreen();
				checked = true; --let this only run once
				
			end

			local beat = GAMESTATE:GetSongBeat()
			
			
---------------------------------------------------------------------------------------
----------------------Begin table handlers---------------------------------------------
---------------------------------------------------------------------------------------
			
			disable = false;
			if disable ~= true and beat > mod_firstSeenBeat+0.1 and checked then
				
				-----------------------
				-- Player mod resets --
				-----------------------
				for i=1,2 do
					mod_do('clearall',i)
				end
				
				------------------------------------------------------------------------------
				-- custom mod reader by TaroNuke edited by WinDEU and re-stolen by TaroNuke --
				------------------------------------------------------------------------------
				for i,v in pairs(mods) do
					if v and table.getn(v) > 3 and v[1] and v[2] and v[3] and v[4] then
						if beat >=v[1] then
							if (v[4] == 'len' and beat <=v[1]+v[2]) or (v[4] == 'end' and beat <=v[2]) then
								if table.getn(v) == 5 then
									mod_do(v[3],v[5]);
								else
									mod_do(v[3]);
								end
							end
						end
					else
						v[1] = 0;
						v[2] = 0;
						v[3] = '';
						v[4] = 'error';
						SCREENMAN:SystemMessage('Bad mod in beat-based table (line '..i..')');
					end
				end
				
				-----------------------------------------------------------------------------------------------------
				-- WinDEU's time-based len/end version of the #swag custom mod reader #teamproofofconcept (c) 2015 --
				-----------------------------------------------------------------------------------------------------
				for i,v in pairs(mods2) do
					if v and table.getn(v) > 3 and v[1] and v[2] and v[3] and v[4] then
						if mod_time >=v[1] then
							if (v[4] == 'len' and mod_time <=v[1]+v[2]) or (v[4] == 'end' and mod_time <=v[2]) then
								if table.getn(v) == 5 then
									mod_do(v[3],v[5]);
								else
									mod_do(v[3]);
								end
							end
						end
					else
						v[1] = 0;
						v[2] = 0;
						v[3] = 'error';
						v[4] = 'error';
						SCREENMAN:SystemMessage('Bad mod in time-based table (line '..i..')');
					end
				end
				
				--------------------------------------------------------------------------------------
				-- i dont know who this reader is but he looks like he is made out of EASE HAHAHAHA --
				-- original code by exschwasion, bastardized by taro for cmod support and less 'if' --
				--------------------------------------------------------------------------------------
				for i,v in pairs(mods_ease) do
					if v and table.getn(v) > 6 and v[1] and v[2] and v[3] and v[4] and v[5] and v[6] and v[7] then
						if beat >=v[1] then
							if (v[6] == 'len' and beat <=v[1]+v[2]) or (v[6] == 'end' and beat <=v[2]) then
								
								local duration = v[2];
								if v[6] == 'end' then duration = v[2] - v[1] end
								local curtime = beat - v[1]
								local diff = v[4] - v[3]
								local startstrength = v[3]
								local curve = v[7]
								local mod = v[5]
								
								local strength = curve(curtime, startstrength, diff, duration, v[10], v[11]) --extra parameters for back and elastic eases :eyes:
								
								local modstr = v[5] == 'xmod' and strength..'x' or (v[5] == 'cmod' and 'C'..strength or strength..' '..v[5])
								mod_do('*10000 '..modstr,v[8]);
								
							elseif (v[9] and ((v[6] == 'len' and beat <=v[1]+v[2]+v[9]) or (v[6] == 'end' and beat <=v[9]))) then
							
								local strength = v[4]
								
								local modstr = v[5] == 'xmod' and strength..'x' or (v[5] == 'cmod' and 'C'..strength or strength..' '..v[5])
								mod_do('*10000 '..modstr,v[8]);
								
							end
						end
					else
						SCREENMAN:SystemMessage('Bad mod in beat-based ease table (line '..i..')');
					end
				end
				
				--------------------
				-- Perframe stuff --
				--------------------
				
				----------------------------------------
				-- HBLBHCBLBJGBHL DO THIS EVERY FRAME --
				----------------------------------------
				
				if table.getn(mod_perframes)>0 then
					for i=1,table.getn(mod_perframes) do
						local a = mod_perframes[i]
						if beat > a[1] and beat < a[2] then
							a[3](beat);
						end
					end
				end
				
				---------------------------------------
				-- ACTION RPGS AINT GOT SHIT ON THIS --
				---------------------------------------
				while curaction<=table.getn(mod_actions) and GAMESTATE:GetSongBeat()>=mod_actions[curaction][1] do
					if mod_actions[curaction][3] or GAMESTATE:GetSongBeat() < mod_actions[curaction][1]+2 then
						if type(mod_actions[curaction][2]) == 'function' then
							mod_actions[curaction][2]()
						elseif type(mod_actions[curaction][2]) == 'string' then
							MESSAGEMAN:Broadcast(mod_actions[curaction][2]);
						end
					end
					curaction = curaction+1;
				end
				
			end
			
			-------------------------------
			-----------PUURO'S BS----------
			-------------------------------
			--[[
			dm_curNote=1
			dm_quant=1
			--]]
			
			if beat>=dm_banger[dm_curNote][1]-4 and dm_curNote<table.getn(dm_banger) then
					
				local aBeat=dm_banger[dm_curNote][1]
				
				dm_dir=dm_banger[dm_curNote][2]
				
				if dm_dir==0 then
					dm_nrot=90
					dm_npos=-32-64
				elseif dm_dir==1 then
					dm_nrot=0
					dm_npos=-32
				elseif dm_dir==2 then
					dm_nrot=180
					dm_npos=32
				elseif dm_dir==3 then
					dm_nrot=-90
					dm_npos=32+64
				end
				
				dm_quant=aBeat-math.floor(aBeat);
				
				if dm_quant==0 then
					_G['dm_arrows'..dm_curarr]:tween(dm_beat*1,'outSine(%f, 0, 1, 1)')
					_G['dm_arrows'..dm_curarr]:diffuse(1,0,0,1)
					
				elseif dm_quant>.332 and dm_quant<.334 then
					_G['dm_arrows'..dm_curarr]:tween(dm_beat*1,'outSine(%f, 0, 1, 1)')
					_G['dm_arrows'..dm_curarr]:diffuse(1,0,1,1)
				
				elseif dm_quant==.5 then
					_G['dm_arrows'..dm_curarr]:tween(dm_beat*1,'outSine(%f, 0, 1, 1)')
					_G['dm_arrows'..dm_curarr]:diffuse(0,0,1,1)
				elseif dm_quant>.666 and dm_quant<.668 then
					_G['dm_arrows'..dm_curarr]:tween(dm_beat*1,'outSine(%f, 0, 1, 1)')
					_G['dm_arrows'..dm_curarr]:diffuse(1,0,1,1)
				
				elseif dm_quant==.25 or dm_quant==.75 then
					_G['dm_arrows'..dm_curarr]:tween(dm_beat*1,'outSine(%f, 0, 1, 1)')
					_G['dm_arrows'..dm_curarr]:diffuse(0,1,0,1)
				end
				
				dm_debug:settext(dm_curarr)
				
						_G['dm_arrow'..dm_curarr]:hidden(0)
						_G['dm_arrows'..dm_curarr]:SetShader(dm_wall)
						_G['dm_arrows'..dm_curarr]:hidden(0)
						_G['dm_arrows'..dm_curarr]:ztest(0)
						_G['dm_arrows'..dm_curarr]:zwrite(0)
						_G['dm_arrows'..dm_curarr]:rotationx(0)
						_G['dm_arrows'..dm_curarr]:rotationy(0)
						_G['dm_arrows'..dm_curarr]:rotationz(dm_nrot)
						
						if dm_gravity==0 then
							_G['dm_arrow'..dm_curarr]:xy(dm_npos,-300)
							_G['dm_arrow'..dm_curarr]:tween(dm_beat*4,'inSine(%f, 0, 1, 1)')
							_G['dm_arrow'..dm_curarr]:y(200)
						
							_G['dm_arrow'..dm_curarr]:tween(dm_beat*1,'outSine(%f, 0, 1, 1)')
							_G['dm_arrow'..dm_curarr]:addy(-300)
							_G['dm_arrow'..dm_curarr]:tween(dm_beat*4,'outBounce(%f, 0, 1, 1)')
							_G['dm_arrow'..dm_curarr]:y(200)
						else
							_G['dm_arrow'..dm_curarr]:stoptweening()
							_G['dm_arrow'..dm_curarr]:xy(dm_npos,200)
							_G['dm_arrow'..dm_curarr]:tween(dm_beat*4,'inSine(%f, 0, 1, 1)')
							_G['dm_arrow'..dm_curarr]:y(-200)
						
							_G['dm_arrow'..dm_curarr]:tween(dm_beat*1,'outSine(%f, 0, 1, 1)')
							_G['dm_arrow'..dm_curarr]:addy(200)
							_G['dm_arrow'..dm_curarr]:tween(dm_beat*4,'outBounce(%f, 0, 1, 1)')
							_G['dm_arrow'..dm_curarr]:y(-200+math.sin(dm_curNote*0.2)*40)
						
						end
							
						_G['dm_arrows'..dm_curarr]:tween(dm_beat*3,'outSine(%f, 0, 1, 1)')
						_G['dm_arrows'..dm_curarr]:x(0)
						_G['dm_arrows'..dm_curarr]:sleep(dm_beat*0)
						_G['dm_arrows'..dm_curarr]:tween(dm_beat*5,'outSine(%f, 0, 1, 1)')
						_G['dm_arrows'..dm_curarr]:rotationz(dm_nrot+360)
						_G['dm_arrows'..dm_curarr]:rotationy(360)
						_G['dm_arrows'..dm_curarr]:x(math.sin(dm_curNote)*200)
						
						if dm_gravity==0 then
							_G['dm_arrows'..dm_curarr]:diffuse(1,1,1,.01)
						else
							_G['dm_arrows'..dm_curarr]:diffuse(1,1,1,.01)
						end
						_G['dm_arrows'..dm_curarr]:linear(1)
						--_G['dm_arrows'..dm_curarr]:diffusealpha(0)
				
				if not slumpo then
					if dm_curarr<49 then
						dm_curarr=dm_curarr+1
					else
						dm_curarr=1
						dm_gravity=1
						dm_resetOnce = true
					end
				else
					if dm_curarr<59 or dm_resetOnce then
						dm_curarr=dm_curarr+1
					else
						dm_curarr=1
						dm_gravity=1
						dm_resetOnce = true
					end
				end
				dm_curNote=dm_curNote+1
				
				if dm_curNote==55 and not slumpo or dm_curNote==65 and slumpo then
					dm_wall:uniform1f('gravity',1)
				end
			end
			
			local lipsi=math.ceil(dm_loopValue)-dm_loopValue	
			local lipsi2=math.ceil(dm_loopValueb)-dm_loopValueb	
			local lipsi3=math.ceil(dm_loopValuec)-dm_loopValuec	
			dm_loopValue=dm_loopValue-0.01*dm_aux3:getaux()
			dm_loopValueb=dm_loopValueb-0.01*dm_aux3b:getaux()
			dm_loopValuec=dm_loopValuec-0.01*dm_aux3c:getaux()
			
			if beat>64 and beat<134 then
				dm_loopsh:uniform1f('loopsx',dm_aux3:getaux())
				dm_loopsh:uniform1f('scrollx',0)
				dm_loopsh:uniform1f('libsi',dm_trsp1:getaux())
				
				dm_loopsh2:uniform1f('loopsx',dm_aux3b:getaux())
				dm_loopsh2:uniform1f('loopsy',dm_aux4c:getaux())
				dm_loopsh2:uniform1f('scrollx',dm_aux4b:getaux())
				dm_loopsh2:uniform1f('libsi',dm_trsp2:getaux())
				
				dm_loopsh3:uniform1f('loopsx',dm_aux3c:getaux())
				--dm_loopsh3:uniform1f('scrollx',dm_aux4c:getaux())
				dm_loopsh3:uniform1f('libsi',dm_trsp3:getaux())
				
				dm_loopsh:uniform1f('tansize',dm_tanaux:getaux())
				dm_loopsh2:uniform1f('tansize',dm_tanaux:getaux())
				dm_loopsh3:uniform1f('tansize',dm_tanaux:getaux())
				
				dm_loopsh:uniform1f('sinmult',dm_sinaux:getaux())
				dm_loopsh2:uniform1f('sinmult',dm_sinaux:getaux())
				dm_loopsh3:uniform1f('sinmult',dm_sinaux:getaux())
				
				--dm_loopsh:uniform1f('loopsy',4+math.cos(beat*1)*3)
			end
			
			if beat>1 and beat<134
			or beat>188 and beat<325 then
				dm_mastersh:uniform1f('amt',dm_faux:getaux())
				
			end
			--[[
			if beat>100 then
				dm_sinesh:uniform1f('lmult',dm_aux1:getaux())
				dm_sinesh:uniform1f('rmult',dm_aux2:getaux())
			end --]]
			
			self:sleep(0.02);
			self:queuecommand('Update');

---------------------------------------------------------------------------------------
----------------------END DON'T TOUCH IT KIDDO-----------------------------------------
---------------------------------------------------------------------------------------
			
		end"
		
	/>
	
	
	
	
	
	<!--Handling messages here is still fun and profitable-->
	<CODE Type="Quad" OnCommand="hidden,1"
	InitCommand="%function(self) rb_aux = self end"
	/>
	
	<CODE Type="Quad" OnCommand="hidden,1"
	InitCommand="%function(self) dm_aux1 = self end"
	/>
	
	<CODE Type="Quad" OnCommand="hidden,1"
	InitCommand="%function(self) dm_aux2 = self end"
	/>
	
	
	<CODE Type="Quad" OnCommand="hidden,1"
	InitCommand="%function(self) dm_aux3 = self end"
	/>
	
	<CODE Type="Quad" OnCommand="hidden,1"
	InitCommand="%function(self) dm_aux4 = self end"
	/>
	
	<CODE Type="Quad" OnCommand="hidden,1"
	InitCommand="%function(self) dm_aux3b = self end"
	/>
	
	<CODE Type="Quad" OnCommand="hidden,1"
	InitCommand="%function(self) dm_aux4b = self end"
	/>
	
	<CODE Type="Quad" OnCommand="hidden,1"
	InitCommand="%function(self) dm_aux3c = self end"
	/>
	
	<CODE Type="Quad" OnCommand="hidden,1"
	InitCommand="%function(self) dm_aux4c = self 
	self:aux(1)
	end"
	/>
	
	<CODE Type="Quad" OnCommand="hidden,1"
	InitCommand="%function(self) dm_trsp1 = self 
	self:aux(1)
	end"
	/>
	
	<CODE Type="Quad" OnCommand="hidden,1"
	InitCommand="%function(self) dm_tanaux = self 
	self:aux(0)
	end"
	/>
	
	<CODE Type="Quad" OnCommand="hidden,1"
	InitCommand="%function(self) dm_faux = self 
	self:aux(0)
	end"
	/>
	
	<CODE Type="Quad" OnCommand="hidden,1"
	InitCommand="%function(self) dm_sinaux = self 
	self:aux(0)
	end"
	/>
	
	<CODE Type="Quad" OnCommand="hidden,1"
	InitCommand="%function(self) dm_trsp2 = self 
	
	end"
	/>
	
	<CODE Type="Quad" OnCommand="hidden,1"
	InitCommand="%function(self) dm_trsp3 = self 
	
	end"
	/>
	
	
	
	<!--This is for the time based mod reader-->
	<BitmapText
		Font="Common Normal"
		Text="test"
		OnCommand="x,SCREEN_CENTER_X;y,SCREEN_CENTER_Y;effectclock,music;playcommand,SetTime;hidden,1"
		SetTimeCommand="%function(self) self:settext(self:GetSecsIntoEffect()); mod_time = mod_globaloffset+tonumber(self:GetText()); self:sleep(0.02); self:queuecommand('SetTime'); end"
	/>
	
	<Layer Type="Quad" Var="dm_cover1"
		OnCommand="%function(self)
			self:xy(scx,scy)
			self:diffuse(0,0,0,1)
			self:zoom(sw)
		end"
	/>
	
	
	<Layer File="itg" OnCommand="stretchto,0,0,sw,sh;diffusealpha,0;sleep,240/205;linear,2;diffusealpha,.5;" KillBGMessageCommand="hidden,1" />
	
	<Layer File="black" Frag="oil.frag" OnCommand="stretchto,0,0,sw,sh;diffusealpha,0;diffuseshift;effectperiod,5;effectcolor1,.4,0,.4,1;effectcolor2,.4,0,.6,.8;"
	HideCommand="hidden,1" DamnSonMessageCommand="hidden,0;diffusealpha,0;linear,4;diffusealpha,.4;"
	DamnOffMessageCommand="finishtweening;linear,1;diffusealpha,0;queuecommand,Hide"
	Damn2MessageCommand="finishtweening;hidden,0;diffusealpha,0;linear,8.5*60/205;diffusealpha,.6;"
	Damn2OffMessageCommand="finishtweening;decelerate,.3;diffusealpha,0;queuecommand,Hide" />
	
	<Layer File="chara" />
	
	<Layer Type="ActorFrame" Var="dm_prx1Fov"><children>
	<Layer Type="ActorProxy" Var="dm_prx1"
	OnCommand="%function(self)
		self:sleep(0.1)
		self:xy(scx,scy)
		self:queuecommand('SetMe')
	end"
	SetMeCommand="%function(self)

		
		if P1 and not P2 then
			self:SetTarget(P1:GetChild('NoteField'))
			P1:zoom(0)
		elseif P2 and not P1 then
			self:SetTarget(P2:GetChild('NoteField'))
			P2:zoom(0)
		elseif P1 and P2 then
			self:SetTarget(P1:GetChild('NoteField'))
			P1:zoom(0)
			P2:zoom(0)
		end
	end"
	/>
	</children></Layer>
	
	
	<Layer
		Type="ActorFrameTexture"
		OnCommand="%function(self)
			dm_testAft = self;
			self:SetWidth(DISPLAY:GetDisplayWidth())
			self:SetHeight(DISPLAY:GetDisplayHeight())
			self:EnableDepthBuffer(false)
			self:EnableAlphaBuffer(false)
			self:EnableFloat(false)
			self:EnablePreserveTexture(true)
			self:Create()
			self:hidden(0)
		end"
	/>
	
	<Layer Type="Quad" Var="dm_cover2"
		OnCommand="%function(self)
			self:xy(scx,scy)
			self:diffuse(0,0,0,1)
			self:zoom(sw)
			self:clearzbuffer(1)
		end"
	/>
	
	<Layer Type="ActorProxy" Var="dm_prx2"
	OnCommand="%function(self)
		self:sleep(0.1)
		self:xy(scx,scy)
		self:queuecommand('SetMe')
	end"
	SetMeCommand="%function(self)
		
		if P1 and not P2 then
			self:SetTarget(P1:GetChild('NoteField'))
			P1:zoom(0)
		elseif P2 and not P1 then
			self:SetTarget(P2:GetChild('NoteField'))
			P2:zoom(0)
		elseif P1 and P2 then
			self:SetTarget(P1:GetChild('NoteField'))
			P1:zoom(0)
			P2:zoom(0)
		end
	end"
	/>
	
	<Layer
		Type="ActorFrameTexture"
		OnCommand="%function(self)
			dm_loopAft = self;
			self:SetWidth(DISPLAY:GetDisplayWidth())
			self:SetHeight(DISPLAY:GetDisplayHeight())
			self:EnableDepthBuffer(false)
			self:EnableAlphaBuffer(false)
			self:EnableFloat(false)
			self:EnablePreserveTexture(true)
			self:Create()
			self:hidden(0)
		end"
	/>
	
	<Layer Type="Quad"
		OnCommand="%function(self)
			self:xy(scx,scy)
			self:diffuse(0,0,0,1)
			self:zoom(sw)
		end"
	/>
	
	<Layer
		Type="Sprite"
		Texture="black.png" Var="dm_loop"
		Frag="frag/loop.frag"
		OnCommand="%function(self)
			dm_loopsh=self:GetShader()
			self:basezoomx((SCREEN_WIDTH / DISPLAY:GetDisplayWidth()))
			self:basezoomy(-(SCREEN_HEIGHT / DISPLAY:GetDisplayHeight()))
			self:SetTextureFiltering(true)
			self:hidden(1)
			self:xy(scx,scy)
			self:zoom(1)
			self:diffusealpha(1)
			self:sleep(.1)
			self:queuecommand('SetMe')
			dm_loopsh:uniform1f('loopsx',1)
			dm_loopsh:uniform1f('loopsy',1)
			dm_loopsh:uniform1f('libsi',1)
		end"
		SetMeCommand="%function(self)
			self:SetTexture(dm_loopAft:GetTexture())
			self:hidden(0)
		end"
	/>
	
	<Layer
		Type="Sprite"
		Texture="black.png" Var="dm_loop2"
		Frag="frag/loop.frag"
		OnCommand="%function(self)
			dm_loopsh2=self:GetShader()
			self:basezoomx((SCREEN_WIDTH / DISPLAY:GetDisplayWidth()))
			self:basezoomy(-(SCREEN_HEIGHT / DISPLAY:GetDisplayHeight()))
			self:SetTextureFiltering(true)
			self:hidden(1)
			self:xy(scx,scy)
			self:zoom(1)
			self:diffusealpha(1)
			self:sleep(.1)
			self:queuecommand('SetMe')
			dm_loopsh2:uniform1f('loopsx',1)
			dm_loopsh2:uniform1f('loopsy',1)
			dm_loopsh2:uniform1f('libsi',0)
		end"
		SetMeCommand="%function(self)
			self:SetTexture(dm_loopAft:GetTexture())
			self:hidden(0)
		end"
	/>
	
	<Layer
		Type="Sprite"
		Texture="black.png" Var="dm_loop3"
		Frag="frag/loop.frag"
		OnCommand="%function(self)
			dm_loopsh3=self:GetShader()
			self:basezoomx((SCREEN_WIDTH / DISPLAY:GetDisplayWidth()))
			self:basezoomy(-(SCREEN_HEIGHT / DISPLAY:GetDisplayHeight()))
			self:SetTextureFiltering(true)
			self:hidden(1)
			self:xy(scx,scy)
			self:zoom(1)
			self:diffusealpha(1)
			self:sleep(.1)
			self:queuecommand('SetMe')
			dm_loopsh3:uniform1f('loopsx',1)
			dm_loopsh3:uniform1f('loopsy',1)
			dm_loopsh3:uniform1f('libsi',0)
		end"
		SetMeCommand="%function(self)
			self:SetTexture(dm_loopAft:GetTexture())
			self:hidden(0)
		end"
	/>
	
	<Layer
		Type="Sprite"
		Texture="black.png" Var="dm_sines"
		Frag="frag/sinex.frag"
		OnCommand="%function(self)
			dm_sinesh=self:GetShader()
			self:basezoomx((SCREEN_WIDTH / DISPLAY:GetDisplayWidth()))
			self:basezoomy(-(SCREEN_HEIGHT / DISPLAY:GetDisplayHeight()))
			self:SetTextureFiltering(true)
			self:hidden(1)
			self:xy(scx,scy)
			self:zoom(1)
			self:rotationz(0)
			self:diffusealpha(1)
			self:sleep(.1)
			self:queuecommand('SetMe')
			dm_sinesh:uniform1f('lmult',0)
			dm_sinesh:uniform1f('rmult',0)
		end"
		SetMeCommand="%function(self)
			self:SetTexture(dm_testAft:GetTexture())
			self:hidden(1)
		end"
	/>
	
	<Layer
		Type="Sprite"
		Texture="black.png" Var="dm_startL"
		OnCommand="%function(self)
			self:basezoomx((SCREEN_WIDTH / DISPLAY:GetDisplayWidth()))
			self:basezoomy(-(SCREEN_HEIGHT / DISPLAY:GetDisplayHeight()))
			self:SetTextureFiltering(true)
			self:hidden(1)
			self:xy(scx,scy)
			self:zoom(1)
			self:rotationz(0)
			self:diffusealpha(1)
			self:cropleft(.5)
			self:sleep(.1)
			self:queuecommand('SetMe')
		end"
		SetMeCommand="%function(self)
			self:SetTexture(dm_testAft:GetTexture())
			self:hidden(0)
		end"
	/>
	
	<Layer
		Type="Sprite"
		Texture="black.png" Var="dm_startR"
		OnCommand="%function(self)
			self:basezoomx((SCREEN_WIDTH / DISPLAY:GetDisplayWidth()))
			self:basezoomy(-(SCREEN_HEIGHT / DISPLAY:GetDisplayHeight()))
			self:SetTextureFiltering(true)
			self:hidden(1)
			self:xy(scx,scy)
			self:zoom(1)
			self:rotationz(0)
			self:diffusealpha(1)
			self:cropright(.5)
			self:sleep(.1)
			self:queuecommand('SetMe')
		end"
		SetMeCommand="%function(self)
			self:SetTexture(dm_testAft:GetTexture())
			self:hidden(0)
		end"
	/>
	<Layer File="loop.png" Var="dm_wallL"
	OnCommand="%function(self)
	self:xy(scx-400,scy)
	self:hidden(1)
	end"
	/>
	
	<Layer File="loop.png" Var="dm_wallR"
	OnCommand="%function(self)
	self:xy(scx+400,scy)
	self:hidden(1)
	end"
	/>
	
	<!--- Pool for falling notes --->
	<Layer File="arrowpool.xml" Var="dm_arrows"
	OnCommand="%function(self)
	self:xy(scx,scy)
	self:fov(70)
	end"
	/>
	
	<!-- END pool for falling proxies -->
	
	
	
	<zzzzzzBitmapText
		Font="Common Normal"
		Text=" "
		Var="dm_debug"
		OnCommand="x,SCREEN_CENTER_X;y,SCREEN_CENTER_Y-9999;"
	/>
	
	<Layer
		Type="ActorFrameTexture"
		OnCommand="%function(self)
			dm_masterAft = self;
			self:SetWidth(DISPLAY:GetDisplayWidth())
			self:SetHeight(DISPLAY:GetDisplayHeight())
			self:EnableDepthBuffer(false)
			self:EnableAlphaBuffer(false)
			self:EnableFloat(false)
			self:EnablePreserveTexture(true)
			self:Create()
			self:hidden(0)
		end"
	/>
	
	<Layer Type="Quad" Var="dm_cover1"
		OnCommand="%function(self)
			self:xy(scx,scy)
			self:diffuse(0,0,0,1)
			self:zoom(sw)
		end"
	/>
	
	<Layer
		Type="Sprite"
		Texture="black.png" Var="dm_master"
		Frag="frag/woah.frag"
		OnCommand="%function(self)
			dm_mastersh=self:GetShader()
			self:basezoomx((SCREEN_WIDTH / DISPLAY:GetDisplayWidth()))
			self:basezoomy(-(SCREEN_HEIGHT / DISPLAY:GetDisplayHeight()))
			self:SetTextureFiltering(true)
			self:hidden(1)
			self:xy(scx,scy)
			self:zoom(1)
			self:diffusealpha(1)
			self:sleep(.1)
			self:queuecommand('SetMe')
			dm_mastersh:uniform1f('amt',0)
		end"
		SetMeCommand="%function(self)
			self:SetTexture(dm_masterAft:GetTexture())
			self:hidden(0)
		end"
	/>
	<Layer
		Type="ActorFrameTexture"
		OnCommand="%function(self)
			dm_masterAft2 = self;
			self:SetWidth(DISPLAY:GetDisplayWidth())
			self:SetHeight(DISPLAY:GetDisplayHeight())
			self:EnableDepthBuffer(false)
			self:EnableAlphaBuffer(false)
			self:EnableFloat(false)
			self:EnablePreserveTexture(true)
			self:Create()
			self:hidden(0)
		end"
	/>
	<Layer
		Type="Sprite"
		Texture="black.png" Var="dm_masters1"
		OnCommand="%function(self)
			self:basezoomx((SCREEN_WIDTH / DISPLAY:GetDisplayWidth()))
			self:basezoomy(-(SCREEN_HEIGHT / DISPLAY:GetDisplayHeight()))
			self:SetTextureFiltering(true)
			self:hidden(1)
			self:xy(scx,scy)
			self:zoom(1)
			self:rotationz(0)
			self:diffusealpha(1)
			self:sleep(.1)
			self:queuecommand('SetMe')
		end"
		SetMeCommand="%function(self)
			self:SetTexture(dm_masterAft2:GetTexture())
			self:hidden(0)
		end"
	/>
	
	<Layer
		Type="Sprite"
		Texture="black.png" Var="dm_masters2"
		OnCommand="%function(self)
			self:basezoomx((SCREEN_WIDTH / DISPLAY:GetDisplayWidth()))
			self:basezoomy(-(SCREEN_HEIGHT / DISPLAY:GetDisplayHeight()))
			self:SetTextureFiltering(true)
			self:hidden(1)
			self:xy(scx+sw,scy)
			self:zoom(1)
			self:rotationz(0)
			self:diffusealpha(1)
			self:sleep(.1)
			self:queuecommand('SetMe')
		end"
		SetMeCommand="%function(self)
			self:SetTexture(dm_masterAft2:GetTexture())
			self:hidden(0)
		end"
	/>
	
	<Layer Type="ActorProxy" 
	OnCommand="%function(self)
		self:sleep(0.1)
		self:xy(scx-160,scy+60)
		self:queuecommand('SetMe')
	end"
	SetMeCommand="%function(self)
		if P1 then
			self:SetTarget(P1:GetChild('Judgment'))
			P1:GetChild('Judgment'):zoom(.6)
			P1:GetChild('Judgment'):GetChild(''):diffusealpha(0.7)
			P1:GetChild('Judgment'):GetChild(''):blend('add')
		end
	end"
	OffCommand="%function(self)
		if P1 then
			P1:GetChild('Judgment'):GetChild(''):diffusealpha(1)
			P1:GetChild('Judgment'):GetChild(''):blend('normal')
		end
	end"
	/>
	
	<Layer Type="ActorProxy" 
	OnCommand="%function(self)
		self:sleep(0.1)
		self:xy(scx+160,scy+60)
		self:queuecommand('SetMe')
	end"
	SetMeCommand="%function(self)
		if P2 then
			self:SetTarget(P2:GetChild('Judgment'))
			P2:GetChild('Judgment'):zoom(0.6)
			P2:GetChild('Judgment'):GetChild(''):diffusealpha(0.7)
			P2:GetChild('Judgment'):GetChild(''):blend('add')
		end
	end"
	OffCommand="%function(self)
		if P2 then
			P2:GetChild('Judgment'):GetChild(''):diffusealpha(1)
			P2:GetChild('Judgment'):GetChild(''):blend('normal')
		end
	end"
	/>
	
	<Layer Type="Quad" OnCommand="hidden,1"
	InitCommand="%function(self) dm_flash = self 
	
	end"
	/>
	
	<Layer Type="Quad"
		InitCommand="%function(self)
		self:xy(scx,scy)
		self:diffuse(0,0,0,1)
		self:zoom(sw)
		self:sleep(1)
		self:linear(2)
		self:diffusealpha(0)
		end"
		
		
		Fk_P2_0_W1MessageCommand="%function(self) dm_faketaphit(0,1,2) end"
		Fk_P2_0_W2MessageCommand="%function(self) dm_faketaphit(0,2,2) end"
		Fk_P2_0_W3MessageCommand="%function(self) dm_faketaphit(0,3,2) end"
		Fk_P2_0_W4MessageCommand="%function(self) dm_faketaphit(0,4,2) end"
		Fk_P2_0_OKMessageCommand="%function(self) dm_fakeholdhit(0,2) end"
		Fk_P2_1_W1MessageCommand="%function(self) dm_faketaphit(1,1,2) end"
		Fk_P2_1_W2MessageCommand="%function(self) dm_faketaphit(1,2,2) end"
		Fk_P2_1_W3MessageCommand="%function(self) dm_faketaphit(1,3,2) end"
		Fk_P2_1_W4MessageCommand="%function(self) dm_faketaphit(1,4,2) end"
		Fk_P2_1_OKMessageCommand="%function(self) dm_fakeholdhit(1,2) end"
		Fk_P2_2_W1MessageCommand="%function(self) dm_faketaphit(2,1,2) end"
		Fk_P2_2_W2MessageCommand="%function(self) dm_faketaphit(2,2,2) end"
		Fk_P2_2_W3MessageCommand="%function(self) dm_faketaphit(2,3,2) end"
		Fk_P2_2_W4MessageCommand="%function(self) dm_faketaphit(2,4,2) end"
		Fk_P2_2_OKMessageCommand="%function(self) dm_fakeholdhit(2,2) end"
		Fk_P2_3_W1MessageCommand="%function(self) dm_faketaphit(3,1,2) end"
		Fk_P2_3_W2MessageCommand="%function(self) dm_faketaphit(3,2,2) end"
		Fk_P2_3_W3MessageCommand="%function(self) dm_faketaphit(3,3,2) end"
		Fk_P2_3_W4MessageCommand="%function(self) dm_faketaphit(3,4,2) end"
		Fk_P2_3_OKMessageCommand="%function(self) dm_fakeholdhit(3,2) end"
		
	/>
	
	</children></Layer>
	
</children></ActorFrame>