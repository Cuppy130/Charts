<ActorFrame
InitCommand="%function(self)

	mod_globaloffset = PREFSMAN:GetPreference('GlobalOffsetSeconds');

	songName = GAMESTATE:GetCurrentSong():GetSongDir()
	sw,sh = SCREEN_WIDTH,SCREEN_HEIGHT
	scx,scy = SCREEN_CENTER_X,SCREEN_CENTER_Y
	checked = false
	spb = (60/165)

	function GetJud(pn)
        return _G['jud'..pn]
    end
    function GetCom(pn)
        return _G['com'..pn]
    end
    jm_jumpstars = {}

    jm_flicker = 1

end"
><children>
	<Layer Type="Quad" InitCommand="hidden,1" OnCommand="sleep,1000"/>
	<ActorFrame OnCommand="%function(self) self:fov(45) end"><children>
	<Layer File="modhelpers.xml" /> <Layer File="tweens.xml" /> <Layer File="readers.xml" /> <Layer File="c2l.xml"/>
	<Layer Type="Quad" InitCommand="%function(self) self:hidden(1) jm_flickerRotation = self end"/>
	<Layer
		Type="Quad"
		OnCommand="hidden,1;"
		InitCommand="%function(self)
			mod_plr = {}; mod_firstSeenBeat = GAMESTATE:GetSongBeat(); mods, curaction, mod_actions, mods_ease = {}, 1, {}, {}
			local m,mm,me,l,e,str = mod_insert,mod_message,mod_ease,'len','end',''
			m(0, 9999, '*999 overhead,*999 2x,*999 -10000 cover,*999 no beat',l,nil)
			mm(0,function(self) if ( Plr(1) and not Plr(2) ) or ( Plr(2) and not Plr(1) ) then SCREENMAN:SystemMessage('play with 2 players you dink >:[') end end)

			function jm_iHateOitg(beat)

				m(beat, 7, '*8 314 dizzy',l,nil)
				mod_bounce(beat,8,0,10,'tornado','Quad',false,nil)

				m(beat, 0.5, '*6 100 reverse,*3 -50 split,*3 -50 cross,*3 -50 alternate',l,1)
				m(beat+.5, 1, '*6 100 reverse,*3 -100 split,*3 no cross,*3 no alternate',l,1)
				m(beat+1, 1.5, '*6 100 reverse,*3 -50 split,*3 50 cross,*3 -50 alternate',l,1)
				m(beat+1.5, 2, '*6 100 reverse,*3 no split,*3 no cross,*3 no alternate',l,1)

				m(beat+2, 0.5, '*6 100 reverse,*3 -50 split,*3 -50 cross,*3 -50 alternate',l,2)
				m(beat+2.5, 1, '*6 100 reverse,*3 -100 split,*3 no cross,*3 no alternate',l,2)
				m(beat+3, 1.5, '*6 100 reverse,*3 -50 split,*3 50 cross,*3 -50 alternate',l,2)
				m(beat+3.5, 2, '*6 100 reverse,*3 no split,*3 no cross,*3 no alternate',l,2)

				m(beat+3.5, 0.5, '*6 no reverse,*3 50 split,*3 50 cross,*3 50 alternate',l,1)
				m(beat+4, 1, '*6 no reverse,*3 100 split,*3 no cross,*3 no alternate',l,1)
				m(beat+4.5, 1.5, '*6 no reverse,*3 50 split,*3 -50 cross,*3 50 alternate',l,1)
				m(beat+5, 2, '*6 no reverse,*3 no split,*3 no cross,*3 no alternate',l,1)

				m(beat+5.5, 0.5, '*6 no reverse,*3 50 split,*3 50 cross,*3 50 alternate',l,2)
				m(beat+6, 1, '*6 no reverse,*3 100 split,*3 no cross,*3 no alternate',l,2)
				m(beat+6.5, 1.5, '*6 no reverse,*3 50 split,*3 -50 cross,*3 50 alternate',l,2)
				m(beat+7, 2, '*6 no reverse,*3 no split,*3 no cross,*3 no alternate',l,2)

				m(beat+6, 1, '*8 no dizzy',l,nil)

			end

			local f = 1
			function jm_hit(beat,hasFlip,hasDistant)
				if hasFlip == true then
					me(beat, 1, 40, 0, 'flip', l, outExpo,nil)
				end
				if hasDistant == true then
					me(beat, 1, 150*f, 0, 'distant', l, outSine,nil)
				end
				me(beat, 1, -400, 0, 'mini', l, outExpo,nil)
				f=-f
			end

			--me(60+192,0.5,-30,10,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(val) end end end,l,outCirc,nil)

			------------------

			mod_bounce(32,0.25,0,200,function(val) mod_do('*999 '.. val*jm_flicker ..' drunk',nil) jm_flicker=-jm_flicker end,'Expo',false,nil)
			mod_bounce(33,0.25,0,200,function(val) mod_do('*999 '.. val*jm_flicker ..' drunk',nil) jm_flicker=-jm_flicker end,'Expo',false,nil)

			switcheroo_add(33.5,'normal',15,0.5,nil)

			jm_hit(34,false,true)
			switcheroo_add(34,'flip',15,1,nil)
			mm(34,function(self) for pn = 1,2 do local a = Plr(pn) if a then a:zoomz(8) end end end)

			jm_hit(35,false,true)
			switcheroo_add(35,'normal',15,0.5,nil)

			jm_hit(36,false,false)
			mm(36,function(self) for pn = 1,2 do local a = Plr(pn) if a then a:zoomz(1) end end end)
			m(36, 16-.5, '*999 200 beat,*999 100 wave',l,nil)

			mod_swirlySwap(36,1,'invert',1,'Sine',nil)
			mod_swirlySwap(38,1,'normal',-1,'Sine',nil)
			mod_swirlySwap(40,1,'flip',-1,'Sine',nil)
			mod_swirlySwap(42,1,'normal',1,'Sine',nil)
			mod_swirlySwap(44,1,'invert',1,'Sine',nil)
			mod_swirlySwap(46,1,'normal',-1,'Sine',nil)
			mod_swirlySwap(48,1,'flip',-1,'Sine',nil)
			mod_swirlySwap(50,1,'normal',1,'Sine',nil)

			m(52, 16-.5, '*999 100 wave',l,nil)

			mm(52,function(self) for pn = 1,2 do local a = Plr(pn) if a then a:zoomz(4) end end end)
			me(52,0.5,0,-40,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:rotationx(val) end end end,l,outBack,nil)
			me(54,0.5,-40,40,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:rotationx(val) end end end,l,outBack,nil)
			me(56,0.5,40,-50,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:rotationx(val) end end end,l,outBack,nil)
			me(57,0.5,-50,60,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:rotationx(val) end end end,l,outBack,nil)
			me(58,0.5,60,-60,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:rotationx(val) end end end,l,outBack,nil)
			me(59,0.5,-60,60,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:rotationx(val) end end end,l,outBack,nil)
			me(60,0.5,60,0,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:rotationx(val) end end end,l,outBack,nil)

			me(52,1,0,(scx/7),function(val) for pn = 1,2 do local a = Plr(pn) if a then a:x((sw*normalize(pn,1,2,0.25,0.75))+val*-(normalize(pn,1,2,-1,1))/2) end end end,l,outBack,nil)
			me(54,1,(scx/7),(scx/7)*2,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:x((sw*normalize(pn,1,2,0.25,0.75))+val*-(normalize(pn,1,2,-1,1))/2) end end end,l,outBack,nil)
			me(56,1,(scx/7)*2,(scx/7)*3,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:x((sw*normalize(pn,1,2,0.25,0.75))+val*-(normalize(pn,1,2,-1,1))/2) end end end,l,outBack,nil)
			me(57,1,(scx/7)*3,(scx/7)*4,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:x((sw*normalize(pn,1,2,0.25,0.75))+val*-(normalize(pn,1,2,-1,1))/2) end end end,l,outBack,nil)
			me(58,1,(scx/7)*5,(scx/7)*6,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:x((sw*normalize(pn,1,2,0.25,0.75))+val*-(normalize(pn,1,2,-1,1))/2) end end end,l,outBack,nil)
			me(59,1,(scx/7)*7,(scx/7)*8,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:x((sw*normalize(pn,1,2,0.25,0.75))+val*-(normalize(pn,1,2,-1,1))/2) end end end,l,outBack,nil)
			me(60,1,(scx/7)*8,scx,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:x((sw*normalize(pn,1,2,0.25,0.75))+val*-(normalize(pn,1,2,-1,1))/2) end end end,l,outBack,nil)

			mm(61,function(self)
				for pn = 1,2 do
					local a = Plr(pn)
					if a then
						a:x(scx)
					end
				end
			end)



			------------------

			me(64, 3, -180, 200, 'mini', l, inCirc,nil,1)
			me(64,3,0,-90,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:rotationx(val) end end end,l,inCirc,nil,0.2)
			me(64, 3, 150, 0, 'wave', l, inCirc,nil,1)

			jm_hit(67,true,false)
			me(67,1,-90,0,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:rotationx(val) end end end,l,outBack,nil,0.2)
			mod_bounce(67,1,2,1,'xmod','Circ',false,nil)

			me(68,1.5,60,0,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:vibrate() a:effectmagnitude(val,val,0) end end end,l,inSine,nil,0.2)
			me(68, 1.5, 200, 0, 'bumpy', l, inCirc,nil,1)
			mm(68,function(self)
				for pn = 1,2 do
					local a = Plr(pn)
					if a then
						a:zoomz(4)
					end
				end
			end,true)
			--me(68,0.5,0,32*4,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:x(scx+(val*normalize(pn,1,2,-1,1))) end end end,l,outBack,nil)

			mm(68,function(self)
				for pn = 1,2 do
					local a = Plr(pn)
					if a then
						a:x(scx+(32*4)*normalize(pn,1,2,-1,1))
					end
				end
			end,true)

			me(69.5, 0.5, 0, 150, 'distant', l, inCirc,nil)
			me(70, 4, 150, 0, 'distant', l, outSine,nil)

			for i = 0,2,2 do
				mod_swirlySwap(70+i,1,'flip',-1,'Sine',nil)
				mod_swirlySwap(70+i+1,1,'normal',1,'Sine',nil)

				mod_swirlySwap(86+i,1,'flip',-1,'Sine',nil)
				mod_swirlySwap(86+i+1,1,'normal',1,'Sine',nil)

				mod_swirlySwap(200+70+i,1,'flip',-1,'Sine',nil)
				mod_swirlySwap(200+70+i+1,1,'normal',1,'Sine',nil)

				mod_swirlySwap(200+86+i,1,'flip',-1,'Sine',nil)
				mod_swirlySwap(200+86+i+1,1,'normal',1,'Sine',nil)
			end

			mod_bounce(74,1,0,200,function(val) mod_do('*999 '.. val*jm_flicker ..' bumpy,*999 '.. val*jm_flicker ..' drunk',nil) jm_flicker=-jm_flicker end,'Expo',false,nil)
			me(75, 1, 100, 0, 'tornado', l, outSine,nil)
			mod_bounce(76,8,0,20,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:x(scx+(32*4)*normalize(pn,1,2,-1,1)+val*normalize(pn,1,2,-1,1)) end end end,'Expo',false,nil)
			jm_iHateOitg(76)
			me(84,1.5,60,0,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:vibrate() a:effectmagnitude(val,val,0) end end end,l,inSine,nil,0.2)
			me(84, 1.5, 200, 0, 'bumpy', l, inCirc,nil,1)
			me(85.5, 0.5, 0, 170, 'hallway', l, inCirc,nil)
			me(86, 4, 170, 0, 'hallway', l, outSine,nil)

			local f = 1
			for i = 0,0.75,0.25 do
				mm(90+i,function(self)
					for pn = 1,2 do
						local a = Plr(pn)
						if a then
							a:x(scx+(132*normalize(pn,1,2,-1,1))+132*f)
						end
					end
					f=-f
				end)
				mm(200+90+i,function(self)
					for pn = 1,2 do
						local a = Plr(pn)
						if a then
							a:x(scx+(132*normalize(pn,1,2,-1,1))+132*f)
						end
					end
					f=-f
				end)
			end

			me(91, 1, 628, 0, 'dizzy', l, outSine,nil)
			mod_bounce(91,0.5,0,200,function(val) mod_do('*999 '.. val*jm_flicker ..' drunk',nil) jm_flicker=-jm_flicker end,'Expo',false,nil)
			mm(91,function(self)
				for pn = 1,2 do
					local a = Plr(pn)
					if a then
						a:decelerate(spb)
						a:x(scx)
						a:addx(0)
					end
				end
			end)

			m(92-0.5, 4.5, '*999 400 beat',l,1)
			m(92-0.5, 4.5, '*999 -400 beat',l,2)

			mm(92,function(self) for pn = 1,2 do local a = Plr(pn) if a then a:zoomx(1.4) a:decelerate(spb*0.25) a:zoomx(1) a:x(scx+50) end end end)
			mm(93,function(self) for pn = 1,2 do local a = Plr(pn) if a then a:zoomx(1.5) a:decelerate(spb*0.25) a:zoomx(1) a:x(scx-100) end end end)
			mm(94,function(self) for pn = 1,2 do local a = Plr(pn) if a then a:zoomx(1.6) a:decelerate(spb*0.25) a:zoomx(1) a:x(scx+150) end end end)
			mm(95,function(self) for pn = 1,2 do local a = Plr(pn) if a then a:zoomx(1.7) a:decelerate(spb*0.25) a:zoomx(1) a:x(scx-150) end end end)

			local f = 1
			for i = 0,3 do
				mod_bounce(92+i,1,0,(10+(i*2))*f,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(val) end end end,'Expo',false,nil)
				mod_bounce(200+92+i,1,0,(10+(i*2))*f,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(-val) end end end,'Expo',false,nil)
				f=-f
			end

			for i = 0,2,0.5 do
				me(96+i, 1, -100, 0, 'mini', l, outSine,nil)
				me(200+96+i, 1, -100, 0, 'mini', l, outSine,nil)
			end

			ease_wiggle(96,1.5,100,0.5,'drunk',outCirc,l,nil,false)
			mm(96,function(self) for pn = 1,2 do local a = Plr(pn) if a then a:linear(spb*2) a:x(scx) end end end)

			me(98,1,1,0,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:zoom(val) end end end,l,inExpo,nil)
			switcheroo_add(98,'urld',15,0.5,nil)
			switcheroo_add(98.5,'normal',15,0.5,nil)

			me(99,1,4,1,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:zoom(val) end end end,l,outExpo,nil)
			m(99, 30, '*999 125 wave',l,nil)
			m(116, 12, '*1 1256 dizzy,*2 100 tipsy',l,nil)

			jm_wackyZoomShit = {
				{128,1,'y',4},
				{129,1,'y',4},
				{130,1,'y',4},
			}

			local f,axis = 1,''
			local count = 1
			local dir = 2
			for i = 0,22,2 do
				if f == 1 then axis = 'x' else axis = 'y' end
				if count == 3 then dir = -dir count = 1 end
				table.insert(jm_wackyZoomShit,{100+i,1,axis,dir})
				f=-f
				count = count+1
			end

			local f,axis = 1,''
			local count = 1
			local dir = 2
			for i = 0,3.5,0.5 do
				if f == 1 then axis = 'x' else axis = 'y' end
				if count == 3 then dir = -dir count = 1 end
				table.insert(jm_wackyZoomShit,{124+i,0.25,axis,dir})
				f=-f
				count = count+1
			end

			m(128, 1, '*999 no dizzy,*999 no tipsy',l,nil)
			-- whatever game
			me(128,1,0,360,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(val) end end end,l,outSine,nil)
			me(129,1,360,0,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(val) end end end,l,outSine,nil)
			me(130,1,0,360,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(val) end end end,l,outSine,nil)
			mm(132,function(self)
				for pn = 1,2 do
					local a = Plr(pn)
					if a then 
						a:rotationz(0)
						a:zoomy(1)
						a:zoomx(1)
						a:x(scx)
						a:y(scy)
					end
				end
			end,true)

			function jm_whatAreYouSaying(beat)
				mod_bounce(beat,1,0,-50,'centered','Circ',false,nil)
				switcheroo_add(beat,'invert',15,0.5,nil)
				switcheroo_add(beat+.5,'normal',15,0.5,nil)
			end

			function jm_wackyReverse(beat,isReversed)
				if isReversed == true then
					m(beat, 0.25, '*10 no reverse',l,nil)
					m(beat+.25, 0.5, '*10 reverse',l,nil)
					m(beat+.75, 0.75, '*10 no reverse',l,nil)
					m(beat+1.5, 0.75, '*10 reverse',l,nil)
				else
					m(beat, 0.25, '*10 reverse',l,nil)
					m(beat+.25, 0.5, '*10 no reverse',l,nil)
					m(beat+.75, 0.75, '*10 reverse',l,nil)
					m(beat+1.5, 0.75, '*10 no reverse',l,nil)
				end
			end

			mod_bounce(131,1,0,100,'mini','Circ',false,nil)

			mm(131,function(self)
				Plr(2):y(scy+50)
			end)

			m(132, 34, '*2 1.5x,*10 wave',l,nil)

			jm_wackyReverse(137.5,false)

			me(145,0.5, 20, 0, 'flip', l, outQuad,nil)
			me(145,0.5, -200, 0, 'mini', l, outQuad,nil)
			me(145.5,0.5, 20, 0, 'flip', l, outQuad,nil)
			me(145.5,0.5, -200, 0, 'mini', l, outQuad,nil)

			mod_bounce(146,0.5,0,100,'flip','Circ',false,nil)
			mod_bounce(146.5,0.5,0,-20,'flip','Circ',false,nil)
			me(147,1, 0, 100, 'reverse', l, outExpo,nil)
			m(148, 15, '*999 reverse',l,nil)

			for i = 0,28,4 do
				jm_whatAreYouSaying(132+i)
			end

			mm(147,function(self) for pn = 1,2 do local a = Plr(pn) if a then a:zoom(2) a:zoomz(50) a:decelerate(spb*0.5) a:zoom(1) a:zoomz(4) end end end)
			mm(147.5,function(self) for pn = 1,2 do local a = Plr(pn) if a then a:zoom(2) a:zoomz(50) a:decelerate(spb*0.5) a:zoom(1) a:zoomz(4) end end end)

			jm_wackyReverse(153.5,true)

			me(161,0.5, 20, 0, 'flip', l, outQuad,nil)
			me(161,0.5, -200, 0, 'mini', l, outQuad,nil)
			me(161.5,1, 0, 100, 'flip', l, inOutBack,nil,1)

			m(163, 1, '*10 no reverse',l,nil)
			me(163,1, 100, 0, 'reverse', l, outInQuad,nil,0.5)
			me(163,1, 50, 0, 'flip', l, outInQuad,nil,0.5)
			me(163,1, -500, 0, 'mini', l, outInQuad,nil,0.5)


			ease_wiggle(167,3,100,0.25,'drunk',outCirc,l,nil,false)

			m(163, 7, '*10 2x',l,nil)

			--[[ mm(163,function(self)
				for pn = 1,2 do
					local a = Plr(pn)
					if a then
						a:decelerate(spb*0.25)
						a:x(sw*normalize(pn,1,2,0.25,0.75))
					end
				end
			end,true)--]] 

			me(164,1.25, 0, 50, 'mini', l, outBack,nil,0.5)
			me(165.5,1.25, 50, 100, 'mini', l, outBack,nil,0.5)
			me(167,3, 100, 0, 'mini', l, inBack,nil,0.5)
			m(164, 6, '*10 1000 dizzy',l,nil)

			mm(170,function(self)
				for pn = 1,2 do
					local a = Plr(pn)
					if a then
						a:decelerate(spb)
						a:skewx(0)
					end
				end
			end)
			m(170, 1, '*999 no dizzy',l,nil)
			mod_bounce(170,2,2,1,'xmod','Circ',false,nil)
			
			m(172, 1, '*4 no wave',l,nil)

			me(170,0.5,scx,(scx/5)*4,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:x((sw*normalize(pn,1,2,0.25,0.75))+val*-(normalize(pn,1,2,-1,1))/2) end end end,l,outBack,nil)
			me(170.5,0.5,(scx/5)*4,(scx/5)*3,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:x((sw*normalize(pn,1,2,0.25,0.75))+val*-(normalize(pn,1,2,-1,1))/2) end end end,l,outBack,nil)
			me(171,0.5,(scx/5)*3,(scx/5)*2,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:x((sw*normalize(pn,1,2,0.25,0.75))+val*-(normalize(pn,1,2,-1,1))/2) end end end,l,outBack,nil)
			me(171.5,0.5,(scx/5)*2,(scx/5),function(val) for pn = 1,2 do local a = Plr(pn) if a then a:x((sw*normalize(pn,1,2,0.25,0.75))+val*-(normalize(pn,1,2,-1,1))/2) end end end,l,outBack,nil)
			me(172,0.5,(scx/5),0,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:x((sw*normalize(pn,1,2,0.25,0.75))+val*-(normalize(pn,1,2,-1,1))/2) end end end,l,outBack,nil)

			m(172, 32, '*999 99.99 reverse',l,2)
			m(172, 32, '*0.15 150 wave,*0.05 distant',l,nil)

			local f = 1
			for i = 0,28,4 do
				m(172+i, 2, '*10 stealth,*10 dark',l,normalize(f,-1,1,1,2))
				m(172+i, 2, '*10 no stealth,*10 no dark',l,normalize(f,-1,1,2,1))
				m(172+(i+2), 2, '*10 stealth,*10 dark',l,normalize(f,-1,1,1,2))
				m(172+(i+2), 2, '*10 no stealth,*10 no dark',l,normalize(f,-1,1,2,1))
				f=-f
			end
			
			me(172,268,1,1,'xmod',e,linear)
			
			me(172,187,165*2,165*1.5,'cmod',e,linear)
			--me(172,187,2,1.5,'xmod',e,linear)

			mod_bounce(187,1,165*1.5,165*1,'cmod','Circ',false,nil)
			--mod_bounce(187,1,1.5,1,'xmod','Circ',false,nil)
			
			--me(187,1, 314, 0, 'dizzy', l, outSine,nil)
			
			me(187,200,165*1.5,165*1.25,'cmod',e,linear)
			me(200,204,165*1.25,165*2,'cmod',e,linear)
			--me(187,200,1.5,1.25,'xmod',e,linear)
			--me(200,204,1.25,2,'xmod',e,linear)
			
			--m(204,1,'*1000 2x',l)
			
			--me(204,266,2,2,'xmod',e,linear)
			me(204,266,330,330,'cmod',e,linear)
			
			local fucky_wucky = 30
			
			me(204,232,0,fucky_wucky,'alternate',e,linear,1)
			me(204,232,0,-fucky_wucky,'alternate',e,linear,2)
			me(232,236,fucky_wucky,0,'alternate',e,linear,1)
			me(232,236,-fucky_wucky,0,'alternate',e,linear,2)
			me(204,232,0,-fucky_wucky/2,'reverse',e,linear,1)
			me(204,232,0,fucky_wucky/2,'reverse',e,linear,2)
			me(232,236,-fucky_wucky/2,0,'reverse',e,linear,1)
			me(232,236,fucky_wucky/2,0,'reverse',e,linear,2)
			
			mm(172,function()
				milk_bottom:hidden(0)
				milk_bottom:linear(28*60/165)
				milk_bottom:y(sh/2 + 80)
				milk_bottom:accelerate(120/165)
				milk_bottom:y(sh)
				milk_bottom:queuecommand('Hide')
				
				milk_top:hidden(0)
				milk_top:linear(28*60/165)
				milk_top:y(sh/2 - 80)
				milk_top:accelerate(120/165)
				milk_top:y(0)
				milk_top:queuecommand('Hide')
			end)

			local f = 1
			for i = 0,30,1 do
				me(172+i,1, 100*f, 0, 'tipsy', l, outExpo,nil)
				me(172+i,1, -100*f, 0, 'drunk', l, outExpo,nil)
				f=-f
			end
			switcheroo_add(200,'invert',15,3,nil)
			m(203, 1, '*4 no wave,*4 no boost,*99 no reverse,*4 no dark,*4 no stealth,*4 no drunk,*4 no distant',l,nil)

			switcheroo_add(203,'normal',15,0.5,nil)

			--me(203,1,scx,sw,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:x(val*normalize(pn,1,2,0.25,0.75)) end end end,l,outBack,nil)
			mm(203,function(self)
				for pn = 1,2 do
					local a = Plr(pn)
					if a then
						a:accelerate(spb*1)
						a:y(sh+250)
					end
				end
			end)

			mm(204,function(self)
				for pn = 1,2 do
					local a = Plr(pn)
					if a then
						a:x(scx)
					end
				end
			end)

			m(204-0.5, 266, '*4 300 beat',e,nil)

			for i = 0,60,2 do
				mod_bounce(204+i,1,sh-100,sh-250,function(val) local a = Plr(1) if a then a:y(val) end end,'Circ',false,nil)
				mod_bounce(204+i+1,1,sh-100,sh-250,function(val) local a = Plr(2) if a then a:y(val) end end,'Circ',false,nil)

				mod_bounce(204+i,1,0,1.25,function(val) local a = Plr(1) if a then a:zoom(val) end end,'Circ',false,nil)
				mod_bounce(204+i+1,1,0,1.25,function(val) local a = Plr(2) if a then a:zoom(val) end end,'Circ',false,nil)
			end

			ease_wiggle(232,2.5,100,0.25,'drunk',outCirc,l,nil,false)

			me(235,1, -30, 0, 'flip', l, outCirc,nil)
			me(235,1, -300, 0, 'mini', l, outCirc,nil)

			ease_wiggle(264,2,100,0.25,'drunk',outCirc,l,nil,false)
			m(266.5, 1, '*4 no beat',l,nil)
			mm(266,function(self)
				for pn = 1,2 do
					local a = Plr(pn)
					if a then
						a:x(scx)
						a:y(scy)
						a:decelerate(spb*0.5)
						a:zoom(1)
					end
				end
			end)
			
			if FUCK_EXE then
				m(0,999,'beatcap',e)
			end

			mod_bounce(266,1,0,-50,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(val) end end end,'Circ',false,nil)
			mod_bounce(267,1,0,50,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(val) end end end,'Circ',false,nil)

			mod_bounce(266,1,200,-100,'mini','Circ',false,nil)
			mod_bounce(267,1,200,-100,'mini','Circ',false,nil)

			mod_bounce(266,1,165*2,165*1,'cmod','Circ',false,nil)
			mod_bounce(267,1,165*2,165*1,'cmod','Circ',false,nil)

			me(268,1, 200, 0, 'mini', l, outCirc,nil)
			mm(268,function(self)
				for pn = 1,2 do
					local a = Plr(pn)
					if a then
						a:y(scy)
						a:decelerate(spb*0.5)
						a:zoom(1)
						a:x(scx+(32*4)*normalize(pn,1,2,-1,1))
					end
				end
			end,true)

			------------------------------------


			me(200+68,1.5,60,0,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:vibrate() a:effectmagnitude(val,val,0) end end end,l,inSine,nil,0.2)
			me(200+68, 1.5, 200, 0, 'bumpy', l, inCirc,nil,1)
			me(200+69.5, 0.5, 0, 150, 'distant', l, inCirc,nil)
			me(200+70, 4, 150, 0, 'distant', l, outSine,nil)

			mod_bounce(200+74,1,0,200,function(val) mod_do('*999 '.. val*jm_flicker ..' bumpy,*999 '.. val*jm_flicker ..' drunk',nil) jm_flicker=-jm_flicker end,'Expo',false,nil)
			mod_bounce(200+76,8,0,20,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:x(scx+(32*4)*normalize(pn,1,2,-1,1)+val*normalize(pn,1,2,-1,1)) end end end,'Expo',false,nil)
			me(200+75, 1, 100, 0, 'tornado', l, outSine,nil)
			jm_iHateOitg(200+76)
			me(200+84,1.5,60,0,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:vibrate() a:effectmagnitude(val,val,0) end end end,l,inSine,nil,0.2)
			me(200+84, 1.5, 200, 0, 'bumpy', l, inCirc,nil,1)
			me(200+85.5, 0.5, 0, -50, 'hallway', l, inCirc,nil)
			me(200+86, 4, -50, 170, 'hallway', l, outSine,nil)
			me(290, 0.5, 170, 0, 'hallway', l, outBack,nil)


			me(200+91, 1, 628, 0, 'dizzy', l, outSine,nil)
			mod_bounce(200+91,0.5,0,200,function(val) mod_do('*999 '.. val*jm_flicker ..' drunk',nil) jm_flicker=-jm_flicker end,'Expo',false,nil)
			mm(200+91,function(self)
				for pn = 1,2 do
					local a = Plr(pn)
					if a then
						a:decelerate(spb)
						a:x(scx)
						a:addx(0)
					end
				end
			end)

			m(200+92-0.5, 4.5, '*999 400 beat',l,1)
			m(200+92-0.5, 4.5, '*999 -400 beat',l,2)

			mm(200+92,function(self) for pn = 1,2 do local a = Plr(pn) if a then a:zoomx(1.4) a:decelerate(spb*0.25) a:zoomx(1) a:x(scx-50) end end end)
			mm(200+93,function(self) for pn = 1,2 do local a = Plr(pn) if a then a:zoomx(1.5) a:decelerate(spb*0.25) a:zoomx(1) a:x(scx+100) end end end)
			mm(200+94,function(self) for pn = 1,2 do local a = Plr(pn) if a then a:zoomx(1.6) a:decelerate(spb*0.25) a:zoomx(1) a:x(scx-150) end end end)
			mm(200+95,function(self) for pn = 1,2 do local a = Plr(pn) if a then a:zoomx(1.7) a:decelerate(spb*0.25) a:zoomx(1) a:x(scx+150) end end end)

			ease_wiggle(200+96,1.5,100,0.5,'drunk',outCirc,l,nil,false)
			mm(200+96,function(self) for pn = 1,2 do local a = Plr(pn) if a then a:linear(spb*2) a:x(scx) end end end)

			me(200+98,1,1,0,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:zoom(val) end end end,l,inExpo,nil)
			switcheroo_add(200+98,'urld',15,0.5,nil)
			switcheroo_add(200+98.5,'normal',15,0.5,nil)

			mm(299,function(self)
				for pn = 1,2 do
					local a = Plr(pn)
					if a then
						a:x(sw*normalize(pn,1,2,0.25,0.75))
					end
				end
			end,true)

			me(200+99,1,4,1,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:zoom(val) end end end,l,outExpo,nil)

			m(264+36-.5, 16, '*999 200 beat,*10 100 wave',l,nil)

			mod_swirlySwap(264+36,1,'invert',1,'Sine',nil)
			mod_swirlySwap(264+38,1,'normal',-1,'Sine',nil)
			mod_swirlySwap(264+40,1,'flip',-1,'Sine',nil)
			mod_swirlySwap(264+42,1,'normal',1,'Sine',nil)
			mod_swirlySwap(264+44,1,'invert',1,'Sine',nil)
			mod_swirlySwap(264+46,1,'normal',-1,'Sine',nil)
			mod_swirlySwap(264+48,1,'flip',-1,'Sine',nil)
			mod_swirlySwap(264+50,1,'normal',1,'Sine',nil)

			m(316, 16, '*99 wave',l,nil)

			mm(264+52,function(self) for pn = 1,2 do local a = Plr(pn) if a then a:zoomz(4) end end end)
			me(264+52,0.5,0,-40,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:rotationx(val) end end end,l,outBack,nil)
			me(264+54,0.5,-40,40,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:rotationx(val) end end end,l,outBack,nil)
			me(264+56,0.5,40,-50,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:rotationx(val) end end end,l,outBack,nil)
			me(264+57,0.5,-50,60,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:rotationx(val) end end end,l,outBack,nil)
			me(264+58,0.5,60,-60,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:rotationx(val) end end end,l,outBack,nil)
			me(264+59,0.5,-60,60,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:rotationx(val) end end end,l,outBack,nil)
			me(264+60,0.5,60,0,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:rotationx(val) end end end,l,outBack,nil)

			me(264+52,1,0,(scx/7),function(val) for pn = 1,2 do local a = Plr(pn) if a then a:x((sw*normalize(pn,1,2,0.25,0.75))+val*-(normalize(pn,1,2,-1,1))/2) end end end,l,outBack,nil)
			me(264+54,1,(scx/7),(scx/7)*2,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:x((sw*normalize(pn,1,2,0.25,0.75))+val*-(normalize(pn,1,2,-1,1))/2) end end end,l,outBack,nil)
			me(264+56,1,(scx/7)*2,(scx/7)*3,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:x((sw*normalize(pn,1,2,0.25,0.75))+val*-(normalize(pn,1,2,-1,1))/2) end end end,l,outBack,nil)
			me(264+57,1,(scx/7)*3,(scx/7)*4,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:x((sw*normalize(pn,1,2,0.25,0.75))+val*-(normalize(pn,1,2,-1,1))/2) end end end,l,outBack,nil)
			me(264+58,1,(scx/7)*5,(scx/7)*6,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:x((sw*normalize(pn,1,2,0.25,0.75))+val*-(normalize(pn,1,2,-1,1))/2) end end end,l,outBack,nil)
			me(264+59,1,(scx/7)*7,(scx/7)*8,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:x((sw*normalize(pn,1,2,0.25,0.75))+val*-(normalize(pn,1,2,-1,1))/2) end end end,l,outBack,nil)
			me(264+60,1,(scx/7)*8,scx,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:x((sw*normalize(pn,1,2,0.25,0.75))+val*-(normalize(pn,1,2,-1,1))/2) end end end,l,outBack,nil)

			me(264+64, 3, -180, 200, 'mini', l, inCirc,nil,1)
			me(264+64,3,0,-90,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:rotationx(val) end end end,l,inCirc,nil,0.2)
			me(264+64, 3, 150, 0, 'wave', l, inCirc,nil,1)

			jm_hit(264+67,true,false)
			me(264+67,1,-90,0,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:rotationx(val) end end end,l,outBack,nil,0.2)
			mod_bounce(264+67,1,2,1,'xmod','Circ',false,nil)

			me(328, 3, 0, 100, 'reverse', l, inCirc,nil,99)
			me(332,1.5,60,0,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:vibrate() a:effectmagnitude(val,val,0) end end end,l,inSine,nil,0.2)
			me(332, 1, 2, 20, 'xmod', l, outBack,nil,99)
			me(332, 1, 0, 100, 'tornado', l, outBack,nil,99)
			me(332, 1, 0, 700, 'bumpy', l, outBack,nil,99)











			mm(60,function(self)
				for pn = 1,2 do
					local a = GetJud(pn)
					local b = GetCom(pn)
					if a and b then
						a:decelerate(spb*1)
						b:decelerate(spb*1)
						a:x(160*(pn*2-3))
						b:x(160*(pn*2-3))
					end
				end
			end)

			mm(68,function(self)
				for pn = 1,2 do
					local a = GetJud(pn)
					local b = GetCom(pn)
					if a and b then
						a:decelerate(spb*1)
						b:decelerate(spb*1)
						a:x(0)
						b:x(0)
					end
				end
			end)

			mm(91,function(self)
				for pn = 1,2 do
					local a = GetJud(pn)
					local b = GetCom(pn)
					if a and b then
						a:decelerate(spb*1)
						b:decelerate(spb*1)
						a:x(160*(pn*2-3))
						b:x(160*(pn*2-3))
					end
				end
			end)

			mm(100,function(self)
				for pn = 1,2 do
					local a = GetJud(pn)
					local b = GetCom(pn)
					if a and b then
						a:decelerate(spb*1)
						b:decelerate(spb*1)
						a:x(0)
						b:x(0)
					end
				end
			end)

			mm(131,function(self)
				for pn = 1,2 do
					local a = GetJud(pn)
					local b = GetCom(pn)
					if a and b then
						a:decelerate(spb*1)
						b:decelerate(spb*1)
						a:x(160*(pn*2-3))
						b:x(160*(pn*2-3))
					end
				end
			end)

			mm(170,function(self)
				for pn = 1,2 do
					local a = GetJud(pn)
					local b = GetCom(pn)
					if a and b then
						a:decelerate(spb*4)
						b:decelerate(spb*4)
						a:x(0)
						b:x(0)
					end
				end
			end)

			mm(291,function(self)
				for pn = 1,2 do
					local a = GetJud(pn)
					local b = GetCom(pn)
					if a and b then
						a:decelerate(spb*1)
						b:decelerate(spb*1)
						a:x(160*(pn*2-3))
						b:x(160*(pn*2-3))
					end
				end
			end)

			mm(299,function(self)
				for pn = 1,2 do
					local a = GetJud(pn)
					local b = GetCom(pn)
					if a and b then
						a:decelerate(spb*4)
						b:decelerate(spb*4)
						a:x(0)
						b:x(0)
					end
				end
			end)

			mm(324,function(self)
				for pn = 1,2 do
					local a = GetJud(pn)
					local b = GetCom(pn)
					if a and b then
						a:decelerate(spb*1)
						b:decelerate(spb*1)
						a:x(160*(pn*2-3))
						b:x(160*(pn*2-3))
					end
				end
			end)













			mm(36,function(self)
				jm_house:queuecommand('TacIn')
			end)

			mm(60,function(self)
				jm_house:queuecommand('TacAttack')
			end)

			mm(64,function(self)
				jm_house:queuecommand('TacOut')
			end)
			
			mm(188,function(self)
				jm_house:queuecommand('TacIdle')
				jm_house:queuecommand('TacIn')
			end)

			mm(196,function(self)
				
				
				jm_bgquad:linear(240/165)
				jm_bgquad:diffuse(1,1,1,.5)
				
			end)

			mm(200,function(self)
			
				jm_house:queuecommand('TacAttack')
				
				jm_bgColor:linear(180/165)
				jm_bgColor:diffusealpha(.3)
				
				
			end)
			
			mm(203,function()
				
				jm_bgSquares:linear(30/165)
				jm_bgSquares:diffusealpha(.6)
				
				jm_house:queuecommand('TacOut')
				
			end)
			
			mm(204,function()
			
				
				jm_yellowbg:bounce()
				jm_yellowbg:effectclock('bgm')
				jm_yellowbg:effectperiod(1)
				jm_yellowbg:effectmagnitude(0,0,40)
				jm_bgSquares:texcoordvelocity(.5,.5)
				
				
			end)
			
			mm(236,function()
				
				jm_bgSquares:bounce()
				jm_bgSquares:effectperiod(60/165)
				jm_bgSquares:effectclock('timer')
				jm_bgSquares:effectmagnitude(0,0,20)
				
				jm_bgSquares:linear(30*60/165)
				jm_bgSquares:rotationz(90)
				
			end)
			
			mm(266,function(self)
				
				jm_bgColor:linear(120/165)
				jm_bgColor:diffusealpha(0)
				jm_bgSquares:linear(120/165)
				jm_bgSquares:diffusealpha(0)
				jm_bgquad:linear(120/165)
				jm_bgquad:diffusealpha(0)
				
			end)

			mm(268-0.5,function(self)
				
				jm_yellowbg:stopeffect()
				
			end)

			

--[[
			mm(203,function(self)
				jm_bgColor:hidden(0)
				jm_bgColor:y(scy+sh)
				jm_bgColor:decelerate(spb)
				jm_bgColor:y(scy)

				jm_bgSquares:sleep(0.25)
				jm_bgSquares:hidden(0)
				jm_bgSquares:y(scy+sh*1.5)
				jm_bgSquares:decelerate(spb)
				jm_bgSquares:y(scy)
			end,true)

			mm(235,function(self)
				jm_bgColor:linear(spb)
				jm_bgColor:diffuse(170/255,170/255,0,1)

				jm_bgSquares:bounceend(spb)
				jm_bgSquares:rotationz(-45*6)
			end,true)--]]






			mm(266,function(self)
				for i = 1,5 do
					local a = jm_jumpstars[i]
					if a then
						a:hidden(0)
						a:zoom(0.4)
						a:x(0)
						a:y(sh)
						a:decelerate(spb*1)
						a:addx(math.random(100,300))
						a:addy(-math.random(100,300))
						a:rotationz(math.random(-360,360))
						a:accelerate(spb*0.5)
						a:zoom(0)
						a:diffusealpha(0)
					end
				end
				tac_jump:hidden(0)
			end)
			mod_bounce(266,1,100,-200,function(t) tac_jump:y(sh+t) end,'Circ',false,nil)
			me(266,1,0,scx,function(t) tac_jump:x(t) end,l,outCirc,nil)

			m(267, 1, '*999 flip,*999 -100 invert',l,nil)
			m(268, 1, '*999 no flip,*999 no invert',l,nil)

			mm(267,function(self)
				for i = 1,5 do
					local a = jm_jumpstars[i+5]
					if a then
						a:hidden(0)
						a:zoom(0.4)
						a:x(sw)
						a:y(sh)
						a:decelerate(spb*1)
						a:addx(-math.random(100,300))
						a:addy(-math.random(100,300))
						a:rotationz(math.random(-360,360))
						a:accelerate(spb*0.5)
						a:zoom(0)
						a:diffusealpha(0)
					end
				end
				tac_jump:zoomx(-1)
			end)
			mod_bounce(267,1,100,-200,function(t) tac_jump:y(sh+t) end,'Circ',false,nil)
			me(267,1,sw,scx,function(t) tac_jump:x(t) end,l,outCirc,nil)

			mm(268,function(self)
				tac_jump:hidden(1)
			end,true)

			mm(299,function(self)
				jm_house:queuecommand('TacIdle')
				jm_house:queuecommand('TacIn')
			end,true)

			mm(324,function(self)
				jm_house:queuecommand('TacAttack')
			end)

			mm(328,function(self)
				jm_house:queuecommand('TacOut')
			end)

			mm(332,function(self)
				jm_house:queuecommand('TacIn')
				jm_house:queuecommand('TacHurt')
			end)














			------------------
			------------------
			------------------
			------------------

			local t = jm_wigglyAf
			for i = 1,table.getn(t)-1 do
				local b,diff = t[i][1],t[i+1][1]-t[i][1]
				mm(b,function(self)
					for pn = 1,2 do
						local a = Plr(pn)
						if a then
							a:decelerate(spb*(diff/2))
							a:skewx((0.5*(diff))*f)
						end
					end
					f=-f -- ok
				end)
				f=-f
			end

			local f,t = 1,jm_wackyKicks
			for i = 1,table.getn(t) do
				me(t[i][1],0.5, -50, 0, 'mini', l, outQuad,nil)
				me(t[i][1],0.5, 1, 2, 'xmod', l, outQuad,nil)
				if t[i][2] == 0 then
					me(t[i][1],0.5, -50*f, 0, 'drunk', l, outQuad,nil)
					f=-f
				end
			end

			local swap,skew,t = 1,1,jm_vocalChops
			local s = {'normal','invert'}
			for i = 1,table.getn(t)-1 do
				if t[i][3] == 1 then
					if t[i][2] == 3 then
						switcheroo_add(t[i][1],s[normalize(swap,-1,1,1,2)],15,t[i+1][1]-t[i][1],nil)
						swap=-swap
					end
					if t[i][2] == 0 then
						mod_bounce(t[i][1],t[i+1][1]-t[i][1],0,0.5*skew,function(val) for pn = 1,2 do local a = Plr(pn) if a then a:skewx(val) end end end,'Circ',false,nil)
						mod_bounce(t[i][1],t[i+1][1]-t[i][1],0,-10,'flip','Circ',false,nil)
						if t[i][1] > 236 and t[i][1] < 265 then
							mod_bounce(t[i][1],t[i+1][1]-t[i][1],0,100,'distant','Circ',false,nil)
						else
							mod_bounce(t[i][1],t[i+1][1]-t[i][1],0,100,'reverse','Circ',false,nil)
						end
						skew=-skew
					end
				end
			end

			local f,t = 1,jm_funny
			for i = 1,table.getn(t) do
				me(t[i][1],1, 500*f, 0, 'tipsy', l, outCirc,nil)
				f=-f
			end

			local a,f,t = 0,1,jm_drunkMeme
			local s = {'normal','invert'}
			for i = 1,table.getn(t)-1 do
				if t[i][2] == 0 then
					if t[i][3] == 1 then
						me(t[i][1],t[i+1][1]-t[i][1], 100, a, 'mini', l, outBack,nil)
					end
					mod_bounce(t[i][1],t[i+1][1]-t[i][1],0,100*f,'drunk','Circ',false,nil)
					me(t[i][1],t[i+1][1]-t[i][1], 1, 2, 'xmod', l, outExpo,nil)
					switcheroo_add(t[i][1],s[normalize(f,-1,1,1,2)],15,t[i+1][1]-t[i][1],nil)
					a=a-20
					f=-f
				else
					a = 0
				end
			end

			local f,t = 1,jm_zBounce
			local bounce_height = 50
			for i = 1,table.getn(t)-1 do
				local b,diff = t[i][1],t[i+1][1]-t[i][1]
				if t[i][2] == 3 then
					me(b, 1, -50, 0, 'mini', l, outSine,nil)
					mod_bounce(b,diff,0,100*f,'tipsy','Quad',false,nil)
					mm(b,function(self)
						for pn = 1,2 do
							local a = Plr(pn)
							if a then
								a:decelerate(spb*(diff/2))
								a:y(scy+(-bounce_height))
								a:skewx((-bounce_height/200)*f)
								a:accelerate(spb*(diff/2))
								a:y(scy)
								a:skewx(0)
							end
						end
						f=-f -- ok
					end)
				end
				f=-f
			end

			local f,t = 1,jm_notedatasdfg
			local bounce_height = 50
			for i = 1,table.getn(t)-1 do
				local b,diff = t[i][1],t[i+1][1]-t[i][1]
				me(b, 1, -100, 0, 'mini', l, outSine,nil)
				mod_bounce(b,diff,0,50*f,'drunk','Expo',false,nil)
				mod_bounce(b,diff,0,50*f,'hallway','Expo',false,nil)
				f=-f
			end

			local t = jm_wackyZoomShit
			for i = 1,table.getn(t) do
				local b,s,a,d = t[i][1],t[i][2],t[i][3],t[i][4]
				mm(b,function(self) -- uuuuuuuuuuu
					for pn = 1,2 do
						local p = Plr(pn)
						if p then
							p:zoomx(1)
							p:zoomy(1)
							p:x(scx)
							p:y(scy)
							if a == 'y' then
								p:zoomy(normalize(pn,1,2,0,1))
								p:y(scy+(128*normalize(pn,1,2,1,0)*sw/(128*4))*d)
								p:decelerate(spb*s)
								p:zoomy(normalize(pn,1,2,1,0))
								p:y(scy-(128*normalize(pn,1,2,0,1)*sw/(128*4))*d)
							elseif a == 'x' then
								p:zoomx(normalize(pn,1,2,0,1))
								p:x(scx+(128*normalize(pn,1,2,1,0))*d)
								p:decelerate(spb*s)
								p:zoomx(normalize(pn,1,2,1,0))
								p:x(scx-(128*normalize(pn,1,2,0,1))*d)
							end
						end
					end
				end)
			end

			local f,t = 1,jm_skewChops
			local amt = 5
			for i = 1,table.getn(t) do
				if t[i][2] ~= 0 then
					mm(t[i][1],function(self)
						for pn = 1,2 do
							local a = Plr(pn)
							if a then
								a:decelerate(spb*0.25)
								a:rotationz(amt*f)
								a:skewx(amt/50*f)
								a:rotationx(-amt/2)
							end
						end
						f=-f
						amt = amt + 5
					end)
				else
					mm(t[i][1],function(self)
						for pn = 1,2 do
							local a = Plr(pn)
							if a then
								a:decelerate(spb*0.25)
								a:rotationz(0)
								a:skewx(0)
								a:rotationx(0)
							end
						end
						amt = 5
					end)
				end
			end
			
			--taro's garbage
			for i=0,2 do
				me(172+i*8,1,0,157,'dizzy',l,outCubic,nil,3)
				me(176+i*8,4,157,0,'dizzy',l,outCubic)
			end
			
			local function boi(beat,sus,out,amp)
				if not amp then amp = 1 end
				me(beat,.5,0,amp*157,'dizzy',l,outCubic,nil,sus-.5)
				me(beat+sus,out,amp*157,0,'dizzy',l,inCubic,nil,sus-.5)
			end
			
			if slumpo then
				for i=0,3 do
					boi(238.75+8*i,.75,.5)
					boi(242+8*i,1.5,.5)
				end
			else
				boi(242+8*3,1.5,.5)
			end
			
			---------- PERFRAMES ----------
			function update_loop(beat)
			
				if perframe(204,266) then
					for pn = 1,2 do
						local a = Plr(pn)
						if a then
							a:x(scx+(100*math.sin(beat/2*math.pi+(pn*math.pi))))
						end
					end
				end

			end -- THIS ENDS THE FUNCTION
			
			---------- SORT ACTIONS ----------
			if table.getn(mod_actions) > 1 then table.sort(mod_actions, modtable_compare) end
			self:queuecommand('Update');
		end"
		
		UpdateCommand="%function(self)
			if GAMESTATE:GetSongBeat()>=0 and not checked then
					local ThingsToGrab = {'BPMDisplay','LifeFrame','ScoreFrame','Lyrics','SongBackground','SongForeground','Overlay','Underlay'}
					local ThingsToHide = {'BPMDisplay','LifeFrame','ScoreFrame','Overlay','Underlay'}
					for pn=1,2 do
						_G['P'..pn] = SCREENMAN:GetTopScreen():GetChild('PlayerP'..pn) or nil;
						if _G['P'..pn] then
							_G['jud'..pn]=_G['P'..pn]:GetChild('Judgment');
							_G['com'..pn]=_G['P'..pn]:GetChild('Combo');
						end
						table.insert(ThingsToGrab,'LifeP'..pn); table.insert(ThingsToGrab,'ScoreP'..pn);
						table.insert(ThingsToHide,'LifeP'..pn); table.insert(ThingsToHide,'ScoreP'..pn);
					end	
					for i,v in ipairs(ThingsToGrab) do _G[v] = SCREENMAN:GetTopScreen():GetChild(v) or nil end	
					for i,v in ipairs(ThingsToHide) do if _G[v] then _G[v]:hidden(1) end end
				checked = true;
			end

			--local beat = GAMESTATE:GetSongBeat()
			local beat = mod_time*(165/60) --HE HE HE HE HE
			
			if beat > mod_firstSeenBeat+0.1 and checked then
				mod_do('clearall')
				mod_beat_reader(beat)
				mod_ease_reader(beat)
				actions_reader(beat)
				update_loop(beat)
			end

			self:sleep(1/75);
			self:queuecommand('Update');
		end"
	/>

	<Layer Type="Quad" InitCommand="%function(self) blackness = self end" OnCommand="hidden,1;zoomto,sw,sh;x,scx;y,scy;diffuse,1,1,1,1;" />
	<Layer Type="Quad" InitCommand="%function(self) whiteness = self end" OnCommand="hidden,1;zoomto,sw,sh;x,scx;y,scy;diffuse,0,0,0,1;" />
	
	<Layer File="milk.sprite" InitCommand="%function(self) milk_bottom = self end"
	OnCommand="x,0;y,sh;zoomx,sw/512;vertalign,top;diffusealpha,0.9;hidden,1;" HideCommand="hidden,1" />
	<Layer File="milk.sprite" InitCommand="%function(self) milk_top = self end"
	OnCommand="x,sw;y,0;zoomx,sw/512;basezoomx,-1;basezoomy,-1;vertalign,top;diffusealpha,0.9;hidden,1;" HideCommand="hidden,1" />

	<Layer File="tac/xdjump.png" InitCommand="%function(self) self:draworder(1000) tac_jump = self end"
	OnCommand="x,scx;y,scy;diffusealpha,1;hidden,1;" />

	<Layer File="tac/star.png" OnCommand="%function(self) table.insert(jm_jumpstars,self) self:hidden(1) end" />
	<Layer File="tac/star.png" OnCommand="%function(self) table.insert(jm_jumpstars,self) self:hidden(1) end" />
	<Layer File="tac/star.png" OnCommand="%function(self) table.insert(jm_jumpstars,self) self:hidden(1) end" />
	<Layer File="tac/star.png" OnCommand="%function(self) table.insert(jm_jumpstars,self) self:hidden(1) end" />
	<Layer File="tac/star.png" OnCommand="%function(self) table.insert(jm_jumpstars,self) self:hidden(1) end" />
	<Layer File="tac/star.png" OnCommand="%function(self) table.insert(jm_jumpstars,self) self:hidden(1) end" />
	<Layer File="tac/star.png" OnCommand="%function(self) table.insert(jm_jumpstars,self) self:hidden(1) end" />
	<Layer File="tac/star.png" OnCommand="%function(self) table.insert(jm_jumpstars,self) self:hidden(1) end" />
	<Layer File="tac/star.png" OnCommand="%function(self) table.insert(jm_jumpstars,self) self:hidden(1) end" />
	<Layer File="tac/star.png" OnCommand="%function(self) table.insert(jm_jumpstars,self) self:hidden(1) end" />
	
	<!--AND NOW FOR SOMETHING COMPLETELY CURSED-->
	<BitmapText
		Font="Common Normal"
		Text="test"
		OnCommand="x,20;y,120;horizalign,left;effectclock,music;playcommand,SetTime;hidden,1"
		SetTimeCommand="%function(self) self:settext(string.format('%.2f',self:GetSecsIntoEffect()*(165/60))..'\n'..string.format('%.2f',self:GetSecsIntoEffect()));
		mod_time = mod_globaloffset+self:GetSecsIntoEffect(); self:sleep(0.02); self:queuecommand('SetTime'); end"
	/>

	<Layer File="spellcard.xml"/>

</children></ActorFrame>