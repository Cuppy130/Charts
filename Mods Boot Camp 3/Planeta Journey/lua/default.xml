<ActorFrame
InitCommand="%function(self)
	songName = GAMESTATE:GetCurrentSong():GetSongDir()
	sw,sh = SCREEN_WIDTH,SCREEN_HEIGHT
	scx,scy = SCREEN_CENTER_X,SCREEN_CENTER_Y
	checked = false
	for i = 1,8 do _G['P'..i] = nil _G['jud'..i] = nil _G['com'..i] = nil end
	function spb() return (60/(GAMESTATE:GetCurBPS()*60)) end
end" ><children>
	<Layer Type="Quad" InitCommand="hidden,1" OnCommand="sleep,1000"/>
	<Layer File="modhelpers.xml" /> <Layer File="tweens.xml" /> <Layer File="c2l.xml"/> <Layer File="readers.xml" /> 

	<Layer Type="Quad" InitCommand="%function(self) self:hidden(1) self:x(0) des_aux = self end"/>

	<Layer
		Type="Quad"
		OnCommand="hidden,1;"
		InitCommand="%function(self)
			mod_plr = {}; mod_firstSeenBeat = GAMESTATE:GetSongBeat(); mods, curaction, mod_actions, mods_ease, mod_perframes = {}, 1, {}, {}, {}
			local m,mm,me,mpf,l,e,str = mod_insert,mod_message,mod_ease,mpf_insert,'len','end',''
			m(0, 9999, '*9999 overhead,*9999 2x,*9999 no beat,*9999 -10000 cover', l, nil)
			local function r(float) return ((math.rad(float)*100)*-1) end
			local function counterReverse(reverseAmount) return 100-5000/(50-(reverseAmount)) end



			local shh = {
				{44.542,0,1},
				{45.000,0,1},
				{45.792,0,1},
				{46.500,0,1},
				{47.000,0,1},
				{48.000,0,1},
			}
			local f = 1
			for i = 2,table.getn(shh) do
				local beat = shh[i-1][1]
				local diff = (shh[i][1] - beat)
				mod_bounce(beat, diff, 0, diff*69*f, 'tipsy', 'Expo', false, nil)
				mod_bounce(beat, diff, 0, -0.05*f, function(t) for pn = 1,2 do local a = Plr(pn) if a then a:skewx(t) end end end, 'Expo', false, nil)
				f=-f
			end


			for i = 1,table.getn(pj_pwetty_steawth_fwashes_uwu) do
				local beat = pj_pwetty_steawth_fwashes_uwu[i][1]
				me(beat, 4, 35, 0, 'stealth', l, outElastic, nil, 0.2, 1, -0.02)
			end



            if FUCK_EXE then
				m(51, 13, '*-1 200 tiny0,*-1 200 tiny2',l,1)
				m(51, 13, '*-1 200 tiny1,*-1 200 tiny3',l,2)

				--m(107, 32, '*-1 200 tiny0,*-1 200 tiny2',l,1)
				--m(107, 32, '*-1 200 tiny1,*-1 200 tiny3',l,2)
				for col = 0,3 do
					m(64, 1, '*-1 no tiny'..col,l,nil)
					m(108+32, 1, '*-1 no tiny'..col,l,nil)
				end
				me(86.5, 2.5, 360, 0, 'rotationz', l, inOutExpo, nil, 0.2)
			else
				function gb_remove_2col(b,loe,col,pn)
					if col == 0 then m(b,loe,'*10000 -9999 reverse, *10000 9999 split, *10000 0 cross, *10000 0 alternate',l,pn) end
					if col == 1 then m(b,loe,'*10000 0 reverse, *10000 0 split, *10000 -9999 cross, *10000 0 alternate',l,pn) end
					if col == 2 then m(b,loe,'*10000 0 reverse, *10000 -9999 split, *10000 0 cross, *10000 0 alternate',l,pn) end
					if col == 3 then m(b,loe,'*10000 -9999 reverse, *10000 0 split, *10000 9999 cross, *10000 0 alternate',l,pn) end
					if col == 4 then m(b,loe,'*10000 0 reverse, *10000 0 split, *10000 0 cross, *10000 -9999 alternate',l,pn) end
					if col == 5 then m(b,loe,'*10000 -9999 reverse, *10000 0 split, *10000 0 cross, *10000 9999 alternate',l,pn) end
					if col == -1 then m(b,loe,'*10000 0 reverse, *10000 0 split, *10000 0 cross, *10000 0 alternate',l,pn) end
				end
				gb_remove_2col(51,13,5,1)
				gb_remove_2col(51,13,4,2)

				--gb_remove_2col(107,32,5,1)
				--gb_remove_2col(107,32,4,2)
				m(64, 2, '*999 no reverse,*999 no split,*999 no cross,*999 no alternate',l,nil)
				m(108+32, 2, '*999 no reverse,*999 no split,*999 no cross,*999 no alternate',l,nil)
			end

			------

			function pj_wenis(beat)
				me(beat, 1, 0, 80, 'tornado', l, outExpo, nil, 0.2)
				me(beat+0.5, 2, 80, 0, 'tornado', l, inOutBack, nil, 0.2, 6)
				bouncy_wiggle(beat+1,1.5,0.5,0,150,'tipsy',l,'Circ',false,false,nil)
			end

			pj_wenis(111.5)
			pj_wenis(127.5)
			pj_wenis(199.5)
			pj_wenis(215.5)

			m(20, 13, '*1 30 wave,*1 bumpy', l, nil)
			m(228, 13, '*1 30 wave,*1 bumpy', l, nil)
			m(244, 13, '*1 30 wave,*1 bumpy', l, nil)



			mm(0,function()
				for pn = 1,2 do
					local a = Plr(pn)
					if a then
						a:zoomz(4)
					end
				end
			end,true)


			m(18.5, 2, '*10 -50 split,*10 -50 cross,*10 -50 alternate,*20 reverse',l,nil)
			m(18.667, 2, '*10 -100 split,*10 no cross,*10 no alternate,*10 reverse',l,nil)
			m(18.833, 2, '*10 -50 split,*10 50 cross,*10 -50 alternate,*10 reverse',l,nil)
			m(19, .292, '*10 no split,*10 no cross,*10 no alternate,*10 reverse',l,nil)
			m(19.292, 2, '*20 split,*10 no cross,*10 no alternate,*20 no reverse',l,nil)
			m(19.5, 4, '*20 no reverse,*20 no split',l,nil)

			local f = 1
			local wew_table = {
				{32.000,0,1},
				{32.000,3,1},
				{32.500,0,1},
				{32.500,3,1},
				{33.000,0,1},
				{33.500,0,1},
				{33.792,0,1},
				{33.792,3,1},
				{34.292,0,1},
				{34.500,0,1},
				{35.000,0,1},
				{35.000,3,1},
				--{36.000,0,1},
			}
			local a = (100/table.getn(wew_table)+1)
			local x_cur,x_last = 0,0
			for i = 2,table.getn(wew_table) do
				local beat = wew_table[i-1][1]
				local diff = (wew_table[i][1] - beat)
				local which = wew_table[i][2]
				mod_bounce(beat, diff, 0, diff*200*f, 'drunk', 'Circ', false, nil)
				mod_bounce(beat, diff, 0, diff*200*f, 'tipsy', 'Circ', false, nil)
				--mod_bounce(beat, diff, 0, diff*10*f, function(t) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(t*(pn*2-3)) end end end, 'Circ', false, nil)
				if which == 3 then
					--me(beat, 1, 2, 1, function(t) for pn = 1,2 do local a = Plr(pn) if a then a:zoom(t) end end end, l, outExpo, nil, 0.2)
					me(beat, 1, 4, 1, function(t) for pn = 1,2 do local a = Plr(pn) if a then a:zoom(t) end end end, l, outExpo, nil)
					me(beat, 1, 50, 0, 'flip', l, outExpo, nil)
					--me(beat, 1, 1000*f, 0, 'drunk', l, outExpo, nil)
				end
				x_cur = x_cur + (1/table.getn(wew_table))
				me(beat, 0.5, x_last, x_cur, function(t)
					for pn = 1,2 do 
						local a = Plr(pn) 
						if a then 
							a:x(sw*normalize(pn,1,2,0.25,0.75)-t*normalize(pn,1,2,-sw/4,sw/4))
							--a:zoomy(normalize(t,0,1,1,2))
							_G['jud'..pn]:x(160*(pn*2-3)*t)
							_G['com'..pn]:x(160*(pn*2-3)*t)
						end
					end 
				end, l, outExpo, nil, 0.2)
				x_last = x_cur
				f=-f
			end
			mod_bounce(32, 2, 0, -20, function(t) for pn = 1,2 do local a = Plr(pn) if a then a:rotationx(t) end end end, 'Circ', false, nil)
			mod_bounce(33.792, 1.208, 0, 20, function(t) for pn = 1,2 do local a = Plr(pn) if a then a:rotationx(t) end end end, 'Circ', false, nil)

			me(35, 2, 0.91, 1, function(t) 
				for pn = 1,2 do 
					local a = Plr(pn) 
					if a then 
						a:x(sw*normalize(pn,1,2,0.25,0.75)-t*normalize(pn,1,2,-sw/4,sw/4))
						_G['jud'..pn]:x(160*(pn*2-3)*t)
						_G['com'..pn]:x(160*(pn*2-3)*t)
					end
				end 
			end, l, inOutBack, nil, 0.2)

			me(35, 2, 0, -200, 'mini', l, inOutBack, nil, 3)
			me(35, 2, 0, 80, 'flip', l, inOutBack, nil, 3)
			me(35, 2, 2, 1, 'xmod', l, inOutBack, nil, 3)
			--mod_bounce(35, 5, 2, 0.5, 'xmod', 'Quad', false, nil)
			me(35, 2, 0, 99.99, 'reverse', l, inOutBack, nil, 3)
			me(35, 2, 0, -40, function(t) for pn = 1,2 do local a = Plr(pn) if a then a:rotationx(t) end end end, l, inOutBack, nil,0.2)
			
			mm(37,function()
				for pn = 1,2 do
					local a = Plr(pn)
					if a then
						a:x(scx)
						_G['jud'..pn]:x(160*(pn*2-3))
						_G['com'..pn]:x(160*(pn*2-3))
					end
				end
			end,true)

			me(39.5, 1, -200, 0, 'mini', l, inOutBack, nil)
			me(39.5, 1, 80, 0, 'flip', l, inOutBack, nil)
			me(39.5, 1, 0, 100, 'invert', l, inOutBack, nil,1.5)
			me(39.5, 1, 1, 2, 'xmod', l, inOutBack, nil)
			me(39.5, 1, 99.99, 0, 'reverse', l, inOutBack, nil)

			mod_bounce(41, .792, 0, 40, 'mini', 'Circ', false, nil)
			me(41, 1.5, -40, 0, function(t) for pn = 1,2 do local a = Plr(pn) if a then a:rotationx(t) end end end, l, inOutBack, nil,0.2)

			me(41.75, 1, 100, 0, 'invert', l, outExpo, nil)

			local f,t = 1,{{41.792},{42.5},{43},{43.5},{44},}
			for i = 2,table.getn(t) do
				local beat = t[i-1][1]
				local diff = (t[i][1] - beat)
				me(beat, 1, -200, 0, 'mini', l, outQuad, nil)
				me(beat, 1, 20, 0, 'flip', l, outQuad, nil)
				me(beat, 1, 0.5, 2, 'xmod', l, outQuad, nil)
				mod_bounce(beat, diff, 0, diff*200*f, 'tipsy', 'Circ', false, nil)
				mod_bounce(beat, diff, 0, diff*200*f, function(t) for pn = 1,2 do local a = Plr(pn) if a then a:x(scx+t*(pn*2-3)) end end end, 'Circ', false, nil)
				f=-f
			end

			me(44, 1, -200, 0, 'mini', l, outQuad, nil)
			me(44, 1, 20, 0, 'flip', l, outQuad, nil)

			me(43, 2, 0, -40, function(t) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(t) a:rotationx(t) end end end, l, inOutBack, nil,0.2)
			me(43, 2, 0, 100, 'flip', l, inOutBack, nil, 3)
			me(43, 2, 0, -100, 'invert', l, inOutBack, nil, 3)
			me(43, 2, 0, 99.99, 'reverse', l, inOutBack, nil, 3)
			me(47.5, 1, -40, 0, function(t) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(t) a:rotationx(t) end end end, l, inOutBack, nil,0.2)
			me(47.5, 1, 99.99, 0, 'reverse', l, inOutBack, nil)
			me(47.5, 1, 100, 0, 'flip', l, inOutBack, nil)
			me(47.5, 1, -100, 0, 'invert', l, inOutBack, nil)

			local f,t = 1,{{48},{48.792},{49.5},{50},{51},{52}}
			for i = 2,table.getn(t) do
				local beat = t[i-1][1]
				local diff = (t[i][1] - beat)
				mod_bounce(beat, diff, 0, diff*200*f, 'drunk', 'Circ', false, nil)
				--mod_bounce(beat, diff, 0, diff*10*f, function(t) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(t) end end end, 'Circ', false, nil)
				me(beat, 1, -200, 0, 'mini', l, outQuad, nil)
				me(beat, 1, 20, 0, 'flip', l, outQuad, nil)
				me(beat, 1, 1, 2, 'xmod', l, outQuad, nil)
				f=-f
			end
			bouncy_wiggle(50,3,1,0,200,'tipsy',l,'Circ',false,false,nil)
			mod_bounce(50, 1, 0, 75, 'mini', 'Circ', false, nil)
			mod_bounce(51, 1, 0, -100, 'mini', 'Circ', false, nil)

			local f = 50
			local speed = 0.75
			local offset = 0.4
			local start = 51.5
			for i = 0,10,2 do
				mod_bounce(start+i-offset,speed,0,-100,function(t) local a = Plr(1) if a then a:y(scy+t) end end,'Sine',false)
				me(start+i-offset,speed,0,200,function(t) local a = Plr(1) if a then a:z(t) end end,l,inOutQuad,nil)
				me(start+i+1-offset,speed,200,0,function(t) local a = Plr(1) if a then a:z(t) end end,l,inOutQuad,nil)

				mod_bounce(start+i+1-offset,speed,0,-100,function(t) local a = Plr(2) if a then a:y(scy+t) end end,'Sine',false)
				me(start+i+1-offset,speed,0,200,function(t) local a = Plr(2) if a then a:z(t) end end,l,inOutQuad,nil)
				me(start+i+2-offset,speed,200,0,function(t) local a = Plr(2) if a then a:z(t) end end,l,inOutQuad,nil)

				f=-f
			end

			local f = 1
			for i = 1,table.getn(pj_funny) do
				local beat,which = pj_funny[i][1],pj_funny[i][2]
				me(beat, 1, 25, 0, 'brake', l, outSine, nil)
				--me(beat, 1, 25, 0, 'wave', l, outSine, nil)
				--me(beat, 1, 50*f, 0, 'drunk', l, outExpo, nil)
				f=-f
			end

			m(56, 1.75, '*5 invert', l, nil) m(57.75, 0.5, '*10 no invert', l, nil)

			me(57.75, 0.5, -200, 0, 'mini', l, outQuad, nil) me(57.75, 0.5, 20, 0, 'flip', l, outQuad, nil)
			me(58.5, 0.5, -200, 0, 'mini', l, outExpo, nil) me(58.5, 0.5, 20, 0, 'flip', l, outExpo, nil)
			me(59, 0.5, -200, 0, 'mini', l, outQuad, nil) me(59, 0.5, 20, 0, 'flip', l, outQuad, nil)
			mod_bounce(59, 1, 0, 40, 'centered', 'Circ', false, nil)
			mod_bounce(59, 1, 2, 1, 'xmod', 'Circ', false, nil)


			mod_bounce(60, 1, 0, 100, 'drunk', 'Quad', false, nil)
			bouncy_wiggle(60,4,1,0,20,function(t) for pn = 1,2 do local a = Plr(pn) if a then a:x(scx+t*(pn*2-3)) end end end,l,'Circ',false,false,nil,20)
			mod_bounce(61, 1, 0, 400, 'tipsy', 'Quad', false, nil)
			mod_bounce(62, 1, 0, -200, 'tipsy', 'Quad', false, nil)

			for i = 0,2,0.5 do
				me(64+i, 0.5, -200, 0, 'mini', l, outExpo, nil)
				me(64+i, 0.5, 20, 0, 'flip', l, outExpo, nil)
			end

			bouncy_wiggle(64,2,0.5,0,50,'tipsy',l,'Circ',false,false,nil,50)
			bouncy_wiggle(64,2,0.5,0,50,'drunk',l,'Circ',false,false,nil,50)
			bouncy_wiggle(64,2,0.5,0,25,'dizzy',l,'Circ',false,false,nil,25)
			bouncy_wiggle(64,2,0.5,0,-4,function(t) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(t) end end end,l,'Circ',false,false,nil,4)
			me(64, 3, 0, 30, 'reverse', l, outSine, nil)
			me(64, 3, 0, 100, 'distant', l, outSine, nil)
			me(64, 3, 0, 400, function(t) for pn = 1,2 do local a = Plr(pn) if a then a:z(t) end end end, l, outSine, nil)
			me(66, 2, 30, 0, 'reverse', l, inSine, nil)
			me(66, 2, 100, 0, 'distant', l, inSine, nil)
			me(66, 2, 400, 0, function(t) for pn = 1,2 do local a = Plr(pn) if a then a:z(t) end end end, l, inSine, nil, 0.2)
			mod_bounce(66, 1, 0, 200, 'drunk', 'Circ', false, nil)
			mod_bounce(66.5, 0.5, 0, 100, 'tipsy', 'Circ', false, nil)
			me(66.5, 0.5, -100, 0, 'mini', l, outCirc, nil) me(66.5, 0.5, 10, 0, 'flip', l, outCirc, nil)
			mod_bounce(67, 1, 0, -100, 'tipsy', 'Circ', false, nil)
			me(67, 1, -100, 0, 'mini', l, inCirc, nil, 0.2) me(67, 1, 10, 0, 'flip', l, inCirc, nil, 0.2)

			m(68, 8, '*10 sudden,*10 40 suddenoffset,*10 1.5x,*10 40 mini,*10 75 wave', l, nil)
			m(84, 8, '*10 sudden,*10 40 suddenoffset,*10 1.5x,*10 40 mini,*10 75 wave', l, nil)

			me(67.5, 1, scx, 64*3, function(t) for pn = 1,2 do local a = Plr(pn) if a then a:x(t) end end end, l, inOutBack, nil, 0.2)
			me(67.5, 1, scy, (64*3)+(64), function(t) for pn = 1,2 do local a = Plr(pn) if a then a:y(t) end end end, l, inOutBack, nil, 0.2)
			me(69.5, 1, 62*3, sw-64*3, function(t) for pn = 1,2 do local a = Plr(pn) if a then a:x(t) end end end, l, inOutBack, nil, 0.2)
			me(71.5, 1, (64*3)+(64), sh-(64*3)+(64), function(t) for pn = 1,2 do local a = Plr(pn) if a then a:y(t) end end end, l, inOutBack, nil, 0.2)
			me(73.5, 1, sw-64*3, 64*3, function(t) for pn = 1,2 do local a = Plr(pn) if a then a:x(t) end end end, l, inOutBack, nil, 0.2)
			me(75.5, 1, 64*3, scx, function(t) for pn = 1,2 do local a = Plr(pn) if a then a:x(t) end end end, l, inOutBack, nil, 0.2)
			me(75.5, 1, sh-(64*3)+(64), scy, function(t) for pn = 1,2 do local a = Plr(pn) if a then a:y(t) end end end, l, inOutBack, nil, 0.2)

			me(83.5, 1, scx, sw-64*3, function(t) for pn = 1,2 do local a = Plr(pn) if a then a:x(t) end end end, l, inOutBack, nil, 0.2)
			me(83.5, 1, scy, sh-(64*3)+(64), function(t) for pn = 1,2 do local a = Plr(pn) if a then a:y(t) end end end, l, inOutBack, nil, 0.2)
			me(85.5, 1, sw-64*3, 64*3, function(t) for pn = 1,2 do local a = Plr(pn) if a then a:x(t) end end end, l, inOutBack, nil, 0.2)
			me(87.5, 1, 64*3, sw-64*3, function(t) for pn = 1,2 do local a = Plr(pn) if a then a:x(t) end end end, l, inOutBack, nil, 0.2)
			me(87.5, 1, sh-(64*3)+(64), (64*3)+(64), function(t) for pn = 1,2 do local a = Plr(pn) if a then a:y(t) end end end, l, inOutBack, nil, 0.2)
			me(89.5, 1, sw-64*3, 64*3, function(t) for pn = 1,2 do local a = Plr(pn) if a then a:x(t) end end end, l, inOutBack, nil, 0.2)
			me(91.5, 1, 64*3, scx, function(t) for pn = 1,2 do local a = Plr(pn) if a then a:x(t) end end end, l, inOutBack, nil, 0.2)
			me(91.5, 1, (64*3)+(64), scy, function(t) for pn = 1,2 do local a = Plr(pn) if a then a:y(t) end end end, l, inOutBack, nil, 0.2)


			bouncy_wiggle(68-.5,24,1,100,140,function(t) for pn = 1,2 do local a = Plr(pn) if a then a:zoomx(t/100) end end end,l,'Quad',true,true,nil,0)
			bouncy_wiggle(68,24,1,100,120,function(t) for pn = 1,2 do local a = Plr(pn) if a then a:zoomy(t/100) end end end,l,'Quad',true,false,nil,0)
			bouncy_wiggle(68,8,2,0,-20,function(t) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(t) end end end,l,'Expo',false,false,nil,0)

			bouncy_wiggle(84,8,2,0,-20,function(t) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(t) end end end,l,'Expo',false,false,nil,0)

			mod_bounce(76, 8, 0, 100, 'mini', 'Sine', false, nil)
			mod_bounce(76, 8, 0, 20, 'reverse', 'Sine', false, nil)
			mod_bounce(76, 8, 0, 360, 'dizzy', 'Sine', false, nil)
			mod_bounce(76, 8, 0, 100, 'bumpy', 'Sine', false, nil)
			bouncy_wiggle(76,8,2,0,100,'drunk',l,'Quad',false,false,nil,0)
			bouncy_wiggle(76,7,1,0,-5,function(t) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(t) end end end,l,'Quad',false,false,nil,0)
			--bouncy_wiggle(76,8,1,0,-50,'movey',l,'Quad',true,false,nil,0)

			--bouncy_wiggle(84,8,2,0,50,'movey',l,'Circ',false,false,nil,0)

			local f = 1
			for i = 0,6,2 do
                mm(68+i,function() f=-f end) 
                mpf(68+i,68+(i+2),function(beat)
                    local pos = (beat - (310+i))
                    local string = '*9999 '.. -math.cos(pos*math.pi)*50+50 ..' invert,'..
                    '*9999 '.. math.sin((pos*math.pi)+math.pi)*(10*f) ..' reverse,'..
                    '*9999 '.. math.sin(pos*math.pi)*(20*f) ..' alternate'
                    mod_do(string,nil)
                end)

                mm(84+i,function() f=-f end) 
                mpf(84+i,84+(i+2),function(beat)
                    local pos = (beat - (310+i))
                    local string = '*9999 '.. -math.cos(pos*math.pi)*50+50 ..' invert,'..
                    '*9999 '.. math.sin((pos*math.pi)+math.pi)*(10*-f) ..' reverse,'..
                    '*9999 '.. math.sin(pos*math.pi)*(20*-f) ..' alternate'
                    mod_do(string,nil)
                end)
            end


			me(91, 1, 40, 0, 'mini', l, inOutBack, nil, 0.2)
			m(92, 6, '*15 150 wave,*999 360 dizzy', l, nil)
			mod_bounce(92, 4, 2, 1, 'xmod', 'Sine', false, nil)
			me(91, 2, 10, -40, function(t) for pn = 1,2 do local a = Plr(pn) if a then a:rotationx(t-10) a:rotationz(t) end end end, l, inOutBack, nil)
			me(95.5, 1, -40, 40, function(t) for pn = 1,2 do local a = Plr(pn) if a then a:rotationx(-t-10) a:rotationz(t) end end end, l, inOutBack, nil)
			me(95.5, 1, 0, 99.99, 'reverse', l, inOutBack, nil, 4)

			me(92, 1, -300, 0, 'mini', l, outExpo, nil, 0.2) me(92, 1, 30, 0, 'flip', l, outExpo, nil, 0.2)
			me(95.5, 1, -300, 0, 'mini', l, outExpo, nil, 0.2) me(95.5, 1, 30, 0, 'flip', l, outExpo, nil, 0.2)
			me(96, 1, -300, 0, 'mini', l, outExpo, nil, 0.2) me(96, 1, 30, 0, 'flip', l, outExpo, nil, 0.2)
			m(96, 3, '*1 boost', l, nil)

			me(98, 2, 360, 0, 'dizzy', l, inQuad, nil, 0.2)
			me(99, 2, 40, 0, function(t) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(t) end end end, l, inOutBack, nil)
			me(99, 2, 40, 0, function(t) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(t) end end end, l, inOutBack, nil)
			bouncy_wiggle(100,4,1,0,100,function(t) for pn = 1,2 do local a = Plr(pn) if a then a:x(scx-t*(pn*2-3)) a:rotationz((-t/6)) end end end,l,'Quad',false,false,nil,0)
			me(100, 3, -30, 0, function(t) for pn = 1,2 do local a = Plr(pn) if a then a:rotationx(t) end end end, l, inSine, nil, 0.2)
			bouncy_wiggle(100,4,1,0,-40,'tornado',l,'Circ',false,false,nil,0)
			me(100, 4, 99.99, 0, 'reverse', l, linear, nil, 0.1)
			ease_wiggle(100-.5,4,100,1,'invert',inOutCirc,l,nil,true)

			me(106, 1.5, 360, 0, function(t) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(t) end end end, l, inOutCirc, nil, 0.2)
			--me(107, 1, -500, 0, 'mini', l, outExpo, nil, 0.2)
			mod_bounce(106, 1, 0, 40, 'reverse', 'Circ', false, nil)
			mod_bounce(106, 1, 0, 40, 'flip', 'Circ', false, nil)

			local f,DJ_Jimmothan_C = 1,{} -- hey
			DJ_Jimmothan_C.Deodorant = {{104.000,0,1},{104.792,0,1},{105.500,0,1},{106.000,0,1},}
			for i = 2,table.getn(DJ_Jimmothan_C.Deodorant) do
				local beat = DJ_Jimmothan_C.Deodorant[i-1][1]
				local diff = (DJ_Jimmothan_C.Deodorant[i][1] - beat)
				mod_bounce(beat, diff, -500, 0, 'mini', 'Expo', false, nil)
				mod_bounce(beat, diff, 2, 1, 'xmod', 'Expo', false, nil)
				me(beat, 1, 1000*f, 0, 'tipsy', l, outExpo, nil)
				f=-f
			end

			me(106, 1, -500, 0, 'mini', l, inOutExpo, nil, 0.2)
			m(106, 24, '*1 100 beat', l, nil)
			bouncy_wiggle(107-.5,25,1,100,140,function(t) for pn = 1,2 do local a = Plr(pn) if a then a:zoomx(t/100) end end end,l,'Quad',true,true,nil,0)
			bouncy_wiggle(107,25,1,100,120,function(t) for pn = 1,2 do local a = Plr(pn) if a then a:zoomy(t/100) end end end,l,'Quad',true,false,nil,0)
			bouncy_wiggle(108,24,1,0,10,function(t) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(t) end end end,l,'Quad',false,false,nil,0)
			bouncy_wiggle(108,24,1,2,1.5,'xmod',l,'Quad',true,false,nil,0)
			bouncy_wiggle(108,24,1,0,100,'wave',l,'Quad',true,false,nil,0)
			bouncy_wiggle(108,24,1,0,50,'incoming',l,'Quad',true,false,nil,0)
			bouncy_wiggle(108,24,1,0,-50,'hallway',l,'Quad',true,false,nil,0)

			bouncy_wiggle(114,2,1,0,-50,'distant',l,'Quad',true,false,nil,0)
			mod_bounce(119.5, 2.5, 0, 30, 'reverse', 'Quad', false, nil)
			bouncy_wiggle(120.5,1.5,0.5,0,100,'tipsy',l,'Quad',false,false,nil,0)
			bouncy_wiggle(120.5,1.5,0.5,0,100,'drunk',l,'Quad',false,false,nil,0)
			mod_bounce(122, 1, 0, -100, 'tipsy', 'Quad', false, nil)
			mod_bounce(122, 1, 0, -100, 'drunk', 'Quad', false, nil)
			me(122.5, 1.5, 360, 0, 'dizzy', l, inOutSine, nil, 0.2)
			bouncy_wiggle(130,2,1,0,-50,'distant',l,'Quad',true,false,nil,0)

			m(114, 0.5, '*15 invert', l, nil) m(114.5, 0.5, '*15 no invert', l, nil)
			m(115, 0.5, '*15 invert', l, nil) m(115.5, 0.5, '*15 no invert', l, nil)

			me(106-.5, 1.5, 1, 0, function(t) 
				for pn = 1,2 do 
					local a = Plr(pn) 
					if a then 
						a:x(sw*normalize(pn,1,2,0.25,0.75)-t*normalize(pn,1,2,-sw/4,sw/4))
						_G['jud'..pn]:x(160*(pn*2-3)*t)
						_G['com'..pn]:x(160*(pn*2-3)*t)
					end
				end 
			end, l, inOutBack, nil, 23)

			local ass = {{132.000,0,1}, {132.500,0,1}, {133.792,0,1}, {134.292,0,1}, {136.000,1,1}, {136.500,1,1}, {137.792,0,2},}
			local f,x_last,x_cur = 1,0,0
			for i = 1,table.getn(ass) do
				local beat = ass[i][1]
				me(beat, 1, -200, 0, 'mini', l, outExpo, nil, 0.2) 
				me(beat, 2.5, 1.25, 2, 'xmod', l, inCirc, nil, 0.2)
				me(beat, 2.5, -25*f, 0, 'tornado', l, inCirc, 1, 0.2)
				me(beat, 2.5, 25*f, 0, 'tornado', l, inCirc, 2, 0.2)
				me(beat, 2.5, 400*f, 0, 'tipsy', l, outExpo, nil, 0.2)
				me(beat, 2.5, 400*f, 0, 'bumpy', l, outExpo, nil, 0.2)
				me(beat, 1, (x_last*100)/2.5,(x_cur*100)/2.5, 'reverse', l, inOutBack, nil, 2.5, 15, 2)
				me(139, 2, (x_cur*100)/2.5, 0, 'reverse', l, inOutBack, nil, 10)
				x_cur = x_cur + (1/table.getn(ass))
				me(beat-.25, 0.5, x_last, x_cur, function(t)
					for pn = 1,2 do 
						local a = Plr(pn) 
						if a then 
							a:x(sw*normalize(pn,1,2,0.25,0.75)-t*normalize(pn,1,2,-sw/4,sw/4))
							--a:zoomy(normalize(t,0,1,1,2))
							_G['jud'..pn]:x(160*(pn*2-3)*t)
							_G['com'..pn]:x(160*(pn*2-3)*t)
						end
					end 
				end, l, inOutBack, nil, 0.2, 15, 2)
				x_last = x_cur
				f = -f
			end

			m(130, 0.5, '*15 invert', l, nil) m(130.5, 0.5, '*15 no invert', l, nil)
			m(131, 0.5, '*15 invert', l, nil) m(131.5, 0.5, '*15 no invert', l, nil)

			m(136, 2, '*99 -66 flip', l, nil)

			mod_bounce(137.792, 0.708, 0, 100, 'drunk', 'Circ', false, nil)
			mod_bounce(138.5, 0.5, 0, -100, 'drunk', 'Circ', false, nil)
			mod_bounce(139, 1, 0, 140, 'tipsy', 'Circ', false, nil)

			--me(139, 2, 2, 1, function(t) for pn = 1,2 do local a = Plr(pn) if a then a:zoomy(t) end end end, l, inOutBack, nil, 0.2)

			m(140, 16, '*0.2 mini', l, nil)
			m(140, 16, '*15 100 sudden,*0.2 -20 suddenoffset,*0.2 50 wave,*1 20 expand', l, 1)
			m(140, 16, '*15 100 hidden,*0.2 60 hiddenoffset,*0.2 150 wave,*1 20 expand', l, 2)

			bouncy_wiggle(140,16,1,0,100,function(t) for pn = 1,2 do local a = Plr(pn) if a then a:x(scx-(t*(GAMESTATE:GetSongBeat()-140)/15)*(pn*2-3)) end end end,l,'Quad',false,false,nil,0)
			bouncy_wiggle(140,16,1,0,10,'drunk',l,'Quad',false,false,1,10)
			bouncy_wiggle(140,16,1,0,-10,'drunk',l,'Quad',false,false,2,-10)

			me(155, 1, 100, 0, 'mini', l, inOutSine, nil, 0.2)
			me(155, 1, 100, 0, 'sudden', l, inOutSine, 1, 0.2)
			me(155, 1, 100, 0, 'hidden', l, inOutSine, 2, 0.2)
			me(155, 1, 150, 0, 'wave', l, inOutSine, nil, 0.2)
			me(155, 1, 20, 0, 'expand', l, inOutSine, nil, 0.2)

			mod_bounce(156, 2, 0, -50, function(t) for pn = 1,2 do local a = Plr(pn) if a then a:rotationx(t) end end end, 'Circ', false, nil)
			me(157, 2, 360, 180, function(t) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(t) end end end, l, inOutCirc, nil, 0.2)
			mod_bounce(158, 2, 0, 50, function(t) for pn = 1,2 do local a = Plr(pn) if a then a:rotationx(t) end end end, 'Circ', false, nil)
			me(159, 1, 180, 0, function(t) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(t) end end end, l, inCirc, nil, 0.2)



			local f,MC_Timmothan_B = 1,{} -- ho
			MC_Timmothan_B.Antiperspirant = {{160.000,0,1},{160.792,0,1},{161.500,0,1},{162.000,0,1},}
			for i = 2,table.getn(MC_Timmothan_B.Antiperspirant) do
				local beat = MC_Timmothan_B.Antiperspirant[i-1][1]
				local diff = (MC_Timmothan_B.Antiperspirant[i][1] - beat)
				mod_bounce(beat, diff, -500, 0, 'mini', 'Expo', false, nil)
				mod_bounce(beat, diff, 2, 1, 'xmod', 'Expo', false, nil)
				me(beat, 1, 1000*f, 0, 'tipsy', l, outExpo, nil)
				f=-f
			end

			me(162, 1, -500, 0, 'mini', l, outExpo, nil, 0.2)
			me(162-.5, 1.5, -360, 0, function(t) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(t) end end end, l, inOutCirc, nil, 0.2)


			bouncy_wiggle(164-.5,24,1,100,140,function(t) for pn = 1,2 do local a = Plr(pn) if a then a:zoomx(t/100) end end end,l,'Quad',true,true,nil,0)
			bouncy_wiggle(164,24,1,100,120,function(t) for pn = 1,2 do local a = Plr(pn) if a then a:zoomy(t/100) end end end,l,'Quad',true,false,nil,0)
			bouncy_wiggle(166,22,2,0,10,function(t) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(t*(pn*2-3)) end end end,l,'Circ',false,false,nil,0)
			bouncy_wiggle(164,24,2,0,50,'drunk',l,'Expo',false,true,1,0)
			bouncy_wiggle(164,24,2,0,-50,'drunk',l,'Expo',false,true,2,0)
			bouncy_wiggle(164,24,2,0,100,'tipsy',l,'Expo',false,true,1,0)
			bouncy_wiggle(164,24,2,0,-100,'tipsy',l,'Expo',false,true,2,0)

			me(163, 2, 1, 0, function(t)
				for pn = 1,2 do 
					local a = Plr(pn) 
					if a then 
						a:x(sw*normalize(pn,1,2,0.25,0.75)-t*normalize(pn,1,2,-sw/4,sw/4))
						_G['jud'..pn]:x(160*(pn*2-3)*t)
						_G['com'..pn]:x(160*(pn*2-3)*t)
					end
				end 
			end, l, inOutBack, nil, 0.2)

			for pn = 1,2 do
				me(163, 2, 0, 100*math.cos(0/100*math.pi+(pn*math.pi)), 'distant', l, inOutBack, pn, 2)
			end

			local cur,last = 0,0
			for i = 0,20,2 do
				cur = cur + (180/8)*math.pi/4
				me(165+i, 2, last, cur, function(t) for pn = 1,2 do local a = Plr(pn) if a then 
					a:x(scx+(sw/4)*math.cos(t/100*math.pi+(pn*math.pi)))
					a:z((sw/4)*math.sin(t/100*math.pi+(pn*math.pi))*2)
					mod_do('*9999 '.. (sw/4)*math.sin(t/100*math.pi+(pn*math.pi)) ..' wave,*9999 '.. 100*math.cos(t/100*math.pi+(pn*math.pi)) ..' distant,*9999 '.. 300*math.sin(t/100*math.pi+(pn*math.pi)) ..' dizzy',pn)
					end end end, l, inOutBack, nil, 0.2)
				last = cur
			end
			me(187, 2, 1, 0, function(t) for pn = 1,2 do local a = Plr(pn) if a then a:z(a:GetZ()*t) mod_do('*9999 '.. -100*math.cos(math.pi+(pn*math.pi))*t ..' distant',pn) end end end, l, inOutBack, nil, 0.2)
			me(187, 2, 0, 1, function(t)
				for pn = 1,2 do 
					local a = Plr(pn) 
					if a then 
						a:x(sw*normalize(pn,1,2,0.25,0.75)-t*normalize(pn,1,2,-sw/4,sw/4))
						_G['jud'..pn]:x(160*(pn*2-3)*t)
						_G['com'..pn]:x(160*(pn*2-3)*t)
					end
				end 
			end, l, inOutBack, nil, 0.2)

			me(187, 2, 0, 100, 'invert', l, inOutBack, nil, 2)
			me(187, 2, 0, -50, 'mini', l, inOutBack, nil, 2)
			me(189, 2, -50, 100, 'mini', l, inOutBack, nil, 2)
			me(189, 2, 100, 0, 'invert', l, inOutBack, nil, 2)
			me(189, 2, 0, 100, 'flip', l, inOutBack, nil, 2)

			bouncy_wiggle(192,3,1,0,100,function(t) for pn = 1,2 do local a = Plr(pn) if a then a:x(scx+t) end end end,l,'Expo',false,false,nil,0)

			me(190, 3, 0, 0, 'flip', l, linear, 2)
			m(190, 4, '*999 sudden', l, 1)
			m(190, 4, '*999 hidden,*999 dark', l, 2)
			local last,cur = 100,100
			for i = 0,2 do
				cur = cur - (200/3)
				me(191+i, 1, last, cur, 'mini', l, inBack, nil, 1)
				me(192+i, 1, 200, 100, 'flip', l, outExpo, 1, 0.2)
				last = cur
			end
			mod_bounce(194, 1, 2, 1.75, 'xmod', 'Expo', false, nil)
			m(194, 2, '*20 no hidden,*20 no sudden', l, nil)
			me(194, 1, 100, 0, 'flip', l, outBack, 1, 2)
			me(194, 1, 0, 99.99, 'reverse', l, outExpo, nil, 25)
			me(195, 1, -200, 0, 'mini', l, inOutBack, nil, 2)

			bouncy_wiggle(191,3,1,0,-50,function(t) for pn = 1,2 do local a = Plr(pn) if a then a:y(scy+t) end end end,l,'Quad',true,false,nil,0)

			me(194, 2, 1, 0, function(t)
				for pn = 1,2 do 
					local a = Plr(pn) 
					if a then 
						a:x(sw*normalize(pn,1,2,0.25,0.75)-t*normalize(pn,1,2,-sw/4,sw/4))
						_G['jud'..pn]:x(160*(pn*2-3)*t)
						_G['com'..pn]:x(160*(pn*2-3)*t)
					end
				end 
			end, l, inOutBack, nil, 22)

			me(194.5, 1.5, 360, 0, function(t) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(t) end end end, l, inOutCirc, nil, 0.2)

			bouncy_wiggle(196-.5,24,1,100,140,function(t) for pn = 1,2 do local a = Plr(pn) if a then a:zoomx(t/100) end end end,l,'Quad',true,true,nil,0)
			bouncy_wiggle(196,24,1,100,120,function(t) for pn = 1,2 do local a = Plr(pn) if a then a:zoomy(t/100) end end end,l,'Quad',true,false,nil,0)
			bouncy_wiggle(196,24,1,0,10,function(t) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(t) end end end,l,'Quad',false,false,nil,0)
			bouncy_wiggle(196,24,1,2,1.5,'xmod',l,'Quad',true,false,nil,0)
			bouncy_wiggle(196,24,1,0,100,'wave',l,'Quad',true,false,nil,0)
			bouncy_wiggle(196,24,1,0,50,'incoming',l,'Quad',true,false,nil,0)
			bouncy_wiggle(196,24,1,0,50,'hallway',l,'Quad',true,false,nil,0)
			bouncy_wiggle(202,2,1,0,50,'distant',l,'Quad',true,false,nil,0)
			bouncy_wiggle(218,2,1,0,-100,'distant',l,'Quad',true,false,nil,0)

			
			local ass = {{88+132.000,0,1}, {88+132.500,0,1}, {88+133.792,0,1}, {88+134.292,0,1}, {88+136.000,1,1}, {88+136.500,1,1}, {88+137.792,0,2},}
			local f,x_last,x_cur,r_last,r_cur = 1,0,0,0.99,0.99
			for i = 1,table.getn(ass) do
				local beat = ass[i][1]
				me(beat, 1, -200, 0, 'mini', l, outExpo, nil, 0.2) 
				me(beat, 2.5, 1.25, 2, 'xmod', l, inCirc, nil, 0.2)
				me(beat, 2.5, -25*f, 0, 'tornado', l, inCirc, 1, 0.2)
				me(beat, 2.5, 25*f, 0, 'tornado', l, inCirc, 2, 0.2)
				me(beat, 2.5, 400*f, 0, 'tipsy', l, outExpo, nil, 0.2)
				me(beat, 2.5, 400*f, 0, 'bumpy', l, outExpo, nil, 0.2)
				me(beat, 1, (r_last*100),(r_cur*100), 'reverse', l, inOutBack, nil, 2.5, 15, 2)
				me(139+88, 2, (r_cur*100), 0, 'reverse', l, inOutBack, nil, 1)
				r_cur = r_cur - (1/table.getn(ass))/4
				x_cur = x_cur + (1/table.getn(ass))
				me(beat-.25, 0.5, x_last, x_cur, function(t)
					for pn = 1,2 do 
						local a = Plr(pn) 
						if a then 
							a:x(sw*normalize(pn,1,2,0.25,0.75)-t*normalize(pn,1,2,-sw/4,sw/4))
							--a:zoomy(normalize(t,0,1,1,2))
							_G['jud'..pn]:x(160*(pn*2-3)*t)
							_G['com'..pn]:x(160*(pn*2-3)*t)
						end
					end 
				end, l, inOutBack, nil, 0.2, 15, 2)
				x_last = x_cur
				r_last = r_cur
				f = -f
			end


			m(88+136, 2, '*99 -66 flip', l, nil)

			mod_bounce(88+137.792, 0.708, 0, 100, 'drunk', 'Circ', false, nil)
			mod_bounce(88+138.5, 0.5, 0, -100, 'drunk', 'Circ', false, nil)
			mod_bounce(88+139, 1, 0, 140, 'tipsy', 'Circ', false, nil)

			bouncy_wiggle(88+114,2,1,0,100,'distant',l,'Quad',true,false,nil,0)
			mod_bounce(88+119.5, 2.5, 99.99, 70, 'reverse', 'Quad', false, nil)
			bouncy_wiggle(88+120.5,1.5,0.5,0,100,'tipsy',l,'Quad',false,false,nil,0)
			bouncy_wiggle(88+120.5,1.5,0.5,0,100,'drunk',l,'Quad',false,false,nil,0)
			mod_bounce(88+122, 1, 0, -100, 'tipsy', 'Quad', false, nil)
			mod_bounce(88+122, 1, 0, -100, 'drunk', 'Quad', false, nil)
			me(88+122.5, 1.5, 360, 0, 'dizzy', l, inOutSine, nil, 0.2)
			bouncy_wiggle(88+130,2,1,0,100,'distant',l,'Quad',true,false,nil,0)

			m(202, 0.5, '*15 invert', l, nil) m(202.5, 0.5, '*15 no invert', l, nil)
			m(203, 0.5, '*15 invert', l, nil) m(203.5, 0.5, '*15 no invert', l, nil)
			m(218, 0.5, '*15 invert', l, nil) m(218.5, 0.5, '*15 no invert', l, nil)
			m(219, 0.5, '*15 invert', l, nil) m(219.5, 0.5, '*15 no invert', l, nil)

			bouncy_wiggle(20,2,1,0,200,'tipsy',l,'Circ',false,false,nil,0)
			mod_bounce(22, 0.792, 0, 200, 'drunk', 'Quad', false, nil)
			bouncy_wiggle(24.5,1.5,0.5,0,200,'tipsy',l,'Circ',false,false,nil,0)
			mod_bounce(26, 0.792, 0, 200, 'drunk', 'Quad', false, nil)
			bouncy_wiggle(28,2,1,0,200,'tipsy',l,'Circ',false,false,nil,0)
			mod_bounce(30, 0.792, 0, 200, 'drunk', 'Quad', false, nil)

			bouncy_wiggle(20-.5,12,1,100,140,function(t) for pn = 1,2 do local a = Plr(pn) if a then a:zoomx(t/100) end end end,l,'Quad',true,true,nil,0)
			bouncy_wiggle(20,12,1,100,120,function(t) for pn = 1,2 do local a = Plr(pn) if a then a:zoomy(t/100) end end end,l,'Quad',true,false,nil,0)
			me(20, 1.5, 0, 10, function(t) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(t) end end end, l, inOutBack, nil, 0.2)
			me(24, 1.5, 10, -10, function(t) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(t) end end end, l, inOutBack, nil, 0.2)
			me(28, 1.5, -10, 10, function(t) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(t) end end end, l, inOutBack, nil, 0.2)
			me(31.5, 0.5, 10, 0, function(t) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(t) end end end, l, inOutCirc, nil, 0.2)


			bouncy_wiggle(228-.5,14,1,100,140,function(t) for pn = 1,2 do local a = Plr(pn) if a then a:zoomx(t/100) end end end,l,'Quad',true,true,nil,0)
			bouncy_wiggle(228,14,1,100,120,function(t) for pn = 1,2 do local a = Plr(pn) if a then a:zoomy(t/100) end end end,l,'Quad',true,false,nil,0)
			me(228, 1.5, 0, 10, function(t) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(t) end end end, l, inOutBack, nil, 0.2)
			me(232, 1.5, 10, -10, function(t) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(t) end end end, l, inOutBack, nil, 0.2)
			me(236, 1.5, -10, 10, function(t) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(t) end end end, l, inOutBack, nil, 0.2)
			me(240, 1.5, 10, 0, function(t) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(t) end end end, l, inOutBack, nil, 0.2)

			bouncy_wiggle(208+20,2,1,0,200,'tipsy',l,'Circ',false,false,nil,0)
			mod_bounce(208+22, 0.792, 0, 200, 'drunk', 'Quad', false, nil)
			bouncy_wiggle(208+24.5,1.5,0.5,0,200,'tipsy',l,'Circ',false,false,nil,0)
			mod_bounce(208+26, 0.792, 0, 200, 'drunk', 'Quad', false, nil)
			bouncy_wiggle(208+28,2,1,0,200,'tipsy',l,'Circ',false,false,nil,0)
			mod_bounce(208+30, 0.792, 0, 200, 'drunk', 'Quad', false, nil)
			bouncy_wiggle(240.5,1.5,0.5,0,100,'tipsy',l,'Circ',false,false,nil,0)
			bouncy_wiggle(241.5,0.5,0.5,0,100,'drunk',l,'Circ',false,false,nil,0)

			me(227, 2, 1, 0, function(t)
				for pn = 1,2 do 
					local a = Plr(pn) 
					if a then 
						a:x(sw*normalize(pn,1,2,0.25,0.75)-t*normalize(pn,1,2,-sw/4,sw/4))
						_G['jud'..pn]:x(160*(pn*2-3)*t)
						_G['com'..pn]:x(160*(pn*2-3)*t)
					end
				end 
			end, l, inOutBack, nil, 22)

			me(241, 2, 0, 20, 'reverse', l, inOutBack, nil, 1)
			me(241, 2, 0, -100, 'mini', l, inOutBack, nil, 1)
			me(241, 2, 0, 20, 'flip', l, inOutBack, nil, 1)

			me(243-.5, 1.5, -360, 0, function(t) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(t) end end end, l, inOutCirc, nil, 0.2)
			me(243, 2, 20, 99.99, 'reverse', l, inOutBack, nil, 14)
			me(242.5, 2, -100, 0, 'mini', l, inOutBack, nil, 0.2)
			me(242.5, 2, 20, 0, 'flip', l, inOutBack, nil, 0.2)

			bouncy_wiggle(244-.5,14,1,100,140,function(t) for pn = 1,2 do local a = Plr(pn) if a then a:zoomx(t/100) end end end,l,'Quad',true,true,nil,0)
			bouncy_wiggle(244,14,1,100,120,function(t) for pn = 1,2 do local a = Plr(pn) if a then a:zoomy(t/100) end end end,l,'Quad',true,false,nil,0)

			bouncy_wiggle(224+20,2,1,0,200,'tipsy',l,'Circ',false,false,nil,0)
			mod_bounce(224+22, 0.792, 0, 200, 'drunk', 'Quad', false, nil)
			bouncy_wiggle(224+24.5,1.5,0.5,0,200,'tipsy',l,'Circ',false,false,nil,0)
			mod_bounce(224+26, 0.792, 0, 200, 'drunk', 'Quad', false, nil)
			bouncy_wiggle(224+28,2,1,0,200,'tipsy',l,'Circ',false,false,nil,0)
			mod_bounce(224+30, 0.792, 0, 200, 'drunk', 'Quad', false, nil)

			me(16+228, 1.5, 0, 10, function(t) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(t) end end end, l, inOutBack, nil, 0.2)
			me(16+232, 1.5, 10, -10, function(t) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(t) end end end, l, inOutBack, nil, 0.2)
			me(16+236, 1.5, -10, 10, function(t) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(t) end end end, l, inOutBack, nil, 0.2)
			me(16+240, 1.5, 10, 0, function(t) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(t) end end end, l, inOutBack, nil, 0.2)

			local f = 1
			local wew_table = {
				{224+32.000,0,1},
				{224+32.000,3,1},
				{224+32.500,0,1},
				{224+32.500,3,1},
				{224+33.000,0,1},
				{224+33.500,0,1},
				{224+33.792,0,1},
				{224+33.792,3,1},
				{224+34.292,0,1},
				{224+34.500,0,1},
				{224+35.000,0,1},
				{224+35.000,3,1},
				--{36.000,0,1},
			}
			local a = (100/table.getn(wew_table)+1)
			local x_cur,x_last = 0,0
			for i = 2,table.getn(wew_table) do
				local beat = wew_table[i-1][1]
				local which = wew_table[i][2]
				local diff = (wew_table[i][1] - beat)
				mod_bounce(beat, diff, 0, diff*200*f, 'drunk', 'Circ', false, nil)
				mod_bounce(beat, diff, 0, diff*200*f, 'tipsy', 'Circ', false, nil)
				--mod_bounce(beat, diff, 0, diff*10*f, function(t) for pn = 1,2 do local a = Plr(pn) if a then a:rotationz(t*(pn*2-3)) end end end, 'Circ', false, nil)
				if which == 3 then
					--me(beat, 1, 2, 1, function(t) for pn = 1,2 do local a = Plr(pn) if a then a:zoom(t) end end end, l, outExpo, nil, 0.2)
					me(beat, 1, 4, 1, function(t) for pn = 1,2 do local a = Plr(pn) if a then a:zoom(t) end end end, l, outExpo, nil)
					me(beat, 1, 50, 0, 'flip', l, outExpo, nil)
					--me(beat, 1, 1000*f, 0, 'drunk', l, outExpo, nil)
				end
				x_cur = x_cur + (1/table.getn(wew_table))
				me(beat, 0.5, x_last, x_cur, function(t)
					for pn = 1,2 do 
						local a = Plr(pn) 
						if a then 
							a:x(sw*normalize(pn,1,2,0.25,0.75)-t*normalize(pn,1,2,-sw/4,sw/4))
							--a:zoomy(normalize(t,0,1,1,2))
							_G['jud'..pn]:x(160*(pn*2-3)*t)
							_G['com'..pn]:x(160*(pn*2-3)*t)
						end
					end 
				end, l, outExpo, nil, 0.2)
				x_last = x_cur
				f=-f
			end
			mod_bounce(224+32, 2, 0, -20, function(t) for pn = 1,2 do local a = Plr(pn) if a then a:rotationx(t) end end end, 'Circ', false, nil)
			mod_bounce(224+33.792, 1.208, 0, 20, function(t) for pn = 1,2 do local a = Plr(pn) if a then a:rotationx(t) end end end, 'Circ', false, nil)

			me(224+35, 2, 0.91, 1, function(t) 
				for pn = 1,2 do 
					local a = Plr(pn) 
					if a then 
						a:x(sw*normalize(pn,1,2,0.25,0.75)-t*normalize(pn,1,2,-sw/4,sw/4))
						_G['jud'..pn]:x(160*(pn*2-3)*t)
						_G['com'..pn]:x(160*(pn*2-3)*t)
					end
				end 
			end, l, inOutBack, nil, 0.2)

			me(259, 2, 99.99, 0, 'reverse', l, inOutBack, nil, 0.2)
			me(260, 1, -200, 0, 'mini', l, outExpo, nil, 0.2)
			me(260, 1, 20, 0, 'flip', l, outExpo, nil, 0.2)
			me(260.5, 1, -200, 0, 'mini', l, outExpo, nil, 0.2)
			me(260.5, 1, 20, 0, 'flip', l, outExpo, nil, 0.2)

			m(261.792, 44, '*'.. (2*(140)/128) ..' 1000 centered', l, nil)
			me(260, 1, 0, 100, 'distant', l, inOutBack, nil, 44)
			mod_bounce(260, 2, 0, 100, 'bumpy', 'Circ', false, nil)

			me(261.25, 1, 0, 100, 'invert', l, inOutBack, nil)
			me(262.292, 1, 100, 0, 'invert', l, outBack, nil)
			me(262.292, 1, 0, 100, 'flip', l, outBack, nil)

			me(262.5, 1, 1, 0, function(t) for pn = 1,2 do local a = Plr(pn) if a then a:zoom(t) end end end, l, inOutBack, nil,100)
			
			
			
			
			
			--TARO BG STUFF
			
			me(0,18.5,100,100,'dark',e,linear)
			me(18.5,19,100,50,'dark',e,linear)
			
			local m2 = mm
			
			m2(4,function() pl_scene1:hidden(0) pl_scene1:playcommand('Up') end)
			m2(12,function() pl_scene1:hidden(1) pl_scene2:hidden(0) pl_scene2:playcommand('Up') pl_title:hidden(1) end)
			m2(18.5,function() pl_scene2:hidden(1) pl_scene3:hidden(0) pl_scene3:playcommand('Up')
				
				pl_scene3_soofi:x(120)
				pl_scene3_soofi:y(sh*0.9-30)
				pl_scene3_soofi:linear(90/140)
				pl_scene3_soofi:addx(80)
				pl_scene3_soofi:addy(-50)
				
				pl_scene3_soofi2:decelerate(45/140)
				pl_scene3_soofi2:addy(-100)
				pl_scene3_soofi2:accelerate(45/140)
				pl_scene3_soofi2:addy(100)
				
				pl_scene3_soofi3:linear(90/140)
				pl_scene3_soofi3:rotationz(360)
			
			end)
			
			m2(19.95,function()
				pl_scene3_soofi2:playcommand('Bounce')
				pl_scene3_soofi:linear(11.5*60/140)
				pl_scene3_soofi:x(1024+240)
			end)
			
			m2(20,function()
				
				pl_scene3i:linear(12*60/140)
				pl_scene3i:x(-1024-512+sw)
				
				
				
			end)
			
			m2(24,function()
				pl_scene3i:playcommand('Popup')
			end)
			
			m2(25,function()
				
				pl_scene3_soofi4:linear(240/140)
				pl_scene3_soofi4:addy(-18)
				pl_scene3_soofi4:zoom(.6)
				pl_scene3_soofi3:sleep(180/140)
				pl_scene3_soofi3:linear(120/140)
				pl_scene3_soofi3:diffuse(0,0,0,1)
				
			end)
			
			m2(27,function()
				pl_scene3i:playcommand('EVin')
			end)
			
			m2(31.5,function()
				
				pl_scene3_soofi:hidden(1)
				
				pl_scene3_shipsoofi:playcommand('In')
				
			end)
			
			m2(32,function()
				
				pl_scene3_soofi:hidden(1)
				
				pl_scene3_shipsoofi:playcommand('In')
				
				pl_scene3_ship_main:accelerate(180/140)
				pl_scene3_ship_main:addx(150)
				pl_scene3_ship_main:addy(-300)
				pl_scene3_ship_main:zoom(0)
				pl_scene3_ship_main:rotationz(20)
				
			end)
			
			m2(35,function() pl_scene3_star:playcommand('Blip') pl_bgcover:playcommand('Down') end)
			
			m2(36,function() pl_bgcover:playcommand('Up') end)
			m2(36,function() pl_scene3:hidden(1) pl_scene4:hidden(0) pl_scene4:playcommand('Up') end)
			m2(40,function() pl_scene4:playcommand('ComeOn') end)
			m2(41.75,function() pl_scene4:playcommand('Hype') end)
			m2(42.5,function() pl_scene4:playcommand('Hype') end)
			m2(43,function() pl_scene4:playcommand('Hype') end)
			m2(43.5,function() pl_scene4:playcommand('Hype') end)
			
			m2(44,function() pl_scene4:hidden(1) pl_scene5:hidden(0) pl_scene5:playcommand('Up') end)
			m2(48,function() pl_scene5:playcommand('Hype') end)
			m2(48,function() pl_scene5:playcommand('Hype2') end)
			m2(48.75,function() pl_scene5:playcommand('Hype') end)
			m2(49.5,function() pl_scene5:playcommand('Hype') end)
			m2(50,function() pl_scene5:playcommand('Hype') end)
			
			m2(52,function() pl_scene5:hidden(1) pl_scene6:hidden(0) pl_scene6:playcommand('Up') end)
			m2(51,function() pl_bgcover:playcommand('Down') end)
			m2(52,function() pl_bgcover:playcommand('Up') end)
			
			function math.clamp(va,mi,ma)
				if va > ma then return ma end
				if va < mi then return mi end
				return va
			end
			
			mpf(52,64,function(beat)
				local s6m = {pl_scene6_mz,pl_scene6_bol,pl_scene6_soofi,pl_scene6_mz2,pl_scene6_bol2,pl_scene6_soofi2}
				
				for i=1,6 do
					local a = s6m[i]
					if a then
						local ang = 50*math.sin((beat*0.5*math.pi) - 4 + math.pi/2)
						a:rotationz(math.clamp(ang,-15,15))
					end
				end
				
			end)
			
			m2(56,function() pl_scene6:playcommand('Swap1') end)
			m2(57.75,function() pl_scene6:playcommand('Swap2') end)
			m2(60,function() pl_scene6:playcommand('Out') end)
			m2(63.5,function() pl_scene6:playcommand('In') end)
			m2(66.5,function() pl_scene6:playcommand('Liftoff') end)
			
			m2(68,function() pl_scene7:playcommand('Planet1') end)
			m2(70,function() pl_scene7:playcommand('Planet2') end)
			m2(72,function() pl_scene7:playcommand('Planet3') end)
			m2(74,function() pl_scene7:playcommand('Planet4') end)
			
			m2(84,function() pl_scene7:playcommand('Planet5') end)
			m2(86,function() pl_scene7:playcommand('Planet6') end)
			m2(88,function() pl_scene7:playcommand('Planet7') end)
			m2(90,function() pl_scene7:playcommand('Planet8') end)
			
			m2(68,function() pl_scene6:hidden(1) pl_scene7:hidden(0) pl_scene7:playcommand('Up') end)
			m2(67,function() pl_bgcover:playcommand('Down') end)
			m2(68,function() pl_bgcover:playcommand('Up') end)
			m2(69.5,function() pl_scene7:playcommand('Go1') end)
			m2(76,function() pl_scene7:playcommand('TravelUp') end)
			m2(83,function() pl_scene7:playcommand('TravelDown') pl_scene7:playcommand('PlanetSet2') end)
			m2(83.5,function() pl_scene7:playcommand('Go2') end)
			
			m2(92,function() pl_scene7:playcommand('Huh') end)
			m2(96,function() pl_scene7:playcommand('Gas') end)
			m2(100,function() pl_scene7:playcommand('Ohno') end)
			
			m2(107,function() pl_bgcover:playcommand('Down') end)
			m2(108,function() pl_bgcover:playcommand('Up') end)
			m2(108,function() pl_scene7:hidden(1) pl_scene8:hidden(0) pl_scene8:playcommand('Up') end)
			m2(116,function() pl_scene8:hidden(1) pl_scene9:hidden(0) pl_scene9:playcommand('Up') end)
			m2(120,function() pl_scene9:playcommand('Salute') end)
			m2(124,function() pl_scene9:hidden(1) pl_scene10:hidden(0) pl_scene10:playcommand('Up') end)
			m2(132,function() pl_scene10:hidden(1) pl_scene11:hidden(0) pl_scene11:playcommand('Up') end)
			
			for i=108,116,2 do
				m2(i,function() pl_scene8:playcommand('Push1') end)
				m2(i+1,function() pl_scene8:playcommand('Push2') end)
				m2(i,function() pl_scene8:playcommand('PushB') end)
				m2(i+1,function() pl_scene8:playcommand('PushB') end)
			end
			
			m2(132,function() pl_scene11:playcommand('Photo1') end)
			m2(133.75,function() pl_scene11:playcommand('Photo2') end)
			m2(136,function() pl_scene11:playcommand('Photo3') end)
			
			m2(137.75,function() pl_bgcover:playcommand('Down225') end)
			m2(140,function() pl_bgcover:playcommand('Up') end)
			
			m2(140,function() pl_scene11:hidden(1) pl_scene12:hidden(0) pl_scene12:playcommand('Up') end)
			m2(140,function() pl_scene12:playcommand('TravelUp') end)
			m2(155,function() pl_scene12:playcommand('TravelDown') end)
			m2(158,function() pl_scene12:playcommand('Wow') end)
			m2(160,function() pl_scene12:playcommand('JailLand') end)
			
			m2(162,function() pl_bgcover:playcommand('Down') end)
			m2(163,function() pl_bgcover:playcommand('Up') end)
			m2(163,function() pl_scene12:hidden(1) pl_scene13:hidden(0) pl_scene13:playcommand('Up') end)
			
			mpf(108,132,function(beat)
				local walkabout = {
									pl_scene8_mz,pl_scene8_bol,pl_scene8_soofi,
									pl_scene9_mz,pl_scene9_bol,pl_scene9_soofi,
									pl_scene10_mz,pl_scene10_bol,pl_scene10_soofi,
								}
				
				for i=1,table.getn(walkabout) do
					local a = walkabout[i]
					if a then
						local ang = 50*math.sin((beat*0.5*math.pi) - 4 + math.pi/2)
						a:rotationz(math.clamp(ang,-15,15))
					end
				end
				
			end)
			
			mpf(164,180,function(beat)
				local walkabout = {
									pl_scene13_mz,pl_scene13_bol,pl_scene13_soofi,
								}
				
				for i=1,table.getn(walkabout) do
					local a = walkabout[i]
					if a then
						local ang = 50*math.sin((beat*0.5*math.pi) - 4 + math.pi/2)
						a:rotationz(math.clamp(ang,-15,15))
					end
				end
				
			end)
			
			m2(179.5,function() pl_scene14:hidden(0) pl_scene14:playcommand('Up') pl_scene14:playcommand('TravelUp') end)
			m2(181,function() pl_scene13:hidden(1) end)
			m2(188,function() pl_scene14:playcommand('TravelDown') end)
			m2(190,function() pl_scene14:playcommand('Wow') end)
			m2(192,function() pl_scene14:playcommand('EarthLand') end)
			
			m2(194,function() pl_bgcover:playcommand('Down') end)
			m2(195,function() pl_bgcover:playcommand('Up') end)
			
			mpf(195,220,function(beat)
				local walkabout = {
									pl_scene15_mz,pl_scene15_bol,pl_scene15_soofi,
								}
				
				for i=1,table.getn(walkabout) do
					local a = walkabout[i]
					if a then
						local ang = 50*math.sin((beat*0.5*math.pi) - 4 + math.pi/2)
						a:rotationz(math.clamp(ang,-15,15))
					end
				end
				
			end)
			
			m2(195,function() pl_scene14:hidden(1) pl_scene15:hidden(0) pl_scene15:playcommand('Up') end)
			
			m2(220,function() pl_scene15:playcommand('Stop') end)
			
			m2(220.00,function() pl_scene15:playcommand('Hype') end)
			m2(220.50,function() pl_scene15:playcommand('Hype') end)
			
			m2(221.75,function() pl_scene15:playcommand('Hype') end)
			m2(222.25,function() pl_scene15:playcommand('Hype') end)
			
			m2(224.00,function() pl_scene15:playcommand('Hype') end)
			m2(224.50,function() pl_scene15:playcommand('Hype') end)
			
			m2(225.75,function() pl_scene15:playcommand('Hype') end)
			m2(225.75,function() pl_bgcover:playcommand('Down225') end)
			
			m2(228,function() pl_bgcover:playcommand('Up') end)
			
			m2(228,function() pl_scene15:hidden(1) pl_scene16:hidden(0) pl_scene16:playcommand('Up') end)
			m2(230,function() pl_scene16:playcommand('DropMZ') end)
			
			m2(236,function() pl_scene16:hidden(1) pl_scene17:hidden(0) pl_scene17:playcommand('Up') end)
			m2(238,function() pl_scene17:playcommand('DropBol') end)
			
			m2(244,function() pl_scene17:hidden(1) pl_scene18:hidden(0) pl_scene18:playcommand('Up') end)
			
			mpf(244,251,function(beat)
				
				for i=1,6 do
					local mu = -1
					if i==3 or i==4 then
						mu = 1
					end
					local a = _G['pl_eb'..i]
					if a then
						if beat >= 247 and beat < 250 then
							a:texcoordvelocity((.5-.5*linear(beat-247,0,1,3))*mu,0)
						elseif beat >= 250 then
							a:texcoordvelocity(0,0)
						end
					end
				end
				
			end)
			
			m2(250,function() pl_scene18:playcommand('NoLig') end)
			m2(250,function()
				pl_scene18_soofi:y(sh*0.7)
				pl_scene18_soofi:x(1024+240)
				pl_scene18_soofi:linear(12/14)
				pl_scene18_soofi:x(1024+100)
				
				pl_scene18_soofi2:linear(12/14)
				pl_scene18_soofi2:rotationz(-360)
			end)
			
			m2(252,function()
				
				pl_scene18i2:linear(7*6/14)
				pl_scene18i2:x(0)
				pl_scene18:playcommand('ShipOff')
				
				pl_scene18_soofi:playcommand('Bounce')
				pl_scene18_soofi:linear(24/14)
				pl_scene18_soofi:x(640)
				
				--pl_scene18_soofi3:sleep(12/14)
				pl_scene18_soofi3:linear(12/14)
				pl_scene18_soofi3:diffuse(1,1,1,1)
				
				--pl_scene18_soofi4:sleep(12/14)
				pl_scene18_soofi4:linear(12/14)
				pl_scene18_soofi4:zoom(1.4)
				
			end)
			
			m2(256,function()
			
				pl_scene18:playcommand('Down')
				
				pl_scene18_soofi2:stoptweening()
				pl_scene18_soofi2:playcommand('StopBounce')
				
				local a = pl_scene18_soofi
				
				if a then
					
					a:x(590)
					a:y( sw*0.2 + sw*0.4*math.random() )
					a:rotationz(math.random(0,360))
					a:sleep(3/14)
					a:x(530)
					a:y( sw*0.2 + sw*0.4*math.random() )
					a:rotationz(math.random(0,360))
					a:sleep(3/14)
					a:x(480)
					a:y( sw*0.2 + sw*0.4*math.random() )
					a:rotationz(math.random(0,360))
					a:sleep(3/14)
					a:x(420)
					a:y( sw*0.2 + sw*0.4*math.random() )
					a:rotationz(math.random(0,360))
					a:sleep(1.5/14)
					a:x(360)
					a:y( sw*0.2 + sw*0.4*math.random() )
					a:rotationz(math.random(0,360))
					a:sleep(3/14)
					a:x(300)
					a:y( sw*0.2 + sw*0.4*math.random() )
					a:rotationz(math.random(0,360))
					a:sleep(1.5/14)
					a:x(230)
					a:y( sw*0.2 + sw*0.4*math.random() )
					a:rotationz(math.random(0,360))
					a:sleep(3/14)
					
					a:x(100)
					a:y(sh*0.8)
					a:rotationz(-90)
				
				end
				
			end)
			
			m2(260,function() pl_scene18:hidden(1) pl_scene19:hidden(0) pl_scene19:playcommand('Up') end)
			
			self:queuecommand('Update')
		end"
		UpdateCommand="%function(self)
			if GAMESTATE:GetSongBeat()>=0 and not checked then
				local ThingsToGrab = {'BPMDisplay','LifeFrame','ScoreFrame','Lyrics','SongBackground','SongForeground','Overlay','Underlay'}
				local ThingsToHide = {'BPMDisplay','LifeFrame','ScoreFrame','Overlay','Underlay'}
				for pn=1,2 do
					_G['P'..pn] = SCREENMAN:GetTopScreen():GetChild('PlayerP'..pn) or nil;
					if _G['P'..pn] then
						table.insert(mod_plr, _G['P'..pn])
						_G['jud'..pn]=_G['P'..pn]:GetChild('Judgment');
						_G['com'..pn]=_G['P'..pn]:GetChild('Combo');
						_G['jud'..pn]:basezoomx(0.8)
						_G['jud'..pn]:basezoomy(0.8)
						_G['com'..pn]:basezoomx(0.8)
						_G['com'..pn]:basezoomy(0.8)
					end
					table.insert(ThingsToGrab,'LifeP'..pn); table.insert(ThingsToGrab,'ScoreP'..pn);
					table.insert(ThingsToHide,'LifeP'..pn); table.insert(ThingsToHide,'ScoreP'..pn);
				end	
				for i,v in ipairs(ThingsToGrab) do _G[v] = SCREENMAN:GetTopScreen():GetChild(v) or nil end	
				for i,v in ipairs(ThingsToHide) do if _G[v] then _G[v]:hidden(1) end end
				if table.getn(mod_actions) > 1 then table.sort(mod_actions, modtable_compare) end
				checked = true;
				mod_screen = SCREENMAN:GetTopScreen()
			end
			
			if GAMESTATE:GetSongBeat() > mod_firstSeenBeat+0.1 and checked then
				mod_do('clearall')
				mod_beat_reader(GAMESTATE:GetSongBeat())
				mod_ease_reader(GAMESTATE:GetSongBeat())
				actions_reader(GAMESTATE:GetSongBeat())
				mod_perframe_reader(GAMESTATE:GetSongBeat())
			end
			self:sleep(1/50)
			self:queuecommand('Update')
		end"
	/>
	
	

	<Layer Type="Quad" InitCommand="x,scx;y,scy;zoomto,sw,sh;hidden,1;diffuse,1,1,1,0;" OnCommand="%function(self) pj_whitequad = self end" WhiteFlashMessageCommand="hidden,0;diffusealpha,1;linear,4;diffusealpha,0;"/>

	<Layer File="spellcard.xml" />

</children></ActorFrame>