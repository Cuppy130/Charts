<ActorFrame
InitCommand="%function(self)

	songName = GAMESTATE:GetCurrentSong():GetSongDir();
	global_offset = PREFSMAN:GetPreference('GlobalOffsetSeconds');
	
	function time_at_beat(beat)
		local t = 0.043+(beat*(60/148))
		return t
	end
	
	sw = SCREEN_WIDTH
	sh = SCREEN_HEIGHT --shortcuts
	
	function Plr(pn)
		return _G['P'..pn]
	end
	function GetJud(pn)
		return _G['jud'..pn]
	end
	function GetCom(pn)
		return _G['com'..pn]
	end
	
	function mod_do(str,pn)
		if pn then
			GAMESTATE:ApplyGameCommand('mod,'..str,pn)
		else
			GAMESTATE:ApplyGameCommand('mod,'..str)
		end
	end
	
	function taro_Sound(str)
		local met = GAMESTATE:GetCurrentSong():GetSongDir();
		SOUND:PlayOnce(met..'lua/'..str..'.ogg');
	end
	
	function fb_other(pn)
		if pn == 1 then return 2 end
		if pn == 2 then return 1 end
		return 0
	end
	
	frumpy_fg = {}
	frumpy_bg = {}
	
end"
><children>

	<Layer
		Type="Quad"
		InitCommand="hidden,1"
		OnCommand="sleep,1000"
	/>
	
	<Layer File="modhelpers.xml" />
	<Layer File="easing.xml" />
	<Layer File="spellcard.xml" />
	
	<Layer
		Type="Quad"
		OnCommand="hidden,1"
		InitCommand="%function(self)
		
			checked = false; P1=nil;P2=nil;P3=nil;P4=nil;jud1=nil;com1=nil;jud2=nil;com2=nil;jud3=nil;com3=nil;
		
			---------------------------------------------------------
			---------DOCUMENTATION-----------------------------------
			---------------------------------------------------------
			
			--function perframe( beat, endBeat )
				--return true if the current beat is between 'beat' and 'endBeat'
			
			--function mod_shader(beat,key,which)
				--turn on shader key at specified beat (up to 10 keys available, defined by 'which' = 0-9
				
			--function mod_insert(beat,len,mod,len_or_end,pn)
				--insert mod into beat mods table
			--function mod_insert2(time,len,mod,len_or_end,pn)
				--insert mod into time mods table
				
			--function mod_message(beat,msg,persistent)
				--insert something into the actions table.
				--msg can also be a function. If string, a message gets broadcast at that beat
				--if 'persistent' is true, message will run even if editor starts at a beat past it
				
			--function mod_blacklist(t,n)
				--check if number n occurs in table t
				--useful for doing 'every beat EXCEPT the contents of t'
				
			--function simple_m0d(beat,strength,mult,mod)
			--function simple_m0d2(beat,strength,mult,mod,pn)
			--function simple_m0d3(beat,strength,duration,bpm,mod,pn)
				--activate mods at specific beat but also deactivate them
				
			--function mod_wiggle(beat,num,div,amt,speed,mod,pn,first)
				--alternates a mod back and forth before resetting to 0
				
			--function mod_springt(time,strength,dur,mod,pn)
				--time-based per-frame alternating mod that decreases based on how much time is left.
					--think doorstopper
			
			--function mod_springt2(time,strength,dur,mod,pn)
				--time-based per-frame alternating mod
			
			--function mod_onebeat(beat,strength,pn)
				--turns on beat for the beat specified, at the desired strength	
			
			--function switcheroo_add(beat,which,speed,len,pn)
				--adds a column swap at the desired beat
			--[[	switcheroos = {normal = {0,0}, ldur = {0,0}, reset = {0,0},
					flip = {100,0}, rudl = {100,0}, invert = {0,100}, dlru = {0,100},
					ludr = {25,-75}, rdul = {75,75}, drlu = {25,125}, ulrd = {75,-125}, urld = {100,-100}}
			]]
			
			--use a variable called 'switcheroo_width' to change how much space is between each column
			--e.g. switcheroo_width = 2 for ayakashi
			
			--function mod_sugarkiller(beat,duration,speed,minstealth,maxstealth,pn)
				--portable version of the effect from sugarkill X
				
			--function doSpline(spd, axis, path, col)
				--draws spline 'path' in specified axis, for specific col. Offsets are *10000, but positions use *spd
				
			--function doSplineAll(spd, axis, path)
				--same as above, but for all columns
				--(faster performance than using doSpline 4 times due to more efficient concat)
			
			--function mindf_rotateAndCounter(xDegrees, yDegrees, zDegrees, player)
				--counteract euler rotations after rotating player in multiple axes, using a TON of math.
			
			
			---------------------------------------------------------
			--------END DOCUMENTATION--------------------------------
			---------------------------------------------------------
			
			local m = mod_insert
			local m2 = mod_message
			local me = mod_ease
			
			
			local l = 'len'
			local e = 'end'
			
			
			
			
			
			
			
			init_modsp1 = '';
			init_modsp2 = '';
			
			mod_plr = {};
			
			mod_firstSeenBeat = GAMESTATE:GetSongBeat(); --necessary to prevent long freezes
			
			
			
			
			
			
			
			
			
			
			
---------------------------------------------------------------------------------------
----------------------Begin tables 'n stuff--------------------------------------------
---------------------------------------------------------------------------------------

			--beat based mods
			--{beat_start, beat_end, mods, len_or_end, player_number}
			mods = {
				{0,9999,'*2 1.75x, *1000 no beat, *10000 -999999 cover','end'},
			}
			
			--switcheroos = {{0,0},{100,0},{0,100},{25,-75},{75,75},{25,125},{75,-125},{100,-100}}
			
			
			
			
			
			
			
			--time based mods
			mod_time = 0;
			--{time_start, time_end, mods, len_or_end, player_number}
			mods2 = {
				--{0,200.345,'3x','end',1},
			}
			
			
			
			
			--this is both a message broadcaster and a function runner
			--if you put {beat,'String'}, then 'String' is broadcast as a message on that beat
			--if you put {beat,function() somecode end}, then function() is run at that beat
			--see example on beat 32
			
			curaction = 1;
			--{beat,thing,persists}
			mod_actions = {
			
			
				
			}
			
			m(0,50.5,'*10 -100 reverse, *10 stealth',e)
			m(4,50.5,'*10 50 flip',e)
			m(276,999,'*10000 -100 reverse, *10000 stealth',e)
			
			--beat-based ease mods
			--{time_start, time_end, mod_start, mod_end, mod, len_or_end, ease_type, player_number, sustaintime, optional_param1, optional_param2}
			--valid ease types are:
				--linear
				--inQuad    outQuad    inOutQuad    outInQuad
				--inCubic   outCubic   inOutCubic   outInCubic
				--inQuart   outQuart   inOutQuart   outInQuart
				--inQuint   outQuint   inOutQuint   outInQuint
				--inSine    outSine    inOutSine    outInSine
				--inExpo    outExpo    inOutExpo    outInExpo
				--inCirc    outCirc    inOutCirc    outInCirc
				--inElastic outElastic inOutElastic outInElastic    --can take 2 optional parameters - amplitude & period
				--inBack    outBack    inOutBack    outInBack       --can take 1 optional parameter  - spring amount
				--inBounce  outBounce  inOutBounce  outInBounce
				
			mods_ease = {
				-- EXAMPLE TWEEN: from beat 0 to 4, make rotationz go from 360 to 0 with the inOutBack tween
				--{0,4,360,0,'rotationz','end',inOutBack},
			}
			
			
			
			m2(4,function()
				local a = Plr(1)
				if a then
					a:x(sw/2 - 160)
				end
				local a = Plr(2)
				if a then
					a:x(sw/2 + 20)
				end
				
				jug_fb_wzoom:x(0)
				jug_fb_wrot:z(40)
				
				jug_bg2:linear(16*60/148)
				jug_bg2:diffusealpha(1)
				jug_bg1:sleep(16*60/148)
				jug_bg1:diffusealpha(0)
				
			end)
			
			m2(16,function()
				jug_bg3:linear(4*60/148)
				jug_bg3:diffusealpha(0.5)
			end)
			m2(50.5,function()
				jug_bg3:linear(1.4*60/148)
				jug_bg3:diffusealpha(0)
			end)
			m2(116,function()
				jug_bg4:linear(28*60/148)
				jug_bg4:diffusealpha(1)
				jug_bg4:linear(4*60/148)
				jug_bg4:diffusealpha(0)
				jug_bg2:sleep(28*60/148)
				jug_bg2:diffusealpha(0)
				jug_bg1:sleep(28*60/148)
				jug_bg1:diffusealpha(1)
			end)
			
			m2(176,function()
				jug_bg2:linear(4*60/148)
				jug_bg2:diffusealpha(1)
				jug_bg1:sleep(4*60/148)
				jug_bg1:diffusealpha(0)
			end)
			
			m2(208,function()
				jug_bg1:diffusealpha(0)
				jug_bg2:diffusealpha(1)
			end,true)
			
			jug_bouncewidth = 1
			jug_bgbounceheight = .5
			
			m2(211,function()
				jug_bgbounce:linear(60/148)
				jug_bgbounce:x(-.8)
			end)
			m2(239,function()
				jug_bgbounce:linear(60/148)
				jug_bgbounce:x(0)
			end)
			m2(240,function()
				jug_bg2:x(sw/2)
				jug_bg2:y(sh/2)
				jug_bg2:rotationz(0)
			end)
			m2(244,function()
				jug_bgbounce:x(-1.2)
				jug_bgbounceheight = .9
			end)
			m2(271,function()
				jug_bgbounce:linear(60/148)
				jug_bgbounce:x(0)
			end)
			m2(272,function()
				jug_bg2:x(sw/2)
				jug_bg2:y(sh/2)
				jug_bg2:rotationz(0)
			end)
			
			m2(272,function()
				jug_bg3:linear(4*60/148)
				jug_bg3:diffusealpha(0.5)
			end)
			m2(291,function()
				jug_bg3:diffusealpha(0)
			end)
			
			m2(8,function()
				jug_fb_wzoom:linear(12*60/148)
				jug_fb_wzoom:x(1)
				jug_fb_wrot:linear(12*60/148)
				jug_fb_wrot:z(0)
			end)
			
			m2(36,function()
				jug_fb_wrot:decelerate(60/148)
				jug_fb_wrot:y(-15)
			end)
			m2(40,function()
				jug_fb_wrot:decelerate(60/148)
				jug_fb_wrot:y(15)
			end)
			
			m2(44.5,function()
				jug_fb_wrot:decelerate(30/148)
				jug_fb_wrot:y(-15)
				jug_fb_wrot:sleep(15/148)
				jug_fb_wrot:decelerate(30/148)
				jug_fb_wrot:y(15)
				jug_fb_wrot:sleep(15/148)
				jug_fb_wrot:decelerate(30/148)
				jug_fb_wrot:y(-15)
				jug_fb_wrot:sleep(15/148)
				jug_fb_wrot:decelerate(30/148)
				jug_fb_wrot:y(15)
				jug_fb_wrot:sleep(15/148)
				jug_fb_wrot:decelerate(30/148)
				jug_fb_wrot:y(-15)
				jug_fb_wrot:sleep(15/148)
				jug_fb_wrot:decelerate(30/148)
				jug_fb_wrot:y(15)
				jug_fb_wrot:sleep(15/148)
				jug_fb_wrot:decelerate(30/148)
				jug_fb_wrot:y(-10)
				jug_fb_wrot:sleep(15/148)
				jug_fb_wrot:decelerate(30/148)
				jug_fb_wrot:y(5)
				jug_fb_wrot:sleep(15/148)
				jug_fb_wrot:decelerate(30/148)
				jug_fb_wrot:y(0)
				jug_fb_wrot:sleep(15/148)
			end)
			
			m2(8,'FrumpieShowLine');
			m2(20,'FrumpieFadeLine');
			
			m(50.5,2,'*10000 blind, *10000 centered',l)
			if FUCK_EXE then
				m(50.5,2,'*10000 -100 drawsizeback',l);
				m(272,2,'*10000 -100 drawsizeback',l);
			end
			
			
			me(50.5,52,50,100,'reverse',e,outQuad,nil,112)
			
			m(50.5,112,'*100 centered, 10 flip, *100 sudden, *100 suddenoffset',e)
			
			m2(52,function()
				for pn=1,2 do
					local a = GetJud(pn)
					if a then
						a:x(80*(pn*2-3))
						a:basezoomx(.7)
						a:basezoomy(.7)
					end
					local a = GetCom(pn)
					if a then
						a:x(80*(pn*2-3))
						a:basezoomx(.7)
						a:basezoomy(.7)
					end
				end
			end,true)
			
			m2(100,function()
				jug_fb_arrowspacing = 150
				jug_fb_scrollspd = {jug_fb_arrowspacing,jug_fb_arrowspacing}
				jug_fb_scrollmaxspd = {jug_fb_arrowspacing,jug_fb_arrowspacing}
			end,true)
			
			m2(268,function()
				jug_fb_world_p1:x(240 - jug_fb_arrowspacing*(268-jug_firstbeat))
			end,true)
			
			m2(276,function()
				--jug_fb_ball_p1:x(240 - jug_fb_arrowspacing*(276-jug_firstbeat))
				jug_fb_ball_inner:diffusealpha(1)
			end)
			
			--mod_onebeat(115,1000)
			
			--[[
			m2(80,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:linear(120/140)
						a:y(sh/2)
						a:x(sw/2)
						a:rotationz(0)
					end
				end
			end)
			m2(82,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:linear(120/140)
						a:x(sh*(240/640))
						a:y(sh*0.75 - 40)
						a:rotationz(-10)
					end
				end
			end)
			]]
			
			m2(50.5,function()
				frumpy_left1:x(SCREEN_CENTER_X-200)
				frumpy_left1:y(SCREEN_HEIGHT*0.7)
				frumpy_left1:zoom(.7)
				frumpy_left1:playcommand('Right')
				frumpy_left1:hidden(0)
				frumpy_left1:addy(SCREEN_HEIGHT*0.5)
				frumpy_left1:decelerate(90/148)
				frumpy_left1:addy(SCREEN_HEIGHT*-0.5)
				frumpy_right1:x(SCREEN_CENTER_X+200)
				frumpy_right1:y(SCREEN_HEIGHT*0.7)
				frumpy_right1:zoom(.7)
				frumpy_right1:playcommand('Left')
				frumpy_right1:hidden(0)
				frumpy_right1:addy(SCREEN_HEIGHT*0.5)
				frumpy_right1:decelerate(90/148)
				frumpy_right1:addy(SCREEN_HEIGHT*-0.5)
			end,true)
			
			for i=52,79,2 do
				m2(i,function()
					frumpy_right1:queuecommand('Push')
				end)
				m2(i+1,function()
					frumpy_left1:queuecommand('Push')
				end)
			end
			for i=84,111,2 do
				m2(i+1,function()
					frumpy_right1:queuecommand('Push')
				end)
				m2(i,function()
					frumpy_left1:queuecommand('Push')
				end)
			end
			
			m2(112,function()
				frumpy_left1:finishtweening()
				frumpy_left1:queuecommand('Push')
			end)
			
			m2(115,function()
				frumpy_left1:finishtweening()
				frumpy_left1:accelerate(90/148)
				frumpy_left1:addy(SCREEN_HEIGHT*0.5)
				frumpy_right1:finishtweening()
				frumpy_right1:accelerate(90/148)
				frumpy_right1:addy(SCREEN_HEIGHT*0.5)
			end)
			
			m2(117,function()
				frumpy_left1:finishtweening()
				frumpy_left1:addy(SCREEN_HEIGHT*0.5)
				frumpy_right1:finishtweening()
				frumpy_right1:addy(SCREEN_HEIGHT*0.5)
			end,true)
		
			
			
			
			
			
			
			
			function mod_blink(b,le,min,max,pn)
				if not min then min = 0 end
				if not max then max = 100 end
				m(b,le,'*10000 '..max..' stealth',l,pn)
				m(b+le,.1,'*10000 '..min..' stealth',l,pn)
			end
			
			me(80,1,100,0,'reverse',l,outQuad,nil,3)
			me(80,1,100,0,'centered',l,outQuad,nil,3)
			
			me(81,2,0,30,'reverse',l,inOutQuad,nil,.5)
			me(81,2,0,-20,'cross',l,inOutQuad,nil,.5)
			me(81,2,0,10,'alternate',l,inOutQuad,nil,.5)
			
			me(81,2,0,80,'stealth',l,linear,nil,.5)
			
			me(83.5,.5,30,100,'reverse',l,outQuad,nil,3)
			me(83.5,.5,0,100,'centered',l,outQuad,nil,3)
			
			me(83.5,.5,10,0,'alternate',l,linear)
			me(83.5,.5,-20,0,'cross',l,linear)
			
			mod_blink(81.25,.125)
			mod_blink(81.5,.125)
			mod_blink(81.75,.125)
			
			--mod_sugarkiller(beat,duration,speed,minstealth,maxstealth,pn,wid)
			mod_sugarkiller(83.5,.5,2,50,80,nil,.8)
			
			mod_sugarkiller(67.5,.5,2,50,80,nil,.8)
			mod_sugarkiller(99.5,.5,2,50,80,nil,.8)
			
			me(112,3,10,0,'flip',l,inOutQuad)
			me(112,3,100,50,'reverse',l,inOutQuad)
			me(114.8,.2,0,1500,'drunk',l,linear)
			me(115,2,1500,0,'drunk',l,outElastic)
			me(115,2,50,0,'reverse',l,outElastic)
			
			me(112,3,100,0,'centered',l,outQuad)
			
			m2(112,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:decelerate(180/148)
						a:x(sw/2)
						a:y(sh/2)
						a:z(0)
						a:rotationz(0)
					end
				end
			end)
			m2(115,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:x(sw/2)
						a:y(sh/2)
						a:rotationz(0)
					end
				end
			end,true)
			
			function ease_wiggle(doot,str)
				local fluct = 1
				for i=1,table.getn(doot)-1 do
					local b = doot[i]
					local len = doot[i+1]-doot[i]
					local tlen = math.min(len,1)
					local sus = len-tlen
					local amt = -str*fluct
					local newamt = str*fluct
					if i == 1 then
						amt = 0
					end
					me(b,tlen,amt,newamt,'drunk',l,outQuad,nil,sus)
					fluct=fluct*-1
				end
			end
			
			local beeps = {112,112.5,112.75,113.25,113.75,114.25,114.5,115}
			ease_wiggle(beeps,200)
			
			
			local fluct = 1
			for i=52,79 do
				if i ~= 67 then
					me(i,.75,-20,10,'flip',l,outQuad)
				end
				me(i,.75,300*fluct,0,'drunk',l,outQuad)
				me(i,1,157*fluct,20*fluct,'dizzy',l,outQuad)
				fluct = fluct*-1
			end
			
			local fluct = 1
			for i=84,111 do
				if i ~= 99 then
					me(i,.75,-20,10,'flip',l,outQuad)
				end
				me(i,.8,400*fluct,0,'drunk',l,outQuad)
				me(i,1,314*fluct,20*fluct,'dizzy',l,outQuad)
				me(i,1,50,0,'brake',l,linear)
				fluct = fluct*-1
			end
			
			mod_onebeat(147,1000)
			
			m(147-.1,179,'*50 500 invert',e)
			m2(147-.1,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:linear(.1)
						a:x(sw/2 + 320*(pn*2-3))
					end
					local a = GetJud(pn)
					if a then
						a:linear(.1)
						a:x(-160*(pn*2-3))
					end
					local a = GetCom(pn)
					if a then
						a:linear(.1)
						a:x(-160*(pn*2-3))
					end
				end
			end,true)
			--m(179-.1,180-.1,'*50 250 invert',e)
			
			me(179,1,00,0,'invert',l,outExpo)
			
			--m(112,147,'*10000
			
			me(116,144,1.75,3,'xmod',e,linear)
			me(116,140,0,30,'stealth',e,linear)
			me(140,144,30,100,'stealth',e,linear)
			me(116,144,0,150,'wave',e,outQuart)
			me(116,144,0,300,'tornado',e,outQuart)
			me(116,144,0,180,'distant',e,linear)
			me(116,144,0,-200,'flip',e,linear)
			me(116,144,0,150,'mini',e,linear)
			
			me(144,3,3,1.75,'xmod',l,linear)
			me(144,3,100,0,'stealth',l,linear)
			me(144,3,150,0,'wave',l,linear)
			me(144,3,300,0,'tornado',l,linear)
			me(144,3,180,0,'distant',l,linear)
			me(144,3,-200,0,'flip',l,linear)
			me(144,3,150,0,'mini',l,linear)
			
			--[[
			m2(153.5-.05,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:linear(.05)
						a:rotationz(20)
						a:sleep(15/148 - .05)
						a:linear(.05)
						a:rotationz(-20)
						a:sleep(15/148 - .05)
						a:linear(.05)
						a:rotationz(0)
					end
				end
			end)
			]]
			
			me(168,.5,0,130,'drunk',l,outQuad,nil,2.5)
			me(171,1,130,0,'drunk',l,outQuad,nil,2)
			
			me(166,.5,500,600,'invert',l,linear)
			me(166.5,.5,600,500,'invert',l,linear)
			
			mod_wiggle(153.5-.05,4,4,80,2,'dizzy')
			
			mod_wiggle(148-.05,4,4,150,2,'drunk')
			simple_m0d(149,-150,.5,'drunk');
			mod_wiggle(164.5-.05,4,4,150,2,'drunk')
			simple_m0d(165,-150,.5,'drunk');
			mod_wiggle(172.5-.05,4,4,150,2,'drunk')
			simple_m0d(173,-150,.5,'drunk');
			
			m(150,1,'*4.93333 split, *4.9333 no reverse',l)
			m(150.5,1,'*4.93333 no split, *4.9333 no reverse',l)
			m(151,1,'*4.93333 -100 split, *4.9333 reverse',l)
			m(151.5,1,'*4.93333 no split, *4.9333 no reverse',l)
			
			m(152-.05,1,'*9.86666 600 invert',l)
			m(152.25-.05,1,'*9.86666 500 invert',l)
			m(152.75-.05,1,'*9.86666 600 invert',l)
			m(153-.05,1,'*9.86666 500 invert',l)
			
			--[[
			m(154,1,'*4.96666 flip',l)
			m(154.5,1,'*4.96666 no flip',l)
			m(155,1,'*4.96666 flip',l)
			m(155.5,1,'*4.96666 no flip',l)
			]]
			
			m(167,171,'*2.4666 reverse',e)
			m(171,172,'*2.4666 no reverse',e)
			
			me(174,.5,500,600,'invert',l,linear)
			me(174.5,.5,600,500,'invert',l,linear)
			
			m(175,208,'*2.4666 reverse',e)
			
			m(176,2,'*4.93333 -100 alternate',l)
			m(176.5,2,'*4.93333 no alternate, *4.9333 no reverse',l)
			m(177,2,'*4.93333 split, *4.9333 no reverse',l)
			m(177.5,2,'*4.93333 no split, *4.9333 reverse',l)
			m(178,2,'*4.93333 -100 alternate',l)
			m(178.5,2,'*4.93333 no alternate, *4.9333 no reverse',l)
			
			me(179,181,0,100,'reverse',e,outQuart,nil,208)
			me(179,180,0,100,'centered',e,inQuad,nil,208)
			me(179,181,0,50,'flip',e,outQuart,nil,208)
			me(179,181,1.75,1,'xmod',e,outElastic,nil,208)
			me(179,181,0,-100,'mini',e,outElastic,nil,208)
			
			m2(179,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
					
						--[[
						a:accelerate(60/148)
						a:x(sw*(200/640))
						a:y(sh*0.75)
						]]
						
						a:sleep(0)
						a:x( sw/2 )
						a:accelerate(60/148)
						a:x( sw*(200/640) + 0*(sw*(240/640)) )
						a:y( sh*0.75 - 50*math.sin(0*math.pi) - 40 )
						a:rotationz( -10 + 0*20 )
						a:skewx(0)
						a:zoomz(1)
						
					end
				end
			end)
			
			m2(186,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:linear(45/148)
						a:x(sw*440/640)
						a:rotationz(10)
						a:linear(45/148)
						a:x(sw*200/640)
						a:rotationz(-10)
						a:linear(30/148)
						a:x(sw*440/640)
						a:rotationz(10)
					end
				end
			end)
			
			function mod_bounceCen(b,min,max,len,pn)
				me(b,(len/2),min,max,'centered',l,outSine,pn)
				me(b+(len/2),(len/2),max,min,'centered',l,inSine,pn)
			end
			
			mod_bounceCen(186,100,170,.75)
			mod_bounceCen(186.75,100,170,.75)
			mod_bounceCen(187.5,100,170,.5)
			
			m2(193,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:linear(45/148)
						a:x(sw*440/640)
						a:rotationz(10)
						a:linear(45/148)
						a:x(sw*200/640)
						a:rotationz(-10)
						a:linear(30/148)
						a:x(sw*440/640)
						a:rotationz(10)
						
						a:linear(60/148)
						a:x(sw*200/640)
						a:rotationz(-10)
					end
				end
			end)
			
			mod_bounceCen(193,100,170,.75)
			mod_bounceCen(193.75,100,170,.75)
			mod_bounceCen(194.5,100,170,.5)
			mod_bounceCen(195,100,150,1)
			
			m2(179,function()
			
				frumpy_left1:finishtweening()
				frumpy_left1:x(SCREEN_WIDTH*-0.2)
				frumpy_left1:y(SCREEN_HEIGHT*0.7)
				frumpy_left1:decelerate(60/148)
				frumpy_left1:x(SCREEN_CENTER_X-180)
				
				frumpy_left2:finishtweening()
				frumpy_left2:zoom(.7)
				frumpy_left2:playcommand('Right')
				frumpy_left2:hidden(0)
				frumpy_left2:x(SCREEN_WIDTH*-0.2)
				frumpy_left2:y(SCREEN_HEIGHT*-0.3)
				frumpy_left2:decelerate(60/148)
				frumpy_left2:x(SCREEN_CENTER_X-180)
				
				frumpy_right1:finishtweening()
				frumpy_right1:x(SCREEN_WIDTH*1.2)
				frumpy_right1:y(SCREEN_HEIGHT*0.2)
				frumpy_right1:decelerate(60/148)
				frumpy_right1:x(SCREEN_CENTER_X+180)
				
				frumpy_right2:finishtweening()
				frumpy_right2:zoom(.7)
				frumpy_right2:playcommand('Left')
				frumpy_right2:hidden(0)
				frumpy_right2:x(SCREEN_WIDTH*1.2)
				frumpy_right2:y(SCREEN_HEIGHT*-0.8)
				frumpy_right2:decelerate(60/148)
				frumpy_right2:x(SCREEN_CENTER_X+180)
				
			end)
			
			for i=180,185,2 do
				m2(i-0.01,function()
					frumpy_left1:queuecommand('Push')
					frumpy_left2:queuecommand('Push')
				end)
				m2(i+0.99,function()
					frumpy_right1:queuecommand('Push')
					frumpy_right2:queuecommand('Push')
				end)
				m2(i,function()
					--frumpy_pushercont:finishtweening()
					frumpy_pushercont:sleep(0)
					frumpy_pushercont:decelerate(60/148)
					frumpy_pushercont:addy(SCREEN_HEIGHT*0.5)
					frumpy_pushercont:decelerate(60/148)
					frumpy_pushercont:addy(SCREEN_HEIGHT*0.5)
					frumpy_pushercont:sleep(0)
					frumpy_pushercont:addy(SCREEN_HEIGHT*-1)
				end)
			end
			
			m2(186,function()
				frumpy_left1:queuecommand('Push')
				frumpy_left2:queuecommand('Push')
			end)
			m2(186.75,function()
				frumpy_right1:queuecommand('Push')
				frumpy_right2:queuecommand('Push')
			end)
			m2(187.5,function()
				frumpy_left1:queuecommand('Push')
				frumpy_left2:queuecommand('Push')
			end)
			m2(188,function()
				frumpy_right1:queuecommand('Push')
				frumpy_right2:queuecommand('Push')
			end)
			
			m2(186,function()
				frumpy_pushercont:finishtweening()
				frumpy_pushercont:sleep(0)
				frumpy_pushercont:decelerate(45/148)
				frumpy_pushercont:addy(SCREEN_HEIGHT*0.5)
				frumpy_pushercont:decelerate(45/148)
				frumpy_pushercont:addy(SCREEN_HEIGHT*0.5)
				frumpy_pushercont:sleep(0)
				frumpy_pushercont:addy(SCREEN_HEIGHT*-1)
				frumpy_pushercont:sleep(0)
				frumpy_pushercont:decelerate(30/148)
				frumpy_pushercont:addy(SCREEN_HEIGHT*0.5)
				frumpy_pushercont:decelerate(60/148)
				frumpy_pushercont:addy(SCREEN_HEIGHT*0.5)
				frumpy_pushercont:sleep(0)
				frumpy_pushercont:addy(SCREEN_HEIGHT*-1)
			end)
			
			
			
			for i=189,191,2 do
				m2(i-0.01,function()
					frumpy_left1:queuecommand('Push')
					frumpy_left2:queuecommand('Push')
				end)
				m2(i+0.99,function()
					frumpy_right1:queuecommand('Push')
					frumpy_right2:queuecommand('Push')
				end)
				m2(i,function()
					--frumpy_pushercont:finishtweening()
					frumpy_pushercont:sleep(0)
					frumpy_pushercont:decelerate(60/148)
					frumpy_pushercont:addy(SCREEN_HEIGHT*0.5)
					frumpy_pushercont:decelerate(60/148)
					frumpy_pushercont:addy(SCREEN_HEIGHT*0.5)
					frumpy_pushercont:sleep(0)
					frumpy_pushercont:addy(SCREEN_HEIGHT*-1)
				end)
			end
			
			
			m2(193,function()
				frumpy_left1:queuecommand('Push')
				frumpy_left2:queuecommand('Push')
			end)
			m2(193.75,function()
				frumpy_right1:queuecommand('Push')
				frumpy_right2:queuecommand('Push')
			end)
			m2(194.5,function()
				frumpy_left1:queuecommand('Push')
				frumpy_left2:queuecommand('Push')
			end)
			m2(195,function()
				frumpy_right1:queuecommand('Push')
				frumpy_right2:queuecommand('Push')
			end)
			
			m2(193,function()
				frumpy_pushercont:finishtweening()
				frumpy_pushercont:sleep(0)
				frumpy_pushercont:decelerate(45/148)
				frumpy_pushercont:addy(SCREEN_HEIGHT*0.5)
				frumpy_pushercont:decelerate(45/148)
				frumpy_pushercont:addy(SCREEN_HEIGHT*0.5)
				frumpy_pushercont:sleep(0)
				frumpy_pushercont:addy(SCREEN_HEIGHT*-1)
				frumpy_pushercont:sleep(0)
				frumpy_pushercont:decelerate(30/148)
				frumpy_pushercont:addy(SCREEN_HEIGHT*0.5)
				frumpy_pushercont:decelerate(60/148)
				frumpy_pushercont:addy(SCREEN_HEIGHT*0.5)
				frumpy_pushercont:sleep(0)
				frumpy_pushercont:addy(SCREEN_HEIGHT*-1)
			end)
			
			for i=196,203,1 do
				m2(i-0.01,function()
					frumpy_left1:finishtweening()
					frumpy_left1:queuecommand('Push')
					frumpy_left2:finishtweening()
					frumpy_left2:queuecommand('Push')
				end)
				m2(i+0.49,function()
					frumpy_right1:finishtweening()
					frumpy_right1:queuecommand('Push')
					frumpy_right2:finishtweening()
					frumpy_right2:queuecommand('Push')
				end)
				m2(i,function()
					frumpy_pushercont:finishtweening()
					frumpy_pushercont:sleep(0)
					frumpy_pushercont:decelerate(30/148)
					frumpy_pushercont:addy(SCREEN_HEIGHT*0.5)
					frumpy_pushercont:decelerate(30/148)
					frumpy_pushercont:addy(SCREEN_HEIGHT*0.5)
					frumpy_pushercont:sleep(0)
					frumpy_pushercont:addy(SCREEN_HEIGHT*-1)
				end)
			end
			for i=204,207.5,0.5 do
				m2(i-0.01,function()
					frumpy_left1:finishtweening()
					frumpy_left1:queuecommand('Push')
					frumpy_left2:finishtweening()
					frumpy_left2:queuecommand('Push')
				end)
				m2(i+0.24,function()
					frumpy_right1:finishtweening()
					frumpy_right1:queuecommand('Push')
					frumpy_right2:finishtweening()
					frumpy_right2:queuecommand('Push')
				end)
				m2(i,function()
					frumpy_pushercont:finishtweening()
					frumpy_pushercont:sleep(0)
					frumpy_pushercont:decelerate(15/148)
					frumpy_pushercont:addy(SCREEN_HEIGHT*0.5)
					frumpy_pushercont:decelerate(15/148)
					frumpy_pushercont:addy(SCREEN_HEIGHT*0.5)
					frumpy_pushercont:sleep(0)
					frumpy_pushercont:addy(SCREEN_HEIGHT*-1)
				end)
			end
			
			m(156.5,2,'*0.9866 20 cross',l)
			m(157.5,2,'*1.9733 -20 cross, *0.9866 20 reverse',l)
			m(158.5,2,'*1.9733 20 cross, *0.9866 no reverse',l)
			m(159.5,2,'*0.9866 no cross',l)
			
			m(157,2,'*4.9333 600 invert',l)
			m(158,2,'*4.9333 500 invert',l)
			m(159,2,'*4.9333 600 invert',l)
			
			m(160.5,2,'*0.9866 20 cross',l)
			m(161.5,2,'*1.9733 -20 cross, *0.9866 20 reverse',l)
			m(162.5,2,'*1.9733 20 cross, *0.9866 no reverse',l)
			m(163.5,2,'*0.9866 no cross',l)
			
			m(161,2,'*4.9333 500 invert',l)
			m(162,2,'*4.9333 600 invert',l)
			m(163,2,'*4.9333 500 invert',l)
			
			function jug_spin(beat, which)
				local pos = beat*math.pi*0.125 + which*math.pi*0.5
				local tx = 256*math.sin(pos)
				local tz = 300*math.cos(pos)
				return {x=tx,z=tz,ang=math.deg(math.mod(pos,2*math.pi))}
			end
			
			function jug_osc1(beat, which)
			
				local amt = (beat-84)/28
			
				local pos = beat*math.pi*0.5
				local tx = 200*(which*2-3)
				local tz = 150*math.sin(pos)*(which*2-3)*amt
				return {x=tx,z=tz}
				
			end
			
			me(204,4,100,50,'reverse',l,linear)
			me(204,4,100,0,'centered',l,linear)
			
			me(208,1.4,50,-50,'reverse',l,outCirc)
			me(209.5,1.4,-50,50,'reverse',l,inCirc)
			
			m2(208,function()
				frumpy_left1:queuecommand('Push')
				frumpy_left2:hidden(1)
				frumpy_right2:hidden(1)
				
				frumpy_left1:linear(180/148)
				frumpy_left1:y(SCREEN_HEIGHT*0.7)
				frumpy_right1:linear(180/148)
				frumpy_right1:y(SCREEN_HEIGHT*0.7)
				
			end)
			m2(211,function()
				frumpy_right1:queuecommand('Push')
			end)
			
			me(211,212,0,10,'flip',e,outElastic,nil,999)
			
			me(211,212,1.75,1.4,'xmod',e,outElastic,nil,999)
			m(211,999,'*5 sudden, *5 70 suddenoffset',e)
			
			for i=212,239,2 do
				m2(i,function()
					frumpy_left1:queuecommand('Push')
				end)
				m2(i+1,function()
					frumpy_right1:queuecommand('Push')
				end)
			end
			
			local fluct = -1
			for i=212,239 do
				if i ~= 67 then
					--me(i,.75,10,10,'flip',l,outQuad)
				end
				me(i,.75,300*fluct,0,'drunk',l,outQuad)
				me(i,1,157*fluct,20*fluct,'dizzy',l,outQuad)
				fluct = fluct*-1
			end
			for i=244,271 do
				if i ~= 67 then
					me(i,.75,0,10,'flip',l,outQuad)
				end
				me(i,.75,200*fluct,0,'drunk',l,outQuad)
				me(i,1,157*fluct,0*fluct,'dizzy',l,outQuad)
				fluct = fluct*-1
			end
			
			m2(240,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:decelerate(60/148)
						a:x(sw/2)
						a:y(sh/2)
						a:rotationz(0)
					end
				end
			end)
			
			me(240,1,200,0,'drunk',l,outQuad)
			me(240,1,-100,0,'tornado',l,outQuad)
			me(240,1,-20,0,'flip',l,outQuad)
			me(240,1,100,0,'dizzy',l,outQuad)
			me(240,1,3,1.4,'xmod',l,outQuad)
			
			me(241,1,-200,0,'drunk',l,outQuad)
			me(241,1,-100,0,'tornado',l,outQuad)
			me(241,1,-20,0,'flip',l,outQuad)
			me(241,1,-100,0,'dizzy',l,outQuad)
			me(241,1,3,1.4,'xmod',l,outQuad)
			
			ease_wiggle({242,242.666,243.333,243.666,244},300)
			
			m2(242-.1,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:linear(.05)
						a:rotationz(-20)
						a:sleep(40/148-.05)
						a:linear(.05)
						a:rotationz(20)
						a:sleep(40/148-.05)
						a:linear(.05)
						a:rotationz(0)
					end
				end
			end)
			
			m2(244,function()
				frumpy_left1:hidden(1)
				frumpy_right1:hidden(1)
			end)
			m2(244,'WhiteFlash')
			m2(244,'DotsOn')
			m2(270,'DotsFade')
			
			--[[
			m2(50.5,function()
				frumpy_left1:x(SCREEN_CENTER_X-200)
				frumpy_left1:y(SCREEN_HEIGHT*0.7)
				frumpy_left1:zoom(.7)
				frumpy_left1:playcommand('Right')
				frumpy_left1:hidden(0)
				frumpy_left1:addy(SCREEN_HEIGHT*0.5)
				frumpy_left1:decelerate(90/148)
				frumpy_left1:addy(SCREEN_HEIGHT*-0.5)
				frumpy_right1:x(SCREEN_CENTER_X+200)
				frumpy_right1:y(SCREEN_HEIGHT*0.7)
				frumpy_right1:zoom(.7)
				frumpy_right1:playcommand('Left')
				frumpy_right1:hidden(0)
				frumpy_right1:addy(SCREEN_HEIGHT*0.5)
				frumpy_right1:decelerate(90/148)
				frumpy_right1:addy(SCREEN_HEIGHT*-0.5)
			end,true)
			]]
			
			m2(84,'BeginBounce2');
			m2(244,'BeginBounce');
			
			m2(272,function()
				fb_ringpos:linear(240/148)
				fb_ringpos:y(480)
			end)
			
			m(273,3,'*1000 blind',l)
			m(276,1,'*1000 no blind',l)
			
			me(272,276,10,50,'flip',e,linear)
			me(272,276,0,100,'stealth',e,linear)
			me(272,274,50,-20,'reverse',e,outCirc)
			me(274,276,-20,50,'reverse',e,inCirc)
			
			m2(276,function()
				local a = Plr(1)
				if a then
					a:x(sw/2 - 160)
					a:y(sh/2)
					a:rotationz(0)
				end
				local a = Plr(2)
				if a then
					a:x(sw/2 + 20)
					a:y(sh/2)
					a:rotationz(0)
				end
				for pn=1,2 do
					local a = GetJud(pn)
					if a then
						a:x(0)
						a:basezoomx(1)
						a:basezoomy(1)
					end
					local a = GetCom(pn)
					if a then
						a:x(0)
						a:basezoomx(1)
						a:basezoomy(1)
					end
				end
			end)
			
			--[[
			for i=148,172,4 do
				m2(i,function()
					jug_zoomz:finishtweening()
					jug_zoomz:x(80)
					jug_zoomz:decelerate(60/148)
					jug_zoomz:x(1)
				end)
				m2(i+1.75,function()
					jug_zoomz:finishtweening()
					jug_zoomz:x(80)
					jug_zoomz:decelerate(60/148)
					jug_zoomz:x(1)
				end)
				m2(i+2.5,function()
					jug_zoomz:finishtweening()
					jug_zoomz:x(80)
					jug_zoomz:decelerate(60/148)
					jug_zoomz:x(1)
				end)
			end
			
			for i=149,176,2 do
				local f = math.mod((i-1)/2,2)
				m2(i,function()
					if f == 0 then
						jug_skewer:x(1)
					else
						jug_skewer:x(-1)
					end
					jug_skewer:decelerate(60/148)
					jug_skewer:x(0)
				end)
			end
			]]
			
			for i=148,172,4 do
				m = 1
				if math.mod(i,8) == 0 then
					m = -1
				end
				m2(i,function()
					jug_skewer:finishtweening()
					jug_skewer:x(1*m)
					jug_skewer:decelerate(60/148)
					jug_skewer:x(0)
				end)
				m2(i+1.75,function()
					jug_skewer:finishtweening()
					jug_skewer:x(-.5*m)
					jug_skewer:decelerate(60/148)
					jug_skewer:x(0)
				end)
				m2(i+2.5,function()
					jug_skewer:finishtweening()
					jug_skewer:x(.5*m)
					jug_skewer:decelerate(60/148)
					jug_skewer:x(0)
				end)
			end
			
			for i=149,176,2 do
				local f = math.mod((i-1)/2,2)
				m2(i,function()
					if f == 0 then
						jug_zoomz1:x(50)
						jug_zoomz1:decelerate(60/148)
						jug_zoomz1:x(0)
					else
						jug_zoomz2:x(50)
						jug_zoomz2:decelerate(60/148)
						jug_zoomz2:x(0)
					end
				end)
			end
			
			m2(291,function()
				MESSAGEMAN:Broadcast('Smash');
				j_ball2_2:hidden(1)
				screen:rotationz(20)
				screen:x(60)
				screen:y(-80)
				jug_screenvib:x(80)
				jug_screenvib:linear(60/148)
				jug_screenvib:x(0)
			end)
			
			me(50.5,51.5,100,0,'stealth',e,outQuad,nil,53)
			--m(50.5,2,'*5 no stealth',l)
			
---------------------------------------------------------------------------------------
----------------------Sort the actions table-------------------------------------------
---------------------------------------------------------------------------------------
			
			function modtable_compare(a,b)
				return a[1] < b[1]
			end
			
			if table.getn(mod_actions) > 1 then
				table.sort(mod_actions, modtable_compare)
			end
			
			self:queuecommand('Update');
			
		end"
		
		UpdateCommand="%function(self)

			if GAMESTATE:GetSongBeat()>=0 and not checked then
			
				local ThingsToGrab = {'LifeP1','LifeP2','ScoreP1','ScoreP2','BPMDisplay','LifeFrame','ScoreFrame',
										'Lyrics','SongBackground','SongForeground','Overlay','Underlay'}
				local ThingsToHide = {'LifeP1','LifeP2','ScoreP1','ScoreP2','BPMDisplay','LifeFrame','ScoreFrame','Overlay','Underlay'}
				
				for i,v in ipairs(ThingsToGrab) do
					_G[v] = SCREENMAN:GetTopScreen():GetChild(v) or nil
				end
				
				for i,v in ipairs(ThingsToHide) do
					if _G[v] then _G[v]:hidden(1) end
				end
				
				table.insert(mod_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP1'));
				table.insert(mod_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP2'));
				
				--name players, judgment and combo
				for pn=1,2 do
					_G['P'..pn] = SCREENMAN:GetTopScreen():GetChild('PlayerP'..pn) or nil;
					if _G['P'..pn] then
						_G['jud'..pn] = _G['P'..pn]:GetChild('Judgment');
						_G['com'..pn] = _G['P'..pn]:GetChild('Combo');
					end
				end
				
				screen = SCREENMAN:GetTopScreen();
				checked = true; --let this only run once
				
				screen:vibrate()
				screen:effectmagnitude(0,0,0)
				
			end

			local beat = GAMESTATE:GetSongBeat()
			
			
---------------------------------------------------------------------------------------
----------------------Begin table handlers---------------------------------------------
---------------------------------------------------------------------------------------
			
			disable = false;
			if disable ~= true and beat > mod_firstSeenBeat+0.1 and checked then
				
				-----------------------
				-- Player mod resets --
				-----------------------
				if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --
					for i=1,2 do
						mod_do('clearall',i)
					end
				end
				
				------------------------------------------------------------------------------
				-- custom mod reader by TaroNuke edited by WinDEU and re-stolen by TaroNuke --
				------------------------------------------------------------------------------
				if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --
					for i,v in pairs(mods) do
						if v and table.getn(v) > 3 and v[1] and v[2] and v[3] and v[4] then
							if beat >=v[1] then
								if (v[4] == 'len' and beat <=v[1]+v[2]) or (v[4] == 'end' and beat <=v[2]) then
									if table.getn(v) == 5 then
										mod_do(v[3],v[5]);
									else
										mod_do(v[3]);
									end
								end
							end
						else
							v[1] = 0;
							v[2] = 0;
							v[3] = '';
							v[4] = 'error';
							SCREENMAN:SystemMessage('Bad mod in beat-based table (line '..i..')');
						end
					end
				end
				
				-----------------------------------------------------------------------------------------------------
				-- WinDEU's time-based len/end version of the #swag custom mod reader #teamproofofconcept (c) 2015 --
				-----------------------------------------------------------------------------------------------------
				if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --
					for i,v in pairs(mods2) do
						if v and table.getn(v) > 3 and v[1] and v[2] and v[3] and v[4] then
							if mod_time >=v[1] then
								if (v[4] == 'len' and mod_time <=v[1]+v[2]) or (v[4] == 'end' and mod_time <=v[2]) then
									if table.getn(v) == 5 then
										mod_do(v[3],v[5]);
									else
										mod_do(v[3]);
									end
								end
							end
						else
							v[1] = 0;
							v[2] = 0;
							v[3] = 'error';
							v[4] = 'error';
							SCREENMAN:SystemMessage('Bad mod in time-based table (line '..i..')');
						end
					end
				end
				
				--------------------------------------------------------------------------------------
				-- i dont know who this reader is but he looks like he is made out of EASE HAHAHAHA --
				-- original code by exschwasion, bastardized by taro for cmod support and less 'if' --
				--------------------------------------------------------------------------------------
				for i,v in pairs(mods_ease) do
					if v and table.getn(v) > 6 and v[1] and v[2] and v[3] and v[4] and v[5] and v[6] and v[7] then
						if beat >=v[1] then
							if (v[6] == 'len' and beat <=v[1]+v[2]) or (v[6] == 'end' and beat <=v[2]) then
								
								local duration = v[2];
								if v[6] == 'end' then duration = v[2] - v[1] end
								local curtime = beat - v[1]
								local diff = v[4] - v[3]
								local startstrength = v[3]
								local curve = v[7]
								local mod = v[5]
								
								local strength = curve(curtime, startstrength, diff, duration, v[10], v[11]) --extra parameters for back and elastic eases :eyes:
								
								local modstr = v[5] == 'xmod' and strength..'x' or (v[5] == 'cmod' and 'C'..strength or strength..' '..v[5])
								mod_do('*10000 '..modstr,v[8]);
								
							elseif (v[9] and ((v[6] == 'len' and beat <=v[1]+v[2]+v[9]) or (v[6] == 'end' and beat <=v[9]))) then
							
								local strength = v[4]
								
								local modstr = v[5] == 'xmod' and strength..'x' or (v[5] == 'cmod' and 'C'..strength or strength..' '..v[5])
								mod_do('*10000 '..modstr,v[8]);
								
							end
						end
					else
						SCREENMAN:SystemMessage('Bad mod in beat-based ease table (line '..i..')');
					end
				end
				
				--------------------
				-- Perframe stuff --
				--------------------
				
				screen:effectmagnitude(0,jug_screenvib:GetX(),0)
				
				if beat > 50.5 and beat < 52 then
					local w = (beat-50.5)/1.5
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:x( sw*(230/640) + w*(sw*170/640) )
							a:y( sh*0.75 - 80*math.sin(w*math.pi) - 60 + 20*w )
							a:rotationz( -10 + w*20 )
						end
					end
				end
				
				if beat > 52 and beat < 112 and (beat < 80 or beat > 84) then
					
					local pingpong = beat-math.floor(beat)
					if math.mod(beat,2) >= 1 then
						pingpong = 1-pingpong
					end
					pingpong = 1-pingpong
					if beat > 84 then
						pingpong = 1-pingpong
					end
					
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:y( sh*0.75 - 50*math.sin(pingpong*math.pi) - 40 )
							if beat > 84 then
								a:z(jug_baux2:GetZ()*2 - 100)
							end
							a:x( sw*(240/640) + pingpong*(sw*(160/640))*(1+1*(a:GetZ()+150)/300) )
							a:rotationz( -10 + pingpong*20 )
						end
					end
					
					if beat > 84 then
						local info = {jug_osc1(beat,1),jug_osc1(beat,2)}
						frumpy_left1:z(info[1].z)
						frumpy_right1:z(info[2].z)
					end
					
				end
				
				if beat > 80 and beat < 84 then
					
					local pingpong = (beat/4)-math.floor(beat/4)
					pingpong = 1-pingpong
					
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:x( sw*(240/640) + pingpong*(sw*(160/640)) )
							a:y( sh*0.75 - 120*math.sin(pingpong*math.pi) - 40 )
							a:rotationz( -10 + pingpong*20 )
						end
					end
					
				end
				
				if beat > 148 and beat < 179 then
					local m = 1
					if beat > 179 then
						m = 0
					end
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:skewx( jug_skewer:GetX() )
							a:zoomz( _G['jug_zoomz'..pn]:GetX() )
							
							if beat > 179 then
								a:x( sw/2 + m*320*(pn*2-3))
							end
							
						end
						
						local a = GetJud(pn)
						if a then
							a:x(160*(pn*2-3) - m*320*(pn*2-3))
						end
						local a = GetCom(pn)
						if a then
							a:x(160*(pn*2-3) - m*320*(pn*2-3))
						end
					end
					
				end
				
				if beat > 180 and beat < 208 and (beat < 186 or beat > 188) and (beat < 193 or beat > 196) then
					
					local pingpong = beat-math.floor(beat)
					if math.mod(beat,2) >= 1 then
						pingpong = 1-pingpong
					end
					if beat > 188 then
						pingpong = 1-pingpong
					end
					if beat > 193 then
						pingpong = 1-pingpong
					end
					
					if beat > 196 then
						pingpong = (beat*2)-math.floor(beat*2)
						if math.mod((beat*2),2) >= 1 then
							pingpong = 1-pingpong
						end
					end
					if beat > 204 then
						pingpong = (beat*4)-math.floor(beat*4)
						if math.mod((beat*4),2) >= 1 then
							pingpong = 1-pingpong
						end
					end
					
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:x( sw*(200/640) + pingpong*(sw*(240/640)) )
							a:y( sh*0.75 - 50*math.sin(pingpong*math.pi) - 40 )
							a:rotationz( -10 + pingpong*20 )
							a:skewx(0)
							a:zoomz(1)
						end
					end
					
				end
				
				if beat > 208 and beat < 211 then
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:x( sw*(200/640) + ((beat-208)/3)*(sw*(240/640)) )
							a:rotationz( -10 + ((beat-208)/3)*20 )
						end
					end
				end
				
				if beat > 211 and beat < 272 and ( beat < 240 or beat > 244 ) then
					
					local pingpong = beat-math.floor(beat)
					if math.mod(beat,2) >= 1 then
						pingpong = 1-pingpong
					end
					if beat > 188 then
						pingpong = 1-pingpong
					end
					if beat > 193 then
						pingpong = 1-pingpong
					end
					
					--wenis
					jug_bg2:rotationz( jug_bouncewidth*jug_bgbounce:GetX()*(4*math.cos(beat*math.pi)) )
					jug_bg2:x(sw/2 - jug_bouncewidth*jug_bgbounce:GetX()*-30 + jug_bouncewidth*jug_bgbounce:GetX()*-60*pingpong )
					jug_bg2:y(sh/2 - jug_bgbounceheight*math.abs(30*math.sin(beat*math.pi)) )
					
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:y( sh*0.75 - 80*math.sin(pingpong*math.pi) - 40 )
							a:rotationz( -10 + pingpong*20 )
							if beat < 244 then
								a:x( sw*(200/640) + pingpong*(sw*(240/640)) )
							else
								a:x(jug_baux:GetX())
								a:z(jug_baux:GetZ()*2 - 100)
								a:addy(-50)
							end
						end
					end
					
					local mult = 1
					local rev = 60
					local alt = 0
					local splt = 0
					
					if beat > 244 then
						if math.mod(beat,2) < 1 then
							mult = 1
							rev = 70
						else
							mult = -1
							rev = 60
						end
						if math.mod(beat,4) < 2 then
							alt = -20*mult
						end
						if math.mod(beat,8) < 4 then
							splt = -20*mult
						end
					end
					
					mod_do('*10000 '..(50-rev*math.sin(pingpong*math.pi))..' reverse')
					mod_do('*10000 '..(alt*math.sin(pingpong*math.pi))..' alternate')
					mod_do('*10000 '..(splt*math.sin(pingpong*math.pi))..' split')
					
					--splitcrossalt shenans
					
				end
				
				if beat > 272 and beat < 276 then
					
					pingpong = 1-((beat-272)/4)
				
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:y( sh*0.75 - 80*math.sin(pingpong*math.pi) - 40 )
							a:rotationz( -10 + pingpong*20 )
							a:x( sw*(230/640) + pingpong*(sw*(210/640)) )
							a:z( 0 );
						end
					end
				end
				
				if beat > 244 then
					for i=1,4 do
						local info = jug_spin(beat,i)
						local a = frumpy_fg[i]
						local a2 = frumpy_bg[i]
						local b = a.actor
						local c = a2.actor
						
						if info.ang < 45 or info.ang > 315 then
							a.dir = 1
						elseif info.ang > 225 and info.ang < 315 then
							a.dir = 4
						elseif info.ang > 135 and info.ang < 225 then
							a.dir = 3
						elseif info.ang > 45 and info.ang < 135 then
							a.dir = 2
						end
						
						if b and c then
						
							if a.dir ~= a.cur then
								
								if a.dir == 1 then
									b:playcommand('Back');
									c:playcommand('Back');
								elseif a.dir == 2 then
									b:playcommand('Left');
									c:playcommand('Left');
								elseif a.dir == 3 then
									b:playcommand('Front');
									c:playcommand('Front');
								else
									b:playcommand('Right');
									c:playcommand('Right');
								end
								
								a.cur = a.dir
							end
							
							b:x(sw/2 + info.x*0.9)
							b:y(sh*0.6 + info.z*0.1 + fb_ringpos:GetY())
							b:z(info.z)
							if b:GetZ() > 30 then
								b:hidden(0)
								c:hidden(1)
							else
								b:hidden(1)
								c:hidden(0)
							end
							b:zoom(.7)
							c:zoom(.7)
							
							c:x(b:GetX())
							c:y(b:GetY())
							c:z(b:GetZ())
						end
					end
				end
				
				---------------------------------------
				-- ACTION RPGS AINT GOT SHIT ON THIS --
				---------------------------------------
				if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --
					while curaction<=table.getn(mod_actions) and GAMESTATE:GetSongBeat()>=mod_actions[curaction][1] do
						if mod_actions[curaction][3] or GAMESTATE:GetSongBeat() < mod_actions[curaction][1]+2 then
							if type(mod_actions[curaction][2]) == 'function' then
								mod_actions[curaction][2]()
							elseif type(mod_actions[curaction][2]) == 'string' then
								MESSAGEMAN:Broadcast(mod_actions[curaction][2]);
							end
						end
						curaction = curaction+1;
					end
				end
				
			end
			
			self:sleep(1/60);
			self:queuecommand('Update');

---------------------------------------------------------------------------------------
----------------------END DON'T TOUCH IT KIDDO-----------------------------------------
---------------------------------------------------------------------------------------
			
		end"
		
	/>
	
	<!--Handling messages here is still fun and profitable-->
	<CODE Type="Quad" OnCommand="hidden,1"
	InitCommand="%function(self) jug_aux = self end"
	/>
	<CODE Type="Quad" OnCommand="hidden,1"
	InitCommand="%function(self) fb_ringpos = self end"
	/>
	<CODE Type="Quad" OnCommand="hidden,1"
	InitCommand="%function(self) jug_screenvib = self end"
	/>
	<CODE Type="Quad" OnCommand="hidden,1"
	InitCommand="%function(self) jug_bgbounce = self end"
	/>
	
	<CODE Type="Quad" OnCommand="hidden,1"
	InitCommand="%function(self) jug_skewer = self end"
	/>
	<CODE Type="Quad" OnCommand="hidden,1;x,1"
	InitCommand="%function(self) jug_zoomz1 = self end"
	/>
	<CODE Type="Quad" OnCommand="hidden,1;x,1"
	InitCommand="%function(self) jug_zoomz2 = self end"
	/>
	
	
	<Layer Type="ActorFrame" InitCommand="%function(self) self:fov(60) self:SetDrawByZPosition(true) end" ><children>
	
		<LAER File="5 - frumpy" OnCommand="hidden,1;sleep,0.02;queuecommand,Make" MakeCommand="%function(self) table.insert(frumpy_fg,{actor = self, dir = 0, cur = 0}) end" />
		<LAER File="6 - bumpy" OnCommand="hidden,1;sleep,0.02;queuecommand,Make" MakeCommand="%function(self) table.insert(frumpy_fg,{actor = self, dir = 0, cur = 0}) end" />
		<LAER File="7 - jumpy" OnCommand="hidden,1;sleep,0.02;queuecommand,Make" MakeCommand="%function(self) table.insert(frumpy_fg,{actor = self, dir = 0, cur = 0}) end" />
		<LAER File="8 - richerd" OnCommand="hidden,1;sleep,0.02;queuecommand,Make" MakeCommand="%function(self) table.insert(frumpy_fg,{actor = self, dir = 0, cur = 0}) end" />
		
		<LAER Type="Quad" InitCommand="%function(self) jug_baux2 = self end"
			OnCommand="zoom,40;hidden,1"
			BeginBounce2MessageCommand="%function(self)
				local beat = GAMESTATE:GetSongBeat()
				local info = jug_osc1(beat,1)
				--self:hidden(0)
				self:x(sw/2 + info.x*0.7)
				self:y(sh*0.6 - 40)
				self:z(info.z*0.7)
				quad_goal = 1
				
				self:queuecommand('GotoNext')
			end"
			GotoNextCommand="%function(self)
				local old_goal = quad_goal
				quad_goal = quad_goal+1
				if quad_goal > 2 then quad_goal = 1 end
				
				local beat = GAMESTATE:GetSongBeat()
				local info = jug_osc1(beat+1,quad_goal)
				
				self:linear(60/148)
				
				self:x(sw/2 + info.x*0.7)
				self:y(sh*0.6 - 40)
				self:z(info.z*0.7)
				
				if beat < 111.5 then
					self:queuecommand('GotoNext')
				end
				
			end"
		/>
		
		<LAER Type="Quad" InitCommand="%function(self) jug_baux = self end"
			OnCommand="zoom,40;hidden,1"
			BeginBounceMessageCommand="%function(self)
				local beat = GAMESTATE:GetSongBeat()
				local info = jug_spin(beat,1)
				--self:hidden(0)
				self:x(sw/2 + info.x*0.7)
				self:y(sh*0.6 - 40)
				self:z(info.z*0.7)
				quad_goal = 1
				
				frumpy_fg[quad_goal].actor:playcommand('Push')
				frumpy_bg[quad_goal].actor:playcommand('Push')
				
				self:queuecommand('GotoNext')
			end"
			GotoNextCommand="%function(self)
				local old_goal = quad_goal
				quad_goal = quad_goal+1
				if quad_goal > 4 then quad_goal = 1 end
				
				local beat = GAMESTATE:GetSongBeat()
				local info = jug_spin(beat+1,quad_goal)
				
				frumpy_fg[old_goal].actor:playcommand('Push')
				frumpy_bg[old_goal].actor:playcommand('Push')
				
				self:linear(60/148)
				
				self:x(sw/2 + info.x*0.7)
				self:y(sh*0.6 - 40)
				self:z(info.z*0.7)
				
				if beat < 271.5 then
					self:queuecommand('GotoNext')
				end
				
			end"
		/>
		
	</children></Layer>
	
	<!--This is for the time based mod reader-->
	<BitmapText
		Font="Common Normal"
		Text="test"
		OnCommand="x,SCREEN_CENTER_X;y,SCREEN_CENTER_Y;effectclock,music;playcommand,SetTime;hidden,1"
		SetTimeCommand="%function(self) self:settext(self:GetSecsIntoEffect()); mod_time = tonumber(self:GetText())+global_offset; self:sleep(0.02); self:queuecommand('SetTime'); end"
	/>
	
	<Layer File="fb.xml" />
	
	<Layer Type="ActorFrame" SmashMessageCommand="playcommand,Do;rotationz,-20;addx,-60;addy,80;"><children>
		<Layer File="glitch" OnCommand="hidden,1;stretchto,0,0,sw,sh;blend,add;hibernate,118.025" DoCommand="hidden,0;linear,0.3;diffusealpha,0;" />
	</children></Layer>
	
	<Layer Type="Quad" OnCommand="hidden,1"
	FinalBallMessageCommand="%function(self)
	
		local beat = GAMESTATE:GetSongBeat()
		local nxt = 291-beat
	
		j_ball2_2:hidden(0)
		j_ball2_2:x(sw*(260/640))
		j_ball2_2:y(sh*0.6-20)
		j_ball2_2:skewx(-1)
		j_ball2_2:linear(60*(nxt)/148)
		j_ball2_2:x(sw/2 + 80)
		j_ball2_2:y(sh/2 - 80)
		j_ball2_2:skewx(0)
		j_ball2_2:zoom(3)
		
		j_ball2_1:decelerate(30*nxt/148)
		j_ball2_1:addy(-200)
		j_ball2_1:addx(230)
		j_ball2_1:accelerate(30*nxt/148)
		j_ball2_1:addy(200)
		j_ball2_1:addx(-230)
	end"
	/>
	
	<Layer Type="ActorFrame" InitCommand="%function(self) j_ball2_1=self end" ><children>
		<Layer File="_fastball" InitCommand="%function(self) j_ball2_2=self end" OnCommand="hidden,1" />
	</children></Layer>
	
	<Layer File="dots" OnCommand="x,sw/2;y,sh/2;zoomx,(320/256)*3;zoomy,4;customtexturerect,0,0,3,3;texcoordvelocity,0,0.3;diffusealpha,0"
	DotsOnMessageCommand="diffusealpha,0.4;blend,add;" DotsFadeMessageCommand="linear,1;diffusealpha,0;" />
	
	<Layer File="crac" OnCommand="x,sw/2+80;y,sh/2-80;hidden,1" SmashMessageCommand="hidden,0" />
	
	<Layer Type="Quad" OnCommand="stretchto,0,0,sw,sh;diffusealpha,0" WhiteFlashMessageCommand="diffusealpha,1;linear,.5;diffusealpha,0;" />
	
</children></ActorFrame>