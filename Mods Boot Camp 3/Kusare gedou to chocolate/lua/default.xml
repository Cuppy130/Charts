<ActorFrame
InitCommand="%function(self)

	songName = GAMESTATE:GetCurrentSong():GetSongDir();
	
	sw = SCREEN_WIDTH
	sh = SCREEN_HEIGHT --shortcuts
	
	function Plr(pn)
		return _G['P'..pn]
	end
	function GetJud(pn)
		return _G['jud'..pn]
	end
	function GetCom(pn)
		return _G['com'..pn]
	end
	
	function mod_do(str,pn)
		if pn then
			GAMESTATE:ApplyGameCommand('mod,'..str,pn)
		else
			GAMESTATE:ApplyGameCommand('mod,'..str)
		end
	end
	
	function taro_Sound(str)
		local met = GAMESTATE:GetCurrentSong():GetSongDir();
		SOUND:PlayOnce(met..'lua/'..str..'.ogg');
	end
	
end"
><children>

	<Layer
		Type="Quad"
		InitCommand="hidden,1"
		OnCommand="sleep,1000"
	/>
	
	<Layer File="clicks.xml" />
	<Layer File="chorus1.xml" />
	<Layer File="chorus2.xml" />
	<Layer File="screen wrap.xml" />
	<Layer File="modhelpers.xml" />
	<Layer File="spellcard.xml" />
	
	<Layer
		Type="Quad"
		OnCommand="hidden,1"
		InitCommand="%function(self)
		
			checked = false; P1=nil;P2=nil;P3=nil;P4=nil;jud1=nil;com1=nil;jud2=nil;com2=nil;jud3=nil;com3=nil;
		
			---------------------------------------------------------
			---------DOCUMENTATION-----------------------------------
			---------------------------------------------------------
			
			--function perframe( beat, endBeat )
				--return true if the current beat is between 'beat' and 'endBeat'
			
			--function mod_shader(beat,key,which)
				--turn on shader key at specified beat (up to 10 keys available, defined by 'which' = 0-9
				
			--function mod_insert(beat,len,mod,len_or_end,pn)
				--insert mod into beat mods table
			--function mod_insert2(time,len,mod,len_or_end,pn)
				--insert mod into time mods table
				
			--function mod_message(beat,msg,persistent)
				--insert something into the actions table.
				--msg can also be a function. If string, a message gets broadcast at that beat
				--if 'persistent' is true, message will run even if editor starts at a beat past it
				
			--function mod_blacklist(t,n)
				--check if number n occurs in table t
				--useful for doing 'every beat EXCEPT the contents of t'
				
			--function simple_m0d(beat,strength,mult,mod)
			--function simple_m0d2(beat,strength,mult,mod,pn)
			--function simple_m0d3(beat,strength,duration,bpm,mod,pn)
				--activate mods at specific beat but also deactivate them
				
			--function mod_wiggle(beat,num,div,amt,speed,mod,pn,first)
				--alternates a mod back and forth before resetting to 0
				
			--function mod_springt(time,strength,dur,mod,pn)
				--time-based per-frame alternating mod that decreases based on how much time is left.
					--think doorstopper
			
			--function mod_springt2(time,strength,dur,mod,pn)
				--time-based per-frame alternating mod
			
			--function mod_onebeat(beat,strength,pn)
				--turns on beat for the beat specified, at the desired strength	
			
			--function switcheroo_add(beat,which,speed,len,pn)
				--adds a column swap at the desired beat
			--[[	switcheroos = {normal = {0,0}, ldur = {0,0}, reset = {0,0},
					flip = {100,0}, rudl = {100,0}, invert = {0,100}, dlru = {0,100},
					ludr = {25,-75}, rdul = {75,75}, drlu = {25,125}, ulrd = {75,-125}, urld = {100,-100}}
			]]
			
			--use a variable called 'switcheroo_width' to change how much space is between each column
			--e.g. switcheroo_width = 2 for ayakashi
			
			--function mod_sugarkiller(beat,duration,speed,minstealth,maxstealth,pn)
				--portable version of the effect from sugarkill X
				
			--function doSpline(spd, axis, path, col)
				--draws spline 'path' in specified axis, for specific col. Offsets are *10000, but positions use *spd
				
			--function doSplineAll(spd, axis, path)
				--same as above, but for all columns
				--(faster performance than using doSpline 4 times due to more efficient concat)
			
			--function mindf_rotateAndCounter(xDegrees, yDegrees, zDegrees, player)
				--counteract euler rotations after rotating player in multiple axes, using a TON of math.
			
			
			---------------------------------------------------------
			--------END DOCUMENTATION--------------------------------
			---------------------------------------------------------
			
			local m = mod_insert
			local m2 = mod_message
			
			
			local l = 'len'
			local e = 'end'
			
			
			
			
			
			
			
			init_modsp1 = '';
			init_modsp2 = '';
			
			mod_plr = {};
			
			mod_firstSeenBeat = GAMESTATE:GetSongBeat(); --necessary to prevent long freezes
			
			
			
			
			
			
			
			
			
			
			
---------------------------------------------------------------------------------------
----------------------Begin tables 'n stuff--------------------------------------------
---------------------------------------------------------------------------------------

			--beat based mods
			--{beat_start, beat_end, mods, len_or_end, player_number}
			mods = {
				{0,9999,'*2 1.5x, *1000 no beat, *1000 sudden, *1000 90 suddenoffset, *10000 -999999 cover','end'},
			}
			
			--switcheroos = {{0,0},{100,0},{0,100},{25,-75},{75,75},{25,125},{75,-125},{100,-100}}
			
			
			
			m(15.5,9999,'*10 1.3x',e)
			
			
			
			--time based mods
			mod_time = 0;
			--{time_start, time_end, mods, len_or_end, player_number}
			mods2 = {
				--{0,200.345,'3x','end',1},
			}
			
			
			
			
			--this is both a message broadcaster and a function runner
			--if you put {beat,'String'}, then 'String' is broadcast as a message on that beat
			--if you put {beat,function() somecode end}, then function() is run at that beat
			--see example on beat 32
			
			curaction = 1;
			--{beat,thing,persists}
			mod_actions = {
			
			
				
			}
			
			function doBeatL(b,le,a,p)
				m(b,le,'*1000 '..a..' beat','len',p)
				m(b+le,1,'*1000 no beat','len',p)
			end
			function doBeatE(b,en,a,p)
				m(b,en,'*1000 '..a..' beat','end',p)
				m(en,1,'*1000 no beat','len',p)
			end
			
			doBeatL(18.5,2,1000)
			doBeatL(22.5,2,1000)
			doBeatL(26.5,1,1000)
			mod_wiggle(28-.1,8,2,200,3,'drunk')
			doBeatL(31.5,1,1000)
			doBeatL(34.5,2,1000)
			doBeatL(38.5,2,1000)
			doBeatL(42.5,1,1000)
			
			m(15.5,4,'*10000 hallway',l)
			m(19-.1,4,'*15 no hallway',l)
			m(20-.1,4,'*15 -100 hallway',l)
			m(23-.1,4,'*15 no hallway',l)
			m(24-.1,4,'*15 100 hallway',l)
			m(27-.1,4,'*15 no hallway',l)
			
			m(32-.1,4,'*15 100 space',l)
			m(35-.1,4,'*15 no space',l)
			m(36-.1,4,'*15 -100 space',l)
			m(39-.1,4,'*15 no space',l)
			m(40-.1,4,'*15 -100 incoming',l)
			m(43-.1,4,'*15 no incoming',l)
			
			m2(15.5,function()
				rb_aux:x(100)
			end)
			m2(19-.1,function()
				rb_aux:linear(.1)
				rb_aux:x(50)
				rb_aux:y(0)
				rb_aux:sleep(60/260-.1)
				rb_aux:linear(.1)
				rb_aux:x(0)
				rb_aux:y(100)
			end)
			m2(23-.1,function()
				rb_aux:linear(.1)
				rb_aux:x(50)
				rb_aux:y(0)
				rb_aux:sleep(60/260-.1)
				rb_aux:linear(.1)
				rb_aux:x(75)
				rb_aux:y(-125)
			end)
			m2(27-.1,function()
				rb_aux:linear(.1)
				rb_aux:x(50)
				rb_aux:y(0)
				rb_aux:sleep(60/260-.1)
				rb_aux:linear(240/260)
				rb_aux:x(0)
				rb_aux:y(0)
			end)
			m2(32-.1,function()
				rb_aux:linear(.1)
				rb_aux:x(100)
				rb_aux:y(0)
			end)
			m2(16+19-.1,function()
				rb_aux:linear(.1)
				rb_aux:x(50)
				rb_aux:y(0)
				rb_aux:sleep(60/260-.1)
				rb_aux:linear(.1)
				rb_aux:x(100)
				rb_aux:y(-100)
			end)
			m2(16+23-.1,function()
				rb_aux:linear(.1)
				rb_aux:x(50)
				rb_aux:y(0)
				rb_aux:sleep(60/260-.1)
				rb_aux:linear(.1)
				rb_aux:x(25)
				rb_aux:y(125)
			end)
			m2(16+27-.1,function()
				rb_aux:linear(.1)
				rb_aux:x(50)
				rb_aux:y(0)
				rb_aux:sleep(60/260-.1)
				rb_aux:linear(240/260)
				rb_aux:x(0)
				rb_aux:y(0)
			end)
			
			doBeatL(91.5,4,500)
			doBeatL(155.5,4,500)
			
			
			
			
			function kus_threes(beat,mini)
				simple_m0d2(beat,150,.2,'drunk');
				simple_m0d2(beat,150,.2,'tipsy');
				simple_m0d2(beat+1,-150,.2,'drunk');
				simple_m0d2(beat+1,-150,.2,'tipsy');
				simple_m0d2(beat+2,150,.2,'drunk');
				simple_m0d2(beat+2,150,.2,'tipsy');
				if mini then
					simple_m0d(beat,-100,.1,'mini')
					simple_m0d(beat+1,-100,.1,'mini')
					simple_m0d(beat+2,-100,.1,'mini')
				end
			end
			
			mod_wiggle(268,4,2,150,2,'drunk')
			mod_wiggle(270,4,2,150,2,'tipsy')
			m(272,290,'drunk,wave',e)
			m(290,291,'*1000 no drunk, *1000 no wave',e)
			
			kus_threes(52-.1)
			kus_threes(60-.1)
			kus_threes(76-.1,true)
			kus_threes(124-.1,true)
			
			m2(0,function()
				for pn=1,2 do
					local a = GetJud(pn)
					if a then
						a:x(60*(pn*2-3))
						a:basezoomx(0.7)
						a:basezoomy(0.7)
					end
					local a = GetCom(pn)
					if a then
						a:x(60*(pn*2-3))
						a:basezoomx(0.7)
						a:basezoomy(0.7)
					end
				end
			end,true)
			
			m2(44,function()
				local a = Plr(1)
				if a then
					a:linear(4*60/260)
					a:x(sw/2)
					a:y(sh/2)
				end
				local a = Plr(2)
				if a then
					a:linear(4*60/260)
					a:zoom(0)
					a:rotationz(40)
				end
			end)
			
			mod_wiggle(44,7,2,150,2,'tipsy')
			
			m2(48,function()
				local a = Plr(1)
				if a then
					a:spring(0.2)
					a:x( sw*0.3 + math.random(-64,64) )
					a:y( sh*0.5 + math.random(-64,64) )
					a:zoom(0.8)
					a:rotationz(24)
					a:rotationx(20)
					a:rotationy(20)
				end
			end)
			
			mod_wiggle(112,4,2,100,2,'drunk')
			mod_wiggle(114,4,2,100,2,'tipsy')
			mod_wiggle(116,4,2,100,2,'drunk')
			mod_wiggle(118,4,2,100,2,'tipsy')
			mod_wiggle(120,4,2,100,2,'drunk')
			mod_wiggle(122,4,2,100,2,'tipsy')
			
			mod_wiggle(128,4,2,100,2,'drunk')
			mod_wiggle(130,4,2,100,2,'tipsy')
			
			function kus_opp(pn)
				if pn == 1 then return 2 end
				if pn == 2 then return 1 end
				return 0
			end
			
			kus_global = -1
			
			function kus_spawn(p,nerf)
				for pn=1,2 do
					if pn == p or not p then
						local a = Plr(pn)
						if a then
						
							local x = sw*0.5 - sw*0.2*kus_global + math.random(-64,64)
							local y = sh*0.5 + math.random(-64,64)
							
							if nerf then
								x = sw*0.5 - sw*0.05*kus_global + math.random(-48,48)
								y = sh*0.5 + math.random(-48,48)
							end
							
							kus_global = kus_global*-1
						
							local zm = 0.8+math.random(-10,10)/100
							
							if not p then
								x = sw*0.5
								y = sh*0.5
								zm = 1
							end
							
							a:x(x)
							a:y(y)
							
							a:zoom(zm)
							a:zoomy(0)
							
							a:rotationz( (math.random(0,1)*2 -1)*(math.random(15,25)) )
							a:rotationy( (math.random(0,1)*2 -1)*(math.random(15,25)) )
							a:rotationx( (math.random(0,1)*2 -1)*(math.random(15,25)) )
							
							if nerf then
								a:rotationz( (math.random(0,1)-0.5)*(math.random(15,25)) )
								a:rotationy( (math.random(0,1)-0.5)*(math.random(15,25)) )
								a:rotationx( (math.random(0,1)-0.5)*(math.random(15,25)) )
							end
							
							if not p then
								a:rotationx(0)
								a:rotationy(0)
								a:rotationz(0)
							end
							
							a:decelerate(0.3)
							a:zoomy(zm)
							
						end
						local b = Plr(kus_opp(pn))
						if p and b then
							b:decelerate(0.3)
							b:zoomy(0)
						end
					end
				end
			end
			
			function kus_move(p,nerf)
				for pn=1,2 do
					if pn == p or not p then
						local a = Plr(pn)
						if a then
						
							local x = sw*0.5 - sw*0.2*kus_global + math.random(-64,64)
							local y = sh*0.5 + math.random(-64,64)
							
							if nerf then
								x = sw*0.5 - sw*0.1*kus_global + math.random(-3,3)
								y = sh*0.5 + math.random(-48,48)
							end
							
							kus_global = kus_global*-1
						
							local zm = 0.8+math.random(-10,10)/100
							
							if not p then
								x = sw*0.5
								y = sh*0.5
								zm = 1
							end
							
							a:x(x)
							a:y(y)
							
							a:zoom(zm)
							
							a:rotationz( (math.random(0,1)*2 -1)*(math.random(15,25)) )
							a:rotationy( (math.random(0,1)*2 -1)*(math.random(15,25)) )
							a:rotationx( (math.random(0,1)*2 -1)*(math.random(15,25)) )
							
							if nerf then
								a:rotationz( (math.random(0,1)-0.5)*(math.random(15,25)) )
								a:rotationy( (math.random(0,1)-0.5)*(math.random(15,25)) )
								a:rotationx( (math.random(0,1)-0.5)*(math.random(15,25)) )
							end
							
							if not p then
								a:rotationx(0)
								a:rotationy(0)
								a:rotationz(0)
							end
							
							
						end
					end
				end
			end
			
			m2(56,function() kus_spawn(2) end)
			m2(64,function() kus_spawn(1) end)
			m2(72,function() kus_spawn(2) end)
			
			--[[
			kus_fpn = 1
			for i=81,102,2 do
				local k = kus_fpn
				m2(i,function() kus_spawn(k,true) end)
				kus_fpn = kus_opp(kus_fpn)
			end
			]]
			
			--sakuramichies
			
			m2(79,function() kus_spawn(1) end)
			
			m2(81,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:decelerate(60/260)
						a:zoom(.8)
					end
				end
			end)
			for i=80,102,4 do
				m(i+1-.1,3,'*10 no stealth, *10 no dark, *20 no mini, *10 no flip','len',2);
				m(i+1-.1,3,'*10 stealth, *10 dark, *20 200 mini, *20 -200 flip','len',1);
				m(i+3-.1,3,'*10 no stealth, *10 no dark, *20 no mini, *10 no flip','len',1);
				m(i+3-.1,3,'*10 stealth, *10 dark, *20 200 mini, *20 -200 flip','len',2);
				
				if i ~= 80 then
					m2(i,function() kus_move(2,true) end)
					m2(i+2,function() kus_move(1,true) end)
				end
			end
			
			m2(108,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:vibrate()
						a:effectmagnitude(0,80,0)
					end
				end
				rb_aux:x(80)
				rb_aux:linear(240/260)
				rb_aux:x(0)
			end)
			
			m(47.5,4,'*1000 150 beat',l)
			m(55.5,4,'*1000 150 beat',l)
			m(63.5,12,'*1000 150 beat',l)
			m(167.5,1,'*1000 1000 beat',l)
			
			m(80,103,'80 drunk, bumpy, wave',e)
			m(143,166,'80 drunk, bumpy, wave',e)
			
			
			m2(103,function() kus_spawn(nil) end)
			
			m2(15,'Static4th');
			m2(108,'StaticFUG');
			
			m2(172,'VHSOut');
			m2(237,'VHSIn');
			m2(364,'VHSOut2');
			
			m(104,3,'*10000 no stealth, *10000 no dark, *10000 no mini, *10000 no flip',l);
			m2(104,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:decelerate(90/260)
						a:skewx(2*(pn*2-3))
						a:decelerate(150/260)
						a:skewx(0)
					end
				end
			end)
			
			m2(108,function()
				local a = Plr(1)
				if a then
					a:zoomy(0)
				end
			end)
			
			m2(112,function() kus_spawn(1) end)
			m2(116,function() kus_spawn(2) end)
			m2(120,function() kus_spawn(1) end)
			m2(124,function() kus_spawn(2) end)
			m2(128,function() kus_spawn(1) end)
			
			m2(132,function()
				local p1 = Plr(1)
				local x = 0
				local y = 0
				local rx = 0
				local ry = 0
				local rz = 0
				local zm = 1
				if p1 then
					x = P1:GetX()
					y = P1:GetY()
					rx,ry,rz = P1:getrotation()
					zm = P1:GetZoomX()
				end
				for pn=1,1 do
					local a = Plr(pn)
					if a then
						a:linear(240/260)
						a:x(sw/2)
						a:y(sh/2)
						a:rotationx(0)
						a:rotationy(0)
						a:rotationz(0)
						a:zoom(1.3)
					end
				end
			end)
			
			m(142,3,'*10000 stealth, *10000 dark, *10000 200 mini, *10000 -200 flip','len',2);
			
			m2(143,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:bounceend(60/260)
						a:zoom(0.7)
					end
				end
			end)
			
			for i=144,166,4 do
				m(i+1-.1,3,'*10 no stealth, *10 no dark, *20 no mini, *10 no flip','len',2);
				m(i+1-.1,3,'*10 stealth, *10 dark, *20 200 mini, *20 -200 flip','len',1);
				m(i+3-.1,3,'*10 no stealth, *10 no dark, *20 no mini, *10 no flip','len',1);
				m(i+3-.1,3,'*10 stealth, *10 dark, *20 200 mini, *20 -200 flip','len',2);
				
				if i ~= 144 then
					m2(i,function() kus_move(2,true) end)
					m2(i+2,function() kus_move(1,true) end)
				end
			end
			
			m(169,4,'*10000 no stealth, *10000 no dark, *10000 no mini, *10000 no flip','len',2);
			
			--[[
			local fluct = 1
			for i=176,204 do
				simple_m0d2(i-.1,100,.4,'brake');
				simple_m0d2(i-.1,200*fluct,.4,'drunk',1);
				simple_m0d2(i-.1,200*-fluct,.4,'drunk',2);
				fluct = fluct*-1
			end
			]]
			
			
			
			m2(168-.1,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:spring(0.2)
						a:x(sw/2)
						a:y(sh/2)
						a:rotationx(0)
						a:rotationy(0)
						a:rotationz(0)
						a:zoom(1)
					end
				end
			end)
			
			--[[
			m2(136,function()
				local p1 = Plr(1)
				local x = 0
				local y = 0
				local rx = 0
				local ry = 0
				local rz = 0
				local zm = 1
				if p1 then
					x = P1:GetX()
					y = P1:GetY()
					rx,ry,rz = P1:getrotation()
					zm = P1:GetZoomX()
				end
				for pn=2,2 do
					local a = Plr(pn)
					if a then
						a:x(x)
						a:x(y)
						a:zoom(zm)
						a:rotationx(rx)
						a:rotationy(ry)
						a:rotationz(rz)
					end
				end
			end)
			]]
			
			--[[
			m(132,144,'*10000 -200 sudden, *10000 -200 hidden, *10000 -30 suddenoffset, *10000 30 hiddenoffset, *10000 200 stealth',e)
			
			m(132,144,'*10000 -2000 cross, *10000 no reverse',e,2)
			m(132,144,'*10000 -2000 reverse, *10000 2000 cross,',e,1)
			m(132,8,'*0.5 tornado',l,2)
			m(140,8,'*0.5 tornado',l,2)
			]]
			
			m(136-.1,1,'*20 reverse, *20 -100 cross',l)
			m(136.5-.1,1,'*20 no reverse, *20 no cross',l)
			m(137-.1,1,'*20 reverse, *20 -100 cross',l)
			
			m(138-.1,1,'*20 no reverse, *20 no cross',l)
			m(138.5-.1,1,'*20 reverse, *20 -100 cross',l)
			
			m(139.5-.1,1,'*20 no reverse, *20 no cross',l)
			
			m(140.5-.1,1,'*20 reverse, *20 -100 cross',l)
			
			m(141.5-.1,1,'*20 no reverse, *20 no cross',l)
			m(142-.1,1,'*20 reverse, *20 -100 cross',l)
			
			m(143-.1,1,'*20 no reverse, *20 no cross',l)
			
			--unction switcheroo_add(beat,which,speed,len,pn)
			switcheroo_add(136-.1,'ludr',20,1)
			switcheroo_add(136.5-.1,'ldur',20,1)
			switcheroo_add(137-.1,'ludr',20,1)
			
			switcheroo_add(138-.1,'ldur',20,1)
			switcheroo_add(138.5-.1,'ludr',20,1)
			
			switcheroo_add(139.5-.1,'ldur',20,1)
			
			switcheroo_add(140.5-.1,'ludr',20,1)
			
			switcheroo_add(141.5-.1,'ldur',20,1)
			switcheroo_add(142-.1,'ludr',20,1)
			
			switcheroo_add(143-.1,'ldur',20,1)
			
			function beep(beat,len)
				m2(beat,function()
					kus_test:finishtweening()
					kus_test:diffusealpha(1)
					kus_test:sleep(len*60/260)
					kus_test:diffusealpha(0)
				end)
			end
			
			
			
			m2(172,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:vibrate()
						a:effectmagnitude(0,60,0)
					end
				end
			end)
			
			m2(174,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:stopeffect()
					end
				end
			end)
			
			m(168-.1,8,'*15 flip',l)
			m(172,4,'*2 no flip',l)
			
			m2(428,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:vibrate()
						a:effectmagnitude(0,60,0)
					end
				end
			end)
			
			m2(432,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:stopeffect()
					end
				end
			end)
			
			m(428,4,'*0.4 flip, *0.4 reverse',l)
			m(432-.1,1,'*7 no flip, *7 no reverse',l)
			
			
			beep(12,1.5)
			beep(248,4)
			beep(256,8)
			beep(272,5)
			beep(290,2)
			
			m2(249,function()
				kus_goop1:diffuse(.6,.6,.6,.6)
				kus_goop1:blend('add')
				kus_goop1:linear(8*60/232)
				kus_goop1:zoomtoheight(SCREEN_HEIGHT*1.2)
			end)
			m2(257,function()
				kus_goop1:diffuse(.6,.6,.6,0)
				kus_goop2:diffuse(.6,.6,.6,.6)
				kus_goop2:blend('add')
				kus_goop2:linear(16*60/232)
				kus_goop2:zoomtoheight(SCREEN_HEIGHT*1.4)
			end)
			m2(273,function()
				kus_goop2:diffuse(.6,.6,.6,0)
				kus_goop3:diffuse(.6,.6,.6,.6)
				kus_goop3:blend('add')
				kus_goop3:linear(18*60/232)
				kus_goop3:zoomtoheight(SCREEN_HEIGHT*1.4)
			end)
			m2(291,function()
				kus_goop1:diffuse(.6,.6,.6,0)
				kus_goop2:diffuse(.6,.6,.6,0)
				kus_goop3:diffuse(.6,.6,.6,0)
			end)
			
			m2(248,'KaworuOn')
			m2(248,'Pat1')
			m2(252,'KaworuOff')
			
			m2(256,'KaworuOn')
			m2(256,'Pat2')
			m2(264,'KaworuOff')
			
			m2(272,'KaworuOn')
			m2(272,'Pat3')
			m2(277,'KaworuOff')
			
			m2(290,function()
				kus_popuko:diffusealpha(1)
				kus_popuko:sleep(120/260)
				kus_popuko:diffusealpha(0)
			end)
			
			m2(248,function()
				kus_kaw:x(SCREEN_WIDTH*0.55)
				kus_kaw:y(SCREEN_HEIGHT*0.55)
				kus_kaw:rotationz(-10)
				kus_kaw:linear(4*60/260)
				kus_kaw:addx(-32)
				kus_kaw:addy(-20)
			end)
			
			m2(256,function()
				kus_kaw:x(SCREEN_WIDTH*0.4)
				kus_kaw:y(SCREEN_CENTER_Y*0.55)
				kus_kaw:rotationz(10)
				kus_kaw:linear(8*60/260)
				kus_kaw:rotationz(5)
				kus_kaw:addx(32)
				kus_kaw:addy(-20)
			end)
			
			m2(272,function()
				kus_kaw:x(SCREEN_WIDTH*0.5)
				kus_kaw:y(SCREEN_HEIGHT*0.35)
				kus_kaw:rotationz(-10)
				kus_kaw:linear(5*60/260)
				kus_kaw:addx(-32)
				kus_kaw:addy(32)
				kus_kaw:rotationz(-15)
			end)
			
			m2(232,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:x(SCREEN_CENTER_X)
						a:y(SCREEN_CENTER_Y)
						a:zoom(1)
						a:rotationz(0)
					end
				end
			end,true)
			m2(232.01,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:decelerate(45/260)
						a:zoom(1.5)
						a:rotationz(-30)
						a:accelerate(45/260)
						a:zoom(1)
						a:rotationz(0)
						a:decelerate(45/260)
						a:zoom(1.5)
						a:rotationz(30)
						a:accelerate(45/260)
						a:zoom(1)
						a:rotationz(0)
						a:decelerate(30/260)
						a:zoom(1.5)
						a:rotationz(-30)
						a:accelerate(30/260)
						a:zoom(1)
						a:rotationz(0)
					end
				end
			end)
			
			m(240,249,'wave, drunk',e)
			m(249,257,'*1000 bumpy, *1000 no wave',e)
			m(257,1,'*1000 no bumpy',l)
			
			m2(249,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:x(SCREEN_WIDTH*0.4)
						a:y(SCREEN_HEIGHT*0.6)
						a:zoom(1)
						a:rotationz(-20)
						a:rotationx(-20)
						a:rotationy(-20)
					end
				end
			end)
			
			m2(257,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:x(SCREEN_WIDTH*0.6)
						a:y(SCREEN_HEIGHT*0.4)
						a:zoom(1.3)
						a:rotationz(0)
						a:rotationx(30)
						a:rotationy(10)
					end
				end
			end)
			
			m2(273,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:x(SCREEN_WIDTH*0.4)
						a:y(SCREEN_HEIGHT*0.5)
						a:zoom(1)
						a:rotationz(20)
						a:rotationx(-40)
						a:rotationy(-10)
					end
				end
			end)
			
			for i=272,298,3 do
				simple_m0d(i,200,.1,'bumpy',1)
				simple_m0d(i,-200,.1,'bumpy',2)
				simple_m0d(i+.5,200,.1,'bumpy',1)
				simple_m0d(i+.5,-200,.1,'bumpy',2)
				simple_m0d(i+1.5,200,.3,'bumpy',1)
				simple_m0d(i+1.5,-200,.3,'bumpy',2)
			end
			
			if FUCK_EXE then
				m(0,999,'dizzyholds',e)
			end
			
			doBeatE(303.5,359.5,200)
			
			m(484-.1,1,'*15 invert',l)
			m(484.75-.1,1,'*15 no invert',l)
			m(485.5-.1,1,'*15 invert',l)
			m(486-.1,1,'*15 no invert',l)
			m(486.75-.1,1,'*15 invert',l)
			m(487.5-.1,1,'*15 no invert',l)
			
			m(336,364,'200 dizzy, drunk',e)
			m(300,364,'wave',e)
			m(364,380,'*2 no dizzy',e)
			
			switcheroo_add(236-.1,'flip',15,1)
			switcheroo_add(237-.1,'invert',15,1)
			switcheroo_add(238-.1,'rdul',15,1)
			switcheroo_add(239-.1,'ludr',15,1)
			switcheroo_add(240-.1,'normal',15,1)
			
			m(176,236,'*3 140 wave',e)
			m(368,432,'*3 140 wave',e)
			
			for i=176,187 do
				simple_m0d(i-.05,500,.2,'bumpy')
			end
			--simple_m0d(188-.05,500,1,'bumpy')
			for i=192,203 do
				simple_m0d(i-.05,500,.2,'bumpy')
			end
			simple_m0d(204-.05,500,1,'bumpy')
			
			for i=208,219 do
				simple_m0d(i-.05,500,.2,'bumpy')
			end
			--simple_m0d(220-.05,500,1,'bumpy')
			for i=224,231 do
				simple_m0d(i-.05,500,.2,'bumpy')
			end
			simple_m0d(232-.05,500,1,'bumpy')
			
			
			for i=368,379 do
				simple_m0d(i-.05,400,.2,'bumpy')
			end
			--simple_m0d(380-.05,400,1,'bumpy')
			for i=384,395 do
				simple_m0d(i-.05,400,.2,'bumpy')
			end
			simple_m0d(396-.05,400,1,'bumpy')
			
			for i=400,411 do
				simple_m0d(i-.05,400,.2,'bumpy')
			end
			--simple_m0d(412-.05,400,1,'bumpy')
			for i=416,427 do
				simple_m0d(i-.05,400,.2,'bumpy')
			end
			--simple_m0d(428-.05,400,1,'bumpy')
			
			
			m2(290,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:x(SCREEN_CENTER_X+160*(pn*2-3))
						a:y(SCREEN_CENTER_Y)
						a:zoom(1)
						a:rotationz(0)
						a:rotationx(0)
						a:rotationy(0)
					end
				end
			end,true)
			m2(428,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:x(SCREEN_CENTER_X)
						a:y(SCREEN_CENTER_Y)
						a:zoom(1)
						a:rotationz(0)
					end
				end
			end)
			m2(456,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:x(SCREEN_CENTER_X)
						a:y(SCREEN_CENTER_Y)
						a:zoom(1)
						a:rotationz(0)
					end
				end
				
			end,true)
			
			m2(456.1,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:zoomz(1)
						a:linear(13*60/260)
						a:zoomz(20)
						a:linear(3*60/260)
						a:zoomz(1)
					end
				end
				
			end)
			
			simple_m0d2(456,150,5,'stealth');
			
			m2(456,function() rb_aux:x(0) rb_aux:linear(13*60/260) rb_aux:x(100) rb_aux:linear(3*60/260) rb_aux:x(0) end)
			
			m2(296,function()
				kus_tex1:hidden(0)
				kus_tex1:diffusealpha(1)
				kus_tex1:sleep(180/260)
				kus_tex1:diffusealpha(0)
			end)
			
			m2(300,function()
				kus_tex1:diffusealpha(1)
			end)
			m2(301,function() kus_tex1:customtexturerect(0,0,3,2) end)
			m2(301.5,function() kus_tex1:customtexturerect(0,0,3,3) end)
			m2(302,function() kus_tex1:customtexturerect(0,0,4,3) end)
			m2(302.5,function() kus_tex1:customtexturerect(0,0,4,4) end)
			m2(303,function() kus_tex1:customtexturerect(0,0,5,4) end)
			m2(303.5,function() kus_tex1:customtexturerect(0,0,5,5) end)
			m2(304,function() kus_tex1:customtexturerect(0,0,6,6) end)
			m2(304,function() kus_tex2:customtexturerect(0,0,6,6) end)
			
			kus_cursize = 6
			
			kus_cur = 2
			function kus_swap(beat)
				m2(beat,function()
					local a = _G['kus_tex'..kus_cur]
					if a then
						a:hidden(0)
					end
					kus_cur = kus_opp(kus_cur)
					local a = _G['kus_tex'..kus_cur]
					if a then
						a:hidden(1)
					end
				end)
			end
			
			function kus_size(beat,dir)
				m2(beat,function()
					kus_cursize = kus_cursize+dir
					for c=1,2 do
						local a = _G['kus_tex'..c]
						if a then
							a:customtexturerect(0,0,kus_cursize,kus_cursize)
						end
					end
				end)
			end
			
			for i=1,table.getn(screen_wrap) do
				local b = screen_wrap[i]
				if b[2] == 0 or b[2] == 3 then
					kus_swap(b[1]-.1)
				else
					kus_size(b[1]-.1,b[2]*2-3)
				end
			end
			
			local fluct = 1
			kus_dfluct = 1
			for i=1,table.getn(chorus1) do
				local b = chorus1[i]
				local f = fluct
				if i == table.getn(chorus1) then
					m2(b[1],function() rb_aux:spring(240/260) rb_aux:x(0) rb_aux:y(0) end)
				elseif b[3] == 2 then
					m2(b[1],function() rb_aux:spring(90/260) rb_aux:x(0) rb_aux:y(0) end)
				elseif b[2] == 0 or  b[2] == 3 then
					m2(b[1],function() rb_aux:decelerate(30/260) rb_aux:x(100*kus_dfluct) kus_dfluct=kus_dfluct*-1 end)
				elseif b[2] == 1 or  b[2] == 2 then
					m2(b[1],function() rb_aux:decelerate(30/260) rb_aux:y(100*kus_dfluct) kus_dfluct=kus_dfluct*-1 end)
				end
			end
			for i=1,table.getn(chorus2) do
				local b = chorus2[i]
				local f = fluct
				if i == table.getn(chorus2) then
					m2(b[1],function() rb_aux:spring(240/260) rb_aux:x(0) rb_aux:y(0) end)
				elseif b[3] == 2 then
					m2(b[1],function() rb_aux:spring(90/260) rb_aux:x(0) rb_aux:y(0) end)
				elseif b[2] == 0 or  b[2] == 3 then
					m2(b[1],function() rb_aux:decelerate(30/260) rb_aux:x(100*kus_dfluct) kus_dfluct=kus_dfluct*-1 end)
				elseif b[2] == 1 or  b[2] == 2 then
					m2(b[1],function() rb_aux:decelerate(30/260) rb_aux:y(100*kus_dfluct) kus_dfluct=kus_dfluct*-1 end)
				end
			end
			
			m(428,4,'*10 no bumpy, *10 no drunk, *10 no tipsy',l)
			
			local fluct = 1
			for i=1,table.getn(clicks) do
				local b = clicks[i]
				if i == table.getn(clicks) then
					m(b[1]-.05,1,'*3 no drunk',l)
					m(b[1]-.05,1,'*3 no bumpy',l)
				else
					m(b[1]-.05,1,'*10000 '..(20*fluct)..' drunk',l)
					m(b[1]-.05,1,'*10000 '..(20*fluct)..' bumpy',l)
				end
				fluct = fluct*-1;
			end
			
			m2(364,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:x(SCREEN_CENTER_X+140*(pn*2-3))
						a:sleep(30/260)
						a:x(SCREEN_CENTER_X+120*(pn*2-3))
						a:sleep(30/260)
						a:x(SCREEN_CENTER_X+100*(pn*2-3))
						a:sleep(30/260)
						a:x(SCREEN_CENTER_X+80*(pn*2-3))
						a:sleep(30/260)
						a:x(SCREEN_CENTER_X+60*(pn*2-3))
						a:sleep(30/260)
						a:x(SCREEN_CENTER_X+40*(pn*2-3))
						a:sleep(30/260)
						a:x(SCREEN_CENTER_X+20*(pn*2-3))
						a:sleep(30/260)
						a:x(SCREEN_CENTER_X)
					end
				end
			end)
			
			m2(496,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:bounceend(240/260)
						a:rotationz(360)
						a:sleep(0)
						a:rotationz(0)
						a:bounceend(240/260)
						a:rotationz(-360)
						a:sleep(0)
						a:rotationz(0)
						a:bounceend(240/260)
						a:rotationz(360)
						a:sleep(0)
						a:rotationz(0)
						a:bounceend(240/260)
						a:rotationz(-360)
						a:sleep(0)
						a:rotationz(0)
					end
				end
			end)
			
			for i=472,495 do
				simple_m0d2(i,100,.2,'brake')
			end
			mod_wiggle(472-.1,23,1,150,2,'drunk')
			
			beep(512,15)
			m2(528,'Static');
			
---------------------------------------------------------------------------------------
----------------------Sort the actions table-------------------------------------------
---------------------------------------------------------------------------------------
			
			function modtable_compare(a,b)
				return a[1] < b[1]
			end
			
			if table.getn(mod_actions) > 1 then
				table.sort(mod_actions, modtable_compare)
			end
			
			self:queuecommand('Update');
			
		end"
		
		UpdateCommand="%function(self)

			if GAMESTATE:GetSongBeat()>=0 and not checked then
			
				local ThingsToGrab = {'LifeP1','LifeP2','ScoreP1','ScoreP2','BPMDisplay','LifeFrame','ScoreFrame',
										'Lyrics','SongBackground','SongForeground','Overlay','Underlay'}
				local ThingsToHide = {'LifeP1','LifeP2','ScoreP1','ScoreP2','BPMDisplay','LifeFrame','ScoreFrame','Overlay','Underlay'}
				
				for i,v in ipairs(ThingsToGrab) do
					_G[v] = SCREENMAN:GetTopScreen():GetChild(v) or nil
				end
				
				for i,v in ipairs(ThingsToHide) do
					if _G[v] then _G[v]:hidden(1) end
				end
				
				table.insert(mod_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP1'));
				table.insert(mod_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP2'));
				
				--name players, judgment and combo
				for pn=1,2 do
					_G['P'..pn] = SCREENMAN:GetTopScreen():GetChild('PlayerP'..pn) or nil;
					if _G['P'..pn] then
						_G['jud'..pn] = _G['P'..pn]:GetChild('Judgment');
						_G['com'..pn] = _G['P'..pn]:GetChild('Combo');
					end
				end
				
				screen = SCREENMAN:GetTopScreen();
				checked = true; --let this only run once
				
				for pn=1,2 do
					if GAMESTATE:IsPlayerEnabled(pn-1) then
						if GAMESTATE:GetCurrentSteps(pn-1):GetDifficulty() == 4 then
							kus_pat1:hidden(0)
						end
						if GAMESTATE:GetCurrentSteps(pn-1):GetDifficulty() == 5 then
							kus_pat2:hidden(0)
						end
					end
				end
				
			end

			local beat = GAMESTATE:GetSongBeat()
			
			
---------------------------------------------------------------------------------------
----------------------Begin table handlers---------------------------------------------
---------------------------------------------------------------------------------------
			
			disable = false;
			if disable ~= true and beat > mod_firstSeenBeat+0.1 and checked then
				
				-----------------------
				-- Player mod resets --
				-----------------------
				if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --
					for i=1,2 do
						mod_do('clearall',i)
					end
				end
				
				------------------------------------------------------------------------------
				-- custom mod reader by TaroNuke edited by WinDEU and re-stolen by TaroNuke --
				------------------------------------------------------------------------------
				if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --
					for i,v in pairs(mods) do
						if v and table.getn(v) > 3 and v[1] and v[2] and v[3] and v[4] then
							if beat >=v[1] then
								if (v[4] == 'len' and beat <=v[1]+v[2]) or (v[4] == 'end' and beat <=v[2]) then
									if table.getn(v) == 5 then
										mod_do(v[3],v[5]);
									else
										mod_do(v[3]);
									end
								end
							end
						else
							v[1] = 0;
							v[2] = 0;
							v[3] = '';
							v[4] = 'error';
							SCREENMAN:SystemMessage('Bad mod in beat-based table (line '..i..')');
						end
					end
				end
				
				-----------------------------------------------------------------------------------------------------
				-- WinDEU's time-based len/end version of the #swag custom mod reader #teamproofofconcept (c) 2015 --
				-----------------------------------------------------------------------------------------------------
				if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --
					for i,v in pairs(mods2) do
						if v and table.getn(v) > 3 and v[1] and v[2] and v[3] and v[4] then
							if mod_time >=v[1] then
								if (v[4] == 'len' and mod_time <=v[1]+v[2]) or (v[4] == 'end' and mod_time <=v[2]) then
									if table.getn(v) == 5 then
										mod_do(v[3],v[5]);
									else
										mod_do(v[3]);
									end
								end
							end
						else
							v[1] = 0;
							v[2] = 0;
							v[3] = 'error';
							v[4] = 'error';
							SCREENMAN:SystemMessage('Bad mod in time-based table (line '..i..')');
						end
					end
				end
				
				--------------------
				-- Perframe stuff --
				--------------------
				
				if beat > 15 and beat < 49 then
					mod_do('*10000 '..rb_aux:GetX()..' flip,*10000 '..rb_aux:GetY()..' invert')
				end
				if beat > 176 and beat < 236 then
					mod_do('*10000 '..(rb_aux:GetX()*1)..' drunk,*10000 '..(rb_aux:GetY()*0.6)..' tipsy')
				end
				if beat > 368 and beat < 428 then
					mod_do('*10000 '..(rb_aux:GetX()*1.2)..' drunk,*10000 '..(rb_aux:GetY()*.4)..' tipsy')
				end
				
				if beat > 108 and beat < 113 then
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:effectmagnitude(0,rb_aux:GetX(),0)
						end
					end
				end
				
				if beat > 176 and beat < 204 then
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:zoom( 1 + 0.6*math.abs(math.sin(beat*math.pi)) )
							a:rotationz( 20*math.sin(beat*math.pi) )
						end
					end
				end
				if beat > 188 and beat < 192 then
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:zoom( 1 + 0.6*math.abs(math.sin(beat*math.pi*0.5)) )
							a:rotationz( 20*math.sin(beat*math.pi*0.5) )
						end
					end
				end
				if beat > 204 and beat < 206 then
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:zoom( 1 + 0.6*math.abs(math.sin(beat*math.pi)) )
							a:x( SCREEN_CENTER_X+120*math.sin(beat*math.pi) )
							a:rotationz(0)
						end
					end
				end
				if beat > 206 and beat < 208 then
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:zoom( 1 + 0.6*math.abs(math.sin(beat*math.pi*0.5)) )
							a:x( SCREEN_CENTER_X-120*math.sin(beat*math.pi*0.5) )
							a:rotationz(0)
						end
					end
				end
				if beat > 208 and beat < 232 then
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:x(SCREEN_CENTER_X)
							a:zoom( 1 + 0.6*math.abs(math.sin(beat*math.pi)) )
							a:rotationz( 20*math.sin(beat*math.pi) )
						end
					end
				end
				if beat > 216 and beat < 232 then
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:x(SCREEN_CENTER_X)
							a:zoom( 1 + 0.6*math.abs(math.sin(beat*math.pi)) )
							a:rotationz( -20*math.sin(beat*math.pi) )
						end
					end
				end
				if beat > 214 and beat < 216 then
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:x(SCREEN_CENTER_X)
							a:zoom( 1 + 0.6*math.abs(math.sin(beat*math.pi*0.5)) )
							a:rotationz( -20*math.sin(beat*math.pi*0.5) )
						end
					end
				end
				if beat > 220 and beat < 224 then
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:x(SCREEN_CENTER_X)
							a:zoom( 1 + 0.6*math.abs(math.sin(beat*math.pi*0.5)) )
							a:rotationz( -20*math.sin(beat*math.pi*0.5) )
						end
					end
				end
				
				
				
				
				if beat > 364 and beat < 370 then
					local a = math.max((368-beat)/4,0)
					for t=1,2 do
						local b = _G['kus_tex'..t]
						if b then
							b:diffusealpha(a)
						end
					end
				end
				
				if beat > 368 and beat < 396 then
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:x(SCREEN_CENTER_X)
							a:zoom( 1 + 0.8*math.abs(math.sin(beat*math.pi)) )
							a:rotationz( 25*math.sin(beat*math.pi) )
						end
					end
				end
				if beat > 380 and beat < 384 then
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:x(SCREEN_CENTER_X)
							a:zoom( 1 + 0.8*math.abs(math.sin(beat*math.pi*0.5)) )
							a:rotationz( 25*math.sin(beat*math.pi*0.5) )
						end
					end
				end
				if beat > 396 and beat < 398 then
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:zoom( 1 + 0.8*math.abs(math.sin(beat*math.pi)) )
							a:x( SCREEN_CENTER_X+120*(pn*2-3)*math.sin(beat*math.pi) )
							a:rotationz(0)
						end
					end
				end
				if beat > 398 and beat < 400 then
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:zoom( 1 + 0.8*math.abs(math.sin(beat*math.pi*0.5)) )
							a:x( SCREEN_CENTER_X-120*(pn*2-3)*math.sin(beat*math.pi*0.5) )
							a:rotationz(0)
						end
					end
				end
				
				if beat > 400 and beat < 428 then
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:x(SCREEN_CENTER_X)
							a:zoom( 1 + 0.8*math.abs(math.sin(beat*math.pi)) )
							a:rotationz( 25*(pn*2-3)*math.sin(beat*math.pi) )
						end
					end
				end
				if beat > 408 and beat < 428 then
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:x(SCREEN_CENTER_X)
							a:zoom( 1 + 0.8*math.abs(math.sin(beat*math.pi)) )
							a:rotationz( -25*(pn*2-3)*math.sin(beat*math.pi) )
						end
					end
				end
				if beat > 406 and beat < 408 then
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:x(SCREEN_CENTER_X)
							a:zoom( 1 + 0.8*math.abs(math.sin(beat*math.pi*0.5)) )
							a:rotationz( -25*(pn*2-3)*math.sin(beat*math.pi*0.5) )
						end
					end
				end
				if beat > 412 and beat < 416 then
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:x(SCREEN_CENTER_X)
							a:zoom( 1 + 0.8*math.abs(math.sin(beat*math.pi*0.5)) )
							a:rotationz( -25*(pn*2-3)*math.sin(beat*math.pi*0.5) )
						end
					end
				end
				
				if beat > 432 and beat < 438 then
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:x(SCREEN_CENTER_X)
							a:zoom( 1 + 0.8*math.abs(math.sin(beat*math.pi*2)) )
							a:rotationz( -25*(pn*2-3)*math.sin(beat*math.pi*2) )
						end
					end
				end
				if beat > 438 and beat < 440 then
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:x(SCREEN_CENTER_X)
							a:zoom( 1 + 0.8*math.abs(math.sin(beat*math.pi*1)) )
							a:rotationz( -25*(pn*2-3)*math.sin(beat*math.pi*1) )
						end
					end
				end
				if beat > 440 and beat < 446 then
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:x(SCREEN_CENTER_X)
							a:zoom( 1 + 0.8*math.abs(math.sin(beat*math.pi*2)) )
							a:rotationz( -25*(pn*2-3)*math.sin(beat*math.pi*2) )
						end
					end
				end
				if beat > 446 and beat < 448 then
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:x(SCREEN_CENTER_X)
							a:zoom( 1 + 0.8*math.abs(math.sin(beat*math.pi*1)) )
							a:rotationz( -25*(pn*2-3)*math.sin(beat*math.pi*1) )
						end
					end
				end
				if beat > 448 and beat < 454 then
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:x(SCREEN_CENTER_X)
							a:zoom( 1 + 0.8*math.abs(math.sin(beat*math.pi*2)) )
							a:rotationz( -25*(pn*2-3)*math.sin(beat*math.pi*2) )
						end
					end
				end
				if beat > 454 and beat < 456 then
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:x(SCREEN_CENTER_X)
							a:zoom( 1 + 0.8*math.abs(math.sin(beat*math.pi*1)) )
							a:rotationz( -25*(pn*2-3)*math.sin(beat*math.pi*1) )
						end
					end
				end
				if beat > 456 and beat < 472 then
					mod_do('*10000 no sudden')
					mod_do('*10000 '..(rb_aux:GetX()*0.4)..' flip,*10000 '..(rb_aux:GetX()*-1)..' distant, *10000 '..(rb_aux:GetX()*-1.5)..' mini');
				end
				
				---------------------------------------
				-- ACTION RPGS AINT GOT SHIT ON THIS --
				---------------------------------------
				if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --
					while curaction<=table.getn(mod_actions) and GAMESTATE:GetSongBeat()>=mod_actions[curaction][1] do
						if mod_actions[curaction][3] or GAMESTATE:GetSongBeat() < mod_actions[curaction][1]+2 then
							if type(mod_actions[curaction][2]) == 'function' then
								mod_actions[curaction][2]()
							elseif type(mod_actions[curaction][2]) == 'string' then
								MESSAGEMAN:Broadcast(mod_actions[curaction][2]);
							end
						end
						curaction = curaction+1;
					end
				end
				
			end
			
			self:sleep(0.02);
			self:queuecommand('Update');

---------------------------------------------------------------------------------------
----------------------END DON'T TOUCH IT KIDDO-----------------------------------------
---------------------------------------------------------------------------------------
			
		end"
		
	/>
	
	<!--Handling messages here is still fun and profitable-->
	<CODE Type="Quad" OnCommand="hidden,1"
	InitCommand="%function(self) rb_aux = self end"
	/>
	
	<Layer File="test" InitCommand="%function(self) kus_test = self end" OnCommand="stretchto,0,0,sw,sh;diffusealpha,0;" />
	<Layer File="tex1" InitCommand="%function(self) kus_tex1 = self end" OnCommand="hidden,1;x,sw/2;y,sh/2;zoomx,SCREEN_WIDTH/512;zoomy,SCREEN_HEIGHT/512;customtexturerect,0,0,1,1;" />
	<Layer File="tex2" InitCommand="%function(self) kus_tex2 = self end" OnCommand="hidden,1;x,sw/2;y,sh/2;zoomx,SCREEN_WIDTH/512;zoomy,SCREEN_HEIGHT/512;customtexturerect,0,0,1,1;" />
	<Layer File="static" OnCommand="stretchto,0,0,sw,sh;diffusealpha,0;"
	Static4thMessageCommand="diffusealpha,1;sleep,60/260;diffusealpha,0"
	StaticFUGMessageCommand="diffusealpha,0.8;linear,240/260;diffusealpha,0"
	StaticMessageCommand="diffusealpha,1;sleep,0.25;diffuse,0,0,0,1" />
	
	<Layer Type="ActorFrame" OnCommand="x,30"><children>
	<Layer Type="ActorFrame" InitCommand="%function(self) kus_kaw=self end" OnCommand="x,SCREEN_CENTER_X;y,SCREEN_CENTER_Y;zoom,1.2"><children>
		<Layer File="kaworu" OnCommand="x,64;wag;effectmagnitude,0,0,4;effectperiod,16;effectclock,bgm;zoom,0;" KaworuOnMessageCommand="bounceend,0.2;zoom,1;" KaworuOffMessageCommand="zoom,0;"/>
		<Layer File="speech" OnCommand="x,-80;wag;effectmagnitude,0,0,-2;effectperiod,12;effectclock,bgm;zoom,0;" KaworuOnMessageCommand="bounceend,0.2;zoom,1;" KaworuOffMessageCommand="zoom,0;"/>
		<Layer File="pat" InitCommand="%function(self) kus_pat1=self end" OnCommand="hidden,1;x,-80;wag;animate,0;effectmagnitude,0,0,-2;effectperiod,12;effectclock,bgm;zoom,0;"
			Pat1MessageCommand="bounceend,0.2;zoom,1;setstate,0;"
			Pat2MessageCommand="bounceend,0.2;zoom,1;setstate,1;"
			Pat3MessageCommand="bounceend,0.2;zoom,1;setstate,2;"
			KaworuOffMessageCommand="zoom,0;"
		/>
		<Layer File="funny" InitCommand="%function(self) kus_pat2=self end" OnCommand="hidden,1;x,-80;wag;animate,0;effectmagnitude,0,0,-2;effectperiod,12;effectclock,bgm;zoom,0;"
			Pat1MessageCommand="bounceend,0.2;zoom,1;setstate,0;"
			Pat2MessageCommand="bounceend,0.2;zoom,1;setstate,1;"
			Pat3MessageCommand="bounceend,0.2;zoom,1;setstate,2;"
			KaworuOffMessageCommand="zoom,0;"
		/>
	</children></Layer>
	</children></Layer>
	
	<Layer File="popuko" InitCommand="%function(self) kus_popuko=self end" OnCommand="vertalign,bottom;x,SCREEN_CENTER_X;y,SCREEN_HEIGHT*0.9;diffusealpha,0;zoom,1.2;" />
	
	<Layer File="vhs" OnCommand="stretchto,0,0,sw,sh;blend,add;diffusealpha,0;"
	Static4thMessageCommand="diffusealpha,0.2;"
	VHSInMessageCommand="linear,180/260;diffusealpha,0.2;"
	VHSOutMessageCommand="linear,120/260;diffusealpha,0;"
	VHSOut2MessageCommand="linear,240/260;diffusealpha,0;"
	/>
	
	<!--This is for the time based mod reader-->
	<BitmapText
		Font="Common Normal"
		Text="test"
		OnCommand="x,SCREEN_CENTER_X;y,SCREEN_CENTER_Y;effectclock,music;playcommand,SetTime;hidden,1"
		SetTimeCommand="%function(self) self:settext(self:GetSecsIntoEffect()); mod_time = tonumber(self:GetText()); self:sleep(0.02); self:queuecommand('SetTime'); end"
	/>
	
</children></ActorFrame>