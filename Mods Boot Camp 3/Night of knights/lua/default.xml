<ActorFrame
InitCommand="%function(self)

	songName = GAMESTATE:GetCurrentSong():GetSongDir();
	
	sw = SCREEN_WIDTH
	sh = SCREEN_HEIGHT --shortcuts
	
	function Plr(pn)
		return _G['P'..pn]
	end
	function GetJud(pn)
		return _G['jud'..pn]
	end
	function GetCom(pn)
		return _G['com'..pn]
	end
	
	function mod_do(str,pn)
		if pn then
			GAMESTATE:ApplyGameCommand('mod,'..str,pn)
		else
			GAMESTATE:ApplyGameCommand('mod,'..str)
		end
	end
	
	function taro_Sound(str)
		local met = GAMESTATE:GetCurrentSong():GetSongDir();
		SOUND:PlayOnce(met..'lua/'..str..'.ogg');
	end
	
	--takes input from -1 to 1, returns arc from 1 to 0 to 1
	math.smoothabs = function(inp)
		return 1-math.cos(inp*math.pi*0.5)
		--input 0 1-1 = 0
		--input 1 1-0 = 1
		--input -1, 1-0 = 1
	end
	
	--takes input from -1 to 1, returns arc from -1 to 0 to 1
	math.smooth = function(inp)
		return math.sin(inp*math.pi*0.5)
		--input 0 1-1 = 0
		--input 1 1-0 = 1
		--input -1, 1-0 = 1
	end
	
	--takes input from -1 to 1, returns squared arc from -1 to 0 to 1
	math.smooth2 = function(inp,pw)
		local asd = 1
		if inp < 0 then asd = -1; inp = inp*-1 end
		return asd*math.pow(math.sin(inp*math.pi*0.5),pw)
		--input 0 1-1 = 0
		--input 1 1-0 = 1
		--input -1, 1-0 = 1
	end
	
	--s/o to BrotherMojo
	function mindf_reverseRotation(angleX, angleY, angleZ)
		local sinX = math.sin(angleX);
		local cosX = math.cos(angleX);
		local sinY = math.sin(angleY);
		local cosY = math.cos(angleY);
		local sinZ = math.sin(angleZ);
		local cosZ = math.cos(angleZ);
		return { math.atan2(-cosX*sinY*sinZ-sinX*cosZ,cosX*cosY),
				 math.asin(-cosX*sinY*cosZ+sinX*sinZ),
				 math.atan2(-sinX*sinY*cosZ-cosX*sinZ,cosY*cosZ) }
	end
	
	function sakuya_GetCounterRotation(xDegrees, yDegrees, zDegrees)
		local DEG_TO_RAD = math.pi / 180;
		local RAD_TO_DEG = 1/DEG_TO_RAD;
		local angles = mindf_reverseRotation(xDegrees * DEG_TO_RAD, yDegrees * DEG_TO_RAD, zDegrees * DEG_TO_RAD);
		return {angles[1]*RAD_TO_DEG, angles[2]*RAD_TO_DEG, angles[3]*RAD_TO_DEG}
	end
	
end"
><children>

	<Layer
		Type="Quad"
		InitCommand="hidden,1"
		OnCommand="sleep,1000"
	/>
	
	<Layer File="modhelpers.xml" />
	<Layer File="easing.xml" />
	<Layer File="spellcard.xml" />
	<Layer File="../sak_flash.xml" />
	<Layer File="../sak_ending.xml" />
	<Layer File="../sak_intro.xml" />
	
	<Layer
		Type="Quad"
		OnCommand="hidden,1"
		InitCommand="%function(self)
		
			checked = false; P1=nil;P2=nil;P3=nil;P4=nil;jud1=nil;com1=nil;jud2=nil;com2=nil;jud3=nil;com3=nil;
			
			slumpo = false
			for pn=1,2 do
				if GAMESTATE:IsPlayerEnabled(pn-1) then
					if GAMESTATE:GetCurrentSteps(pn-1):GetDifficulty() == 5 then
						slumpo = true
					end
				end
			end
		
			---------------------------------------------------------
			---------DOCUMENTATION-----------------------------------
			---------------------------------------------------------
			
			--function perframe( beat, endBeat )
				--return true if the current beat is between 'beat' and 'endBeat'
			
			--function mod_shader(beat,key,which)
				--turn on shader key at specified beat (up to 10 keys available, defined by 'which' = 0-9
				
			--function mod_insert(beat,len,mod,len_or_end,pn)
				--insert mod into beat mods table
			--function mod_insert2(time,len,mod,len_or_end,pn)
				--insert mod into time mods table
				
			--function mod_message(beat,msg,persistent)
				--insert something into the actions table.
				--msg can also be a function. If string, a message gets broadcast at that beat
				--if 'persistent' is true, message will run even if editor starts at a beat past it
				
			--function mod_blacklist(t,n)
				--check if number n occurs in table t
				--useful for doing 'every beat EXCEPT the contents of t'
				
			--function simple_m0d(beat,strength,mult,mod)
			--function simple_m0d2(beat,strength,mult,mod,pn)
			--function simple_m0d3(beat,strength,duration,bpm,mod,pn)
				--activate mods at specific beat but also deactivate them
				
			--function mod_wiggle(beat,num,div,amt,speed,mod,pn,first)
				--alternates a mod back and forth before resetting to 0
				
			--function mod_springt(time,strength,dur,mod,pn)
				--time-based per-frame alternating mod that decreases based on how much time is left.
					--think doorstopper
			
			--function mod_springt2(time,strength,dur,mod,pn)
				--time-based per-frame alternating mod
			
			--function mod_onebeat(beat,strength,pn)
				--turns on beat for the beat specified, at the desired strength	
			
			--function switcheroo_add(beat,which,speed,len,pn)
				--adds a column swap at the desired beat
			--[[	switcheroos = {normal = {0,0}, ldur = {0,0}, reset = {0,0},
					flip = {100,0}, rudl = {100,0}, invert = {0,100}, dlru = {0,100},
					ludr = {25,-75}, rdul = {75,75}, drlu = {25,125}, ulrd = {75,-125}, urld = {100,-100}}
			]]
			
			--use a variable called 'switcheroo_width' to change how much space is between each column
			--e.g. switcheroo_width = 2 for ayakashi
			
			--function mod_sugarkiller(beat,duration,speed,minstealth,maxstealth,pn)
				--portable version of the effect from sugarkill X
				
			--function doSpline(spd, axis, path, col)
				--draws spline 'path' in specified axis, for specific col. Offsets are *10000, but positions use *spd
				
			--function doSplineAll(spd, axis, path)
				--same as above, but for all columns
				--(faster performance than using doSpline 4 times due to more efficient concat)
			
			--function mindf_rotateAndCounter(xDegrees, yDegrees, zDegrees, player)
				--counteract euler rotations after rotating player in multiple axes, using a TON of math.
			
			
			---------------------------------------------------------
			--------END DOCUMENTATION--------------------------------
			---------------------------------------------------------
			
			local m = mod_insert
			local m2 = mod_message
			local me = mod_ease
			
			
			local l = 'len'
			local e = 'end'
			
			
			
			
			
			
			
			init_modsp1 = '';
			init_modsp2 = '';
			
			mod_plr = {};
			
			mod_firstSeenBeat = GAMESTATE:GetSongBeat(); --necessary to prevent long freezes
			
			
			
			
			
			
			
			
			
			
			
---------------------------------------------------------------------------------------
----------------------Begin tables 'n stuff--------------------------------------------
---------------------------------------------------------------------------------------

			--beat based mods
			--{beat_start, beat_end, mods, len_or_end, player_number}
			mods = {
				{0,9999,'*2 1.75x, *1000 no beat, *10000 -99999 cover','end'},
			}
			
			--switcheroos = {{0,0},{100,0},{0,100},{25,-75},{75,75},{25,125},{75,-125},{100,-100}}
			
			if slumpo then
				m(0,999,'*2 2.5x',e);
			end
			
			
			
			
			
			--time based mods
			mod_time = 0;
			--{time_start, time_end, mods, len_or_end, player_number}
			mods2 = {
				--{0,200.345,'3x','end',1},
			}
			
			
			
			
			--this is both a message broadcaster and a function runner
			--if you put {beat,'String'}, then 'String' is broadcast as a message on that beat
			--if you put {beat,function() somecode end}, then function() is run at that beat
			--see example on beat 32
			
			curaction = 1;
			--{beat,thing,persists}
			mod_actions = {
			
			
				
			}
			
			
			
			
			
			
			--beat-based ease mods
			--{time_start, time_end, mod_start, mod_end, mod, len_or_end, ease_type, player_number, sustaintime, optional_param1, optional_param2}
			--valid ease types are:
				--linear
				--inQuad    outQuad    inOutQuad    outInQuad
				--inCubic   outCubic   inOutCubic   outInCubic
				--inQuart   outQuart   inOutQuart   outInQuart
				--inQuint   outQuint   inOutQuint   outInQuint
				--inSine    outSine    inOutSine    outInSine
				--inExpo    outExpo    inOutExpo    outInExpo
				--inCirc    outCirc    inOutCirc    outInCirc
				--inElastic outElastic inOutElastic outInElastic    --can take 2 optional parameters - amplitude & period
				--inBack    outBack    inOutBack    outInBack       --can take 1 optional parameter  - spring amount
				--inBounce  outBounce  inOutBounce  outInBounce
				
			mods_ease = {
				-- EXAMPLE TWEEN: from beat 0 to 4, make rotationz go from 360 to 0 with the inOutBack tween
				--{0,4,360,0,'rotationz','end',inOutBack},
			}
			
			function exclude(tab,beat)
				if tab then
					for i=1,table.getn(tab),2 do
						if beat > tab[i] and beat < tab[i+1] then
							return false
						end
						if beat < tab[i] then
							break
						end
					end
				end
				return true
			end
			
			m2(0,function()
				for pn=1,2 do
					local a = GetJud(pn)
					if a then
						a:basezoomx(1)
						a:basezoomy(1)
						a:bob()
					end
					local a = GetCom(pn)
					if a then
						a:basezoomx(1)
						a:basezoomy(1)
						a:bob()
					end
				end
			end,true)
			
			m2(2,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:x(sw/2 + 160*(pn*2-3) )
					end
				end
			end)
			
			for i=1,table.getn(sak_intro) do
				local a = sak_intro[i]
				local c = a[2]+1
				local b = a[1]
				if b < 18.75 then
					m2(b-.25,function()
						_G['sak_recep'..c]:stoptweening()
						_G['sak_recep'..c]:y(sh+70)
						_G['sak_recep'..c]:linear(12/180)
						_G['sak_recep'..c]:y(sh-112+16)
						_G['sak_recep'..c]:accelerate(48/180)
						_G['sak_recep'..c]:y(sh+70)
					end)
				end
			end
			
			m2(19,function()
				for c=1,7,2 do
					_G['sak_recep'..c]:stoptweening()
					_G['sak_recep'..c]:y(sh+70)
					_G['sak_recep'..c]:decelerate(30/180)
					_G['sak_recep'..c]:y(sh-112+16)
					_G['sak_recep'..c]:sleep(30/180)
					_G['sak_recep'..c]:y(sh+70)
				end
			end)
			
			m2(23,function()
				for c=2,8,2 do
					_G['sak_recep'..c]:stoptweening()
					_G['sak_recep'..c]:y(sh+70)
					_G['sak_recep'..c]:decelerate(30/180)
					_G['sak_recep'..c]:y(sh-112+16)
					_G['sak_recep'..c]:sleep(30/180)
					_G['sak_recep'..c]:y(sh+70)
				end
			end)
			
			m2(18.9,function()
				for c=1,8 do
					_G['sak_recep'..c]:effectcolor1(.5,.5,.5,1);
					_G['sak_recep'..c]:effectcolor2(1,1,1,1);
				end
			end)
			
			m2(27,function()
				for c=1,8 do
					if c == 1 or c == 4 or c == 5 or c == 8 then
						_G['sak_recep'..c]:stoptweening()
						_G['sak_recep'..c]:y(sh+70)
						_G['sak_recep'..c]:decelerate(30/180)
						_G['sak_recep'..c]:y(sh-112+16)
					end
				end
			end)
			
			m2(29,function()
				for c=1,8 do
					if c == 2 or c == 3 or c == 6 or c == 7 then
						_G['sak_recep'..c]:stoptweening()
						_G['sak_recep'..c]:y(sh+70)
						_G['sak_recep'..c]:decelerate(30/180)
						_G['sak_recep'..c]:y(sh-112+16)
					end
				end
			end)
			
			m2(31,function()
				for c=1,8 do
					_G['sak_recep'..c]:stoptweening()
					_G['sak_recep'..c]:hidden(1)
				end
			end)
			
			function fuckthejudgments(beat,yes,howlong)
				for pn=1,2 do
					local a = GetJud(pn)
					if a then
						a:linear(howlong*60/180)
						a:x(yes*(pn*2-3))
					end
					local a = GetCom(pn)
					if a then
						a:linear(howlong*60/180)
						a:x(yes*(pn*2-3))
					end
				end
			end
			
			me(0,2,0,100,'reverse',l,inOutQuad,nil,32);
			m(0,0.5,'*1000 50 dark',e)
			m(0.5,32,'*2 dark',e)
			
			m(31,2,'*1000 no dark',l)
			
			me(32,1,100,75,'reverse',l,outQuart)
			me(33,1,75,50,'reverse',l,outQuart)
			me(34,1,50,25,'reverse',l,outQuart)
			me(35,1,25,0,'reverse',l,outQuart)
			
			me(32,1,0,12.5,'mini',l,outQuart)
			me(33,1,12.5,25,'mini',l,outQuart)
			me(34,1,25,37.5,'mini',l,outQuart)
			me(35,1,37.5,50,'mini',l,outQuart)
			
			m2(32,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:decelerate(30/180)
						a:x(sw/2+150*(pn*2-3))
						a:sleep(30/180)
						a:decelerate(30/180)
						a:x(sw/2+140*(pn*2-3))
						a:sleep(30/180)
						a:decelerate(30/180)
						a:x(sw/2+130*(pn*2-3))
						a:sleep(30/180)
						a:decelerate(30/180)
						a:x(sw/2+120*(pn*2-3))
						a:sleep(30/180)
					end
				end
			end)
			
			--m(0,999,'arrowpath',e)
			
			local yes = 160
			local no = 0
			
			function sak_drops(beat)
				m(beat,2,'*10000 no flip, *10000 no invert, *1000 no reverse, *1000 no hallway, *10000 no sudden, *10000 no mini',l)
				--[[
				m(beat,2,'*2.5 centered',l)
				m(beat+0.4,0.1,'*100000 no centered',l)
				m(beat+0.9,0.1,'*100000 no centered',l)
				m(beat+1.4,0.1,'*100000 no centered',l)
				m(beat+2,0.5,'*100000 no centered',l)
				]]
				m2(beat,'WhiteFlash');
				m2(beat+2,'WhiteFlash');
				
				m2(beat,function() fuckthejudgments(beat,no,0) end)
				m2(beat+2,function() fuckthejudgments(beat,yes,0) end)
			end
			
			m2(64,function()
				sak_juds:linear(240/180)
				sak_juds:y(-170)
				sak_juds:z(-130)
				sak_juds:aux(-190)
			end,true)
			m2(66,function()
				sak_fader:linear(120/180)
				sak_fader:diffusealpha(.3)
			end,true)
			
			m2(36,function() fuckthejudgments(beat,yes,0) end)
			m2(68,function() fuckthejudgments(beat,yes,0) end)
			
			for i=0,2 do
				sak_drops(74+8*i)
				sak_drops(106+8*i)
				sak_drops(266+8*i)
			end
			
			--dance 1
			m2(74,function()
				local a = Plr(1)
				if a then
					a:x(sw*0.15)
					a:y(sh*0.5)
					a:z(0)
					a:rotationy(60)
				end
				local a = Plr(2)
				if a then
					a:x(sw*0.5)
					a:y(sw*0.4)
					a:z(100)
					a:rotationy(-40)
				end
			end)
			m2(74.5,function()
				local a = Plr(1)
				if a then
					a:x(sw*0.15)
					a:y(sh*0.3)
					a:z(0)
					a:zoomx(.7)
					a:rotationy(20)
				end
				local a = Plr(2)
				if a then
					a:x(sw*0.5)
					a:y(sh*0.3)
					a:z(100)
					a:zoomx(.7)
					a:rotationy(20)
				end
			end)
			m2(75,function()
				local a = Plr(1)
				if a then
					a:x(sw*0.15)
					a:y(sh*0.65)
					a:z(0)
					a:rotationy(20)
				end
				local a = Plr(2)
				if a then
					a:x(sw*0.5)
					a:y(sh*0.65)
					a:z(100)
					a:rotationy(20)
				end
			end)
			m2(75.5,function()
				local a = Plr(1)
				if a then
					a:x(sw*0.15)
					a:y(sh*0.3)
					a:z(0)
					a:rotationy(20)
				end
				local a = Plr(2)
				if a then
					a:x(sw*0.5)
					a:y(sh*0.3)
					a:z(100)
					a:rotationy(20)
				end
			end)
			
			m(74.5,2,'*10000 -160 hallway, *10000 25 reverse, *10000 no bumpy',l)
			m(75,2,'*10000 160 hallway',l)
			m(75.5,2,'*10000 -160 hallway',l)
			
			--dance 2
			m2(82,function()
				local a = Plr(1)
				if a then
					a:x(sw*0.15)
					a:y(sh*0.65)
					a:z(0)
					a:rotationy(20)
				end
				local a = Plr(2)
				if a then
					a:x(sw*0.5)
					a:y(sh*0.3)
					a:z(100)
					a:rotationy(20)
				end
			end)
			m2(82.5,function()
				local a = Plr(1)
				if a then
					a:x(sw*0.15)
					a:y(sh*0.3)
					a:z(0)
					a:zoomx(.7)
					a:rotationy(20)
				end
				local a = Plr(2)
				if a then
					a:x(sw*0.5)
					a:y(sh*0.65)
					a:z(100)
					a:zoomx(.7)
					a:rotationy(20)
				end
			end)
			m2(83,function()
				local a = Plr(1)
				if a then
					a:x(sw*0.15)
					a:y(sh*0.65)
					a:z(0)
					a:rotationy(20)
				end
				local a = Plr(2)
				if a then
					a:x(sw*0.5)
					a:y(sh*0.3)
					a:z(100)
					a:rotationy(20)
				end
			end)
			m2(83.5,function()
				local a = Plr(1)
				if a then
					a:x(sw*0.15)
					a:y(sh*0.3)
					a:z(0)
					a:rotationy(20)
				end
				local a = Plr(2)
				if a then
					a:x(sw*0.5)
					a:y(sh*0.65)
					a:z(100)
					a:rotationy(20)
				end
			end)
			
			m(82.5,2,'*10000 160 hallway, *10000 25 reverse',l,1)
			m(82.5,2,'*10000 -160 hallway, *10000 25 reverse',l,2)
			m(82.5,2,'*10000 -160 hallway',l,1)
			m(82.5,2,'*10000 160 hallway',l,2)
			m(83,2,'*10000 160 hallway',l,1)
			m(83,2,'*10000 -160 hallway',l,2)
			m(83.5,2,'*10000 -160 hallway',l,1)
			m(83.5,2,'*10000 160 hallway',l,2)
			
			
			
			
			--dance 3
			m2(90,function()
				local a = Plr(1)
				if a then
					a:x(sw*0.15)
					a:y(sh*0.5)
					a:z(0)
					a:zoomx(.7)
					a:rotationy(20)
				end
				local a = Plr(2)
				if a then
					a:x(sw*0.5)
					a:y(sh*0.5)
					a:z(100)
					a:zoomx(.7)
					a:rotationy(20)
				end
			end)
			m2(90.5,function()
				local a = Plr(1)
				if a then
					a:x(sw*0.15)
					a:y(sh*0.4)
					a:z(0)
					a:zoomx(.7)
					a:rotationy(20)
				end
				local a = Plr(2)
				if a then
					a:x(sw*0.5)
					a:y(sh*0.4)
					a:z(100)
					a:zoomx(.7)
					a:rotationy(20)
				end
			end)
			m2(91,function()
				local a = Plr(1)
				if a then
					a:x(sw*0.15)
					a:y(sh*0.4)
					a:z(0)
					a:zoomx(.7)
					a:rotationy(20)
				end
				local a = Plr(2)
				if a then
					a:x(sw*0.5)
					a:y(sh*0.4)
					a:z(100)
					a:zoomx(.7)
					a:rotationy(20)
				end
			end)
			m2(91.5,function()
				local a = Plr(1)
				if a then
					a:x(sw*0.15)
					a:y(sh*0.5)
					a:z(0)
					a:zoomx(.7)
					a:rotationy(20)
				end
				local a = Plr(2)
				if a then
					a:x(sw*0.5)
					a:y(sh*0.5)
					a:z(100)
					a:zoomx(.7)
					a:rotationy(20)
				end
			end)
			
			m(90,2,'*10000 -120 hallway',l)
			m(90.5,2,'*10000 -240 hallway',l)
			m(91,2,'*10000 240 hallway',l)
			m(91.5,2,'*10000 120 hallway',l)
			
			
			
			
			
			
			
			
			--dance 1
			m2(32+74,function()
				local a = Plr(2)
				if a then
					a:x(sw-sw*0.15)
					a:y(sh*0.5)
					a:z(0)
					a:rotationy(-60)
				end
				local a = Plr(1)
				if a then
					a:x(sw-sw*0.5)
					a:y(sw*0.4)
					a:z(100)
					a:rotationy(40)
				end
			end)
			m2(32+74.5,function()
				local a = Plr(2)
				if a then
					a:x(sw-sw*0.15)
					a:y(sh*0.3)
					a:z(0)
					a:zoomx(.7)
					a:rotationy(-20)
				end
				local a = Plr(1)
				if a then
					a:x(sw-sw*0.5)
					a:y(sh*0.3)
					a:z(100)
					a:zoomx(.7)
					a:rotationy(-20)
				end
			end)
			m2(32+75,function()
				local a = Plr(2)
				if a then
					a:x(sw-sw*0.15)
					a:y(sh*0.65)
					a:z(0)
					a:rotationy(-20)
				end
				local a = Plr(1)
				if a then
					a:x(sw-sw*0.5)
					a:y(sh*0.65)
					a:z(100)
					a:rotationy(-20)
				end
			end)
			m2(32+75.5,function()
				local a = Plr(2)
				if a then
					a:x(sw-sw*0.15)
					a:y(sh*0.3)
					a:z(0)
					a:rotationy(-20)
				end
				local a = Plr(1)
				if a then
					a:x(sw-sw*0.5)
					a:y(sh*0.3)
					a:z(100)
					a:rotationy(-20)
				end
			end)
			
			m(32+74.5,2,'*10000 -160 hallway, *10000 25 reverse, *10000 no bumpy',l)
			m(32+75,2,'*10000 160 hallway',l)
			m(32+75.5,2,'*10000 -160 hallway',l)
			
			--dance 2
			m2(32+82,function()
				local a = Plr(2)
				if a then
					a:x(sw-sw*0.15)
					a:y(sh*0.65)
					a:z(0)
					a:rotationy(-20)
				end
				local a = Plr(1)
				if a then
					a:x(sw-sw*0.5)
					a:y(sh*0.3)
					a:z(100)
					a:rotationy(-20)
				end
			end)
			m2(32+82.5,function()
				local a = Plr(2)
				if a then
					a:x(sw-sw*0.15)
					a:y(sh*0.3)
					a:z(0)
					a:zoomx(.7)
					a:rotationy(-20)
				end
				local a = Plr(1)
				if a then
					a:x(sw-sw*0.5)
					a:y(sh*0.65)
					a:z(100)
					a:zoomx(.7)
					a:rotationy(-20)
				end
			end)
			m2(32+83,function()
				local a = Plr(2)
				if a then
					a:x(sw-sw*0.15)
					a:y(sh*0.65)
					a:z(0)
					a:rotationy(-20)
				end
				local a = Plr(1)
				if a then
					a:x(sw-sw*0.5)
					a:y(sh*0.3)
					a:z(100)
					a:rotationy(-20)
				end
			end)
			m2(32+83.5,function()
				local a = Plr(2)
				if a then
					a:x(sw-sw*0.15)
					a:y(sh*0.3)
					a:z(0)
					a:rotationy(-20)
				end
				local a = Plr(1)
				if a then
					a:x(sw-sw*0.5)
					a:y(sh*0.65)
					a:z(100)
					a:rotationy(-20)
				end
			end)
			
			m(32+82.5,2,'*10000 160 hallway, *10000 25 reverse',l,2)
			m(32+82.5,2,'*10000 -160 hallway, *10000 25 reverse',l,1)
			m(32+82.5,2,'*10000 -160 hallway',l,2)
			m(32+82.5,2,'*10000 160 hallway',l,1)
			m(32+83,2,'*10000 160 hallway',l,2)
			m(32+83,2,'*10000 -160 hallway',l,1)
			m(32+83.5,2,'*10000 -160 hallway',l,2)
			m(32+83.5,2,'*10000 160 hallway',l,1)
			
			--dance 3
			m2(32+90,function()
				local a = Plr(2)
				if a then
					a:x(sw-sw*0.15)
					a:y(sh*0.5)
					a:z(0)
					a:zoomx(.7)
					a:rotationy(-20)
				end
				local a = Plr(1)
				if a then
					a:x(sw-sw*0.5)
					a:y(sh*0.5)
					a:z(100)
					a:zoomx(.7)
					a:rotationy(-20)
				end
			end)
			m2(32+90.5,function()
				local a = Plr(2)
				if a then
					a:x(sw-sw*0.15)
					a:y(sh*0.4)
					a:z(0)
					a:zoomx(.7)
					a:rotationy(-20)
				end
				local a = Plr(1)
				if a then
					a:x(sw-sw*0.5)
					a:y(sh*0.4)
					a:z(100)
					a:zoomx(.7)
					a:rotationy(-20)
				end
			end)
			m2(32+91,function()
				local a = Plr(2)
				if a then
					a:x(sw-sw*0.15)
					a:y(sh*0.4)
					a:z(0)
					a:zoomx(.7)
					a:rotationy(-20)
				end
				local a = Plr(1)
				if a then
					a:x(sw-sw*0.5)
					a:y(sh*0.4)
					a:z(100)
					a:zoomx(.7)
					a:rotationy(-20)
				end
			end)
			m2(32+91.5,function()
				local a = Plr(2)
				if a then
					a:x(sw-sw*0.15)
					a:y(sh*0.5)
					a:z(0)
					a:zoomx(.7)
					a:rotationy(-20)
				end
				local a = Plr(1)
				if a then
					a:x(sw-sw*0.5)
					a:y(sh*0.5)
					a:z(100)
					a:zoomx(.7)
					a:rotationy(-20)
				end
			end)
			
			m(32+90,2,'*10000 -120 hallway',l)
			m(32+90.5,2,'*10000 -240 hallway',l)
			m(32+91,2,'*10000 240 hallway',l)
			m(32+91.5,2,'*10000 120 hallway',l)
			
			
			
			
			
			
			m2(66,function()
				sepaux:x(1)
				
				sak_room:linear(240/180)
				sak_room:x(1)
				
				running:x(0)
				running:linear(240/180)
				running:x(1)
			end)
			
			
			m2(68,function()
				sak_room:x(1)
				running:x(1)
			end,true)
			
			m2(96,function()
				sak_room:linear(240/180)
				sak_room:x(-1)
			end)
			
			m2(128,function()
				sak_room:linear(240/180)
				sak_room:x(0)
			end)
			m2(132,function()
				sak_room:x(0)
			end,true)
			
			m2(192,function()
				sepaux:accelerate(180/180)
				sepaux:x(0)
			end)
			
			m2(196,function()
				for pn=1,2 do
					local a = Plr(pn)
					if a then
						a:x(sw/2)
						a:y(sh/2)
					end
				end
			end,true)
			
			me(195,204,0,250,'invert',e,outQuart,1,252)
			me(195,204,0,-250,'invert',e,outQuart,2,252)
			
			
			
			
			me(192,196,0,100,'stealth',e,inOutQuad,nil,252)
			
			me(252,6,250,0,'invert',l,inOutQuad,1)
			me(252,6,-250,0,'invert',l,inOutQuad,2)
			
			if slumpo then
				me(128,132,2.5,2.25,'xmod',e,inOutQuad,nil,192)
				me(192,196,2.25,1.45,'xmod',e,inOutQuad,nil,252)
				me(252,6,1.45,2.5,'xmod',l,inOutQuad,nil)
			else
				me(128,132,1.75,2,'xmod',e,inOutQuad,nil,192)
				me(192,196,2,1,'xmod',e,inOutQuad,nil,252)
				me(252,6,1,1.75,'xmod',l,inOutQuad,nil)
			end
			
			m(195.5,227.5,'*1000 beat',e)
			m(227.5,257.5,'*1000 200 beat',e,1)
			m(227.5,257.5,'*1000 -200 beat',e,2)
			
			local f = 1
			for i=1,table.getn(sak_flash) do
				local a = sak_flash[i]
				local le = 1
				if a[1] >= 228 then le = .5 end
				if a[1] < 220 or a[1] > 227 then
					me(a[1],le,100,0,'stealth',l,linear,f)
				end
				if f == 1 then f = 2 else f = 1 end
			end
			
			me(220,.75,100,0,'stealth',l,linear)
			me(222,.75,100,0,'stealth',l,linear)
			me(224,.75,100,0,'stealth',l,linear)
			me(225,.75,100,0,'stealth',l,linear)
			me(226,.75,100,0,'stealth',l,linear)
			
			for i=0,3 do
				me(228+8*i,4,0,50+50*i,'drunk',l,linear,1)
				me(232+8*i,4,50+50*i,0,'drunk',l,linear,1)
				me(228+8*i,4,0,-50-50*i,'drunk',l,linear,2)
				me(232+8*i,4,-50-50*i,0,'drunk',l,linear,2)
			end
			
			
			
			
			
			
			
			
			
			
			
			--dance 1
			m2(266,function()
				local a = Plr(2)
				if a then
					a:x(sw-sw*0.3)
					a:y(sh*0.6)
					a:z(-200)
					a:rotationy(-20)
				end
				local a = Plr(1)
				if a then
					a:x(sw-sw*0.15)
					a:y(sh*0.62)
					a:z(100)
					a:zoomx(.8)
					a:rotationy(-20)
				end
			end)
			m2(266.5,function()
				local a = Plr(2)
				if a then
					a:x(sw-sw*0.6)
					a:y(sh*0.6)
					a:z(-100)
					a:rotationy(-20)
				end
				local a = Plr(1)
				if a then
					a:x(sw-sw*0.45)
					a:y(sh*0.62)
					a:z(200)
					a:zoomx(.8)
					a:rotationy(-20)
				end
			end)
			m2(267,function()
				local a = Plr(2)
				if a then
					a:x(sw-sw*0.3)
					a:y(sh*0.6)
					a:z(-200)
					a:rotationy(-20)
				end
				local a = Plr(1)
				if a then
					a:x(sw-sw*0.15)
					a:y(sh*0.62)
					a:z(100)
					a:zoomx(.8)
					a:rotationy(-20)
				end
			end)
			m2(267.5,function()
				local a = Plr(2)
				if a then
					a:x(sw-sw*0.6)
					a:y(sh*0.6)
					a:z(-100)
					a:rotationy(-20)
				end
				local a = Plr(1)
				if a then
					a:x(sw-sw*0.45)
					a:y(sh*0.62)
					a:z(200)
					a:zoomx(.8)
					a:rotationy(-20)
				end
			end)
			
			m(266,2,'*1000 sudden',l)
			
			
			
			m2(274,function()
				local a = Plr(2)
				if a then
					a:y(sh*0.5)
				end
				local a = Plr(1)
				if a then
					a:y(sh*0.5)
				end
			end)
			--dance 2
			m(274,.5,'*10000 -100 flip,*10000 100 invert',l)
			m(274.5,.5,'*10000 no flip,*10000 no invert',l)
			m(275,.5,'*10000 -50 flip,*10000 -50 invert',l)
			m(275.5,.5,'*10000 no flip,*10000 no invert',l)
			
			
			for i=132,147,8 do
			
				m(i+0-.1,.5,'*10 100 tornado',l)
				m(i+0.5-.1,.5,'*10 no tornado',l)
				m(i+2-.1,.5,'*10 -60 tornado',l)
				m(i+2.5-.1,.5,'*10 no tornado',l)
				m(i+4-.1,.5,'*10 100 tornado',l)
				m(i+4.5-.1,.5,'*10 no tornado',l)
				
				--[[
				m(i+0-.1,.5,'*15 80 stealth',l)
				m(i+0.5-.1,.5,'*15 no brake',l)
				m(i+2-.1,.5,'*15 80 stealth',l)
				m(i+2.5-.1,.5,'*15 no brake',l)
				m(i+4-.1,.5,'*15 80 stealth',l)
				m(i+4.5-.1,.5,'*15 no brake',l)
				]]
				
				mod_wiggle(i+1-.1,3,4,150,1.5,'drunk')
				mod_wiggle(i+3-.1,3,4,150,1.5,'drunk')
				mod_wiggle(i+5-.1,3,4,150,1.5,'drunk')
			end
			
			m(148,6,'*4 200 dizzy',l,1)
			m(154,6,'*4 no dizzy',l,1)
			m(32+148,6,'*4 200 dizzy',l,1)
			m(32+154,6,'*4 no dizzy',l,1)
			m(148,6,'*4 -200 dizzy',l,2)
			m(154,6,'*4 no dizzy',l,2)
			m(32+148,6,'*4 -200 dizzy',l,2)
			m(32+154,6,'*4 no dizzy',l,2)
			
			m2(156-.1,function()
				sak_invert:linear(.1)
				sak_invert:x(100)
				sak_invert:sleep(120/180-.1)
				sak_invert:linear(.1)
				sak_invert:x(0)
				sak_invert:sleep(120/180-.1)
				sak_invert:linear(.1)
				sak_invert:x(100)
				sak_invert:sleep(60/180-.1)
				sak_invert:linear(.1)
				sak_invert:x(0)
				sak_invert:sleep(60/180-.1)
			end)
			
			mod_wiggle(162-.1,4,2,200,1,'drunk')
			
			m2(32+156-.1,function()
			
				sak_invert:linear(.1)
				sak_invert:x(100)
				sak_invert:sleep(120/180-.1)
				sak_invert:linear(.1)
				sak_invert:x(0)
				sak_invert:sleep(120/180-.1)
				sak_invert:linear(.1)
				sak_invert:x(100)
				sak_invert:sleep(60/180-.1)
				sak_invert:linear(.1)
				sak_invert:x(0)
				sak_invert:sleep(60/180-.1)
				sak_invert:linear(.1)
				sak_invert:x(100)
				sak_invert:sleep(60/180-.1)
				sak_invert:linear(.1)
				sak_invert:x(0)
				sak_invert:sleep(60/180-.1)
				
			end)
			
			
			for i=164,179,8 do
			
				m(i+0-.1,.5,'*10 100 tornado',l)
				m(i+0.5-.1,.5,'*10 no tornado',l)
				m(i+2-.1,.5,'*10 -60 tornado',l)
				m(i+2.5-.1,.5,'*10 no tornado',l)
				m(i+4-.1,.5,'*10 100 tornado',l)
				m(i+4.5-.1,.5,'*10 no tornado',l)
			
			
				m2(i+0-.1,function()
					sak_invert:linear(.1)
					sak_invert:x(100)
					sak_invert:sleep(30/180-.1)
					sak_invert:linear(.1)
					sak_invert:x(0)
				end)
				m2(i+2-.1,function()
					sak_invert:linear(.1)
					sak_invert:x(100)
					sak_invert:sleep(30/180-.1)
					sak_invert:linear(.1)
					sak_invert:x(0)
				end)
				m2(i+4-.1,function()
					sak_invert:linear(.1)
					sak_invert:x(100)
					sak_invert:sleep(30/180-.1)
					sak_invert:linear(.1)
					sak_invert:x(0)
				end)
				mod_wiggle(i+1-.1,3,4,200,2,'drunk')
				mod_wiggle(i+3-.1,3,4,200,2,'drunk')
				mod_wiggle(i+5-.1,3,4,200,2,'drunk')
			end
			
			
			
			
			--dance 3
			m2(282,function()
				local a = Plr(2)
				if a then
					a:x(sw-sw*0.15)
					a:y(sh*0.6)
					a:z(0)
					a:zoomx(.7)
					a:zoomy(.7)
					a:rotationy(-30)
				end
				local a = Plr(1)
				if a then
					a:x(sw-sw*0.5)
					a:y(sh*0.6)
					a:z(100)
					a:zoomx(.7)
					a:zoomy(.7)
					a:rotationy(-30)
				end
			end)
			m2(282.5,function()
				local a = Plr(2)
				if a then
					a:x(sw-sw*0.25)
					a:y(sh*0.7)
					a:z(33)
					a:zoomx(.7)
					a:zoomy(.4)
				end
				local a = Plr(1)
				if a then
					a:x(sw-sw*0.4)
					a:y(sh*0.3)
					a:rotationz(20)
					a:z(66)
					a:zoomx(.7)
					a:zoomy(.4)
				end
			end)
			m2(283,function()
				local a = Plr(2)
				if a then
					a:x(sw-sw*0.4)
					a:y(sh*0.7)
					a:z(66)
					a:zoomx(.7)
					a:zoomy(.4)
				end
				local a = Plr(1)
				if a then
					a:x(sw-sw*0.25)
					a:y(sh*0.3)
					a:rotationz(-20)
					a:z(33)
					a:zoomx(.7)
					a:zoomy(.4)
				end
			end)
			m2(283.5,function()
				local a = Plr(2)
				if a then
					a:x(sw-sw*0.5)
					a:y(sh*0.6)
					a:z(100)
					a:zoomx(.7)
					a:zoomy(.7)
					a:rotationz(0)
				end
				local a = Plr(1)
				if a then
					a:x(sw-sw*0.15)
					a:y(sh*0.6)
					a:z(0)
					a:zoomx(.7)
					a:zoomy(.7)
					a:rotationz(0)
				end
			end)
			
			m(282,2,'*1000 sudden',l)
			
			
			m2(266,function()
				sak_shadow1:x(sw/2 + 100 + 200)
				sak_shadow2:x(sw/2 + 80 + 200)
				sak_shadow1:sleep(30/180)
				sak_shadow2:sleep(30/180)
				sak_shadow1:x(sw/2 + 100 - 80)
				sak_shadow2:x(sw/2 + 80 - 80)
				sak_shadow1:sleep(30/180)
				sak_shadow2:sleep(30/180)
				sak_shadow1:x(sw/2 + 100 + 200)
				sak_shadow2:x(sw/2 + 80 + 200)
				sak_shadow1:sleep(30/180)
				sak_shadow2:sleep(30/180)
				sak_shadow1:x(sw/2 + 100 - 80)
				sak_shadow2:x(sw/2 + 80 - 80)
				sak_shadow1:sleep(30/180)
				sak_shadow2:sleep(30/180)
			end)
			
			m2(274,function()
				sak_shadow1:x(sw/2 + 100 + 60)
				sak_shadow1:zoomx(2.4)
				sak_shadow1:sleep(30/180)
				sak_shadow1:zoomx(1.2)
				sak_shadow1:sleep(30/180)
				sak_shadow1:zoomx(2.4)
				sak_shadow1:sleep(30/180)
				sak_shadow1:zoomx(1.2)
				sak_shadow1:sleep(30/180)
				sak_shadow2:diffusealpha(0)
			end)
			
			--[[
									local b = _G['sak_shadow'..pn]
						
						if b then
							b:x( sw/2 + 160*(pn*2-3) - 10*(pn*2-3)*math.smoothabs(sak_room:GetX()) - 150*sak_room:GetX() )
							
							local addz = 10*math.smoothabs(sak_room:GetX())
							addz = addz + 60*(pn*2-3)*sak_room:GetX() + sak_zpos:GetX()
							
							b:z( -200 + addz )
							b:rotationy( 5*sak_room:GetX() )
							b:basezoomx( 1+(jumpy/240) )
							b:basezoomy( 1+(jumpy/240) )
							b:diffusealpha( 0.5+(jumpy/480) )
						end
			--]]
			
			m2(282,function()
				for pn=1,2 do
					local b = _G['sak_shadow'..pn]
					
					local jumpy = 0
					if pn == 1 then
						jumpy = 0
					end
					local swap = 1
						
					if b then
						b:x( sw/2 + 160*(pn*2-3)*swap - 10*(pn*2-3)*math.smoothabs(sak_room:GetX()) - 150*sak_room:GetX() )
						
						local addz = 10*math.smoothabs(sak_room:GetX())
						addz = addz + 60*(pn*2-3)*swap*sak_room:GetX() + sak_zpos:GetX()
						
						b:z( -200 + addz )
						b:rotationy( 5*sak_room:GetX() )
						b:basezoomx( 1+(jumpy/240) )
						b:basezoomy( 1+(jumpy/240) )
						b:diffusealpha( 0.5+(jumpy/480) )
					end
				end
			end)
			
			m2(282.5,function()
				for pn=1,2 do
					local b = _G['sak_shadow'..pn]
					
					local jumpy = 0
					if pn == 1 then
						jumpy = -120
					end
					local swap = .33
						
					if b then
						b:x( sw/2 + 160*(pn*2-3)*swap - 10*(pn*2-3)*math.smoothabs(sak_room:GetX()) - 150*sak_room:GetX() )
						
						local addz = 10*math.smoothabs(sak_room:GetX())
						addz = addz + 60*(pn*2-3)*swap*sak_room:GetX() + sak_zpos:GetX()
						
						b:z( -200 + addz )
						b:rotationy( 5*sak_room:GetX() )
						b:basezoomx( 1+(jumpy/240) )
						b:basezoomy( 1+(jumpy/240) )
						b:diffusealpha( 0.5+(jumpy/480) )
					end
				end
			end)
			
			m2(283,function()
				for pn=1,2 do
					local b = _G['sak_shadow'..pn]
					
					local jumpy = 0
					if pn == 1 then
						jumpy = -120
					end
					local swap = -.33
						
					if b then
						b:x( sw/2 + 160*(pn*2-3)*swap - 10*(pn*2-3)*math.smoothabs(sak_room:GetX()) - 150*sak_room:GetX() )
						
						local addz = 10*math.smoothabs(sak_room:GetX())
						addz = addz + 60*(pn*2-3)*swap*sak_room:GetX() + sak_zpos:GetX()
						
						b:z( -200 + addz )
						b:rotationy( 5*sak_room:GetX() )
						b:basezoomx( 1+(jumpy/240) )
						b:basezoomy( 1+(jumpy/240) )
						b:diffusealpha( 0.5+(jumpy/480) )
					end
				end
			end)
			
			m2(283.5,function()
				for pn=1,2 do
					local b = _G['sak_shadow'..pn]
					
					local jumpy = 0
					if pn == 1 then
						jumpy = 0
					end
					local swap = -1
						
					if b then
						b:x( sw/2 + 160*(pn*2-3)*swap - 10*(pn*2-3)*math.smoothabs(sak_room:GetX()) - 150*sak_room:GetX() )
						
						local addz = 10*math.smoothabs(sak_room:GetX())
						addz = addz + 60*(pn*2-3)*swap*sak_room:GetX() + sak_zpos:GetX()
						
						b:z( -200 + addz )
						b:rotationy( 5*sak_room:GetX() )
						b:basezoomx( 1+(jumpy/240) )
						b:basezoomy( 1+(jumpy/240) )
						b:diffusealpha( 0.5+(jumpy/480) )
					end
				end
			end)
			
			
			
			
			m2(192,function()
				sak_fader:linear(240/180)
				sak_fader:diffusealpha(1)
			end)
			
			m2(258,function()
				sak_fader:linear(120/180)
				sak_fader:diffusealpha(.3)
			end)
			
			
			
			
			m2(255,function()
				sak_room:x(0)
				sepaux:x(0)
			end)
			m2(258,function()
				sak_room:linear(120/180)
				sak_room:x(-1)
				sepaux:accelerate(120/180)
				sepaux:x(1)
			end)
			m2(260,function()
				sak_room:x(-1)
			end,true)
			
			m2(290,function()
				sak_room:linear(120/180)
				sak_room:x(1)
			end)
			m2(298,function()
				sak_room:linear(120/180)
				sak_room:x(-1)
			end)
			m2(306,function()
				sak_room:linear(120/180)
				sak_room:x(1)
			end)
			m2(320,function()
				sak_room:accelerate(180/180)
				sak_room:x(0.5)
				sak_room:decelerate(180/180)
				sak_room:x(0)
				
				sak_zpos:accelerate(960/180)
				sak_zpos:x(1000)
			end)
			
			m2(324,function()
				sak_addz:linear(16*60/180)
				sak_addz:x(1)
			end)
			m2(332,function()
				sak_alpha:linear(4*60/180)
				sak_alpha:x(0)
			end)
			
			
			
			function ease_wiggle(doot,str,mod)
				if not mod then mod = 'drunk' end
				local fluct = 1
				for i=1,table.getn(doot)-1 do
					local b = doot[i]
					local len = doot[i+1]-doot[i]
					local tlen = math.min(len,1)
					local sus = len-tlen
					local amt = -str*fluct
					local newamt = str*fluct
					if i == 1 then
						amt = 0
					end
					me(b,tlen,amt,newamt,mod,l,outQuad,nil,sus)
					fluct=fluct*-1
				end
				local last = doot[table.getn(doot)]
				me(last,1,str,0,mod,l,outQuad)
			end
			
			sak_beeps = {}
			sak_beeps2 = {}
			sak_beeps3 = {}
			
			for i = 1,table.getn(sak_ending) do
				local a = sak_ending[i][1]
				if a < 306 then
					table.insert(sak_beeps,a)
				elseif a < 308 then
					table.insert(sak_beeps2,a)
				else
					table.insert(sak_beeps3,a)
				end
			end
			
			ease_wiggle(sak_beeps,150)
			ease_wiggle(sak_beeps2,300,'tipsy')
			ease_wiggle(sak_beeps3,150)
			
			--simple_m0d2(316-.1,100,.5,'brake')
			--simple_m0d2(318-.1,100,.5,'brake')
			simple_m0d2(320-.1,50,2,'tornado')
			
			mod_onebeat(316,1000)
			mod_onebeat(318,-1000)
			
			m2(316,function()
				endingdodge:decelerate(30/180)
				endingdodge:x(100)
				endingdodge:y(-0.3)
				endingdodge:z(120)
				endingdodge:accelerate(90/180)
				endingdodge:x(0)
				endingdodge:y(0)
				endingdodge:z(0)
			end)
			m2(318,function()
				endingdodge:decelerate(30/180)
				endingdodge:x(-100)
				endingdodge:y(-0.3)
				endingdodge:z(-120)
				endingdodge:accelerate(90/180)
				endingdodge:x(0)
				endingdodge:y(0)
				endingdodge:z(0)
			end)
			m2(320,function()
			end)
			
			m2(324,'Ending')
			
			
			
			
			simple_m0d2(51-.1,50,.3,'stealth');
			simple_m0d2(52-.1,50,.3,'stealth');
			simple_m0d2(55-.1,50,.3,'stealth');
			simple_m0d2(56-.1,50,.3,'stealth');
			simple_m0d2(59-.1,50,.3,'stealth');
			simple_m0d2(60-.1,50,.3,'stealth');
			simple_m0d2(62-.1,50,.3,'stealth');
			
			------------------ANIM STUFF
			
			m2(4,function() sak_bg_anim:playcommand('Frame1') end)
			m2(12,function() sak_bg_anim:playcommand('Frame2') end)
			
			m2(20,function() sak_bg_anim:playcommand('WantedOn') sak_bg_anim:playcommand('PFade') end)
			m2(22,function() sak_oskari1:setstate(1) end)
			m2(24,function() sak_bg_anim:playcommand('WantedOff') end)
			m2(28,function() sak_bg_anim:playcommand('WantedOnQ') end)
			m2(29,function() sak_oskari1:setstate(2) end)
			m2(30,function() sak_bg_anim:playcommand('WantedOffQ') end)
			
			m2(36,function() sak_bg_anim:playcommand('Frame3') end)
			
			m2(44,function() sak_bg_anim:playcommand('Frame4') sak_bg_anim:playcommand('Sweat') sak_oskari2:vibrate(); sak_oskari2:effectmagnitude(0,0,0); end)
			m2(52,function() sak_bg_anim:playcommand('Frame5') end)
			m2(56,function() sak_bg_anim:playcommand('Frame4') sak_bg_anim:playcommand('Heavy') sak_oskari2:vibrate(); sak_oskari2:effectmagnitude(1,0,0); end)
			m2(60,function() sak_bg_anim:playcommand('Frame5') end)
			m2(62,function() sak_bg_anim:playcommand('Frame4') sak_bg_anim:playcommand('Zoom2') sak_oskari2:vibrate(); sak_oskari2:effectmagnitude(2,1,0); end)
			
			m2(64,function() sak_bg_anim:playcommand('LastFade') end)
			m2(66,function() sak_bg_anim:hidden(1) end,true)
			
			m2(196,function() sak_bg_anim2:hidden(0) sak_bg_anim2:playcommand('Unhide') sak_bg_anim2:playcommand('Frame1') end)
			m2(228,function() sak_bg_anim2:playcommand('SakOn') end)
			m2(244,function() sak_bg_anim2:playcommand('SakStop') end)
			m2(248,function() sak_bg_anim2:playcommand('SakSpot') end)
			m2(252,function() sak_bg_anim2:playcommand('WhiteFlash') sak_bg_anim2:playcommand('Boxes2') end)
			
			m2(256,function() sak_bg_anim2:playcommand('LastFade') end)
			m2(258,function() sak_bg_anim2:hidden(1) end)
			
			sak_knives = {}
			sak_kptr = 0
			
			function sak_getknife()
				sak_kptr = sak_kptr+1
				local a = sak_knives[ math.mod(sak_kptr,table.getn(sak_knives)) + 1]
				return a
			end
			
			function sak_randomknife()
				local a = sak_getknife()
				if a then
					a:hidden(0)
					a:x(sw/2 - sw*0.25*sak_room:GetX() + sak_room:GetX()*math.random(-80,200) )
					a:y(sh/2 + 30 + math.random(-80,80))
					a:z(math.random(-400,300))
					a:zoom(50)
					a:zoomz(50)
					a:rotationx(-80)
					a:rotationz(10*sak_room:GetX())
					a:sleep(29/180)
					a:queuecommand('Hide');
				end
			end
			
			function sak_wall_freeze(b)
				local rand = math.random()
				
				for j=0,3 do
					m2(b+0.5*j,function()
						
						for i=0,5 do
							sak_randomknife()
						end
						
					end)
				end
				
				m2(b,function()
					sak_bg_wall1:texcoordvelocity(0,0)
					sak_bg_wall2:texcoordvelocity(0,0)
					sak_bg_ceil:texcoordvelocity(0,0)
					sak_bg_floor:texcoordvelocity(0,0)
					
					sak_bg_wall1:customtexturerect(rand+0.3*0,0,rand+0.3*0+2,1);
					sak_bg_wall2:customtexturerect(0.5+rand+0.3*0,0,0.5+rand+0.3*0+2,1);
					sak_bg_ceil:customtexturerect(0,rand+2.4*0,2,rand+2.4*0+8);
					sak_bg_floor:customtexturerect(0,rand+2.4*0,2,rand+2.4*0+8);
					
					sak_run_side_i:animate(0)
					sak_run_side_i:setstate(0)
				end)
				m2(b+0.5,function()
					sak_bg_wall1:customtexturerect(rand+0.3*1,0,rand+0.3*1+2,1);
					sak_bg_wall2:customtexturerect(0.5+rand+0.3*1,0,0.5+rand+0.3*1+2,1);
					sak_bg_ceil:customtexturerect(0,rand+2.4*1,2,rand+2.4*1+8);
					sak_bg_floor:customtexturerect(0,rand+2.4*1,2,rand+2.4*1+8);
					
					sak_run_side_i:animate(0)
					sak_run_side_i:setstate(4)
				end)
				m2(b+1.0,function()
					sak_bg_wall1:customtexturerect(rand+0.3*2,0,rand+0.3*2+2,1);
					sak_bg_wall2:customtexturerect(0.5+rand+0.3*2,0,0.5+rand+0.3*2+2,1);
					sak_bg_ceil:customtexturerect(0,rand+2.4*2,2,rand+2.4*2+8);
					sak_bg_floor:customtexturerect(0,rand+2.4*2,2,rand+2.4*2+8);
					
					sak_run_side_i:animate(0)
					sak_run_side_i:setstate(0)
				end)
				m2(b+1.5,function()
					sak_bg_wall1:customtexturerect(rand+0.3*3,0,rand+0.3*3+2,1);
					sak_bg_wall2:customtexturerect(0.5+rand+0.3*3,0,0.5+rand+0.3*3+2,1);
					sak_bg_ceil:customtexturerect(0,rand+2.4*3,2,rand+2.4*3+8);
					sak_bg_floor:customtexturerect(0,rand+2.4*3,2,rand+2.4*3+8);
					
					sak_run_side_i:animate(0)
					sak_run_side_i:setstate(4)
				end)
				m2(b+2,function()
					sak_bg_wall1:texcoordvelocity(1*sak_scrollspeed,0)
					sak_bg_wall2:texcoordvelocity(1*sak_scrollspeed,0)
					sak_bg_ceil:texcoordvelocity(0,-2*sak_scrollspeed)
					sak_bg_floor:texcoordvelocity(0,-2*sak_scrollspeed)
					
					sak_bg_wall1:customtexturerect(rand+0.3*4,0,rand+0.3*4+2,1);
					sak_bg_wall2:customtexturerect(0.5+rand+0.3*4,0,0.5+rand+0.3*4+2,1);
					sak_bg_ceil:customtexturerect(0,rand+2.4*4,2,rand+2.4*4+8);
					sak_bg_floor:customtexturerect(0,rand+2.4*4,2,rand+2.4*4+8);
					
					sak_run_side_i:animate(1)
					sak_run_side_i:setstate(0)
				end)
			end
			
			sak_wall_freeze(74)
			sak_wall_freeze(82)
			sak_wall_freeze(90)
			
			sak_wall_freeze(106)
			sak_wall_freeze(114)
			sak_wall_freeze(122)
			
			sak_wall_freeze(266)
			sak_wall_freeze(274)
			sak_wall_freeze(282)
			
			
			local jumps = {138,146,170,178}
			
			
			
			for i=1,table.getn(jumps) do
				local ud = 1
				if math.mod(i,2) == 0 then ud = -1 end
				m2(jumps[i]-0.5,function()
					sak_jumper:decelerate(30/180)
					sak_jumper:y(-1)
					sak_jumper:accelerate(30/180)
					sak_jumper:y(0)
					
					for i=-1.5,1.5,1 do
						local a = sak_getknife()
						if a then
							a:hidden(0)
							a:x(sw/2 + 5*i)
							a:y(sh/2 + 20*ud)
							a:rotationz(-10*i)
							a:rotationx(-90)
							a:zoom(30)
							a:zoomz(30)
							a:z(-300)
							a:linear(1)
							a:addz(1000)
							a:addx(200*i)
							a:addy(100*ud)
							a:zoom(60)
							a:zoomz(60)
							a:queuecommand('Hide')
						end
					end
					
				end)
			end
			
			
---------------------------------------------------------------------------------------
----------------------Sort the actions table-------------------------------------------
---------------------------------------------------------------------------------------
			
			function modtable_compare(a,b)
				return a[1] < b[1]
			end
			
			if table.getn(mod_actions) > 1 then
				table.sort(mod_actions, modtable_compare)
			end
			
			self:queuecommand('Update');
			
		end"
		
		UpdateCommand="%function(self)

			if GAMESTATE:GetSongBeat()>=0 and not checked then
			
				local ThingsToGrab = {'LifeP1','LifeP2','ScoreP1','ScoreP2','BPMDisplay','LifeFrame','ScoreFrame',
										'Lyrics','SongBackground','SongForeground','Overlay','Underlay'}
				local ThingsToHide = {'LifeP1','LifeP2','ScoreP1','ScoreP2','BPMDisplay','LifeFrame','ScoreFrame','Overlay','Underlay'}
				
				for i,v in ipairs(ThingsToGrab) do
					_G[v] = SCREENMAN:GetTopScreen():GetChild(v) or nil
				end
				
				for i,v in ipairs(ThingsToHide) do
					if _G[v] then _G[v]:hidden(1) end
				end
				
				table.insert(mod_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP1'));
				table.insert(mod_plr,SCREENMAN:GetTopScreen():GetChild('PlayerP2'));
				
				--name players, judgment and combo
				for pn=1,2 do
					_G['P'..pn] = SCREENMAN:GetTopScreen():GetChild('PlayerP'..pn) or nil;
					if _G['P'..pn] then
						_G['jud'..pn] = _G['P'..pn]:GetChild('Judgment');
						_G['com'..pn] = _G['P'..pn]:GetChild('Combo');
					end
				end
				
				screen = SCREENMAN:GetTopScreen();
				checked = true; --let this only run once
				
			end

			local beat = GAMESTATE:GetSongBeat()
			
			
---------------------------------------------------------------------------------------
----------------------Begin table handlers---------------------------------------------
---------------------------------------------------------------------------------------
			
			disable = false;
			if disable ~= true and beat > mod_firstSeenBeat+0.1 and checked then
				
				-----------------------
				-- Player mod resets --
				-----------------------
				if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --
					for i=1,2 do
						mod_do('clearall',i)
					end
				end
				
				------------------------------------------------------------------------------
				-- custom mod reader by TaroNuke edited by WinDEU and re-stolen by TaroNuke --
				------------------------------------------------------------------------------
				if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --
					for i,v in pairs(mods) do
						if v and table.getn(v) > 3 and v[1] and v[2] and v[3] and v[4] then
							if beat >=v[1] then
								if (v[4] == 'len' and beat <=v[1]+v[2]) or (v[4] == 'end' and beat <=v[2]) then
									if table.getn(v) == 5 then
										mod_do(v[3],v[5]);
									else
										mod_do(v[3]);
									end
								end
							end
						else
							v[1] = 0;
							v[2] = 0;
							v[3] = '';
							v[4] = 'error';
							SCREENMAN:SystemMessage('Bad mod in beat-based table (line '..i..')');
						end
					end
				end
				
				-----------------------------------------------------------------------------------------------------
				-- WinDEU's time-based len/end version of the #swag custom mod reader #teamproofofconcept (c) 2015 --
				-----------------------------------------------------------------------------------------------------
				if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --
					for i,v in pairs(mods2) do
						if v and table.getn(v) > 3 and v[1] and v[2] and v[3] and v[4] then
							if mod_time >=v[1] then
								if (v[4] == 'len' and mod_time <=v[1]+v[2]) or (v[4] == 'end' and mod_time <=v[2]) then
									if table.getn(v) == 5 then
										mod_do(v[3],v[5]);
									else
										mod_do(v[3]);
									end
								end
							end
						else
							v[1] = 0;
							v[2] = 0;
							v[3] = 'error';
							v[4] = 'error';
							SCREENMAN:SystemMessage('Bad mod in time-based table (line '..i..')');
						end
					end
				end
				
				--------------------------------------------------------------------------------------
				-- i dont know who this reader is but he looks like he is made out of EASE HAHAHAHA --
				-- original code by exschwasion, bastardized by taro for cmod support and less 'if' --
				--------------------------------------------------------------------------------------
				for i,v in pairs(mods_ease) do
					if v and table.getn(v) > 6 and v[1] and v[2] and v[3] and v[4] and v[5] and v[6] and v[7] then
						if beat >=v[1] then
							if (v[6] == 'len' and beat <=v[1]+v[2]) or (v[6] == 'end' and beat <=v[2]) then
								
								local duration = v[2];
								if v[6] == 'end' then duration = v[2] - v[1] end
								local curtime = beat - v[1]
								local diff = v[4] - v[3]
								local startstrength = v[3]
								local curve = v[7]
								local mod = v[5]
								
								local strength = curve(curtime, startstrength, diff, duration, v[10], v[11]) --extra parameters for back and elastic eases :eyes:
								
								local modstr = v[5] == 'xmod' and strength..'x' or (v[5] == 'cmod' and 'C'..strength or strength..' '..v[5])
								mod_do('*10000 '..modstr,v[8]);
								
							elseif (v[9] and ((v[6] == 'len' and beat <=v[1]+v[2]+v[9]) or (v[6] == 'end' and beat <=v[9]))) then
							
								local strength = v[4]
								
								local modstr = v[5] == 'xmod' and strength..'x' or (v[5] == 'cmod' and 'C'..strength or strength..' '..v[5])
								mod_do('*10000 '..modstr,v[8]);
								
							end
						end
					else
						SCREENMAN:SystemMessage('Bad mod in beat-based ease table (line '..i..')');
					end
				end
				
				--------------------
				-- Perframe stuff --
				--------------------
				
				for pn=1,2 do
					local a = GetJud(pn)
					if a then
						a:effectmagnitude(sak_juds:GetX(),sak_juds:GetY(),0)
						a:effectperiod(1000000)
						a:effectoffset(250000)
					end
					local a = GetCom(pn)
					if a then
						a:effectmagnitude(0,sak_juds:getaux(),0)
						a:effectperiod(1000000)
						a:effectoffset(250000)
					end
				end
				
				if beat > 36 and exclude({74,76,82,84,90,92,106,108,114,116,122,124,195,256,266,268,274,276,282,284},beat) then
				
					local pos = beat*math.pi
					
					local big_steppy = 1
					
					local jumps = {138,146,170,178,298,306,316,318}
					
					for i=1,table.getn(jumps) do
						if beat > jumps[i] then pos = pos-math.min(beat-jumps[i],2)*math.pi*0.5 end
					end
					
					local mult = 1
					
					if math.mod(beat,16) < 8 then
						mult = -1
					end
					
					local mult2 = 1
					if beat < 160 then
						mult2 = 0.8
					end
					
					local jumpy = 0
					local jumpyzoom = 1
					local jumpxzoom = 1
					if not exclude({138,140,146,148,170,172,178,180},beat) then
						jumpy = mult*mult2*120*math.sin(beat*math.pi*0.5)
						jumpyzoom = 1+mult2*0.5*math.sin(beat*math.pi*0.5)
						jumpxzoom = 1-mult2*0.5*math.sin(beat*math.pi*0.5)
						big_steppy = 2.5
					end
					
					local crunchy = (beat-36)/28
					if beat > 64 then
						crunchy = 1-((beat-64)/4)
					end
					
					if beat > 68 then crunchy = 0 end
					
					local realsplit = 125 + 100*crunchy
					
					local splitamt = realsplit + math.smoothabs(sak_room:GetX())*15
					
					mod_do('*10000 '..splitamt*sepaux:GetX()..' flip, *10000 '..-splitamt*sepaux:GetX()+sak_invert:GetX()..' invert',2)
					mod_do('*10000 '..-splitamt*sepaux:GetX()..' flip, *10000 '..splitamt*sepaux:GetX()+sak_invert:GetX()..' invert',1)
					mod_do('*10000 '..(1*50)*sepaux:GetX()..' mini')
					
					mod_do('*10000 sudden, *10000 '..(90+20*math.smoothabs(sak_room:GetX()))..' suddenoffset')
					
					sak_bg:rotationx( 15+15*math.smoothabs(sak_room:GetX()) )
					sak_bg:rotationy( 45*math.smooth(sak_room:GetX()) )
					--x,SCREEN_CENTER_X+256;y,SCREEN_CENTER_Y-200;
					sak_bg:y( SCREEN_CENTER_Y-100-100*math.smoothabs(sak_room:GetX()) )
					sak_bg:x( SCREEN_CENTER_X+0*sak_room:GetX() )
					sak_bg:zoomx( 0.7-0.3*math.smoothabs(sak_room:GetX()) )
					sak_bg:zoomy( 1-0*math.smoothabs(sak_room:GetX()) )
					sak_bg:rotationz( 0*math.smoothabs(sak_room:GetX()) )
					
					local bgrx, bgry, bgrz = sak_bg:getrotation()
					
					--[[
					sak_run_front:zoom( 0.6 + 0.1*math.smoothabs(sak_room:GetX()) );
					sak_run_front:x( sw/2 + 80*math.smooth(sak_room:GetX()) )
					sak_run_front:y( sh - 150 - 200*math.smoothabs(sak_room:GetX()) )
					sak_run_front:z( - 150 - 200*math.smoothabs(sak_room:GetX()) )
					]]
					
					local sakc = sakuya_GetCounterRotation( bgrx + 0*math.smoothabs(sak_room:GetX()), bgry - 0*math.smooth(sak_room:GetX()), bgrz + 0*math.smooth(sak_room:GetX()) )
					
					local saks = {sak_run_front,sak_run_side,sak_run_jump}
					
					if sak_room:GetX() < 0 then
						sak_run_side_i:basezoomx(-1)
					else
						sak_run_side_i:basezoomx(1)
					end
					
					if math.abs(sak_room:GetX()) > 0.5 then
						sak_run_side:hidden(0)
						sak_run_front:hidden(1)
						sak_run_jump:hidden(1)
					else
						sak_run_side:hidden(1)
						
						if sak_jumper:GetY() >= 0 then
							sak_run_front:hidden(0)
							sak_run_jump:hidden(1)
						else
							sak_run_front:hidden(1)
							sak_run_jump:hidden(0)
						end
						
					end
					
					local scale = 0.6-0.1*math.smoothabs(sak_room:GetX())
					--local scale = 0.5
					
					for i=1,3 do
						
						local a = saks[i]
						if a then
							
							--[[
							--a:rotationx( sakc[1] - 0*math.smoothabs(sak_room:GetX()) )
							--a:rotationy( sakc[2] )
							--a:rotationz( sakc[3] - 0*math.smooth(sak_room:GetX()) )
							
							a:rotationy( -50*math.smooth(sak_room:GetX()) )
							a:rotationx( -10*math.smoothabs(sak_room:GetX()) )
							a:rotationz( -10*math.smooth(sak_room:GetX()) )
							
							a:skewx( -0.2*math.smooth(sak_room:GetX()) )
							a:z( -300 + 100*math.smoothabs(sak_room:GetX()) )
							a:x( -0*math.smooth(sak_room:GetX()) )
							a:zoomx( scale/sak_bg:GetZoomX() + 0.0*math.smoothabs(sak_room:GetX()) )
							a:zoomz( 1*math.smoothabs(sak_room:GetX()) )
							a:zoomy( scale/sak_bg:GetZoomY() - 0.1*math.smoothabs(sak_room:GetX()) )
							]]
							
							a:zoom( 0.7 - 0.2*math.smoothabs(sak_room:GetX()) - 0.3*sak_addz:GetX() )
							a:x( sw/2 - 50*math.sin((sak_room:GetX()+1)*math.pi) + 30*math.smooth(sak_room:GetX()) )
							a:y( sh - 150 - 100*math.smoothabs(sak_room:GetX()) - 200*sak_addz:GetX() )
							a:z( - 300 + 200*math.smoothabs(sak_room:GetX()) - 500*sak_addz:GetX() )
							
							a:diffusealpha( sak_alpha:GetX() );
							
							if i == 3 then
								a:addy( sak_jumper:GetY()*32 )
							end
							
						end
						
					end
					
					local b = _G['sak_shadow'..3]
						
					if b then
						b:x( sw/2 - 50*math.sin((sak_room:GetX()+1)*math.pi) + 45*math.smooth(sak_room:GetX()) )
						
						b:z( - 300 + 200*math.smoothabs(sak_room:GetX()) - 500*sak_addz:GetX() )
						b:y( sh - 155 - 100*math.smoothabs(sak_room:GetX()) - 200*sak_addz:GetX() )
						b:rotationy( 5*sak_room:GetX() )
						
						b:diffusealpha( (0.5 + sak_jumper:GetY()*0.1)*sak_alpha:GetX() )
						b:zoom( 0.4 + sak_jumper:GetY()*0.08 )
						b:zoomz( 0.4 + sak_jumper:GetY()*0.08 )
						
					end
					
					
					for pn=1,2 do
						local a = Plr(pn)
						if a then
						
							mod_do('*10000 '..((pn*2-3)*big_steppy*100*running:GetX()*sepaux:GetX()*math.sin(pos) + endingdodge:GetZ())..' incoming',pn)
						
							a:rotationx(math.abs(sak_room:GetX()*10))
							a:rotationy(sak_room:GetX()*25)
							a:x( sw*0.5 - sak_room:GetX()*sw*0.15*running:GetX() )
							a:y( sh*0.5 + 0*math.smoothabs(sak_room:GetX())*sw*0.1 + (sh*0.25*crunchy)  + endingdodge:GetX() )
							a:zoomx((1 - math.smoothabs(sak_room:GetX())*0.1 - (0.2*crunchy))*jumpxzoom)
							a:zoomy((1 - math.smoothabs(sak_room:GetX())*0.1 - (0.2*crunchy))*jumpyzoom  + endingdodge:GetY())
							
							a:addy( jumpy )
							
							a:vibrate()
							a:effectmagnitude(10*crunchy,10*crunchy,0)
							
							a:z( sak_zpos:GetX() );
							
							if beat > 298 and beat < 300 then
								a:skewx(0.9*math.sin(beat*math.pi*2))
							else
								a:skewx(0)
							end
							
						end
						
						local c = GetCom(pn)
						if c then
							c:basezoomx( math.max(1 - (sak_zpos:GetX()/500),0) )
							c:basezoomy( math.max(1 - (sak_zpos:GetX()/500),0) )
						end
						
						local b = _G['sak_shadow'..pn]
						
						if b then
							b:x( sw/2 + 160*(pn*2-3) - 10*(pn*2-3)*math.smoothabs(sak_room:GetX()) - 150*sak_room:GetX() )
							
							local addz = 10*math.smoothabs(sak_room:GetX())
							addz = addz + 60*(pn*2-3)*sak_room:GetX() + sak_zpos:GetX()
							
							b:z( -200 + addz )
							b:rotationy( 5*sak_room:GetX() )
							b:basezoomx( 1+(jumpy/240) )
							b:basezoomy( 1+(jumpy/240) )
							b:diffusealpha( 0.5+(jumpy/480) )
						end
						
						mod_do('*10000 '..(35*crunchy + (10*sepaux:GetX()*running:GetX()+(pn*2-3)*-10*sepaux:GetX()*running:GetX()*math.cos(pos)))..' reverse',pn)
						if beat < 68 then
							mod_do('*10000 '..(200*crunchy*(pn*2-3)*math.sin(pos))..' drunk',pn)
						end
					end
					
				end
				
				---------------------------------------
				-- ACTION RPGS AINT GOT SHIT ON THIS --
				---------------------------------------
				if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --
					while curaction<=table.getn(mod_actions) and GAMESTATE:GetSongBeat()>=mod_actions[curaction][1] do
						if mod_actions[curaction][3] or GAMESTATE:GetSongBeat() < mod_actions[curaction][1]+2 then
							if type(mod_actions[curaction][2]) == 'function' then
								mod_actions[curaction][2]()
							elseif type(mod_actions[curaction][2]) == 'string' then
								MESSAGEMAN:Broadcast(mod_actions[curaction][2]);
							end
						end
						curaction = curaction+1;
					end
				end
				
			end
			
			self:sleep(0.02);
			self:queuecommand('Update');

---------------------------------------------------------------------------------------
----------------------END DON'T TOUCH IT KIDDO-----------------------------------------
---------------------------------------------------------------------------------------
			
		end"
		
	/>
	
	<!--Handling messages here is still fun and profitable-->
	<CODE Type="Quad" OnCommand="hidden,1"
	InitCommand="%function(self) rb_aux = self end"
	/>
	<CODE Type="Quad" OnCommand="hidden,1"
	InitCommand="%function(self) sak_room = self end"
	/>
	<CODE Type="Quad" OnCommand="hidden,1"
	InitCommand="%function(self) sak_zpos = self end"
	/>
	<CODE Type="Quad" OnCommand="hidden,1;x,1;"
	InitCommand="%function(self) sepaux = self end"
	/>
	<CODE Type="Quad" OnCommand="hidden,1;"
	InitCommand="%function(self) running = self end"
	/>
	<CODE Type="Quad" OnCommand="hidden,1;"
	InitCommand="%function(self) endingdodge = self end"
	/>
	<CODE Type="Quad" OnCommand="hidden,1;"
	InitCommand="%function(self) sak_juds = self end"
	/>
	<CODE Type="Quad" OnCommand="hidden,1;"
	InitCommand="%function(self) sak_jumper = self end"
	/>
	<CODE Type="Quad" OnCommand="hidden,1;"
	InitCommand="%function(self) sak_addz = self end"
	/>
	<CODE Type="Quad" OnCommand="hidden,1;x,1"
	InitCommand="%function(self) sak_alpha = self end"
	/>
	
	<CODE Type="Quad" OnCommand="hidden,1;"
	InitCommand="%function(self) sak_invert = self end"
	/>
	
	<Layer Type="ActorFrame" OnCommand="fov,60" ><children>
	<Layer File="sak_knife" OnCommand="hidden,1;sleep,0.02;queuecommand,Make;" HideCommand="hidden,1" MakeCommand="%function(self) table.insert(sak_knives,self) end" />
	<Layer File="sak_knife" OnCommand="hidden,1;sleep,0.02;queuecommand,Make;" HideCommand="hidden,1" MakeCommand="%function(self) table.insert(sak_knives,self) end" />
	<Layer File="sak_knife" OnCommand="hidden,1;sleep,0.02;queuecommand,Make;" HideCommand="hidden,1" MakeCommand="%function(self) table.insert(sak_knives,self) end" />
	<Layer File="sak_knife" OnCommand="hidden,1;sleep,0.02;queuecommand,Make;" HideCommand="hidden,1" MakeCommand="%function(self) table.insert(sak_knives,self) end" />
	<Layer File="sak_knife" OnCommand="hidden,1;sleep,0.02;queuecommand,Make;" HideCommand="hidden,1" MakeCommand="%function(self) table.insert(sak_knives,self) end" />
	<Layer File="sak_knife" OnCommand="hidden,1;sleep,0.02;queuecommand,Make;" HideCommand="hidden,1" MakeCommand="%function(self) table.insert(sak_knives,self) end" />
	<Layer File="sak_knife" OnCommand="hidden,1;sleep,0.02;queuecommand,Make;" HideCommand="hidden,1" MakeCommand="%function(self) table.insert(sak_knives,self) end" />
	<Layer File="sak_knife" OnCommand="hidden,1;sleep,0.02;queuecommand,Make;" HideCommand="hidden,1" MakeCommand="%function(self) table.insert(sak_knives,self) end" />
	</children></Layer>
	
	<!--This is for the time based mod reader-->
	<BitmapText
		Font="Common Normal"
		Text="test"
		OnCommand="x,SCREEN_CENTER_X;y,SCREEN_CENTER_Y;effectclock,music;playcommand,SetTime;hidden,1"
		SetTimeCommand="%function(self) self:settext(self:GetSecsIntoEffect()); mod_time = tonumber(self:GetText()); self:sleep(0.02); self:queuecommand('SetTime'); end"
	/>
	
	<Layer Type="Quad" OnCommand="stretchto,0,0,sw,sh;diffuse,0,0,0,0" WhiteFlashMessageCommand="diffuse,1,1,1,.4;linear,.2;diffuse,1,1,1,0;"
	EndingMessageCommand="diffuse,0,0,0,0;linear,20*60/180;diffusealpha,1;" />
	
	
</children></ActorFrame>